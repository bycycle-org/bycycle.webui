var app = (function () {
	'use strict';

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var check = function (it) {
	  return it && it.Math == Math && it;
	};

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global_1 =
	  // eslint-disable-next-line no-undef
	  check(typeof globalThis == 'object' && globalThis) ||
	  check(typeof window == 'object' && window) ||
	  check(typeof self == 'object' && self) ||
	  check(typeof commonjsGlobal == 'object' && commonjsGlobal) ||
	  // eslint-disable-next-line no-new-func
	  Function('return this')();

	var fails = function (exec) {
	  try {
	    return !!exec();
	  } catch (error) {
	    return true;
	  }
	};

	// Thank's IE8 for his funny defineProperty
	var descriptors = !fails(function () {
	  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
	});

	var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
	var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

	// Nashorn ~ JDK8 bug
	var NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({ 1: 2 }, 1);

	// `Object.prototype.propertyIsEnumerable` method implementation
	// https://tc39.github.io/ecma262/#sec-object.prototype.propertyisenumerable
	var f = NASHORN_BUG ? function propertyIsEnumerable(V) {
	  var descriptor = getOwnPropertyDescriptor(this, V);
	  return !!descriptor && descriptor.enumerable;
	} : nativePropertyIsEnumerable;

	var objectPropertyIsEnumerable = {
		f: f
	};

	var createPropertyDescriptor = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};

	var toString = {}.toString;

	var classofRaw = function (it) {
	  return toString.call(it).slice(8, -1);
	};

	var split = ''.split;

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var indexedObject = fails(function () {
	  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
	  // eslint-disable-next-line no-prototype-builtins
	  return !Object('z').propertyIsEnumerable(0);
	}) ? function (it) {
	  return classofRaw(it) == 'String' ? split.call(it, '') : Object(it);
	} : Object;

	// `RequireObjectCoercible` abstract operation
	// https://tc39.github.io/ecma262/#sec-requireobjectcoercible
	var requireObjectCoercible = function (it) {
	  if (it == undefined) throw TypeError("Can't call method on " + it);
	  return it;
	};

	// toObject with fallback for non-array-like ES3 strings



	var toIndexedObject = function (it) {
	  return indexedObject(requireObjectCoercible(it));
	};

	var isObject = function (it) {
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

	// `ToPrimitive` abstract operation
	// https://tc39.github.io/ecma262/#sec-toprimitive
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	var toPrimitive = function (input, PREFERRED_STRING) {
	  if (!isObject(input)) return input;
	  var fn, val;
	  if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
	  if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;
	  if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
	  throw TypeError("Can't convert object to primitive value");
	};

	var hasOwnProperty$1 = {}.hasOwnProperty;

	var has = function (it, key) {
	  return hasOwnProperty$1.call(it, key);
	};

	var document$1 = global_1.document;
	// typeof document.createElement is 'object' in old IE
	var EXISTS = isObject(document$1) && isObject(document$1.createElement);

	var documentCreateElement = function (it) {
	  return EXISTS ? document$1.createElement(it) : {};
	};

	// Thank's IE8 for his funny defineProperty
	var ie8DomDefine = !descriptors && !fails(function () {
	  return Object.defineProperty(documentCreateElement('div'), 'a', {
	    get: function () { return 7; }
	  }).a != 7;
	});

	var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

	// `Object.getOwnPropertyDescriptor` method
	// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor
	var f$1 = descriptors ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
	  O = toIndexedObject(O);
	  P = toPrimitive(P, true);
	  if (ie8DomDefine) try {
	    return nativeGetOwnPropertyDescriptor(O, P);
	  } catch (error) { /* empty */ }
	  if (has(O, P)) return createPropertyDescriptor(!objectPropertyIsEnumerable.f.call(O, P), O[P]);
	};

	var objectGetOwnPropertyDescriptor = {
		f: f$1
	};

	var anObject = function (it) {
	  if (!isObject(it)) {
	    throw TypeError(String(it) + ' is not an object');
	  } return it;
	};

	var nativeDefineProperty = Object.defineProperty;

	// `Object.defineProperty` method
	// https://tc39.github.io/ecma262/#sec-object.defineproperty
	var f$2 = descriptors ? nativeDefineProperty : function defineProperty(O, P, Attributes) {
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if (ie8DomDefine) try {
	    return nativeDefineProperty(O, P, Attributes);
	  } catch (error) { /* empty */ }
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};

	var objectDefineProperty = {
		f: f$2
	};

	var createNonEnumerableProperty = descriptors ? function (object, key, value) {
	  return objectDefineProperty.f(object, key, createPropertyDescriptor(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};

	var setGlobal = function (key, value) {
	  try {
	    createNonEnumerableProperty(global_1, key, value);
	  } catch (error) {
	    global_1[key] = value;
	  } return value;
	};

	var isPure = false;

	var SHARED = '__core-js_shared__';
	var store = global_1[SHARED] || setGlobal(SHARED, {});

	var sharedStore = store;

	var shared = createCommonjsModule(function (module) {
	(module.exports = function (key, value) {
	  return sharedStore[key] || (sharedStore[key] = value !== undefined ? value : {});
	})('versions', []).push({
	  version: '3.4.5',
	  mode:  'global',
	  copyright: 'Â© 2019 Denis Pushkarev (zloirock.ru)'
	});
	});

	var functionToString = Function.toString;

	var inspectSource = shared('inspectSource', function (it) {
	  return functionToString.call(it);
	});

	var WeakMap = global_1.WeakMap;

	var nativeWeakMap = typeof WeakMap === 'function' && /native code/.test(inspectSource(WeakMap));

	var id = 0;
	var postfix = Math.random();

	var uid = function (key) {
	  return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);
	};

	var keys = shared('keys');

	var sharedKey = function (key) {
	  return keys[key] || (keys[key] = uid(key));
	};

	var hiddenKeys = {};

	var WeakMap$1 = global_1.WeakMap;
	var set, get, has$1;

	var enforce = function (it) {
	  return has$1(it) ? get(it) : set(it, {});
	};

	var getterFor = function (TYPE) {
	  return function (it) {
	    var state;
	    if (!isObject(it) || (state = get(it)).type !== TYPE) {
	      throw TypeError('Incompatible receiver, ' + TYPE + ' required');
	    } return state;
	  };
	};

	if (nativeWeakMap) {
	  var store$1 = new WeakMap$1();
	  var wmget = store$1.get;
	  var wmhas = store$1.has;
	  var wmset = store$1.set;
	  set = function (it, metadata) {
	    wmset.call(store$1, it, metadata);
	    return metadata;
	  };
	  get = function (it) {
	    return wmget.call(store$1, it) || {};
	  };
	  has$1 = function (it) {
	    return wmhas.call(store$1, it);
	  };
	} else {
	  var STATE = sharedKey('state');
	  hiddenKeys[STATE] = true;
	  set = function (it, metadata) {
	    createNonEnumerableProperty(it, STATE, metadata);
	    return metadata;
	  };
	  get = function (it) {
	    return has(it, STATE) ? it[STATE] : {};
	  };
	  has$1 = function (it) {
	    return has(it, STATE);
	  };
	}

	var internalState = {
	  set: set,
	  get: get,
	  has: has$1,
	  enforce: enforce,
	  getterFor: getterFor
	};

	var redefine = createCommonjsModule(function (module) {
	var getInternalState = internalState.get;
	var enforceInternalState = internalState.enforce;
	var TEMPLATE = String(String).split('String');

	(module.exports = function (O, key, value, options) {
	  var unsafe = options ? !!options.unsafe : false;
	  var simple = options ? !!options.enumerable : false;
	  var noTargetGet = options ? !!options.noTargetGet : false;
	  if (typeof value == 'function') {
	    if (typeof key == 'string' && !has(value, 'name')) createNonEnumerableProperty(value, 'name', key);
	    enforceInternalState(value).source = TEMPLATE.join(typeof key == 'string' ? key : '');
	  }
	  if (O === global_1) {
	    if (simple) O[key] = value;
	    else setGlobal(key, value);
	    return;
	  } else if (!unsafe) {
	    delete O[key];
	  } else if (!noTargetGet && O[key]) {
	    simple = true;
	  }
	  if (simple) O[key] = value;
	  else createNonEnumerableProperty(O, key, value);
	// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
	})(Function.prototype, 'toString', function toString() {
	  return typeof this == 'function' && getInternalState(this).source || inspectSource(this);
	});
	});

	var path = global_1;

	var aFunction = function (variable) {
	  return typeof variable == 'function' ? variable : undefined;
	};

	var getBuiltIn = function (namespace, method) {
	  return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global_1[namespace])
	    : path[namespace] && path[namespace][method] || global_1[namespace] && global_1[namespace][method];
	};

	var ceil = Math.ceil;
	var floor = Math.floor;

	// `ToInteger` abstract operation
	// https://tc39.github.io/ecma262/#sec-tointeger
	var toInteger = function (argument) {
	  return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
	};

	var min = Math.min;

	// `ToLength` abstract operation
	// https://tc39.github.io/ecma262/#sec-tolength
	var toLength = function (argument) {
	  return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
	};

	var max = Math.max;
	var min$1 = Math.min;

	// Helper for a popular repeating case of the spec:
	// Let integer be ? ToInteger(index).
	// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
	var toAbsoluteIndex = function (index, length) {
	  var integer = toInteger(index);
	  return integer < 0 ? max(integer + length, 0) : min$1(integer, length);
	};

	// `Array.prototype.{ indexOf, includes }` methods implementation
	var createMethod = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = toIndexedObject($this);
	    var length = toLength(O.length);
	    var index = toAbsoluteIndex(fromIndex, length);
	    var value;
	    // Array#includes uses SameValueZero equality algorithm
	    // eslint-disable-next-line no-self-compare
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      // eslint-disable-next-line no-self-compare
	      if (value != value) return true;
	    // Array#indexOf ignores holes, Array#includes - not
	    } else for (;length > index; index++) {
	      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

	var arrayIncludes = {
	  // `Array.prototype.includes` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.includes
	  includes: createMethod(true),
	  // `Array.prototype.indexOf` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.indexof
	  indexOf: createMethod(false)
	};

	var indexOf = arrayIncludes.indexOf;


	var objectKeysInternal = function (object, names) {
	  var O = toIndexedObject(object);
	  var i = 0;
	  var result = [];
	  var key;
	  for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while (names.length > i) if (has(O, key = names[i++])) {
	    ~indexOf(result, key) || result.push(key);
	  }
	  return result;
	};

	// IE8- don't enum bug keys
	var enumBugKeys = [
	  'constructor',
	  'hasOwnProperty',
	  'isPrototypeOf',
	  'propertyIsEnumerable',
	  'toLocaleString',
	  'toString',
	  'valueOf'
	];

	var hiddenKeys$1 = enumBugKeys.concat('length', 'prototype');

	// `Object.getOwnPropertyNames` method
	// https://tc39.github.io/ecma262/#sec-object.getownpropertynames
	var f$3 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	  return objectKeysInternal(O, hiddenKeys$1);
	};

	var objectGetOwnPropertyNames = {
		f: f$3
	};

	var f$4 = Object.getOwnPropertySymbols;

	var objectGetOwnPropertySymbols = {
		f: f$4
	};

	// all object keys, includes non-enumerable and symbols
	var ownKeys = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
	  var keys = objectGetOwnPropertyNames.f(anObject(it));
	  var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
	  return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
	};

	var copyConstructorProperties = function (target, source) {
	  var keys = ownKeys(source);
	  var defineProperty = objectDefineProperty.f;
	  var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];
	    if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
	  }
	};

	var replacement = /#|\.prototype\./;

	var isForced = function (feature, detection) {
	  var value = data[normalize(feature)];
	  return value == POLYFILL ? true
	    : value == NATIVE ? false
	    : typeof detection == 'function' ? fails(detection)
	    : !!detection;
	};

	var normalize = isForced.normalize = function (string) {
	  return String(string).replace(replacement, '.').toLowerCase();
	};

	var data = isForced.data = {};
	var NATIVE = isForced.NATIVE = 'N';
	var POLYFILL = isForced.POLYFILL = 'P';

	var isForced_1 = isForced;

	var getOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;






	/*
	  options.target      - name of the target object
	  options.global      - target is the global object
	  options.stat        - export as static methods of target
	  options.proto       - export as prototype methods of target
	  options.real        - real prototype method for the `pure` version
	  options.forced      - export even if the native feature is available
	  options.bind        - bind methods to the target, required for the `pure` version
	  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
	  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
	  options.sham        - add a flag to not completely full polyfills
	  options.enumerable  - export as enumerable property
	  options.noTargetGet - prevent calling a getter on target
	*/
	var _export = function (options, source) {
	  var TARGET = options.target;
	  var GLOBAL = options.global;
	  var STATIC = options.stat;
	  var FORCED, target, key, targetProperty, sourceProperty, descriptor;
	  if (GLOBAL) {
	    target = global_1;
	  } else if (STATIC) {
	    target = global_1[TARGET] || setGlobal(TARGET, {});
	  } else {
	    target = (global_1[TARGET] || {}).prototype;
	  }
	  if (target) for (key in source) {
	    sourceProperty = source[key];
	    if (options.noTargetGet) {
	      descriptor = getOwnPropertyDescriptor$1(target, key);
	      targetProperty = descriptor && descriptor.value;
	    } else targetProperty = target[key];
	    FORCED = isForced_1(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
	    // contained in target
	    if (!FORCED && targetProperty !== undefined) {
	      if (typeof sourceProperty === typeof targetProperty) continue;
	      copyConstructorProperties(sourceProperty, targetProperty);
	    }
	    // add a flag to not completely full polyfills
	    if (options.sham || (targetProperty && targetProperty.sham)) {
	      createNonEnumerableProperty(sourceProperty, 'sham', true);
	    }
	    // extend global
	    redefine(target, key, sourceProperty, options);
	  }
	};

	var nativeSymbol = !!Object.getOwnPropertySymbols && !fails(function () {
	  // Chrome 38 Symbol has incorrect toString conversion
	  // eslint-disable-next-line no-undef
	  return !String(Symbol());
	});

	var useSymbolAsUid = nativeSymbol
	  // eslint-disable-next-line no-undef
	  && !Symbol.sham
	  // eslint-disable-next-line no-undef
	  && typeof Symbol() == 'symbol';

	// `IsArray` abstract operation
	// https://tc39.github.io/ecma262/#sec-isarray
	var isArray = Array.isArray || function isArray(arg) {
	  return classofRaw(arg) == 'Array';
	};

	// `ToObject` abstract operation
	// https://tc39.github.io/ecma262/#sec-toobject
	var toObject = function (argument) {
	  return Object(requireObjectCoercible(argument));
	};

	// `Object.keys` method
	// https://tc39.github.io/ecma262/#sec-object.keys
	var objectKeys = Object.keys || function keys(O) {
	  return objectKeysInternal(O, enumBugKeys);
	};

	// `Object.defineProperties` method
	// https://tc39.github.io/ecma262/#sec-object.defineproperties
	var objectDefineProperties = descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
	  anObject(O);
	  var keys = objectKeys(Properties);
	  var length = keys.length;
	  var index = 0;
	  var key;
	  while (length > index) objectDefineProperty.f(O, key = keys[index++], Properties[key]);
	  return O;
	};

	var html = getBuiltIn('document', 'documentElement');

	var IE_PROTO = sharedKey('IE_PROTO');

	var PROTOTYPE = 'prototype';
	var Empty = function () { /* empty */ };

	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function () {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = documentCreateElement('iframe');
	  var length = enumBugKeys.length;
	  var lt = '<';
	  var script = 'script';
	  var gt = '>';
	  var js = 'java' + script + ':';
	  var iframeDocument;
	  iframe.style.display = 'none';
	  html.appendChild(iframe);
	  iframe.src = String(js);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + script + gt + 'document.F=Object' + lt + '/' + script + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while (length--) delete createDict[PROTOTYPE][enumBugKeys[length]];
	  return createDict();
	};

	// `Object.create` method
	// https://tc39.github.io/ecma262/#sec-object.create
	var objectCreate = Object.create || function create(O, Properties) {
	  var result;
	  if (O !== null) {
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty();
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : objectDefineProperties(result, Properties);
	};

	hiddenKeys[IE_PROTO] = true;

	var nativeGetOwnPropertyNames = objectGetOwnPropertyNames.f;

	var toString$1 = {}.toString;

	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];

	var getWindowNames = function (it) {
	  try {
	    return nativeGetOwnPropertyNames(it);
	  } catch (error) {
	    return windowNames.slice();
	  }
	};

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var f$5 = function getOwnPropertyNames(it) {
	  return windowNames && toString$1.call(it) == '[object Window]'
	    ? getWindowNames(it)
	    : nativeGetOwnPropertyNames(toIndexedObject(it));
	};

	var objectGetOwnPropertyNamesExternal = {
		f: f$5
	};

	var WellKnownSymbolsStore = shared('wks');
	var Symbol$1 = global_1.Symbol;
	var createWellKnownSymbol = useSymbolAsUid ? Symbol$1 : uid;

	var wellKnownSymbol = function (name) {
	  if (!has(WellKnownSymbolsStore, name)) {
	    if (nativeSymbol && has(Symbol$1, name)) WellKnownSymbolsStore[name] = Symbol$1[name];
	    else WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);
	  } return WellKnownSymbolsStore[name];
	};

	var f$6 = wellKnownSymbol;

	var wrappedWellKnownSymbol = {
		f: f$6
	};

	var defineProperty = objectDefineProperty.f;

	var defineWellKnownSymbol = function (NAME) {
	  var Symbol = path.Symbol || (path.Symbol = {});
	  if (!has(Symbol, NAME)) defineProperty(Symbol, NAME, {
	    value: wrappedWellKnownSymbol.f(NAME)
	  });
	};

	var defineProperty$1 = objectDefineProperty.f;



	var TO_STRING_TAG = wellKnownSymbol('toStringTag');

	var setToStringTag = function (it, TAG, STATIC) {
	  if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {
	    defineProperty$1(it, TO_STRING_TAG, { configurable: true, value: TAG });
	  }
	};

	var aFunction$1 = function (it) {
	  if (typeof it != 'function') {
	    throw TypeError(String(it) + ' is not a function');
	  } return it;
	};

	// optional / simple context binding
	var bindContext = function (fn, that, length) {
	  aFunction$1(fn);
	  if (that === undefined) return fn;
	  switch (length) {
	    case 0: return function () {
	      return fn.call(that);
	    };
	    case 1: return function (a) {
	      return fn.call(that, a);
	    };
	    case 2: return function (a, b) {
	      return fn.call(that, a, b);
	    };
	    case 3: return function (a, b, c) {
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function (/* ...args */) {
	    return fn.apply(that, arguments);
	  };
	};

	var SPECIES = wellKnownSymbol('species');

	// `ArraySpeciesCreate` abstract operation
	// https://tc39.github.io/ecma262/#sec-arrayspeciescreate
	var arraySpeciesCreate = function (originalArray, length) {
	  var C;
	  if (isArray(originalArray)) {
	    C = originalArray.constructor;
	    // cross-realm fallback
	    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
	    else if (isObject(C)) {
	      C = C[SPECIES];
	      if (C === null) C = undefined;
	    }
	  } return new (C === undefined ? Array : C)(length === 0 ? 0 : length);
	};

	var push = [].push;

	// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex }` methods implementation
	var createMethod$1 = function (TYPE) {
	  var IS_MAP = TYPE == 1;
	  var IS_FILTER = TYPE == 2;
	  var IS_SOME = TYPE == 3;
	  var IS_EVERY = TYPE == 4;
	  var IS_FIND_INDEX = TYPE == 6;
	  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
	  return function ($this, callbackfn, that, specificCreate) {
	    var O = toObject($this);
	    var self = indexedObject(O);
	    var boundFunction = bindContext(callbackfn, that, 3);
	    var length = toLength(self.length);
	    var index = 0;
	    var create = specificCreate || arraySpeciesCreate;
	    var target = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
	    var value, result;
	    for (;length > index; index++) if (NO_HOLES || index in self) {
	      value = self[index];
	      result = boundFunction(value, index, O);
	      if (TYPE) {
	        if (IS_MAP) target[index] = result; // map
	        else if (result) switch (TYPE) {
	          case 3: return true;              // some
	          case 5: return value;             // find
	          case 6: return index;             // findIndex
	          case 2: push.call(target, value); // filter
	        } else if (IS_EVERY) return false;  // every
	      }
	    }
	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
	  };
	};

	var arrayIteration = {
	  // `Array.prototype.forEach` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
	  forEach: createMethod$1(0),
	  // `Array.prototype.map` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.map
	  map: createMethod$1(1),
	  // `Array.prototype.filter` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.filter
	  filter: createMethod$1(2),
	  // `Array.prototype.some` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.some
	  some: createMethod$1(3),
	  // `Array.prototype.every` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.every
	  every: createMethod$1(4),
	  // `Array.prototype.find` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.find
	  find: createMethod$1(5),
	  // `Array.prototype.findIndex` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.findIndex
	  findIndex: createMethod$1(6)
	};

	var $forEach = arrayIteration.forEach;

	var HIDDEN = sharedKey('hidden');
	var SYMBOL = 'Symbol';
	var PROTOTYPE$1 = 'prototype';
	var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');
	var setInternalState = internalState.set;
	var getInternalState = internalState.getterFor(SYMBOL);
	var ObjectPrototype = Object[PROTOTYPE$1];
	var $Symbol = global_1.Symbol;
	var $stringify = getBuiltIn('JSON', 'stringify');
	var nativeGetOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;
	var nativeDefineProperty$1 = objectDefineProperty.f;
	var nativeGetOwnPropertyNames$1 = objectGetOwnPropertyNamesExternal.f;
	var nativePropertyIsEnumerable$1 = objectPropertyIsEnumerable.f;
	var AllSymbols = shared('symbols');
	var ObjectPrototypeSymbols = shared('op-symbols');
	var StringToSymbolRegistry = shared('string-to-symbol-registry');
	var SymbolToStringRegistry = shared('symbol-to-string-registry');
	var WellKnownSymbolsStore$1 = shared('wks');
	var QObject = global_1.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var USE_SETTER = !QObject || !QObject[PROTOTYPE$1] || !QObject[PROTOTYPE$1].findChild;

	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDescriptor = descriptors && fails(function () {
	  return objectCreate(nativeDefineProperty$1({}, 'a', {
	    get: function () { return nativeDefineProperty$1(this, 'a', { value: 7 }).a; }
	  })).a != 7;
	}) ? function (O, P, Attributes) {
	  var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor$1(ObjectPrototype, P);
	  if (ObjectPrototypeDescriptor) delete ObjectPrototype[P];
	  nativeDefineProperty$1(O, P, Attributes);
	  if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {
	    nativeDefineProperty$1(ObjectPrototype, P, ObjectPrototypeDescriptor);
	  }
	} : nativeDefineProperty$1;

	var wrap = function (tag, description) {
	  var symbol = AllSymbols[tag] = objectCreate($Symbol[PROTOTYPE$1]);
	  setInternalState(symbol, {
	    type: SYMBOL,
	    tag: tag,
	    description: description
	  });
	  if (!descriptors) symbol.description = description;
	  return symbol;
	};

	var isSymbol = nativeSymbol && typeof $Symbol.iterator == 'symbol' ? function (it) {
	  return typeof it == 'symbol';
	} : function (it) {
	  return Object(it) instanceof $Symbol;
	};

	var $defineProperty = function defineProperty(O, P, Attributes) {
	  if (O === ObjectPrototype) $defineProperty(ObjectPrototypeSymbols, P, Attributes);
	  anObject(O);
	  var key = toPrimitive(P, true);
	  anObject(Attributes);
	  if (has(AllSymbols, key)) {
	    if (!Attributes.enumerable) {
	      if (!has(O, HIDDEN)) nativeDefineProperty$1(O, HIDDEN, createPropertyDescriptor(1, {}));
	      O[HIDDEN][key] = true;
	    } else {
	      if (has(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
	      Attributes = objectCreate(Attributes, { enumerable: createPropertyDescriptor(0, false) });
	    } return setSymbolDescriptor(O, key, Attributes);
	  } return nativeDefineProperty$1(O, key, Attributes);
	};

	var $defineProperties = function defineProperties(O, Properties) {
	  anObject(O);
	  var properties = toIndexedObject(Properties);
	  var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
	  $forEach(keys, function (key) {
	    if (!descriptors || $propertyIsEnumerable.call(properties, key)) $defineProperty(O, key, properties[key]);
	  });
	  return O;
	};

	var $create = function create(O, Properties) {
	  return Properties === undefined ? objectCreate(O) : $defineProperties(objectCreate(O), Properties);
	};

	var $propertyIsEnumerable = function propertyIsEnumerable(V) {
	  var P = toPrimitive(V, true);
	  var enumerable = nativePropertyIsEnumerable$1.call(this, P);
	  if (this === ObjectPrototype && has(AllSymbols, P) && !has(ObjectPrototypeSymbols, P)) return false;
	  return enumerable || !has(this, P) || !has(AllSymbols, P) || has(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
	};

	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
	  var it = toIndexedObject(O);
	  var key = toPrimitive(P, true);
	  if (it === ObjectPrototype && has(AllSymbols, key) && !has(ObjectPrototypeSymbols, key)) return;
	  var descriptor = nativeGetOwnPropertyDescriptor$1(it, key);
	  if (descriptor && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) {
	    descriptor.enumerable = true;
	  }
	  return descriptor;
	};

	var $getOwnPropertyNames = function getOwnPropertyNames(O) {
	  var names = nativeGetOwnPropertyNames$1(toIndexedObject(O));
	  var result = [];
	  $forEach(names, function (key) {
	    if (!has(AllSymbols, key) && !has(hiddenKeys, key)) result.push(key);
	  });
	  return result;
	};

	var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
	  var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;
	  var names = nativeGetOwnPropertyNames$1(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
	  var result = [];
	  $forEach(names, function (key) {
	    if (has(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || has(ObjectPrototype, key))) {
	      result.push(AllSymbols[key]);
	    }
	  });
	  return result;
	};

	// `Symbol` constructor
	// https://tc39.github.io/ecma262/#sec-symbol-constructor
	if (!nativeSymbol) {
	  $Symbol = function Symbol() {
	    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor');
	    var description = !arguments.length || arguments[0] === undefined ? undefined : String(arguments[0]);
	    var tag = uid(description);
	    var setter = function (value) {
	      if (this === ObjectPrototype) setter.call(ObjectPrototypeSymbols, value);
	      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
	      setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
	    };
	    if (descriptors && USE_SETTER) setSymbolDescriptor(ObjectPrototype, tag, { configurable: true, set: setter });
	    return wrap(tag, description);
	  };

	  redefine($Symbol[PROTOTYPE$1], 'toString', function toString() {
	    return getInternalState(this).tag;
	  });

	  objectPropertyIsEnumerable.f = $propertyIsEnumerable;
	  objectDefineProperty.f = $defineProperty;
	  objectGetOwnPropertyDescriptor.f = $getOwnPropertyDescriptor;
	  objectGetOwnPropertyNames.f = objectGetOwnPropertyNamesExternal.f = $getOwnPropertyNames;
	  objectGetOwnPropertySymbols.f = $getOwnPropertySymbols;

	  if (descriptors) {
	    // https://github.com/tc39/proposal-Symbol-description
	    nativeDefineProperty$1($Symbol[PROTOTYPE$1], 'description', {
	      configurable: true,
	      get: function description() {
	        return getInternalState(this).description;
	      }
	    });
	    {
	      redefine(ObjectPrototype, 'propertyIsEnumerable', $propertyIsEnumerable, { unsafe: true });
	    }
	  }
	}

	if (!useSymbolAsUid) {
	  wrappedWellKnownSymbol.f = function (name) {
	    return wrap(wellKnownSymbol(name), name);
	  };
	}

	_export({ global: true, wrap: true, forced: !nativeSymbol, sham: !nativeSymbol }, {
	  Symbol: $Symbol
	});

	$forEach(objectKeys(WellKnownSymbolsStore$1), function (name) {
	  defineWellKnownSymbol(name);
	});

	_export({ target: SYMBOL, stat: true, forced: !nativeSymbol }, {
	  // `Symbol.for` method
	  // https://tc39.github.io/ecma262/#sec-symbol.for
	  'for': function (key) {
	    var string = String(key);
	    if (has(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];
	    var symbol = $Symbol(string);
	    StringToSymbolRegistry[string] = symbol;
	    SymbolToStringRegistry[symbol] = string;
	    return symbol;
	  },
	  // `Symbol.keyFor` method
	  // https://tc39.github.io/ecma262/#sec-symbol.keyfor
	  keyFor: function keyFor(sym) {
	    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol');
	    if (has(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];
	  },
	  useSetter: function () { USE_SETTER = true; },
	  useSimple: function () { USE_SETTER = false; }
	});

	_export({ target: 'Object', stat: true, forced: !nativeSymbol, sham: !descriptors }, {
	  // `Object.create` method
	  // https://tc39.github.io/ecma262/#sec-object.create
	  create: $create,
	  // `Object.defineProperty` method
	  // https://tc39.github.io/ecma262/#sec-object.defineproperty
	  defineProperty: $defineProperty,
	  // `Object.defineProperties` method
	  // https://tc39.github.io/ecma262/#sec-object.defineproperties
	  defineProperties: $defineProperties,
	  // `Object.getOwnPropertyDescriptor` method
	  // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor
	});

	_export({ target: 'Object', stat: true, forced: !nativeSymbol }, {
	  // `Object.getOwnPropertyNames` method
	  // https://tc39.github.io/ecma262/#sec-object.getownpropertynames
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // `Object.getOwnPropertySymbols` method
	  // https://tc39.github.io/ecma262/#sec-object.getownpropertysymbols
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});

	// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
	// https://bugs.chromium.org/p/v8/issues/detail?id=3443
	_export({ target: 'Object', stat: true, forced: fails(function () { objectGetOwnPropertySymbols.f(1); }) }, {
	  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
	    return objectGetOwnPropertySymbols.f(toObject(it));
	  }
	});

	// `JSON.stringify` method behavior with symbols
	// https://tc39.github.io/ecma262/#sec-json.stringify
	if ($stringify) {
	  var FORCED_JSON_STRINGIFY = !nativeSymbol || fails(function () {
	    var symbol = $Symbol();
	    // MS Edge converts symbol values to JSON as {}
	    return $stringify([symbol]) != '[null]'
	      // WebKit converts symbol values to JSON as null
	      || $stringify({ a: symbol }) != '{}'
	      // V8 throws on boxed symbols
	      || $stringify(Object(symbol)) != '{}';
	  });

	  _export({ target: 'JSON', stat: true, forced: FORCED_JSON_STRINGIFY }, {
	    // eslint-disable-next-line no-unused-vars
	    stringify: function stringify(it, replacer, space) {
	      var args = [it];
	      var index = 1;
	      var $replacer;
	      while (arguments.length > index) args.push(arguments[index++]);
	      $replacer = replacer;
	      if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
	      if (!isArray(replacer)) replacer = function (key, value) {
	        if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
	        if (!isSymbol(value)) return value;
	      };
	      args[1] = replacer;
	      return $stringify.apply(null, args);
	    }
	  });
	}

	// `Symbol.prototype[@@toPrimitive]` method
	// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@toprimitive
	if (!$Symbol[PROTOTYPE$1][TO_PRIMITIVE]) {
	  createNonEnumerableProperty($Symbol[PROTOTYPE$1], TO_PRIMITIVE, $Symbol[PROTOTYPE$1].valueOf);
	}
	// `Symbol.prototype[@@toStringTag]` property
	// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@tostringtag
	setToStringTag($Symbol, SYMBOL);

	hiddenKeys[HIDDEN] = true;

	var createProperty = function (object, key, value) {
	  var propertyKey = toPrimitive(key);
	  if (propertyKey in object) objectDefineProperty.f(object, propertyKey, createPropertyDescriptor(0, value));
	  else object[propertyKey] = value;
	};

	var userAgent = getBuiltIn('navigator', 'userAgent') || '';

	var process$1 = global_1.process;
	var versions = process$1 && process$1.versions;
	var v8 = versions && versions.v8;
	var match, version;

	if (v8) {
	  match = v8.split('.');
	  version = match[0] + match[1];
	} else if (userAgent) {
	  match = userAgent.match(/Edge\/(\d+)/);
	  if (!match || match[1] >= 74) {
	    match = userAgent.match(/Chrome\/(\d+)/);
	    if (match) version = match[1];
	  }
	}

	var v8Version = version && +version;

	var SPECIES$1 = wellKnownSymbol('species');

	var arrayMethodHasSpeciesSupport = function (METHOD_NAME) {
	  // We can't use this feature detection in V8 since it causes
	  // deoptimization and serious performance degradation
	  // https://github.com/zloirock/core-js/issues/677
	  return v8Version >= 51 || !fails(function () {
	    var array = [];
	    var constructor = array.constructor = {};
	    constructor[SPECIES$1] = function () {
	      return { foo: 1 };
	    };
	    return array[METHOD_NAME](Boolean).foo !== 1;
	  });
	};

	var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');
	var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
	var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';

	// We can't use this feature detection in V8 since it causes
	// deoptimization and serious performance degradation
	// https://github.com/zloirock/core-js/issues/679
	var IS_CONCAT_SPREADABLE_SUPPORT = v8Version >= 51 || !fails(function () {
	  var array = [];
	  array[IS_CONCAT_SPREADABLE] = false;
	  return array.concat()[0] !== array;
	});

	var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');

	var isConcatSpreadable = function (O) {
	  if (!isObject(O)) return false;
	  var spreadable = O[IS_CONCAT_SPREADABLE];
	  return spreadable !== undefined ? !!spreadable : isArray(O);
	};

	var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;

	// `Array.prototype.concat` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.concat
	// with adding support of @@isConcatSpreadable and @@species
	_export({ target: 'Array', proto: true, forced: FORCED }, {
	  concat: function concat(arg) { // eslint-disable-line no-unused-vars
	    var O = toObject(this);
	    var A = arraySpeciesCreate(O, 0);
	    var n = 0;
	    var i, k, length, len, E;
	    for (i = -1, length = arguments.length; i < length; i++) {
	      E = i === -1 ? O : arguments[i];
	      if (isConcatSpreadable(E)) {
	        len = toLength(E.length);
	        if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
	        for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);
	      } else {
	        if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
	        createProperty(A, n++, E);
	      }
	    }
	    A.length = n;
	    return A;
	  }
	});

	var $filter = arrayIteration.filter;



	var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('filter');
	// Edge 14- issue
	var USES_TO_LENGTH = HAS_SPECIES_SUPPORT && !fails(function () {
	  [].filter.call({ length: -1, 0: 1 }, function (it) { throw it; });
	});

	// `Array.prototype.filter` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.filter
	// with adding support of @@species
	_export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {
	  filter: function filter(callbackfn /* , thisArg */) {
	    return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var sloppyArrayMethod = function (METHOD_NAME, argument) {
	  var method = [][METHOD_NAME];
	  return !method || !fails(function () {
	    // eslint-disable-next-line no-useless-call,no-throw-literal
	    method.call(null, argument || function () { throw 1; }, 1);
	  });
	};

	var $forEach$1 = arrayIteration.forEach;


	// `Array.prototype.forEach` method implementation
	// https://tc39.github.io/ecma262/#sec-array.prototype.foreach
	var arrayForEach = sloppyArrayMethod('forEach') ? function forEach(callbackfn /* , thisArg */) {
	  return $forEach$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	} : [].forEach;

	// `Array.prototype.forEach` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.foreach
	_export({ target: 'Array', proto: true, forced: [].forEach != arrayForEach }, {
	  forEach: arrayForEach
	});

	var nativeJoin = [].join;

	var ES3_STRINGS = indexedObject != Object;
	var SLOPPY_METHOD = sloppyArrayMethod('join', ',');

	// `Array.prototype.join` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.join
	_export({ target: 'Array', proto: true, forced: ES3_STRINGS || SLOPPY_METHOD }, {
	  join: function join(separator) {
	    return nativeJoin.call(toIndexedObject(this), separator === undefined ? ',' : separator);
	  }
	});

	var defineProperty$2 = objectDefineProperty.f;

	var FunctionPrototype = Function.prototype;
	var FunctionPrototypeToString = FunctionPrototype.toString;
	var nameRE = /^\s*function ([^ (]*)/;
	var NAME = 'name';

	// Function instances `.name` property
	// https://tc39.github.io/ecma262/#sec-function-instances-name
	if (descriptors && !(NAME in FunctionPrototype)) {
	  defineProperty$2(FunctionPrototype, NAME, {
	    configurable: true,
	    get: function () {
	      try {
	        return FunctionPrototypeToString.call(this).match(nameRE)[1];
	      } catch (error) {
	        return '';
	      }
	    }
	  });
	}

	// `Object.defineProperties` method
	// https://tc39.github.io/ecma262/#sec-object.defineproperties
	_export({ target: 'Object', stat: true, forced: !descriptors, sham: !descriptors }, {
	  defineProperties: objectDefineProperties
	});

	// `Object.defineProperty` method
	// https://tc39.github.io/ecma262/#sec-object.defineproperty
	_export({ target: 'Object', stat: true, forced: !descriptors, sham: !descriptors }, {
	  defineProperty: objectDefineProperty.f
	});

	var nativeGetOwnPropertyDescriptor$2 = objectGetOwnPropertyDescriptor.f;


	var FAILS_ON_PRIMITIVES = fails(function () { nativeGetOwnPropertyDescriptor$2(1); });
	var FORCED$1 = !descriptors || FAILS_ON_PRIMITIVES;

	// `Object.getOwnPropertyDescriptor` method
	// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor
	_export({ target: 'Object', stat: true, forced: FORCED$1, sham: !descriptors }, {
	  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {
	    return nativeGetOwnPropertyDescriptor$2(toIndexedObject(it), key);
	  }
	});

	// `Object.getOwnPropertyDescriptors` method
	// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors
	_export({ target: 'Object', stat: true, sham: !descriptors }, {
	  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
	    var O = toIndexedObject(object);
	    var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
	    var keys = ownKeys(O);
	    var result = {};
	    var index = 0;
	    var key, descriptor;
	    while (keys.length > index) {
	      descriptor = getOwnPropertyDescriptor(O, key = keys[index++]);
	      if (descriptor !== undefined) createProperty(result, key, descriptor);
	    }
	    return result;
	  }
	});

	var FAILS_ON_PRIMITIVES$1 = fails(function () { objectKeys(1); });

	// `Object.keys` method
	// https://tc39.github.io/ecma262/#sec-object.keys
	_export({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$1 }, {
	  keys: function keys(it) {
	    return objectKeys(toObject(it));
	  }
	});

	var TO_STRING_TAG$1 = wellKnownSymbol('toStringTag');
	var test = {};

	test[TO_STRING_TAG$1] = 'z';

	var toStringTagSupport = String(test) === '[object z]';

	var TO_STRING_TAG$2 = wellKnownSymbol('toStringTag');
	// ES3 wrong here
	var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

	// fallback for IE11 Script Access Denied error
	var tryGet = function (it, key) {
	  try {
	    return it[key];
	  } catch (error) { /* empty */ }
	};

	// getting tag from ES6+ `Object.prototype.toString`
	var classof = toStringTagSupport ? classofRaw : function (it) {
	  var O, tag, result;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG$2)) == 'string' ? tag
	    // builtinTag case
	    : CORRECT_ARGUMENTS ? classofRaw(O)
	    // ES3 arguments fallback
	    : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;
	};

	// `Object.prototype.toString` method implementation
	// https://tc39.github.io/ecma262/#sec-object.prototype.tostring
	var objectToString = toStringTagSupport ? {}.toString : function toString() {
	  return '[object ' + classof(this) + ']';
	};

	// `Object.prototype.toString` method
	// https://tc39.github.io/ecma262/#sec-object.prototype.tostring
	if (!toStringTagSupport) {
	  redefine(Object.prototype, 'toString', objectToString, { unsafe: true });
	}

	var nativePromiseConstructor = global_1.Promise;

	var redefineAll = function (target, src, options) {
	  for (var key in src) redefine(target, key, src[key], options);
	  return target;
	};

	var SPECIES$2 = wellKnownSymbol('species');

	var setSpecies = function (CONSTRUCTOR_NAME) {
	  var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
	  var defineProperty = objectDefineProperty.f;

	  if (descriptors && Constructor && !Constructor[SPECIES$2]) {
	    defineProperty(Constructor, SPECIES$2, {
	      configurable: true,
	      get: function () { return this; }
	    });
	  }
	};

	var anInstance = function (it, Constructor, name) {
	  if (!(it instanceof Constructor)) {
	    throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');
	  } return it;
	};

	var iterators = {};

	var ITERATOR = wellKnownSymbol('iterator');
	var ArrayPrototype = Array.prototype;

	// check on default Array iterator
	var isArrayIteratorMethod = function (it) {
	  return it !== undefined && (iterators.Array === it || ArrayPrototype[ITERATOR] === it);
	};

	var ITERATOR$1 = wellKnownSymbol('iterator');

	var getIteratorMethod = function (it) {
	  if (it != undefined) return it[ITERATOR$1]
	    || it['@@iterator']
	    || iterators[classof(it)];
	};

	// call something on iterator step with safe closing on error
	var callWithSafeIterationClosing = function (iterator, fn, value, ENTRIES) {
	  try {
	    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch (error) {
	    var returnMethod = iterator['return'];
	    if (returnMethod !== undefined) anObject(returnMethod.call(iterator));
	    throw error;
	  }
	};

	var iterate_1 = createCommonjsModule(function (module) {
	var Result = function (stopped, result) {
	  this.stopped = stopped;
	  this.result = result;
	};

	var iterate = module.exports = function (iterable, fn, that, AS_ENTRIES, IS_ITERATOR) {
	  var boundFunction = bindContext(fn, that, AS_ENTRIES ? 2 : 1);
	  var iterator, iterFn, index, length, result, next, step;

	  if (IS_ITERATOR) {
	    iterator = iterable;
	  } else {
	    iterFn = getIteratorMethod(iterable);
	    if (typeof iterFn != 'function') throw TypeError('Target is not iterable');
	    // optimisation for array iterators
	    if (isArrayIteratorMethod(iterFn)) {
	      for (index = 0, length = toLength(iterable.length); length > index; index++) {
	        result = AS_ENTRIES
	          ? boundFunction(anObject(step = iterable[index])[0], step[1])
	          : boundFunction(iterable[index]);
	        if (result && result instanceof Result) return result;
	      } return new Result(false);
	    }
	    iterator = iterFn.call(iterable);
	  }

	  next = iterator.next;
	  while (!(step = next.call(iterator)).done) {
	    result = callWithSafeIterationClosing(iterator, boundFunction, step.value, AS_ENTRIES);
	    if (typeof result == 'object' && result && result instanceof Result) return result;
	  } return new Result(false);
	};

	iterate.stop = function (result) {
	  return new Result(true, result);
	};
	});

	var ITERATOR$2 = wellKnownSymbol('iterator');
	var SAFE_CLOSING = false;

	try {
	  var called = 0;
	  var iteratorWithReturn = {
	    next: function () {
	      return { done: !!called++ };
	    },
	    'return': function () {
	      SAFE_CLOSING = true;
	    }
	  };
	  iteratorWithReturn[ITERATOR$2] = function () {
	    return this;
	  };
	  // eslint-disable-next-line no-throw-literal
	  Array.from(iteratorWithReturn, function () { throw 2; });
	} catch (error) { /* empty */ }

	var checkCorrectnessOfIteration = function (exec, SKIP_CLOSING) {
	  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
	  var ITERATION_SUPPORT = false;
	  try {
	    var object = {};
	    object[ITERATOR$2] = function () {
	      return {
	        next: function () {
	          return { done: ITERATION_SUPPORT = true };
	        }
	      };
	    };
	    exec(object);
	  } catch (error) { /* empty */ }
	  return ITERATION_SUPPORT;
	};

	var SPECIES$3 = wellKnownSymbol('species');

	// `SpeciesConstructor` abstract operation
	// https://tc39.github.io/ecma262/#sec-speciesconstructor
	var speciesConstructor = function (O, defaultConstructor) {
	  var C = anObject(O).constructor;
	  var S;
	  return C === undefined || (S = anObject(C)[SPECIES$3]) == undefined ? defaultConstructor : aFunction$1(S);
	};

	var isIos = /(iphone|ipod|ipad).*applewebkit/i.test(userAgent);

	var location$1 = global_1.location;
	var set$1 = global_1.setImmediate;
	var clear = global_1.clearImmediate;
	var process$2 = global_1.process;
	var MessageChannel = global_1.MessageChannel;
	var Dispatch = global_1.Dispatch;
	var counter = 0;
	var queue = {};
	var ONREADYSTATECHANGE = 'onreadystatechange';
	var defer, channel, port;

	var run = function (id) {
	  // eslint-disable-next-line no-prototype-builtins
	  if (queue.hasOwnProperty(id)) {
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	};

	var runner = function (id) {
	  return function () {
	    run(id);
	  };
	};

	var listener = function (event) {
	  run(event.data);
	};

	var post = function (id) {
	  // old engines have not location.origin
	  global_1.postMessage(id + '', location$1.protocol + '//' + location$1.host);
	};

	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if (!set$1 || !clear) {
	  set$1 = function setImmediate(fn) {
	    var args = [];
	    var i = 1;
	    while (arguments.length > i) args.push(arguments[i++]);
	    queue[++counter] = function () {
	      // eslint-disable-next-line no-new-func
	      (typeof fn == 'function' ? fn : Function(fn)).apply(undefined, args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clear = function clearImmediate(id) {
	    delete queue[id];
	  };
	  // Node.js 0.8-
	  if (classofRaw(process$2) == 'process') {
	    defer = function (id) {
	      process$2.nextTick(runner(id));
	    };
	  // Sphere (JS game engine) Dispatch API
	  } else if (Dispatch && Dispatch.now) {
	    defer = function (id) {
	      Dispatch.now(runner(id));
	    };
	  // Browsers with MessageChannel, includes WebWorkers
	  // except iOS - https://github.com/zloirock/core-js/issues/624
	  } else if (MessageChannel && !isIos) {
	    channel = new MessageChannel();
	    port = channel.port2;
	    channel.port1.onmessage = listener;
	    defer = bindContext(port.postMessage, port, 1);
	  // Browsers with postMessage, skip WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if (global_1.addEventListener && typeof postMessage == 'function' && !global_1.importScripts && !fails(post)) {
	    defer = post;
	    global_1.addEventListener('message', listener, false);
	  // IE8-
	  } else if (ONREADYSTATECHANGE in documentCreateElement('script')) {
	    defer = function (id) {
	      html.appendChild(documentCreateElement('script'))[ONREADYSTATECHANGE] = function () {
	        html.removeChild(this);
	        run(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function (id) {
	      setTimeout(runner(id), 0);
	    };
	  }
	}

	var task = {
	  set: set$1,
	  clear: clear
	};

	var getOwnPropertyDescriptor$2 = objectGetOwnPropertyDescriptor.f;

	var macrotask = task.set;


	var MutationObserver = global_1.MutationObserver || global_1.WebKitMutationObserver;
	var process$3 = global_1.process;
	var Promise$1 = global_1.Promise;
	var IS_NODE = classofRaw(process$3) == 'process';
	// Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`
	var queueMicrotaskDescriptor = getOwnPropertyDescriptor$2(global_1, 'queueMicrotask');
	var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;

	var flush, head, last, notify, toggle, node, promise, then;

	// modern engines have queueMicrotask method
	if (!queueMicrotask) {
	  flush = function () {
	    var parent, fn;
	    if (IS_NODE && (parent = process$3.domain)) parent.exit();
	    while (head) {
	      fn = head.fn;
	      head = head.next;
	      try {
	        fn();
	      } catch (error) {
	        if (head) notify();
	        else last = undefined;
	        throw error;
	      }
	    } last = undefined;
	    if (parent) parent.enter();
	  };

	  // Node.js
	  if (IS_NODE) {
	    notify = function () {
	      process$3.nextTick(flush);
	    };
	  // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
	  } else if (MutationObserver && !isIos) {
	    toggle = true;
	    node = document.createTextNode('');
	    new MutationObserver(flush).observe(node, { characterData: true });
	    notify = function () {
	      node.data = toggle = !toggle;
	    };
	  // environments with maybe non-completely correct, but existent Promise
	  } else if (Promise$1 && Promise$1.resolve) {
	    // Promise.resolve without an argument throws an error in LG WebOS 2
	    promise = Promise$1.resolve(undefined);
	    then = promise.then;
	    notify = function () {
	      then.call(promise, flush);
	    };
	  // for other environments - macrotask based on:
	  // - setImmediate
	  // - MessageChannel
	  // - window.postMessag
	  // - onreadystatechange
	  // - setTimeout
	  } else {
	    notify = function () {
	      // strange IE + webpack dev server bug - use .call(global)
	      macrotask.call(global_1, flush);
	    };
	  }
	}

	var microtask = queueMicrotask || function (fn) {
	  var task = { fn: fn, next: undefined };
	  if (last) last.next = task;
	  if (!head) {
	    head = task;
	    notify();
	  } last = task;
	};

	var PromiseCapability = function (C) {
	  var resolve, reject;
	  this.promise = new C(function ($$resolve, $$reject) {
	    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject = $$reject;
	  });
	  this.resolve = aFunction$1(resolve);
	  this.reject = aFunction$1(reject);
	};

	// 25.4.1.5 NewPromiseCapability(C)
	var f$7 = function (C) {
	  return new PromiseCapability(C);
	};

	var newPromiseCapability = {
		f: f$7
	};

	var promiseResolve = function (C, x) {
	  anObject(C);
	  if (isObject(x) && x.constructor === C) return x;
	  var promiseCapability = newPromiseCapability.f(C);
	  var resolve = promiseCapability.resolve;
	  resolve(x);
	  return promiseCapability.promise;
	};

	var hostReportErrors = function (a, b) {
	  var console = global_1.console;
	  if (console && console.error) {
	    arguments.length === 1 ? console.error(a) : console.error(a, b);
	  }
	};

	var perform = function (exec) {
	  try {
	    return { error: false, value: exec() };
	  } catch (error) {
	    return { error: true, value: error };
	  }
	};

	var task$1 = task.set;










	var SPECIES$4 = wellKnownSymbol('species');
	var PROMISE = 'Promise';
	var getInternalState$1 = internalState.get;
	var setInternalState$1 = internalState.set;
	var getInternalPromiseState = internalState.getterFor(PROMISE);
	var PromiseConstructor = nativePromiseConstructor;
	var TypeError$1 = global_1.TypeError;
	var document$2 = global_1.document;
	var process$4 = global_1.process;
	var $fetch = getBuiltIn('fetch');
	var newPromiseCapability$1 = newPromiseCapability.f;
	var newGenericPromiseCapability = newPromiseCapability$1;
	var IS_NODE$1 = classofRaw(process$4) == 'process';
	var DISPATCH_EVENT = !!(document$2 && document$2.createEvent && global_1.dispatchEvent);
	var UNHANDLED_REJECTION = 'unhandledrejection';
	var REJECTION_HANDLED = 'rejectionhandled';
	var PENDING = 0;
	var FULFILLED = 1;
	var REJECTED = 2;
	var HANDLED = 1;
	var UNHANDLED = 2;
	var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;

	var FORCED$2 = isForced_1(PROMISE, function () {
	  var GLOBAL_CORE_JS_PROMISE = inspectSource(PromiseConstructor) !== String(PromiseConstructor);
	  if (!GLOBAL_CORE_JS_PROMISE) {
	    // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
	    // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
	    // We can't detect it synchronously, so just check versions
	    if (v8Version === 66) return true;
	    // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	    if (!IS_NODE$1 && typeof PromiseRejectionEvent != 'function') return true;
	  }
	  // We can't use @@species feature detection in V8 since it causes
	  // deoptimization and performance degradation
	  // https://github.com/zloirock/core-js/issues/679
	  if (v8Version >= 51 && /native code/.test(PromiseConstructor)) return false;
	  // Detect correctness of subclassing with @@species support
	  var promise = PromiseConstructor.resolve(1);
	  var FakePromise = function (exec) {
	    exec(function () { /* empty */ }, function () { /* empty */ });
	  };
	  var constructor = promise.constructor = {};
	  constructor[SPECIES$4] = FakePromise;
	  return !(promise.then(function () { /* empty */ }) instanceof FakePromise);
	});

	var INCORRECT_ITERATION = FORCED$2 || !checkCorrectnessOfIteration(function (iterable) {
	  PromiseConstructor.all(iterable)['catch'](function () { /* empty */ });
	});

	// helpers
	var isThenable = function (it) {
	  var then;
	  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
	};

	var notify$1 = function (promise, state, isReject) {
	  if (state.notified) return;
	  state.notified = true;
	  var chain = state.reactions;
	  microtask(function () {
	    var value = state.value;
	    var ok = state.state == FULFILLED;
	    var index = 0;
	    // variable length - can't use forEach
	    while (chain.length > index) {
	      var reaction = chain[index++];
	      var handler = ok ? reaction.ok : reaction.fail;
	      var resolve = reaction.resolve;
	      var reject = reaction.reject;
	      var domain = reaction.domain;
	      var result, then, exited;
	      try {
	        if (handler) {
	          if (!ok) {
	            if (state.rejection === UNHANDLED) onHandleUnhandled(promise, state);
	            state.rejection = HANDLED;
	          }
	          if (handler === true) result = value;
	          else {
	            if (domain) domain.enter();
	            result = handler(value); // can throw
	            if (domain) {
	              domain.exit();
	              exited = true;
	            }
	          }
	          if (result === reaction.promise) {
	            reject(TypeError$1('Promise-chain cycle'));
	          } else if (then = isThenable(result)) {
	            then.call(result, resolve, reject);
	          } else resolve(result);
	        } else reject(value);
	      } catch (error) {
	        if (domain && !exited) domain.exit();
	        reject(error);
	      }
	    }
	    state.reactions = [];
	    state.notified = false;
	    if (isReject && !state.rejection) onUnhandled(promise, state);
	  });
	};

	var dispatchEvent = function (name, promise, reason) {
	  var event, handler;
	  if (DISPATCH_EVENT) {
	    event = document$2.createEvent('Event');
	    event.promise = promise;
	    event.reason = reason;
	    event.initEvent(name, false, true);
	    global_1.dispatchEvent(event);
	  } else event = { promise: promise, reason: reason };
	  if (handler = global_1['on' + name]) handler(event);
	  else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
	};

	var onUnhandled = function (promise, state) {
	  task$1.call(global_1, function () {
	    var value = state.value;
	    var IS_UNHANDLED = isUnhandled(state);
	    var result;
	    if (IS_UNHANDLED) {
	      result = perform(function () {
	        if (IS_NODE$1) {
	          process$4.emit('unhandledRejection', value, promise);
	        } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      state.rejection = IS_NODE$1 || isUnhandled(state) ? UNHANDLED : HANDLED;
	      if (result.error) throw result.value;
	    }
	  });
	};

	var isUnhandled = function (state) {
	  return state.rejection !== HANDLED && !state.parent;
	};

	var onHandleUnhandled = function (promise, state) {
	  task$1.call(global_1, function () {
	    if (IS_NODE$1) {
	      process$4.emit('rejectionHandled', promise);
	    } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
	  });
	};

	var bind = function (fn, promise, state, unwrap) {
	  return function (value) {
	    fn(promise, state, value, unwrap);
	  };
	};

	var internalReject = function (promise, state, value, unwrap) {
	  if (state.done) return;
	  state.done = true;
	  if (unwrap) state = unwrap;
	  state.value = value;
	  state.state = REJECTED;
	  notify$1(promise, state, true);
	};

	var internalResolve = function (promise, state, value, unwrap) {
	  if (state.done) return;
	  state.done = true;
	  if (unwrap) state = unwrap;
	  try {
	    if (promise === value) throw TypeError$1("Promise can't be resolved itself");
	    var then = isThenable(value);
	    if (then) {
	      microtask(function () {
	        var wrapper = { done: false };
	        try {
	          then.call(value,
	            bind(internalResolve, promise, wrapper, state),
	            bind(internalReject, promise, wrapper, state)
	          );
	        } catch (error) {
	          internalReject(promise, wrapper, error, state);
	        }
	      });
	    } else {
	      state.value = value;
	      state.state = FULFILLED;
	      notify$1(promise, state, false);
	    }
	  } catch (error) {
	    internalReject(promise, { done: false }, error, state);
	  }
	};

	// constructor polyfill
	if (FORCED$2) {
	  // 25.4.3.1 Promise(executor)
	  PromiseConstructor = function Promise(executor) {
	    anInstance(this, PromiseConstructor, PROMISE);
	    aFunction$1(executor);
	    Internal.call(this);
	    var state = getInternalState$1(this);
	    try {
	      executor(bind(internalResolve, this, state), bind(internalReject, this, state));
	    } catch (error) {
	      internalReject(this, state, error);
	    }
	  };
	  // eslint-disable-next-line no-unused-vars
	  Internal = function Promise(executor) {
	    setInternalState$1(this, {
	      type: PROMISE,
	      done: false,
	      notified: false,
	      parent: false,
	      reactions: [],
	      rejection: false,
	      state: PENDING,
	      value: undefined
	    });
	  };
	  Internal.prototype = redefineAll(PromiseConstructor.prototype, {
	    // `Promise.prototype.then` method
	    // https://tc39.github.io/ecma262/#sec-promise.prototype.then
	    then: function then(onFulfilled, onRejected) {
	      var state = getInternalPromiseState(this);
	      var reaction = newPromiseCapability$1(speciesConstructor(this, PromiseConstructor));
	      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
	      reaction.fail = typeof onRejected == 'function' && onRejected;
	      reaction.domain = IS_NODE$1 ? process$4.domain : undefined;
	      state.parent = true;
	      state.reactions.push(reaction);
	      if (state.state != PENDING) notify$1(this, state, false);
	      return reaction.promise;
	    },
	    // `Promise.prototype.catch` method
	    // https://tc39.github.io/ecma262/#sec-promise.prototype.catch
	    'catch': function (onRejected) {
	      return this.then(undefined, onRejected);
	    }
	  });
	  OwnPromiseCapability = function () {
	    var promise = new Internal();
	    var state = getInternalState$1(promise);
	    this.promise = promise;
	    this.resolve = bind(internalResolve, promise, state);
	    this.reject = bind(internalReject, promise, state);
	  };
	  newPromiseCapability.f = newPromiseCapability$1 = function (C) {
	    return C === PromiseConstructor || C === PromiseWrapper
	      ? new OwnPromiseCapability(C)
	      : newGenericPromiseCapability(C);
	  };

	  if ( typeof nativePromiseConstructor == 'function') {
	    nativeThen = nativePromiseConstructor.prototype.then;

	    // wrap native Promise#then for native async functions
	    redefine(nativePromiseConstructor.prototype, 'then', function then(onFulfilled, onRejected) {
	      var that = this;
	      return new PromiseConstructor(function (resolve, reject) {
	        nativeThen.call(that, resolve, reject);
	      }).then(onFulfilled, onRejected);
	    // https://github.com/zloirock/core-js/issues/640
	    }, { unsafe: true });

	    // wrap fetch result
	    if (typeof $fetch == 'function') _export({ global: true, enumerable: true, forced: true }, {
	      // eslint-disable-next-line no-unused-vars
	      fetch: function fetch(input /* , init */) {
	        return promiseResolve(PromiseConstructor, $fetch.apply(global_1, arguments));
	      }
	    });
	  }
	}

	_export({ global: true, wrap: true, forced: FORCED$2 }, {
	  Promise: PromiseConstructor
	});

	setToStringTag(PromiseConstructor, PROMISE, false);
	setSpecies(PROMISE);

	PromiseWrapper = getBuiltIn(PROMISE);

	// statics
	_export({ target: PROMISE, stat: true, forced: FORCED$2 }, {
	  // `Promise.reject` method
	  // https://tc39.github.io/ecma262/#sec-promise.reject
	  reject: function reject(r) {
	    var capability = newPromiseCapability$1(this);
	    capability.reject.call(undefined, r);
	    return capability.promise;
	  }
	});

	_export({ target: PROMISE, stat: true, forced:  FORCED$2 }, {
	  // `Promise.resolve` method
	  // https://tc39.github.io/ecma262/#sec-promise.resolve
	  resolve: function resolve(x) {
	    return promiseResolve( this, x);
	  }
	});

	_export({ target: PROMISE, stat: true, forced: INCORRECT_ITERATION }, {
	  // `Promise.all` method
	  // https://tc39.github.io/ecma262/#sec-promise.all
	  all: function all(iterable) {
	    var C = this;
	    var capability = newPromiseCapability$1(C);
	    var resolve = capability.resolve;
	    var reject = capability.reject;
	    var result = perform(function () {
	      var $promiseResolve = aFunction$1(C.resolve);
	      var values = [];
	      var counter = 0;
	      var remaining = 1;
	      iterate_1(iterable, function (promise) {
	        var index = counter++;
	        var alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        $promiseResolve.call(C, promise).then(function (value) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if (result.error) reject(result.value);
	    return capability.promise;
	  },
	  // `Promise.race` method
	  // https://tc39.github.io/ecma262/#sec-promise.race
	  race: function race(iterable) {
	    var C = this;
	    var capability = newPromiseCapability$1(C);
	    var reject = capability.reject;
	    var result = perform(function () {
	      var $promiseResolve = aFunction$1(C.resolve);
	      iterate_1(iterable, function (promise) {
	        $promiseResolve.call(C, promise).then(capability.resolve, reject);
	      });
	    });
	    if (result.error) reject(result.value);
	    return capability.promise;
	  }
	});

	var aPossiblePrototype = function (it) {
	  if (!isObject(it) && it !== null) {
	    throw TypeError("Can't set " + String(it) + ' as a prototype');
	  } return it;
	};

	// `Object.setPrototypeOf` method
	// https://tc39.github.io/ecma262/#sec-object.setprototypeof
	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var objectSetPrototypeOf = Object.setPrototypeOf || ('__proto__' in {} ? function () {
	  var CORRECT_SETTER = false;
	  var test = {};
	  var setter;
	  try {
	    setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;
	    setter.call(test, []);
	    CORRECT_SETTER = test instanceof Array;
	  } catch (error) { /* empty */ }
	  return function setPrototypeOf(O, proto) {
	    anObject(O);
	    aPossiblePrototype(proto);
	    if (CORRECT_SETTER) setter.call(O, proto);
	    else O.__proto__ = proto;
	    return O;
	  };
	}() : undefined);

	// makes subclassing work correct for wrapped built-ins
	var inheritIfRequired = function ($this, dummy, Wrapper) {
	  var NewTarget, NewTargetPrototype;
	  if (
	    // it can work only with native `setPrototypeOf`
	    objectSetPrototypeOf &&
	    // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
	    typeof (NewTarget = dummy.constructor) == 'function' &&
	    NewTarget !== Wrapper &&
	    isObject(NewTargetPrototype = NewTarget.prototype) &&
	    NewTargetPrototype !== Wrapper.prototype
	  ) objectSetPrototypeOf($this, NewTargetPrototype);
	  return $this;
	};

	var MATCH = wellKnownSymbol('match');

	// `IsRegExp` abstract operation
	// https://tc39.github.io/ecma262/#sec-isregexp
	var isRegexp = function (it) {
	  var isRegExp;
	  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classofRaw(it) == 'RegExp');
	};

	// `RegExp.prototype.flags` getter implementation
	// https://tc39.github.io/ecma262/#sec-get-regexp.prototype.flags
	var regexpFlags = function () {
	  var that = anObject(this);
	  var result = '';
	  if (that.global) result += 'g';
	  if (that.ignoreCase) result += 'i';
	  if (that.multiline) result += 'm';
	  if (that.dotAll) result += 's';
	  if (that.unicode) result += 'u';
	  if (that.sticky) result += 'y';
	  return result;
	};

	var defineProperty$3 = objectDefineProperty.f;
	var getOwnPropertyNames = objectGetOwnPropertyNames.f;







	var MATCH$1 = wellKnownSymbol('match');
	var NativeRegExp = global_1.RegExp;
	var RegExpPrototype = NativeRegExp.prototype;
	var re1 = /a/g;
	var re2 = /a/g;

	// "new" should create a new object, old webkit bug
	var CORRECT_NEW = new NativeRegExp(re1) !== re1;

	var FORCED$3 = descriptors && isForced_1('RegExp', (!CORRECT_NEW || fails(function () {
	  re2[MATCH$1] = false;
	  // RegExp constructor can alter flags and IsRegExp works correct with @@match
	  return NativeRegExp(re1) != re1 || NativeRegExp(re2) == re2 || NativeRegExp(re1, 'i') != '/a/i';
	})));

	// `RegExp` constructor
	// https://tc39.github.io/ecma262/#sec-regexp-constructor
	if (FORCED$3) {
	  var RegExpWrapper = function RegExp(pattern, flags) {
	    var thisIsRegExp = this instanceof RegExpWrapper;
	    var patternIsRegExp = isRegexp(pattern);
	    var flagsAreUndefined = flags === undefined;
	    return !thisIsRegExp && patternIsRegExp && pattern.constructor === RegExpWrapper && flagsAreUndefined ? pattern
	      : inheritIfRequired(CORRECT_NEW
	        ? new NativeRegExp(patternIsRegExp && !flagsAreUndefined ? pattern.source : pattern, flags)
	        : NativeRegExp((patternIsRegExp = pattern instanceof RegExpWrapper)
	          ? pattern.source
	          : pattern, patternIsRegExp && flagsAreUndefined ? regexpFlags.call(pattern) : flags)
	      , thisIsRegExp ? this : RegExpPrototype, RegExpWrapper);
	  };
	  var proxy = function (key) {
	    key in RegExpWrapper || defineProperty$3(RegExpWrapper, key, {
	      configurable: true,
	      get: function () { return NativeRegExp[key]; },
	      set: function (it) { NativeRegExp[key] = it; }
	    });
	  };
	  var keys$1 = getOwnPropertyNames(NativeRegExp);
	  var index = 0;
	  while (keys$1.length > index) proxy(keys$1[index++]);
	  RegExpPrototype.constructor = RegExpWrapper;
	  RegExpWrapper.prototype = RegExpPrototype;
	  redefine(global_1, 'RegExp', RegExpWrapper);
	}

	// https://tc39.github.io/ecma262/#sec-get-regexp-@@species
	setSpecies('RegExp');

	var nativeExec = RegExp.prototype.exec;
	// This always refers to the native implementation, because the
	// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
	// which loads this file before patching the method.
	var nativeReplace = String.prototype.replace;

	var patchedExec = nativeExec;

	var UPDATES_LAST_INDEX_WRONG = (function () {
	  var re1 = /a/;
	  var re2 = /b*/g;
	  nativeExec.call(re1, 'a');
	  nativeExec.call(re2, 'a');
	  return re1.lastIndex !== 0 || re2.lastIndex !== 0;
	})();

	// nonparticipating capturing group, copied from es5-shim's String#split patch.
	var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

	var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;

	if (PATCH) {
	  patchedExec = function exec(str) {
	    var re = this;
	    var lastIndex, reCopy, match, i;

	    if (NPCG_INCLUDED) {
	      reCopy = new RegExp('^' + re.source + '$(?!\\s)', regexpFlags.call(re));
	    }
	    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;

	    match = nativeExec.call(re, str);

	    if (UPDATES_LAST_INDEX_WRONG && match) {
	      re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
	    }
	    if (NPCG_INCLUDED && match && match.length > 1) {
	      // Fix browsers whose `exec` methods don't consistently return `undefined`
	      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
	      nativeReplace.call(match[0], reCopy, function () {
	        for (i = 1; i < arguments.length - 2; i++) {
	          if (arguments[i] === undefined) match[i] = undefined;
	        }
	      });
	    }

	    return match;
	  };
	}

	var regexpExec = patchedExec;

	_export({ target: 'RegExp', proto: true, forced: /./.exec !== regexpExec }, {
	  exec: regexpExec
	});

	var TO_STRING = 'toString';
	var RegExpPrototype$1 = RegExp.prototype;
	var nativeToString = RegExpPrototype$1[TO_STRING];

	var NOT_GENERIC = fails(function () { return nativeToString.call({ source: 'a', flags: 'b' }) != '/a/b'; });
	// FF44- RegExp#toString has a wrong name
	var INCORRECT_NAME = nativeToString.name != TO_STRING;

	// `RegExp.prototype.toString` method
	// https://tc39.github.io/ecma262/#sec-regexp.prototype.tostring
	if (NOT_GENERIC || INCORRECT_NAME) {
	  redefine(RegExp.prototype, TO_STRING, function toString() {
	    var R = anObject(this);
	    var p = String(R.source);
	    var rf = R.flags;
	    var f = String(rf === undefined && R instanceof RegExp && !('flags' in RegExpPrototype$1) ? regexpFlags.call(R) : rf);
	    return '/' + p + '/' + f;
	  }, { unsafe: true });
	}

	var SPECIES$5 = wellKnownSymbol('species');

	var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
	  // #replace needs built-in support for named groups.
	  // #match works fine because it just return the exec results, even if it has
	  // a "grops" property.
	  var re = /./;
	  re.exec = function () {
	    var result = [];
	    result.groups = { a: '7' };
	    return result;
	  };
	  return ''.replace(re, '$<a>') !== '7';
	});

	// Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
	// Weex JS has frozen built-in prototypes, so use try / catch wrapper
	var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {
	  var re = /(?:)/;
	  var originalExec = re.exec;
	  re.exec = function () { return originalExec.apply(this, arguments); };
	  var result = 'ab'.split(re);
	  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';
	});

	var fixRegexpWellKnownSymbolLogic = function (KEY, length, exec, sham) {
	  var SYMBOL = wellKnownSymbol(KEY);

	  var DELEGATES_TO_SYMBOL = !fails(function () {
	    // String methods call symbol-named RegEp methods
	    var O = {};
	    O[SYMBOL] = function () { return 7; };
	    return ''[KEY](O) != 7;
	  });

	  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {
	    // Symbol-named RegExp methods call .exec
	    var execCalled = false;
	    var re = /a/;

	    if (KEY === 'split') {
	      // We can't use real regex here since it causes deoptimization
	      // and serious performance degradation in V8
	      // https://github.com/zloirock/core-js/issues/306
	      re = {};
	      // RegExp[@@split] doesn't call the regex's exec method, but first creates
	      // a new one. We need to return the patched regex when creating the new one.
	      re.constructor = {};
	      re.constructor[SPECIES$5] = function () { return re; };
	      re.flags = '';
	      re[SYMBOL] = /./[SYMBOL];
	    }

	    re.exec = function () { execCalled = true; return null; };

	    re[SYMBOL]('');
	    return !execCalled;
	  });

	  if (
	    !DELEGATES_TO_SYMBOL ||
	    !DELEGATES_TO_EXEC ||
	    (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||
	    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
	  ) {
	    var nativeRegExpMethod = /./[SYMBOL];
	    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
	      if (regexp.exec === regexpExec) {
	        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
	          // The native String method already delegates to @@method (this
	          // polyfilled function), leasing to infinite recursion.
	          // We avoid it by directly calling the native @@method method.
	          return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
	        }
	        return { done: true, value: nativeMethod.call(str, regexp, arg2) };
	      }
	      return { done: false };
	    });
	    var stringMethod = methods[0];
	    var regexMethod = methods[1];

	    redefine(String.prototype, KEY, stringMethod);
	    redefine(RegExp.prototype, SYMBOL, length == 2
	      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
	      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
	      ? function (string, arg) { return regexMethod.call(string, this, arg); }
	      // 21.2.5.6 RegExp.prototype[@@match](string)
	      // 21.2.5.9 RegExp.prototype[@@search](string)
	      : function (string) { return regexMethod.call(string, this); }
	    );
	    if (sham) createNonEnumerableProperty(RegExp.prototype[SYMBOL], 'sham', true);
	  }
	};

	// `String.prototype.{ codePointAt, at }` methods implementation
	var createMethod$2 = function (CONVERT_TO_STRING) {
	  return function ($this, pos) {
	    var S = String(requireObjectCoercible($this));
	    var position = toInteger(pos);
	    var size = S.length;
	    var first, second;
	    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
	    first = S.charCodeAt(position);
	    return first < 0xD800 || first > 0xDBFF || position + 1 === size
	      || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF
	        ? CONVERT_TO_STRING ? S.charAt(position) : first
	        : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
	  };
	};

	var stringMultibyte = {
	  // `String.prototype.codePointAt` method
	  // https://tc39.github.io/ecma262/#sec-string.prototype.codepointat
	  codeAt: createMethod$2(false),
	  // `String.prototype.at` method
	  // https://github.com/mathiasbynens/String.prototype.at
	  charAt: createMethod$2(true)
	};

	var charAt = stringMultibyte.charAt;

	// `AdvanceStringIndex` abstract operation
	// https://tc39.github.io/ecma262/#sec-advancestringindex
	var advanceStringIndex = function (S, index, unicode) {
	  return index + (unicode ? charAt(S, index).length : 1);
	};

	// `RegExpExec` abstract operation
	// https://tc39.github.io/ecma262/#sec-regexpexec
	var regexpExecAbstract = function (R, S) {
	  var exec = R.exec;
	  if (typeof exec === 'function') {
	    var result = exec.call(R, S);
	    if (typeof result !== 'object') {
	      throw TypeError('RegExp exec method returned something other than an Object or null');
	    }
	    return result;
	  }

	  if (classofRaw(R) !== 'RegExp') {
	    throw TypeError('RegExp#exec called on incompatible receiver');
	  }

	  return regexpExec.call(R, S);
	};

	var max$1 = Math.max;
	var min$2 = Math.min;
	var floor$1 = Math.floor;
	var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d\d?|<[^>]*>)/g;
	var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d\d?)/g;

	var maybeToString = function (it) {
	  return it === undefined ? it : String(it);
	};

	// @@replace logic
	fixRegexpWellKnownSymbolLogic('replace', 2, function (REPLACE, nativeReplace, maybeCallNative) {
	  return [
	    // `String.prototype.replace` method
	    // https://tc39.github.io/ecma262/#sec-string.prototype.replace
	    function replace(searchValue, replaceValue) {
	      var O = requireObjectCoercible(this);
	      var replacer = searchValue == undefined ? undefined : searchValue[REPLACE];
	      return replacer !== undefined
	        ? replacer.call(searchValue, O, replaceValue)
	        : nativeReplace.call(String(O), searchValue, replaceValue);
	    },
	    // `RegExp.prototype[@@replace]` method
	    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
	    function (regexp, replaceValue) {
	      var res = maybeCallNative(nativeReplace, regexp, this, replaceValue);
	      if (res.done) return res.value;

	      var rx = anObject(regexp);
	      var S = String(this);

	      var functionalReplace = typeof replaceValue === 'function';
	      if (!functionalReplace) replaceValue = String(replaceValue);

	      var global = rx.global;
	      if (global) {
	        var fullUnicode = rx.unicode;
	        rx.lastIndex = 0;
	      }
	      var results = [];
	      while (true) {
	        var result = regexpExecAbstract(rx, S);
	        if (result === null) break;

	        results.push(result);
	        if (!global) break;

	        var matchStr = String(result[0]);
	        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
	      }

	      var accumulatedResult = '';
	      var nextSourcePosition = 0;
	      for (var i = 0; i < results.length; i++) {
	        result = results[i];

	        var matched = String(result[0]);
	        var position = max$1(min$2(toInteger(result.index), S.length), 0);
	        var captures = [];
	        // NOTE: This is equivalent to
	        //   captures = result.slice(1).map(maybeToString)
	        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
	        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
	        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
	        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
	        var namedCaptures = result.groups;
	        if (functionalReplace) {
	          var replacerArgs = [matched].concat(captures, position, S);
	          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
	          var replacement = String(replaceValue.apply(undefined, replacerArgs));
	        } else {
	          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
	        }
	        if (position >= nextSourcePosition) {
	          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
	          nextSourcePosition = position + matched.length;
	        }
	      }
	      return accumulatedResult + S.slice(nextSourcePosition);
	    }
	  ];

	  // https://tc39.github.io/ecma262/#sec-getsubstitution
	  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
	    var tailPos = position + matched.length;
	    var m = captures.length;
	    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
	    if (namedCaptures !== undefined) {
	      namedCaptures = toObject(namedCaptures);
	      symbols = SUBSTITUTION_SYMBOLS;
	    }
	    return nativeReplace.call(replacement, symbols, function (match, ch) {
	      var capture;
	      switch (ch.charAt(0)) {
	        case '$': return '$';
	        case '&': return matched;
	        case '`': return str.slice(0, position);
	        case "'": return str.slice(tailPos);
	        case '<':
	          capture = namedCaptures[ch.slice(1, -1)];
	          break;
	        default: // \d\d?
	          var n = +ch;
	          if (n === 0) return match;
	          if (n > m) {
	            var f = floor$1(n / 10);
	            if (f === 0) return match;
	            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
	            return match;
	          }
	          capture = captures[n - 1];
	      }
	      return capture === undefined ? '' : capture;
	    });
	  }
	});

	// iterable DOM collections
	// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
	var domIterables = {
	  CSSRuleList: 0,
	  CSSStyleDeclaration: 0,
	  CSSValueList: 0,
	  ClientRectList: 0,
	  DOMRectList: 0,
	  DOMStringList: 0,
	  DOMTokenList: 1,
	  DataTransferItemList: 0,
	  FileList: 0,
	  HTMLAllCollection: 0,
	  HTMLCollection: 0,
	  HTMLFormElement: 0,
	  HTMLSelectElement: 0,
	  MediaList: 0,
	  MimeTypeArray: 0,
	  NamedNodeMap: 0,
	  NodeList: 1,
	  PaintRequestList: 0,
	  Plugin: 0,
	  PluginArray: 0,
	  SVGLengthList: 0,
	  SVGNumberList: 0,
	  SVGPathSegList: 0,
	  SVGPointList: 0,
	  SVGStringList: 0,
	  SVGTransformList: 0,
	  SourceBufferList: 0,
	  StyleSheetList: 0,
	  TextTrackCueList: 0,
	  TextTrackList: 0,
	  TouchList: 0
	};

	for (var COLLECTION_NAME in domIterables) {
	  var Collection = global_1[COLLECTION_NAME];
	  var CollectionPrototype = Collection && Collection.prototype;
	  // some Chrome versions have non-configurable methods on DOMTokenList
	  if (CollectionPrototype && CollectionPrototype.forEach !== arrayForEach) try {
	    createNonEnumerableProperty(CollectionPrototype, 'forEach', arrayForEach);
	  } catch (error) {
	    CollectionPrototype.forEach = arrayForEach;
	  }
	}

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	var defineProperty$4 = _defineProperty;

	var runtime_1 = createCommonjsModule(function (module) {
	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var runtime = (function (exports) {

	  var Op = Object.prototype;
	  var hasOwn = Op.hasOwnProperty;
	  var undefined$1; // More compressible than void 0.
	  var $Symbol = typeof Symbol === "function" ? Symbol : {};
	  var iteratorSymbol = $Symbol.iterator || "@@iterator";
	  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
	  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

	  function wrap(innerFn, outerFn, self, tryLocsList) {
	    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
	    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
	    var generator = Object.create(protoGenerator.prototype);
	    var context = new Context(tryLocsList || []);

	    // The ._invoke method unifies the implementations of the .next,
	    // .throw, and .return methods.
	    generator._invoke = makeInvokeMethod(innerFn, self, context);

	    return generator;
	  }
	  exports.wrap = wrap;

	  // Try/catch helper to minimize deoptimizations. Returns a completion
	  // record like context.tryEntries[i].completion. This interface could
	  // have been (and was previously) designed to take a closure to be
	  // invoked without arguments, but in all the cases we care about we
	  // already have an existing method we want to call, so there's no need
	  // to create a new function object. We can even get away with assuming
	  // the method takes exactly one argument, since that happens to be true
	  // in every case, so we don't have to touch the arguments object. The
	  // only additional allocation required is the completion record, which
	  // has a stable shape and so hopefully should be cheap to allocate.
	  function tryCatch(fn, obj, arg) {
	    try {
	      return { type: "normal", arg: fn.call(obj, arg) };
	    } catch (err) {
	      return { type: "throw", arg: err };
	    }
	  }

	  var GenStateSuspendedStart = "suspendedStart";
	  var GenStateSuspendedYield = "suspendedYield";
	  var GenStateExecuting = "executing";
	  var GenStateCompleted = "completed";

	  // Returning this object from the innerFn has the same effect as
	  // breaking out of the dispatch switch statement.
	  var ContinueSentinel = {};

	  // Dummy constructor functions that we use as the .constructor and
	  // .constructor.prototype properties for functions that return Generator
	  // objects. For full spec compliance, you may wish to configure your
	  // minifier not to mangle the names of these two functions.
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}

	  // This is a polyfill for %IteratorPrototype% for environments that
	  // don't natively support it.
	  var IteratorPrototype = {};
	  IteratorPrototype[iteratorSymbol] = function () {
	    return this;
	  };

	  var getProto = Object.getPrototypeOf;
	  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
	  if (NativeIteratorPrototype &&
	      NativeIteratorPrototype !== Op &&
	      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
	    // This environment has a native %IteratorPrototype%; use it instead
	    // of the polyfill.
	    IteratorPrototype = NativeIteratorPrototype;
	  }

	  var Gp = GeneratorFunctionPrototype.prototype =
	    Generator.prototype = Object.create(IteratorPrototype);
	  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
	  GeneratorFunctionPrototype.constructor = GeneratorFunction;
	  GeneratorFunctionPrototype[toStringTagSymbol] =
	    GeneratorFunction.displayName = "GeneratorFunction";

	  // Helper for defining the .next, .throw, and .return methods of the
	  // Iterator interface in terms of a single ._invoke method.
	  function defineIteratorMethods(prototype) {
	    ["next", "throw", "return"].forEach(function(method) {
	      prototype[method] = function(arg) {
	        return this._invoke(method, arg);
	      };
	    });
	  }

	  exports.isGeneratorFunction = function(genFun) {
	    var ctor = typeof genFun === "function" && genFun.constructor;
	    return ctor
	      ? ctor === GeneratorFunction ||
	        // For the native GeneratorFunction constructor, the best we can
	        // do is to check its .name property.
	        (ctor.displayName || ctor.name) === "GeneratorFunction"
	      : false;
	  };

	  exports.mark = function(genFun) {
	    if (Object.setPrototypeOf) {
	      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	    } else {
	      genFun.__proto__ = GeneratorFunctionPrototype;
	      if (!(toStringTagSymbol in genFun)) {
	        genFun[toStringTagSymbol] = "GeneratorFunction";
	      }
	    }
	    genFun.prototype = Object.create(Gp);
	    return genFun;
	  };

	  // Within the body of any async function, `await x` is transformed to
	  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	  // `hasOwn.call(value, "__await")` to determine if the yielded value is
	  // meant to be awaited.
	  exports.awrap = function(arg) {
	    return { __await: arg };
	  };

	  function AsyncIterator(generator) {
	    function invoke(method, arg, resolve, reject) {
	      var record = tryCatch(generator[method], generator, arg);
	      if (record.type === "throw") {
	        reject(record.arg);
	      } else {
	        var result = record.arg;
	        var value = result.value;
	        if (value &&
	            typeof value === "object" &&
	            hasOwn.call(value, "__await")) {
	          return Promise.resolve(value.__await).then(function(value) {
	            invoke("next", value, resolve, reject);
	          }, function(err) {
	            invoke("throw", err, resolve, reject);
	          });
	        }

	        return Promise.resolve(value).then(function(unwrapped) {
	          // When a yielded Promise is resolved, its final value becomes
	          // the .value of the Promise<{value,done}> result for the
	          // current iteration.
	          result.value = unwrapped;
	          resolve(result);
	        }, function(error) {
	          // If a rejected Promise was yielded, throw the rejection back
	          // into the async generator function so it can be handled there.
	          return invoke("throw", error, resolve, reject);
	        });
	      }
	    }

	    var previousPromise;

	    function enqueue(method, arg) {
	      function callInvokeWithMethodAndArg() {
	        return new Promise(function(resolve, reject) {
	          invoke(method, arg, resolve, reject);
	        });
	      }

	      return previousPromise =
	        // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(
	          callInvokeWithMethodAndArg,
	          // Avoid propagating failures to Promises returned by later
	          // invocations of the iterator.
	          callInvokeWithMethodAndArg
	        ) : callInvokeWithMethodAndArg();
	    }

	    // Define the unified helper method that is used to implement .next,
	    // .throw, and .return (see defineIteratorMethods).
	    this._invoke = enqueue;
	  }

	  defineIteratorMethods(AsyncIterator.prototype);
	  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
	    return this;
	  };
	  exports.AsyncIterator = AsyncIterator;

	  // Note that simple async functions are implemented on top of
	  // AsyncIterator objects; they just return a Promise for the value of
	  // the final result produced by the iterator.
	  exports.async = function(innerFn, outerFn, self, tryLocsList) {
	    var iter = new AsyncIterator(
	      wrap(innerFn, outerFn, self, tryLocsList)
	    );

	    return exports.isGeneratorFunction(outerFn)
	      ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function(result) {
	          return result.done ? result.value : iter.next();
	        });
	  };

	  function makeInvokeMethod(innerFn, self, context) {
	    var state = GenStateSuspendedStart;

	    return function invoke(method, arg) {
	      if (state === GenStateExecuting) {
	        throw new Error("Generator is already running");
	      }

	      if (state === GenStateCompleted) {
	        if (method === "throw") {
	          throw arg;
	        }

	        // Be forgiving, per 25.3.3.3.3 of the spec:
	        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
	        return doneResult();
	      }

	      context.method = method;
	      context.arg = arg;

	      while (true) {
	        var delegate = context.delegate;
	        if (delegate) {
	          var delegateResult = maybeInvokeDelegate(delegate, context);
	          if (delegateResult) {
	            if (delegateResult === ContinueSentinel) continue;
	            return delegateResult;
	          }
	        }

	        if (context.method === "next") {
	          // Setting context._sent for legacy support of Babel's
	          // function.sent implementation.
	          context.sent = context._sent = context.arg;

	        } else if (context.method === "throw") {
	          if (state === GenStateSuspendedStart) {
	            state = GenStateCompleted;
	            throw context.arg;
	          }

	          context.dispatchException(context.arg);

	        } else if (context.method === "return") {
	          context.abrupt("return", context.arg);
	        }

	        state = GenStateExecuting;

	        var record = tryCatch(innerFn, self, context);
	        if (record.type === "normal") {
	          // If an exception is thrown from innerFn, we leave state ===
	          // GenStateExecuting and loop back for another invocation.
	          state = context.done
	            ? GenStateCompleted
	            : GenStateSuspendedYield;

	          if (record.arg === ContinueSentinel) {
	            continue;
	          }

	          return {
	            value: record.arg,
	            done: context.done
	          };

	        } else if (record.type === "throw") {
	          state = GenStateCompleted;
	          // Dispatch the exception by looping back around to the
	          // context.dispatchException(context.arg) call above.
	          context.method = "throw";
	          context.arg = record.arg;
	        }
	      }
	    };
	  }

	  // Call delegate.iterator[context.method](context.arg) and handle the
	  // result, either by returning a { value, done } result from the
	  // delegate iterator, or by modifying context.method and context.arg,
	  // setting context.delegate to null, and returning the ContinueSentinel.
	  function maybeInvokeDelegate(delegate, context) {
	    var method = delegate.iterator[context.method];
	    if (method === undefined$1) {
	      // A .throw or .return when the delegate iterator has no .throw
	      // method always terminates the yield* loop.
	      context.delegate = null;

	      if (context.method === "throw") {
	        // Note: ["return"] must be used for ES3 parsing compatibility.
	        if (delegate.iterator["return"]) {
	          // If the delegate iterator has a return method, give it a
	          // chance to clean up.
	          context.method = "return";
	          context.arg = undefined$1;
	          maybeInvokeDelegate(delegate, context);

	          if (context.method === "throw") {
	            // If maybeInvokeDelegate(context) changed context.method from
	            // "return" to "throw", let that override the TypeError below.
	            return ContinueSentinel;
	          }
	        }

	        context.method = "throw";
	        context.arg = new TypeError(
	          "The iterator does not provide a 'throw' method");
	      }

	      return ContinueSentinel;
	    }

	    var record = tryCatch(method, delegate.iterator, context.arg);

	    if (record.type === "throw") {
	      context.method = "throw";
	      context.arg = record.arg;
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    var info = record.arg;

	    if (! info) {
	      context.method = "throw";
	      context.arg = new TypeError("iterator result is not an object");
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    if (info.done) {
	      // Assign the result of the finished delegate to the temporary
	      // variable specified by delegate.resultName (see delegateYield).
	      context[delegate.resultName] = info.value;

	      // Resume execution at the desired location (see delegateYield).
	      context.next = delegate.nextLoc;

	      // If context.method was "throw" but the delegate handled the
	      // exception, let the outer generator proceed normally. If
	      // context.method was "next", forget context.arg since it has been
	      // "consumed" by the delegate iterator. If context.method was
	      // "return", allow the original .return call to continue in the
	      // outer generator.
	      if (context.method !== "return") {
	        context.method = "next";
	        context.arg = undefined$1;
	      }

	    } else {
	      // Re-yield the result returned by the delegate method.
	      return info;
	    }

	    // The delegate iterator is finished, so forget it and continue with
	    // the outer generator.
	    context.delegate = null;
	    return ContinueSentinel;
	  }

	  // Define Generator.prototype.{next,throw,return} in terms of the
	  // unified ._invoke helper method.
	  defineIteratorMethods(Gp);

	  Gp[toStringTagSymbol] = "Generator";

	  // A Generator should always return itself as the iterator object when the
	  // @@iterator function is called on it. Some browsers' implementations of the
	  // iterator prototype chain incorrectly implement this, causing the Generator
	  // object to not be returned from this call. This ensures that doesn't happen.
	  // See https://github.com/facebook/regenerator/issues/274 for more details.
	  Gp[iteratorSymbol] = function() {
	    return this;
	  };

	  Gp.toString = function() {
	    return "[object Generator]";
	  };

	  function pushTryEntry(locs) {
	    var entry = { tryLoc: locs[0] };

	    if (1 in locs) {
	      entry.catchLoc = locs[1];
	    }

	    if (2 in locs) {
	      entry.finallyLoc = locs[2];
	      entry.afterLoc = locs[3];
	    }

	    this.tryEntries.push(entry);
	  }

	  function resetTryEntry(entry) {
	    var record = entry.completion || {};
	    record.type = "normal";
	    delete record.arg;
	    entry.completion = record;
	  }

	  function Context(tryLocsList) {
	    // The root entry object (effectively a try statement without a catch
	    // or a finally block) gives us a place to store values thrown from
	    // locations where there is no enclosing try statement.
	    this.tryEntries = [{ tryLoc: "root" }];
	    tryLocsList.forEach(pushTryEntry, this);
	    this.reset(true);
	  }

	  exports.keys = function(object) {
	    var keys = [];
	    for (var key in object) {
	      keys.push(key);
	    }
	    keys.reverse();

	    // Rather than returning an object with a next method, we keep
	    // things simple and return the next function itself.
	    return function next() {
	      while (keys.length) {
	        var key = keys.pop();
	        if (key in object) {
	          next.value = key;
	          next.done = false;
	          return next;
	        }
	      }

	      // To avoid creating an additional object, we just hang the .value
	      // and .done properties off the next function object itself. This
	      // also ensures that the minifier will not anonymize the function.
	      next.done = true;
	      return next;
	    };
	  };

	  function values(iterable) {
	    if (iterable) {
	      var iteratorMethod = iterable[iteratorSymbol];
	      if (iteratorMethod) {
	        return iteratorMethod.call(iterable);
	      }

	      if (typeof iterable.next === "function") {
	        return iterable;
	      }

	      if (!isNaN(iterable.length)) {
	        var i = -1, next = function next() {
	          while (++i < iterable.length) {
	            if (hasOwn.call(iterable, i)) {
	              next.value = iterable[i];
	              next.done = false;
	              return next;
	            }
	          }

	          next.value = undefined$1;
	          next.done = true;

	          return next;
	        };

	        return next.next = next;
	      }
	    }

	    // Return an iterator with no values.
	    return { next: doneResult };
	  }
	  exports.values = values;

	  function doneResult() {
	    return { value: undefined$1, done: true };
	  }

	  Context.prototype = {
	    constructor: Context,

	    reset: function(skipTempReset) {
	      this.prev = 0;
	      this.next = 0;
	      // Resetting context._sent for legacy support of Babel's
	      // function.sent implementation.
	      this.sent = this._sent = undefined$1;
	      this.done = false;
	      this.delegate = null;

	      this.method = "next";
	      this.arg = undefined$1;

	      this.tryEntries.forEach(resetTryEntry);

	      if (!skipTempReset) {
	        for (var name in this) {
	          // Not sure about the optimal order of these conditions:
	          if (name.charAt(0) === "t" &&
	              hasOwn.call(this, name) &&
	              !isNaN(+name.slice(1))) {
	            this[name] = undefined$1;
	          }
	        }
	      }
	    },

	    stop: function() {
	      this.done = true;

	      var rootEntry = this.tryEntries[0];
	      var rootRecord = rootEntry.completion;
	      if (rootRecord.type === "throw") {
	        throw rootRecord.arg;
	      }

	      return this.rval;
	    },

	    dispatchException: function(exception) {
	      if (this.done) {
	        throw exception;
	      }

	      var context = this;
	      function handle(loc, caught) {
	        record.type = "throw";
	        record.arg = exception;
	        context.next = loc;

	        if (caught) {
	          // If the dispatched exception was caught by a catch block,
	          // then let that catch block handle the exception normally.
	          context.method = "next";
	          context.arg = undefined$1;
	        }

	        return !! caught;
	      }

	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        var record = entry.completion;

	        if (entry.tryLoc === "root") {
	          // Exception thrown outside of any try block that could handle
	          // it, so set the completion value of the entire function to
	          // throw the exception.
	          return handle("end");
	        }

	        if (entry.tryLoc <= this.prev) {
	          var hasCatch = hasOwn.call(entry, "catchLoc");
	          var hasFinally = hasOwn.call(entry, "finallyLoc");

	          if (hasCatch && hasFinally) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            } else if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else if (hasCatch) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            }

	          } else if (hasFinally) {
	            if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else {
	            throw new Error("try statement without catch or finally");
	          }
	        }
	      }
	    },

	    abrupt: function(type, arg) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc <= this.prev &&
	            hasOwn.call(entry, "finallyLoc") &&
	            this.prev < entry.finallyLoc) {
	          var finallyEntry = entry;
	          break;
	        }
	      }

	      if (finallyEntry &&
	          (type === "break" ||
	           type === "continue") &&
	          finallyEntry.tryLoc <= arg &&
	          arg <= finallyEntry.finallyLoc) {
	        // Ignore the finally entry if control is not jumping to a
	        // location outside the try/catch block.
	        finallyEntry = null;
	      }

	      var record = finallyEntry ? finallyEntry.completion : {};
	      record.type = type;
	      record.arg = arg;

	      if (finallyEntry) {
	        this.method = "next";
	        this.next = finallyEntry.finallyLoc;
	        return ContinueSentinel;
	      }

	      return this.complete(record);
	    },

	    complete: function(record, afterLoc) {
	      if (record.type === "throw") {
	        throw record.arg;
	      }

	      if (record.type === "break" ||
	          record.type === "continue") {
	        this.next = record.arg;
	      } else if (record.type === "return") {
	        this.rval = this.arg = record.arg;
	        this.method = "return";
	        this.next = "end";
	      } else if (record.type === "normal" && afterLoc) {
	        this.next = afterLoc;
	      }

	      return ContinueSentinel;
	    },

	    finish: function(finallyLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.finallyLoc === finallyLoc) {
	          this.complete(entry.completion, entry.afterLoc);
	          resetTryEntry(entry);
	          return ContinueSentinel;
	        }
	      }
	    },

	    "catch": function(tryLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc === tryLoc) {
	          var record = entry.completion;
	          if (record.type === "throw") {
	            var thrown = record.arg;
	            resetTryEntry(entry);
	          }
	          return thrown;
	        }
	      }

	      // The context.catch method must only be called with a location
	      // argument that corresponds to a known catch block.
	      throw new Error("illegal catch attempt");
	    },

	    delegateYield: function(iterable, resultName, nextLoc) {
	      this.delegate = {
	        iterator: values(iterable),
	        resultName: resultName,
	        nextLoc: nextLoc
	      };

	      if (this.method === "next") {
	        // Deliberately forget the last sent value so that we don't
	        // accidentally pass it on to the delegate.
	        this.arg = undefined$1;
	      }

	      return ContinueSentinel;
	    }
	  };

	  // Regardless of whether this script is executing as a CommonJS module
	  // or not, return the runtime object so that we can declare the variable
	  // regeneratorRuntime in the outer scope, which allows this module to be
	  // injected easily by `bin/regenerator --include-runtime script.js`.
	  return exports;

	}(
	  // If this script is executing as a CommonJS module, use module.exports
	  // as the regeneratorRuntime namespace. Otherwise create a new empty
	  // object. Either way, the resulting object will be used to initialize
	  // the regeneratorRuntime variable at the top of this file.
	   module.exports 
	));

	try {
	  regeneratorRuntime = runtime;
	} catch (accidentalStrictMode) {
	  // This module should not be running in strict mode, so the above
	  // assignment should always work unless something is misconfigured. Just
	  // in case runtime.js accidentally runs in strict mode, we can escape
	  // strict mode using a global Function call. This could conceivably fail
	  // if a Content Security Policy forbids using Function, but in that case
	  // the proper solution is to fix the accidental strict mode problem. If
	  // you've misconfigured your bundler to force strict mode and applied a
	  // CSP to forbid Function, and you're not willing to fix either of those
	  // problems, please detail your unique predicament in a GitHub issue.
	  Function("r", "regeneratorRuntime = r")(runtime);
	}
	});

	var regenerator = runtime_1;

	var page = createCommonjsModule(function (module, exports) {
	(function (global, factory) {
		 module.exports = factory() ;
	}(commonjsGlobal, (function () {
	var isarray = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};

	/**
	 * Expose `pathToRegexp`.
	 */
	var pathToRegexp_1 = pathToRegexp;
	var parse_1 = parse;
	var compile_1 = compile;
	var tokensToFunction_1 = tokensToFunction;
	var tokensToRegExp_1 = tokensToRegExp;

	/**
	 * The main path matching regexp utility.
	 *
	 * @type {RegExp}
	 */
	var PATH_REGEXP = new RegExp([
	  // Match escaped characters that would otherwise appear in future matches.
	  // This allows the user to escape special characters that won't transform.
	  '(\\\\.)',
	  // Match Express-style parameters and un-named parameters with a prefix
	  // and optional suffixes. Matches appear as:
	  //
	  // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
	  // "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
	  // "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
	  '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^()])+)\\))?|\\(((?:\\\\.|[^()])+)\\))([+*?])?|(\\*))'
	].join('|'), 'g');

	/**
	 * Parse a string for the raw tokens.
	 *
	 * @param  {String} str
	 * @return {Array}
	 */
	function parse (str) {
	  var tokens = [];
	  var key = 0;
	  var index = 0;
	  var path = '';
	  var res;

	  while ((res = PATH_REGEXP.exec(str)) != null) {
	    var m = res[0];
	    var escaped = res[1];
	    var offset = res.index;
	    path += str.slice(index, offset);
	    index = offset + m.length;

	    // Ignore already escaped sequences.
	    if (escaped) {
	      path += escaped[1];
	      continue
	    }

	    // Push the current path onto the tokens.
	    if (path) {
	      tokens.push(path);
	      path = '';
	    }

	    var prefix = res[2];
	    var name = res[3];
	    var capture = res[4];
	    var group = res[5];
	    var suffix = res[6];
	    var asterisk = res[7];

	    var repeat = suffix === '+' || suffix === '*';
	    var optional = suffix === '?' || suffix === '*';
	    var delimiter = prefix || '/';
	    var pattern = capture || group || (asterisk ? '.*' : '[^' + delimiter + ']+?');

	    tokens.push({
	      name: name || key++,
	      prefix: prefix || '',
	      delimiter: delimiter,
	      optional: optional,
	      repeat: repeat,
	      pattern: escapeGroup(pattern)
	    });
	  }

	  // Match any characters still remaining.
	  if (index < str.length) {
	    path += str.substr(index);
	  }

	  // If the path exists, push it onto the end.
	  if (path) {
	    tokens.push(path);
	  }

	  return tokens
	}

	/**
	 * Compile a string to a template function for the path.
	 *
	 * @param  {String}   str
	 * @return {Function}
	 */
	function compile (str) {
	  return tokensToFunction(parse(str))
	}

	/**
	 * Expose a method for transforming tokens into the path function.
	 */
	function tokensToFunction (tokens) {
	  // Compile all the tokens into regexps.
	  var matches = new Array(tokens.length);

	  // Compile all the patterns before compilation.
	  for (var i = 0; i < tokens.length; i++) {
	    if (typeof tokens[i] === 'object') {
	      matches[i] = new RegExp('^' + tokens[i].pattern + '$');
	    }
	  }

	  return function (obj) {
	    var path = '';
	    var data = obj || {};

	    for (var i = 0; i < tokens.length; i++) {
	      var token = tokens[i];

	      if (typeof token === 'string') {
	        path += token;

	        continue
	      }

	      var value = data[token.name];
	      var segment;

	      if (value == null) {
	        if (token.optional) {
	          continue
	        } else {
	          throw new TypeError('Expected "' + token.name + '" to be defined')
	        }
	      }

	      if (isarray(value)) {
	        if (!token.repeat) {
	          throw new TypeError('Expected "' + token.name + '" to not repeat, but received "' + value + '"')
	        }

	        if (value.length === 0) {
	          if (token.optional) {
	            continue
	          } else {
	            throw new TypeError('Expected "' + token.name + '" to not be empty')
	          }
	        }

	        for (var j = 0; j < value.length; j++) {
	          segment = encodeURIComponent(value[j]);

	          if (!matches[i].test(segment)) {
	            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"')
	          }

	          path += (j === 0 ? token.prefix : token.delimiter) + segment;
	        }

	        continue
	      }

	      segment = encodeURIComponent(value);

	      if (!matches[i].test(segment)) {
	        throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"')
	      }

	      path += token.prefix + segment;
	    }

	    return path
	  }
	}

	/**
	 * Escape a regular expression string.
	 *
	 * @param  {String} str
	 * @return {String}
	 */
	function escapeString (str) {
	  return str.replace(/([.+*?=^!:${}()[\]|\/])/g, '\\$1')
	}

	/**
	 * Escape the capturing group by escaping special characters and meaning.
	 *
	 * @param  {String} group
	 * @return {String}
	 */
	function escapeGroup (group) {
	  return group.replace(/([=!:$\/()])/g, '\\$1')
	}

	/**
	 * Attach the keys as a property of the regexp.
	 *
	 * @param  {RegExp} re
	 * @param  {Array}  keys
	 * @return {RegExp}
	 */
	function attachKeys (re, keys) {
	  re.keys = keys;
	  return re
	}

	/**
	 * Get the flags for a regexp from the options.
	 *
	 * @param  {Object} options
	 * @return {String}
	 */
	function flags (options) {
	  return options.sensitive ? '' : 'i'
	}

	/**
	 * Pull out keys from a regexp.
	 *
	 * @param  {RegExp} path
	 * @param  {Array}  keys
	 * @return {RegExp}
	 */
	function regexpToRegexp (path, keys) {
	  // Use a negative lookahead to match only capturing groups.
	  var groups = path.source.match(/\((?!\?)/g);

	  if (groups) {
	    for (var i = 0; i < groups.length; i++) {
	      keys.push({
	        name: i,
	        prefix: null,
	        delimiter: null,
	        optional: false,
	        repeat: false,
	        pattern: null
	      });
	    }
	  }

	  return attachKeys(path, keys)
	}

	/**
	 * Transform an array into a regexp.
	 *
	 * @param  {Array}  path
	 * @param  {Array}  keys
	 * @param  {Object} options
	 * @return {RegExp}
	 */
	function arrayToRegexp (path, keys, options) {
	  var parts = [];

	  for (var i = 0; i < path.length; i++) {
	    parts.push(pathToRegexp(path[i], keys, options).source);
	  }

	  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));

	  return attachKeys(regexp, keys)
	}

	/**
	 * Create a path regexp from string input.
	 *
	 * @param  {String} path
	 * @param  {Array}  keys
	 * @param  {Object} options
	 * @return {RegExp}
	 */
	function stringToRegexp (path, keys, options) {
	  var tokens = parse(path);
	  var re = tokensToRegExp(tokens, options);

	  // Attach keys back to the regexp.
	  for (var i = 0; i < tokens.length; i++) {
	    if (typeof tokens[i] !== 'string') {
	      keys.push(tokens[i]);
	    }
	  }

	  return attachKeys(re, keys)
	}

	/**
	 * Expose a function for taking tokens and returning a RegExp.
	 *
	 * @param  {Array}  tokens
	 * @param  {Array}  keys
	 * @param  {Object} options
	 * @return {RegExp}
	 */
	function tokensToRegExp (tokens, options) {
	  options = options || {};

	  var strict = options.strict;
	  var end = options.end !== false;
	  var route = '';
	  var lastToken = tokens[tokens.length - 1];
	  var endsWithSlash = typeof lastToken === 'string' && /\/$/.test(lastToken);

	  // Iterate over the tokens and create our regexp string.
	  for (var i = 0; i < tokens.length; i++) {
	    var token = tokens[i];

	    if (typeof token === 'string') {
	      route += escapeString(token);
	    } else {
	      var prefix = escapeString(token.prefix);
	      var capture = token.pattern;

	      if (token.repeat) {
	        capture += '(?:' + prefix + capture + ')*';
	      }

	      if (token.optional) {
	        if (prefix) {
	          capture = '(?:' + prefix + '(' + capture + '))?';
	        } else {
	          capture = '(' + capture + ')?';
	        }
	      } else {
	        capture = prefix + '(' + capture + ')';
	      }

	      route += capture;
	    }
	  }

	  // In non-strict mode we allow a slash at the end of match. If the path to
	  // match already ends with a slash, we remove it for consistency. The slash
	  // is valid at the end of a path match, not in the middle. This is important
	  // in non-ending mode, where "/test/" shouldn't match "/test//route".
	  if (!strict) {
	    route = (endsWithSlash ? route.slice(0, -2) : route) + '(?:\\/(?=$))?';
	  }

	  if (end) {
	    route += '$';
	  } else {
	    // In non-ending mode, we need the capturing groups to match as much as
	    // possible by using a positive lookahead to the end or next path segment.
	    route += strict && endsWithSlash ? '' : '(?=\\/|$)';
	  }

	  return new RegExp('^' + route, flags(options))
	}

	/**
	 * Normalize the given path string, returning a regular expression.
	 *
	 * An empty array can be passed in for the keys, which will hold the
	 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
	 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
	 *
	 * @param  {(String|RegExp|Array)} path
	 * @param  {Array}                 [keys]
	 * @param  {Object}                [options]
	 * @return {RegExp}
	 */
	function pathToRegexp (path, keys, options) {
	  keys = keys || [];

	  if (!isarray(keys)) {
	    options = keys;
	    keys = [];
	  } else if (!options) {
	    options = {};
	  }

	  if (path instanceof RegExp) {
	    return regexpToRegexp(path, keys)
	  }

	  if (isarray(path)) {
	    return arrayToRegexp(path, keys, options)
	  }

	  return stringToRegexp(path, keys, options)
	}

	pathToRegexp_1.parse = parse_1;
	pathToRegexp_1.compile = compile_1;
	pathToRegexp_1.tokensToFunction = tokensToFunction_1;
	pathToRegexp_1.tokensToRegExp = tokensToRegExp_1;

	/**
	   * Module dependencies.
	   */



	  /**
	   * Short-cuts for global-object checks
	   */

	  var hasDocument = ('undefined' !== typeof document);
	  var hasWindow = ('undefined' !== typeof window);
	  var hasHistory = ('undefined' !== typeof history);
	  var hasProcess = typeof process !== 'undefined';

	  /**
	   * Detect click event
	   */
	  var clickEvent = hasDocument && document.ontouchstart ? 'touchstart' : 'click';

	  /**
	   * To work properly with the URL
	   * history.location generated polyfill in https://github.com/devote/HTML5-History-API
	   */

	  var isLocation = hasWindow && !!(window.history.location || window.location);

	  /**
	   * The page instance
	   * @api private
	   */
	  function Page() {
	    // public things
	    this.callbacks = [];
	    this.exits = [];
	    this.current = '';
	    this.len = 0;

	    // private things
	    this._decodeURLComponents = true;
	    this._base = '';
	    this._strict = false;
	    this._running = false;
	    this._hashbang = false;

	    // bound functions
	    this.clickHandler = this.clickHandler.bind(this);
	    this._onpopstate = this._onpopstate.bind(this);
	  }

	  /**
	   * Configure the instance of page. This can be called multiple times.
	   *
	   * @param {Object} options
	   * @api public
	   */

	  Page.prototype.configure = function(options) {
	    var opts = options || {};

	    this._window = opts.window || (hasWindow && window);
	    this._decodeURLComponents = opts.decodeURLComponents !== false;
	    this._popstate = opts.popstate !== false && hasWindow;
	    this._click = opts.click !== false && hasDocument;
	    this._hashbang = !!opts.hashbang;

	    var _window = this._window;
	    if(this._popstate) {
	      _window.addEventListener('popstate', this._onpopstate, false);
	    } else if(hasWindow) {
	      _window.removeEventListener('popstate', this._onpopstate, false);
	    }

	    if (this._click) {
	      _window.document.addEventListener(clickEvent, this.clickHandler, false);
	    } else if(hasDocument) {
	      _window.document.removeEventListener(clickEvent, this.clickHandler, false);
	    }

	    if(this._hashbang && hasWindow && !hasHistory) {
	      _window.addEventListener('hashchange', this._onpopstate, false);
	    } else if(hasWindow) {
	      _window.removeEventListener('hashchange', this._onpopstate, false);
	    }
	  };

	  /**
	   * Get or set basepath to `path`.
	   *
	   * @param {string} path
	   * @api public
	   */

	  Page.prototype.base = function(path) {
	    if (0 === arguments.length) return this._base;
	    this._base = path;
	  };

	  /**
	   * Gets the `base`, which depends on whether we are using History or
	   * hashbang routing.

	   * @api private
	   */
	  Page.prototype._getBase = function() {
	    var base = this._base;
	    if(!!base) return base;
	    var loc = hasWindow && this._window && this._window.location;

	    if(hasWindow && this._hashbang && loc && loc.protocol === 'file:') {
	      base = loc.pathname;
	    }

	    return base;
	  };

	  /**
	   * Get or set strict path matching to `enable`
	   *
	   * @param {boolean} enable
	   * @api public
	   */

	  Page.prototype.strict = function(enable) {
	    if (0 === arguments.length) return this._strict;
	    this._strict = enable;
	  };


	  /**
	   * Bind with the given `options`.
	   *
	   * Options:
	   *
	   *    - `click` bind to click events [true]
	   *    - `popstate` bind to popstate [true]
	   *    - `dispatch` perform initial dispatch [true]
	   *
	   * @param {Object} options
	   * @api public
	   */

	  Page.prototype.start = function(options) {
	    var opts = options || {};
	    this.configure(opts);

	    if (false === opts.dispatch) return;
	    this._running = true;

	    var url;
	    if(isLocation) {
	      var window = this._window;
	      var loc = window.location;

	      if(this._hashbang && ~loc.hash.indexOf('#!')) {
	        url = loc.hash.substr(2) + loc.search;
	      } else if (this._hashbang) {
	        url = loc.search + loc.hash;
	      } else {
	        url = loc.pathname + loc.search + loc.hash;
	      }
	    }

	    this.replace(url, null, true, opts.dispatch);
	  };

	  /**
	   * Unbind click and popstate event handlers.
	   *
	   * @api public
	   */

	  Page.prototype.stop = function() {
	    if (!this._running) return;
	    this.current = '';
	    this.len = 0;
	    this._running = false;

	    var window = this._window;
	    this._click && window.document.removeEventListener(clickEvent, this.clickHandler, false);
	    hasWindow && window.removeEventListener('popstate', this._onpopstate, false);
	    hasWindow && window.removeEventListener('hashchange', this._onpopstate, false);
	  };

	  /**
	   * Show `path` with optional `state` object.
	   *
	   * @param {string} path
	   * @param {Object=} state
	   * @param {boolean=} dispatch
	   * @param {boolean=} push
	   * @return {!Context}
	   * @api public
	   */

	  Page.prototype.show = function(path, state, dispatch, push) {
	    var ctx = new Context(path, state, this),
	      prev = this.prevContext;
	    this.prevContext = ctx;
	    this.current = ctx.path;
	    if (false !== dispatch) this.dispatch(ctx, prev);
	    if (false !== ctx.handled && false !== push) ctx.pushState();
	    return ctx;
	  };

	  /**
	   * Goes back in the history
	   * Back should always let the current route push state and then go back.
	   *
	   * @param {string} path - fallback path to go back if no more history exists, if undefined defaults to page.base
	   * @param {Object=} state
	   * @api public
	   */

	  Page.prototype.back = function(path, state) {
	    var page = this;
	    if (this.len > 0) {
	      var window = this._window;
	      // this may need more testing to see if all browsers
	      // wait for the next tick to go back in history
	      hasHistory && window.history.back();
	      this.len--;
	    } else if (path) {
	      setTimeout(function() {
	        page.show(path, state);
	      });
	    } else {
	      setTimeout(function() {
	        page.show(page._getBase(), state);
	      });
	    }
	  };

	  /**
	   * Register route to redirect from one path to other
	   * or just redirect to another route
	   *
	   * @param {string} from - if param 'to' is undefined redirects to 'from'
	   * @param {string=} to
	   * @api public
	   */
	  Page.prototype.redirect = function(from, to) {
	    var inst = this;

	    // Define route from a path to another
	    if ('string' === typeof from && 'string' === typeof to) {
	      page.call(this, from, function(e) {
	        setTimeout(function() {
	          inst.replace(/** @type {!string} */ (to));
	        }, 0);
	      });
	    }

	    // Wait for the push state and replace it with another
	    if ('string' === typeof from && 'undefined' === typeof to) {
	      setTimeout(function() {
	        inst.replace(from);
	      }, 0);
	    }
	  };

	  /**
	   * Replace `path` with optional `state` object.
	   *
	   * @param {string} path
	   * @param {Object=} state
	   * @param {boolean=} init
	   * @param {boolean=} dispatch
	   * @return {!Context}
	   * @api public
	   */


	  Page.prototype.replace = function(path, state, init, dispatch) {
	    var ctx = new Context(path, state, this),
	      prev = this.prevContext;
	    this.prevContext = ctx;
	    this.current = ctx.path;
	    ctx.init = init;
	    ctx.save(); // save before dispatching, which may redirect
	    if (false !== dispatch) this.dispatch(ctx, prev);
	    return ctx;
	  };

	  /**
	   * Dispatch the given `ctx`.
	   *
	   * @param {Context} ctx
	   * @api private
	   */

	  Page.prototype.dispatch = function(ctx, prev) {
	    var i = 0, j = 0, page = this;

	    function nextExit() {
	      var fn = page.exits[j++];
	      if (!fn) return nextEnter();
	      fn(prev, nextExit);
	    }

	    function nextEnter() {
	      var fn = page.callbacks[i++];

	      if (ctx.path !== page.current) {
	        ctx.handled = false;
	        return;
	      }
	      if (!fn) return unhandled.call(page, ctx);
	      fn(ctx, nextEnter);
	    }

	    if (prev) {
	      nextExit();
	    } else {
	      nextEnter();
	    }
	  };

	  /**
	   * Register an exit route on `path` with
	   * callback `fn()`, which will be called
	   * on the previous context when a new
	   * page is visited.
	   */
	  Page.prototype.exit = function(path, fn) {
	    if (typeof path === 'function') {
	      return this.exit('*', path);
	    }

	    var route = new Route(path, null, this);
	    for (var i = 1; i < arguments.length; ++i) {
	      this.exits.push(route.middleware(arguments[i]));
	    }
	  };

	  /**
	   * Handle "click" events.
	   */

	  /* jshint +W054 */
	  Page.prototype.clickHandler = function(e) {
	    if (1 !== this._which(e)) return;

	    if (e.metaKey || e.ctrlKey || e.shiftKey) return;
	    if (e.defaultPrevented) return;

	    // ensure link
	    // use shadow dom when available if not, fall back to composedPath()
	    // for browsers that only have shady
	    var el = e.target;
	    var eventPath = e.path || (e.composedPath ? e.composedPath() : null);

	    if(eventPath) {
	      for (var i = 0; i < eventPath.length; i++) {
	        if (!eventPath[i].nodeName) continue;
	        if (eventPath[i].nodeName.toUpperCase() !== 'A') continue;
	        if (!eventPath[i].href) continue;

	        el = eventPath[i];
	        break;
	      }
	    }

	    // continue ensure link
	    // el.nodeName for svg links are 'a' instead of 'A'
	    while (el && 'A' !== el.nodeName.toUpperCase()) el = el.parentNode;
	    if (!el || 'A' !== el.nodeName.toUpperCase()) return;

	    // check if link is inside an svg
	    // in this case, both href and target are always inside an object
	    var svg = (typeof el.href === 'object') && el.href.constructor.name === 'SVGAnimatedString';

	    // Ignore if tag has
	    // 1. "download" attribute
	    // 2. rel="external" attribute
	    if (el.hasAttribute('download') || el.getAttribute('rel') === 'external') return;

	    // ensure non-hash for the same path
	    var link = el.getAttribute('href');
	    if(!this._hashbang && this._samePath(el) && (el.hash || '#' === link)) return;

	    // Check for mailto: in the href
	    if (link && link.indexOf('mailto:') > -1) return;

	    // check target
	    // svg target is an object and its desired value is in .baseVal property
	    if (svg ? el.target.baseVal : el.target) return;

	    // x-origin
	    // note: svg links that are not relative don't call click events (and skip page.js)
	    // consequently, all svg links tested inside page.js are relative and in the same origin
	    if (!svg && !this.sameOrigin(el.href)) return;

	    // rebuild path
	    // There aren't .pathname and .search properties in svg links, so we use href
	    // Also, svg href is an object and its desired value is in .baseVal property
	    var path = svg ? el.href.baseVal : (el.pathname + el.search + (el.hash || ''));

	    path = path[0] !== '/' ? '/' + path : path;

	    // strip leading "/[drive letter]:" on NW.js on Windows
	    if (hasProcess && path.match(/^\/[a-zA-Z]:\//)) {
	      path = path.replace(/^\/[a-zA-Z]:\//, '/');
	    }

	    // same page
	    var orig = path;
	    var pageBase = this._getBase();

	    if (path.indexOf(pageBase) === 0) {
	      path = path.substr(pageBase.length);
	    }

	    if (this._hashbang) path = path.replace('#!', '');

	    if (pageBase && orig === path && (!isLocation || this._window.location.protocol !== 'file:')) {
	      return;
	    }

	    e.preventDefault();
	    this.show(orig);
	  };

	  /**
	   * Handle "populate" events.
	   * @api private
	   */

	  Page.prototype._onpopstate = (function () {
	    var loaded = false;
	    if ( ! hasWindow ) {
	      return function () {};
	    }
	    if (hasDocument && document.readyState === 'complete') {
	      loaded = true;
	    } else {
	      window.addEventListener('load', function() {
	        setTimeout(function() {
	          loaded = true;
	        }, 0);
	      });
	    }
	    return function onpopstate(e) {
	      if (!loaded) return;
	      var page = this;
	      if (e.state) {
	        var path = e.state.path;
	        page.replace(path, e.state);
	      } else if (isLocation) {
	        var loc = page._window.location;
	        page.show(loc.pathname + loc.search + loc.hash, undefined, undefined, false);
	      }
	    };
	  })();

	  /**
	   * Event button.
	   */
	  Page.prototype._which = function(e) {
	    e = e || (hasWindow && this._window.event);
	    return null == e.which ? e.button : e.which;
	  };

	  /**
	   * Convert to a URL object
	   * @api private
	   */
	  Page.prototype._toURL = function(href) {
	    var window = this._window;
	    if(typeof URL === 'function' && isLocation) {
	      return new URL(href, window.location.toString());
	    } else if (hasDocument) {
	      var anc = window.document.createElement('a');
	      anc.href = href;
	      return anc;
	    }
	  };

	  /**
	   * Check if `href` is the same origin.
	   * @param {string} href
	   * @api public
	   */

	  Page.prototype.sameOrigin = function(href) {
	    if(!href || !isLocation) return false;

	    var url = this._toURL(href);
	    var window = this._window;

	    var loc = window.location;

	    /*
	       when the port is the default http port 80, internet explorer 11
	       returns an empty string for loc.port, so we need to compare loc.port
	       with an empty string if url.port is the default port 80.
	    */
	    return loc.protocol === url.protocol &&
	      loc.hostname === url.hostname &&
	      (loc.port === url.port || loc.port === '' && url.port === 80);
	  };

	  /**
	   * @api private
	   */
	  Page.prototype._samePath = function(url) {
	    if(!isLocation) return false;
	    var window = this._window;
	    var loc = window.location;
	    return url.pathname === loc.pathname &&
	      url.search === loc.search;
	  };

	  /**
	   * Remove URL encoding from the given `str`.
	   * Accommodates whitespace in both x-www-form-urlencoded
	   * and regular percent-encoded form.
	   *
	   * @param {string} val - URL component to decode
	   * @api private
	   */
	  Page.prototype._decodeURLEncodedURIComponent = function(val) {
	    if (typeof val !== 'string') { return val; }
	    return this._decodeURLComponents ? decodeURIComponent(val.replace(/\+/g, ' ')) : val;
	  };

	  /**
	   * Create a new `page` instance and function
	   */
	  function createPage() {
	    var pageInstance = new Page();

	    function pageFn(/* args */) {
	      return page.apply(pageInstance, arguments);
	    }

	    // Copy all of the things over. In 2.0 maybe we use setPrototypeOf
	    pageFn.callbacks = pageInstance.callbacks;
	    pageFn.exits = pageInstance.exits;
	    pageFn.base = pageInstance.base.bind(pageInstance);
	    pageFn.strict = pageInstance.strict.bind(pageInstance);
	    pageFn.start = pageInstance.start.bind(pageInstance);
	    pageFn.stop = pageInstance.stop.bind(pageInstance);
	    pageFn.show = pageInstance.show.bind(pageInstance);
	    pageFn.back = pageInstance.back.bind(pageInstance);
	    pageFn.redirect = pageInstance.redirect.bind(pageInstance);
	    pageFn.replace = pageInstance.replace.bind(pageInstance);
	    pageFn.dispatch = pageInstance.dispatch.bind(pageInstance);
	    pageFn.exit = pageInstance.exit.bind(pageInstance);
	    pageFn.configure = pageInstance.configure.bind(pageInstance);
	    pageFn.sameOrigin = pageInstance.sameOrigin.bind(pageInstance);
	    pageFn.clickHandler = pageInstance.clickHandler.bind(pageInstance);

	    pageFn.create = createPage;

	    Object.defineProperty(pageFn, 'len', {
	      get: function(){
	        return pageInstance.len;
	      },
	      set: function(val) {
	        pageInstance.len = val;
	      }
	    });

	    Object.defineProperty(pageFn, 'current', {
	      get: function(){
	        return pageInstance.current;
	      },
	      set: function(val) {
	        pageInstance.current = val;
	      }
	    });

	    // In 2.0 these can be named exports
	    pageFn.Context = Context;
	    pageFn.Route = Route;

	    return pageFn;
	  }

	  /**
	   * Register `path` with callback `fn()`,
	   * or route `path`, or redirection,
	   * or `page.start()`.
	   *
	   *   page(fn);
	   *   page('*', fn);
	   *   page('/user/:id', load, user);
	   *   page('/user/' + user.id, { some: 'thing' });
	   *   page('/user/' + user.id);
	   *   page('/from', '/to')
	   *   page();
	   *
	   * @param {string|!Function|!Object} path
	   * @param {Function=} fn
	   * @api public
	   */

	  function page(path, fn) {
	    // <callback>
	    if ('function' === typeof path) {
	      return page.call(this, '*', path);
	    }

	    // route <path> to <callback ...>
	    if ('function' === typeof fn) {
	      var route = new Route(/** @type {string} */ (path), null, this);
	      for (var i = 1; i < arguments.length; ++i) {
	        this.callbacks.push(route.middleware(arguments[i]));
	      }
	      // show <path> with [state]
	    } else if ('string' === typeof path) {
	      this['string' === typeof fn ? 'redirect' : 'show'](path, fn);
	      // start [options]
	    } else {
	      this.start(path);
	    }
	  }

	  /**
	   * Unhandled `ctx`. When it's not the initial
	   * popstate then redirect. If you wish to handle
	   * 404s on your own use `page('*', callback)`.
	   *
	   * @param {Context} ctx
	   * @api private
	   */
	  function unhandled(ctx) {
	    if (ctx.handled) return;
	    var current;
	    var page = this;
	    var window = page._window;

	    if (page._hashbang) {
	      current = isLocation && this._getBase() + window.location.hash.replace('#!', '');
	    } else {
	      current = isLocation && window.location.pathname + window.location.search;
	    }

	    if (current === ctx.canonicalPath) return;
	    page.stop();
	    ctx.handled = false;
	    isLocation && (window.location.href = ctx.canonicalPath);
	  }

	  /**
	   * Escapes RegExp characters in the given string.
	   *
	   * @param {string} s
	   * @api private
	   */
	  function escapeRegExp(s) {
	    return s.replace(/([.+*?=^!:${}()[\]|/\\])/g, '\\$1');
	  }

	  /**
	   * Initialize a new "request" `Context`
	   * with the given `path` and optional initial `state`.
	   *
	   * @constructor
	   * @param {string} path
	   * @param {Object=} state
	   * @api public
	   */

	  function Context(path, state, pageInstance) {
	    var _page = this.page = pageInstance || page;
	    var window = _page._window;
	    var hashbang = _page._hashbang;

	    var pageBase = _page._getBase();
	    if ('/' === path[0] && 0 !== path.indexOf(pageBase)) path = pageBase + (hashbang ? '#!' : '') + path;
	    var i = path.indexOf('?');

	    this.canonicalPath = path;
	    var re = new RegExp('^' + escapeRegExp(pageBase));
	    this.path = path.replace(re, '') || '/';
	    if (hashbang) this.path = this.path.replace('#!', '') || '/';

	    this.title = (hasDocument && window.document.title);
	    this.state = state || {};
	    this.state.path = path;
	    this.querystring = ~i ? _page._decodeURLEncodedURIComponent(path.slice(i + 1)) : '';
	    this.pathname = _page._decodeURLEncodedURIComponent(~i ? path.slice(0, i) : path);
	    this.params = {};

	    // fragment
	    this.hash = '';
	    if (!hashbang) {
	      if (!~this.path.indexOf('#')) return;
	      var parts = this.path.split('#');
	      this.path = this.pathname = parts[0];
	      this.hash = _page._decodeURLEncodedURIComponent(parts[1]) || '';
	      this.querystring = this.querystring.split('#')[0];
	    }
	  }

	  /**
	   * Push state.
	   *
	   * @api private
	   */

	  Context.prototype.pushState = function() {
	    var page = this.page;
	    var window = page._window;
	    var hashbang = page._hashbang;

	    page.len++;
	    if (hasHistory) {
	        window.history.pushState(this.state, this.title,
	          hashbang && this.path !== '/' ? '#!' + this.path : this.canonicalPath);
	    }
	  };

	  /**
	   * Save the context state.
	   *
	   * @api public
	   */

	  Context.prototype.save = function() {
	    var page = this.page;
	    if (hasHistory) {
	        page._window.history.replaceState(this.state, this.title,
	          page._hashbang && this.path !== '/' ? '#!' + this.path : this.canonicalPath);
	    }
	  };

	  /**
	   * Initialize `Route` with the given HTTP `path`,
	   * and an array of `callbacks` and `options`.
	   *
	   * Options:
	   *
	   *   - `sensitive`    enable case-sensitive routes
	   *   - `strict`       enable strict matching for trailing slashes
	   *
	   * @constructor
	   * @param {string} path
	   * @param {Object=} options
	   * @api private
	   */

	  function Route(path, options, page) {
	    var _page = this.page = page || globalPage;
	    var opts = options || {};
	    opts.strict = opts.strict || page._strict;
	    this.path = (path === '*') ? '(.*)' : path;
	    this.method = 'GET';
	    this.regexp = pathToRegexp_1(this.path, this.keys = [], opts);
	  }

	  /**
	   * Return route middleware with
	   * the given callback `fn()`.
	   *
	   * @param {Function} fn
	   * @return {Function}
	   * @api public
	   */

	  Route.prototype.middleware = function(fn) {
	    var self = this;
	    return function(ctx, next) {
	      if (self.match(ctx.path, ctx.params)) return fn(ctx, next);
	      next();
	    };
	  };

	  /**
	   * Check if this route matches `path`, if so
	   * populate `params`.
	   *
	   * @param {string} path
	   * @param {Object} params
	   * @return {boolean}
	   * @api private
	   */

	  Route.prototype.match = function(path, params) {
	    var keys = this.keys,
	      qsIndex = path.indexOf('?'),
	      pathname = ~qsIndex ? path.slice(0, qsIndex) : path,
	      m = this.regexp.exec(decodeURIComponent(pathname));

	    if (!m) return false;
		  
	    delete params[0];

	    for (var i = 1, len = m.length; i < len; ++i) {
	      var key = keys[i - 1];
	      var val = this.page._decodeURLEncodedURIComponent(m[i]);
	      if (val !== undefined || !(hasOwnProperty.call(params, key.name))) {
	        params[key.name] = val;
	      }
	    }

	    return true;
	  };


	  /**
	   * Module exports.
	   */

	  var globalPage = createPage();
	  var page_js = globalPage;
	  var default_1 = globalPage;

	page_js.default = default_1;

	return page_js;

	})));
	});

	// `Array.prototype.fill` method implementation
	// https://tc39.github.io/ecma262/#sec-array.prototype.fill
	var arrayFill = function fill(value /* , start = 0, end = @length */) {
	  var O = toObject(this);
	  var length = toLength(O.length);
	  var argumentsLength = arguments.length;
	  var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : undefined, length);
	  var end = argumentsLength > 2 ? arguments[2] : undefined;
	  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
	  while (endPos > index) O[index++] = value;
	  return O;
	};

	var UNSCOPABLES = wellKnownSymbol('unscopables');
	var ArrayPrototype$1 = Array.prototype;

	// Array.prototype[@@unscopables]
	// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
	if (ArrayPrototype$1[UNSCOPABLES] == undefined) {
	  createNonEnumerableProperty(ArrayPrototype$1, UNSCOPABLES, objectCreate(null));
	}

	// add a key to Array.prototype[@@unscopables]
	var addToUnscopables = function (key) {
	  ArrayPrototype$1[UNSCOPABLES][key] = true;
	};

	// `Array.prototype.fill` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.fill
	_export({ target: 'Array', proto: true }, {
	  fill: arrayFill
	});

	// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
	addToUnscopables('fill');

	// `Array.from` method implementation
	// https://tc39.github.io/ecma262/#sec-array.from
	var arrayFrom = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
	  var O = toObject(arrayLike);
	  var C = typeof this == 'function' ? this : Array;
	  var argumentsLength = arguments.length;
	  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
	  var mapping = mapfn !== undefined;
	  var index = 0;
	  var iteratorMethod = getIteratorMethod(O);
	  var length, result, step, iterator, next;
	  if (mapping) mapfn = bindContext(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2);
	  // if the target is not iterable or it's an array with the default iterator - use a simple case
	  if (iteratorMethod != undefined && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {
	    iterator = iteratorMethod.call(O);
	    next = iterator.next;
	    result = new C();
	    for (;!(step = next.call(iterator)).done; index++) {
	      createProperty(result, index, mapping
	        ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true)
	        : step.value
	      );
	    }
	  } else {
	    length = toLength(O.length);
	    result = new C(length);
	    for (;length > index; index++) {
	      createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
	    }
	  }
	  result.length = index;
	  return result;
	};

	var INCORRECT_ITERATION$1 = !checkCorrectnessOfIteration(function (iterable) {
	  Array.from(iterable);
	});

	// `Array.from` method
	// https://tc39.github.io/ecma262/#sec-array.from
	_export({ target: 'Array', stat: true, forced: INCORRECT_ITERATION$1 }, {
	  from: arrayFrom
	});

	var $indexOf = arrayIncludes.indexOf;


	var nativeIndexOf = [].indexOf;

	var NEGATIVE_ZERO = !!nativeIndexOf && 1 / [1].indexOf(1, -0) < 0;
	var SLOPPY_METHOD$1 = sloppyArrayMethod('indexOf');

	// `Array.prototype.indexOf` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.indexof
	_export({ target: 'Array', proto: true, forced: NEGATIVE_ZERO || SLOPPY_METHOD$1 }, {
	  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
	    return NEGATIVE_ZERO
	      // convert -0 to +0
	      ? nativeIndexOf.apply(this, arguments) || 0
	      : $indexOf(this, searchElement, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var correctPrototypeGetter = !fails(function () {
	  function F() { /* empty */ }
	  F.prototype.constructor = null;
	  return Object.getPrototypeOf(new F()) !== F.prototype;
	});

	var IE_PROTO$1 = sharedKey('IE_PROTO');
	var ObjectPrototype$1 = Object.prototype;

	// `Object.getPrototypeOf` method
	// https://tc39.github.io/ecma262/#sec-object.getprototypeof
	var objectGetPrototypeOf = correctPrototypeGetter ? Object.getPrototypeOf : function (O) {
	  O = toObject(O);
	  if (has(O, IE_PROTO$1)) return O[IE_PROTO$1];
	  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectPrototype$1 : null;
	};

	var ITERATOR$3 = wellKnownSymbol('iterator');
	var BUGGY_SAFARI_ITERATORS = false;

	var returnThis = function () { return this; };

	// `%IteratorPrototype%` object
	// https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object
	var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

	if ([].keys) {
	  arrayIterator = [].keys();
	  // Safari 8 has buggy iterators w/o `next`
	  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
	  else {
	    PrototypeOfArrayIteratorPrototype = objectGetPrototypeOf(objectGetPrototypeOf(arrayIterator));
	    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
	  }
	}

	if (IteratorPrototype == undefined) IteratorPrototype = {};

	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	if ( !has(IteratorPrototype, ITERATOR$3)) {
	  createNonEnumerableProperty(IteratorPrototype, ITERATOR$3, returnThis);
	}

	var iteratorsCore = {
	  IteratorPrototype: IteratorPrototype,
	  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
	};

	var IteratorPrototype$1 = iteratorsCore.IteratorPrototype;





	var returnThis$1 = function () { return this; };

	var createIteratorConstructor = function (IteratorConstructor, NAME, next) {
	  var TO_STRING_TAG = NAME + ' Iterator';
	  IteratorConstructor.prototype = objectCreate(IteratorPrototype$1, { next: createPropertyDescriptor(1, next) });
	  setToStringTag(IteratorConstructor, TO_STRING_TAG, false);
	  iterators[TO_STRING_TAG] = returnThis$1;
	  return IteratorConstructor;
	};

	var IteratorPrototype$2 = iteratorsCore.IteratorPrototype;
	var BUGGY_SAFARI_ITERATORS$1 = iteratorsCore.BUGGY_SAFARI_ITERATORS;
	var ITERATOR$4 = wellKnownSymbol('iterator');
	var KEYS = 'keys';
	var VALUES = 'values';
	var ENTRIES = 'entries';

	var returnThis$2 = function () { return this; };

	var defineIterator = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
	  createIteratorConstructor(IteratorConstructor, NAME, next);

	  var getIterationMethod = function (KIND) {
	    if (KIND === DEFAULT && defaultIterator) return defaultIterator;
	    if (!BUGGY_SAFARI_ITERATORS$1 && KIND in IterablePrototype) return IterablePrototype[KIND];
	    switch (KIND) {
	      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };
	      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };
	      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };
	    } return function () { return new IteratorConstructor(this); };
	  };

	  var TO_STRING_TAG = NAME + ' Iterator';
	  var INCORRECT_VALUES_NAME = false;
	  var IterablePrototype = Iterable.prototype;
	  var nativeIterator = IterablePrototype[ITERATOR$4]
	    || IterablePrototype['@@iterator']
	    || DEFAULT && IterablePrototype[DEFAULT];
	  var defaultIterator = !BUGGY_SAFARI_ITERATORS$1 && nativeIterator || getIterationMethod(DEFAULT);
	  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
	  var CurrentIteratorPrototype, methods, KEY;

	  // fix native
	  if (anyNativeIterator) {
	    CurrentIteratorPrototype = objectGetPrototypeOf(anyNativeIterator.call(new Iterable()));
	    if (IteratorPrototype$2 !== Object.prototype && CurrentIteratorPrototype.next) {
	      if ( objectGetPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype$2) {
	        if (objectSetPrototypeOf) {
	          objectSetPrototypeOf(CurrentIteratorPrototype, IteratorPrototype$2);
	        } else if (typeof CurrentIteratorPrototype[ITERATOR$4] != 'function') {
	          createNonEnumerableProperty(CurrentIteratorPrototype, ITERATOR$4, returnThis$2);
	        }
	      }
	      // Set @@toStringTag to native iterators
	      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true);
	    }
	  }

	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
	    INCORRECT_VALUES_NAME = true;
	    defaultIterator = function values() { return nativeIterator.call(this); };
	  }

	  // define iterator
	  if ( IterablePrototype[ITERATOR$4] !== defaultIterator) {
	    createNonEnumerableProperty(IterablePrototype, ITERATOR$4, defaultIterator);
	  }
	  iterators[NAME] = defaultIterator;

	  // export additional methods
	  if (DEFAULT) {
	    methods = {
	      values: getIterationMethod(VALUES),
	      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
	      entries: getIterationMethod(ENTRIES)
	    };
	    if (FORCED) for (KEY in methods) {
	      if (BUGGY_SAFARI_ITERATORS$1 || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
	        redefine(IterablePrototype, KEY, methods[KEY]);
	      }
	    } else _export({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS$1 || INCORRECT_VALUES_NAME }, methods);
	  }

	  return methods;
	};

	var ARRAY_ITERATOR = 'Array Iterator';
	var setInternalState$2 = internalState.set;
	var getInternalState$2 = internalState.getterFor(ARRAY_ITERATOR);

	// `Array.prototype.entries` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.entries
	// `Array.prototype.keys` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.keys
	// `Array.prototype.values` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.values
	// `Array.prototype[@@iterator]` method
	// https://tc39.github.io/ecma262/#sec-array.prototype-@@iterator
	// `CreateArrayIterator` internal method
	// https://tc39.github.io/ecma262/#sec-createarrayiterator
	var es_array_iterator = defineIterator(Array, 'Array', function (iterated, kind) {
	  setInternalState$2(this, {
	    type: ARRAY_ITERATOR,
	    target: toIndexedObject(iterated), // target
	    index: 0,                          // next index
	    kind: kind                         // kind
	  });
	// `%ArrayIteratorPrototype%.next` method
	// https://tc39.github.io/ecma262/#sec-%arrayiteratorprototype%.next
	}, function () {
	  var state = getInternalState$2(this);
	  var target = state.target;
	  var kind = state.kind;
	  var index = state.index++;
	  if (!target || index >= target.length) {
	    state.target = undefined;
	    return { value: undefined, done: true };
	  }
	  if (kind == 'keys') return { value: index, done: false };
	  if (kind == 'values') return { value: target[index], done: false };
	  return { value: [index, target[index]], done: false };
	}, 'values');

	// argumentsList[@@iterator] is %ArrayProto_values%
	// https://tc39.github.io/ecma262/#sec-createunmappedargumentsobject
	// https://tc39.github.io/ecma262/#sec-createmappedargumentsobject
	iterators.Arguments = iterators.Array;

	// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');

	var $map = arrayIteration.map;



	var HAS_SPECIES_SUPPORT$1 = arrayMethodHasSpeciesSupport('map');
	// FF49- issue
	var USES_TO_LENGTH$1 = HAS_SPECIES_SUPPORT$1 && !fails(function () {
	  [].map.call({ length: -1, 0: 1 }, function (it) { throw it; });
	});

	// `Array.prototype.map` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.map
	// with adding support of @@species
	_export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$1 || !USES_TO_LENGTH$1 }, {
	  map: function map(callbackfn /* , thisArg */) {
	    return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var SPECIES$6 = wellKnownSymbol('species');
	var nativeSlice = [].slice;
	var max$2 = Math.max;

	// `Array.prototype.slice` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.slice
	// fallback for not array-like ES3 strings and DOM objects
	_export({ target: 'Array', proto: true, forced: !arrayMethodHasSpeciesSupport('slice') }, {
	  slice: function slice(start, end) {
	    var O = toIndexedObject(this);
	    var length = toLength(O.length);
	    var k = toAbsoluteIndex(start, length);
	    var fin = toAbsoluteIndex(end === undefined ? length : end, length);
	    // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible
	    var Constructor, result, n;
	    if (isArray(O)) {
	      Constructor = O.constructor;
	      // cross-realm fallback
	      if (typeof Constructor == 'function' && (Constructor === Array || isArray(Constructor.prototype))) {
	        Constructor = undefined;
	      } else if (isObject(Constructor)) {
	        Constructor = Constructor[SPECIES$6];
	        if (Constructor === null) Constructor = undefined;
	      }
	      if (Constructor === Array || Constructor === undefined) {
	        return nativeSlice.call(O, k, fin);
	      }
	    }
	    result = new (Constructor === undefined ? Array : Constructor)(max$2(fin - k, 0));
	    for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);
	    result.length = n;
	    return result;
	  }
	});

	var max$3 = Math.max;
	var min$3 = Math.min;
	var MAX_SAFE_INTEGER$1 = 0x1FFFFFFFFFFFFF;
	var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded';

	// `Array.prototype.splice` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.splice
	// with adding support of @@species
	_export({ target: 'Array', proto: true, forced: !arrayMethodHasSpeciesSupport('splice') }, {
	  splice: function splice(start, deleteCount /* , ...items */) {
	    var O = toObject(this);
	    var len = toLength(O.length);
	    var actualStart = toAbsoluteIndex(start, len);
	    var argumentsLength = arguments.length;
	    var insertCount, actualDeleteCount, A, k, from, to;
	    if (argumentsLength === 0) {
	      insertCount = actualDeleteCount = 0;
	    } else if (argumentsLength === 1) {
	      insertCount = 0;
	      actualDeleteCount = len - actualStart;
	    } else {
	      insertCount = argumentsLength - 2;
	      actualDeleteCount = min$3(max$3(toInteger(deleteCount), 0), len - actualStart);
	    }
	    if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER$1) {
	      throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
	    }
	    A = arraySpeciesCreate(O, actualDeleteCount);
	    for (k = 0; k < actualDeleteCount; k++) {
	      from = actualStart + k;
	      if (from in O) createProperty(A, k, O[from]);
	    }
	    A.length = actualDeleteCount;
	    if (insertCount < actualDeleteCount) {
	      for (k = actualStart; k < len - actualDeleteCount; k++) {
	        from = k + actualDeleteCount;
	        to = k + insertCount;
	        if (from in O) O[to] = O[from];
	        else delete O[to];
	      }
	      for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];
	    } else if (insertCount > actualDeleteCount) {
	      for (k = len - actualDeleteCount; k > actualStart; k--) {
	        from = k + actualDeleteCount - 1;
	        to = k + insertCount - 1;
	        if (from in O) O[to] = O[from];
	        else delete O[to];
	      }
	    }
	    for (k = 0; k < insertCount; k++) {
	      O[k + actualStart] = arguments[k + 2];
	    }
	    O.length = len - actualDeleteCount + insertCount;
	    return A;
	  }
	});

	var DatePrototype = Date.prototype;
	var INVALID_DATE = 'Invalid Date';
	var TO_STRING$1 = 'toString';
	var nativeDateToString = DatePrototype[TO_STRING$1];
	var getTime = DatePrototype.getTime;

	// `Date.prototype.toString` method
	// https://tc39.github.io/ecma262/#sec-date.prototype.tostring
	if (new Date(NaN) + '' != INVALID_DATE) {
	  redefine(DatePrototype, TO_STRING$1, function toString() {
	    var value = getTime.call(this);
	    // eslint-disable-next-line no-self-compare
	    return value === value ? nativeDateToString.call(this) : INVALID_DATE;
	  });
	}

	var freezing = !fails(function () {
	  return Object.isExtensible(Object.preventExtensions({}));
	});

	var internalMetadata = createCommonjsModule(function (module) {
	var defineProperty = objectDefineProperty.f;



	var METADATA = uid('meta');
	var id = 0;

	var isExtensible = Object.isExtensible || function () {
	  return true;
	};

	var setMetadata = function (it) {
	  defineProperty(it, METADATA, { value: {
	    objectID: 'O' + ++id, // object ID
	    weakData: {}          // weak collections IDs
	  } });
	};

	var fastKey = function (it, create) {
	  // return a primitive with prefix
	  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if (!has(it, METADATA)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return 'F';
	    // not necessary to add metadata
	    if (!create) return 'E';
	    // add missing metadata
	    setMetadata(it);
	  // return object ID
	  } return it[METADATA].objectID;
	};

	var getWeakData = function (it, create) {
	  if (!has(it, METADATA)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return true;
	    // not necessary to add metadata
	    if (!create) return false;
	    // add missing metadata
	    setMetadata(it);
	  // return the store of weak collections IDs
	  } return it[METADATA].weakData;
	};

	// add metadata on freeze-family methods calling
	var onFreeze = function (it) {
	  if (freezing && meta.REQUIRED && isExtensible(it) && !has(it, METADATA)) setMetadata(it);
	  return it;
	};

	var meta = module.exports = {
	  REQUIRED: false,
	  fastKey: fastKey,
	  getWeakData: getWeakData,
	  onFreeze: onFreeze
	};

	hiddenKeys[METADATA] = true;
	});
	var internalMetadata_1 = internalMetadata.REQUIRED;
	var internalMetadata_2 = internalMetadata.fastKey;
	var internalMetadata_3 = internalMetadata.getWeakData;
	var internalMetadata_4 = internalMetadata.onFreeze;

	var collection = function (CONSTRUCTOR_NAME, wrapper, common) {
	  var IS_MAP = CONSTRUCTOR_NAME.indexOf('Map') !== -1;
	  var IS_WEAK = CONSTRUCTOR_NAME.indexOf('Weak') !== -1;
	  var ADDER = IS_MAP ? 'set' : 'add';
	  var NativeConstructor = global_1[CONSTRUCTOR_NAME];
	  var NativePrototype = NativeConstructor && NativeConstructor.prototype;
	  var Constructor = NativeConstructor;
	  var exported = {};

	  var fixMethod = function (KEY) {
	    var nativeMethod = NativePrototype[KEY];
	    redefine(NativePrototype, KEY,
	      KEY == 'add' ? function add(value) {
	        nativeMethod.call(this, value === 0 ? 0 : value);
	        return this;
	      } : KEY == 'delete' ? function (key) {
	        return IS_WEAK && !isObject(key) ? false : nativeMethod.call(this, key === 0 ? 0 : key);
	      } : KEY == 'get' ? function get(key) {
	        return IS_WEAK && !isObject(key) ? undefined : nativeMethod.call(this, key === 0 ? 0 : key);
	      } : KEY == 'has' ? function has(key) {
	        return IS_WEAK && !isObject(key) ? false : nativeMethod.call(this, key === 0 ? 0 : key);
	      } : function set(key, value) {
	        nativeMethod.call(this, key === 0 ? 0 : key, value);
	        return this;
	      }
	    );
	  };

	  // eslint-disable-next-line max-len
	  if (isForced_1(CONSTRUCTOR_NAME, typeof NativeConstructor != 'function' || !(IS_WEAK || NativePrototype.forEach && !fails(function () {
	    new NativeConstructor().entries().next();
	  })))) {
	    // create collection constructor
	    Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
	    internalMetadata.REQUIRED = true;
	  } else if (isForced_1(CONSTRUCTOR_NAME, true)) {
	    var instance = new Constructor();
	    // early implementations not supports chaining
	    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
	    // V8 ~ Chromium 40- weak-collections throws on primitives, but should return false
	    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
	    // most early implementations doesn't supports iterables, most modern - not close it correctly
	    // eslint-disable-next-line no-new
	    var ACCEPT_ITERABLES = checkCorrectnessOfIteration(function (iterable) { new NativeConstructor(iterable); });
	    // for early implementations -0 and +0 not the same
	    var BUGGY_ZERO = !IS_WEAK && fails(function () {
	      // V8 ~ Chromium 42- fails only with 5+ elements
	      var $instance = new NativeConstructor();
	      var index = 5;
	      while (index--) $instance[ADDER](index, index);
	      return !$instance.has(-0);
	    });

	    if (!ACCEPT_ITERABLES) {
	      Constructor = wrapper(function (dummy, iterable) {
	        anInstance(dummy, Constructor, CONSTRUCTOR_NAME);
	        var that = inheritIfRequired(new NativeConstructor(), dummy, Constructor);
	        if (iterable != undefined) iterate_1(iterable, that[ADDER], that, IS_MAP);
	        return that;
	      });
	      Constructor.prototype = NativePrototype;
	      NativePrototype.constructor = Constructor;
	    }

	    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
	      fixMethod('delete');
	      fixMethod('has');
	      IS_MAP && fixMethod('get');
	    }

	    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);

	    // weak collections should not contains .clear method
	    if (IS_WEAK && NativePrototype.clear) delete NativePrototype.clear;
	  }

	  exported[CONSTRUCTOR_NAME] = Constructor;
	  _export({ global: true, forced: Constructor != NativeConstructor }, exported);

	  setToStringTag(Constructor, CONSTRUCTOR_NAME);

	  if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);

	  return Constructor;
	};

	var defineProperty$5 = objectDefineProperty.f;








	var fastKey = internalMetadata.fastKey;


	var setInternalState$3 = internalState.set;
	var internalStateGetterFor = internalState.getterFor;

	var collectionStrong = {
	  getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
	    var C = wrapper(function (that, iterable) {
	      anInstance(that, C, CONSTRUCTOR_NAME);
	      setInternalState$3(that, {
	        type: CONSTRUCTOR_NAME,
	        index: objectCreate(null),
	        first: undefined,
	        last: undefined,
	        size: 0
	      });
	      if (!descriptors) that.size = 0;
	      if (iterable != undefined) iterate_1(iterable, that[ADDER], that, IS_MAP);
	    });

	    var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

	    var define = function (that, key, value) {
	      var state = getInternalState(that);
	      var entry = getEntry(that, key);
	      var previous, index;
	      // change existing entry
	      if (entry) {
	        entry.value = value;
	      // create new entry
	      } else {
	        state.last = entry = {
	          index: index = fastKey(key, true),
	          key: key,
	          value: value,
	          previous: previous = state.last,
	          next: undefined,
	          removed: false
	        };
	        if (!state.first) state.first = entry;
	        if (previous) previous.next = entry;
	        if (descriptors) state.size++;
	        else that.size++;
	        // add to index
	        if (index !== 'F') state.index[index] = entry;
	      } return that;
	    };

	    var getEntry = function (that, key) {
	      var state = getInternalState(that);
	      // fast case
	      var index = fastKey(key);
	      var entry;
	      if (index !== 'F') return state.index[index];
	      // frozen object case
	      for (entry = state.first; entry; entry = entry.next) {
	        if (entry.key == key) return entry;
	      }
	    };

	    redefineAll(C.prototype, {
	      // 23.1.3.1 Map.prototype.clear()
	      // 23.2.3.2 Set.prototype.clear()
	      clear: function clear() {
	        var that = this;
	        var state = getInternalState(that);
	        var data = state.index;
	        var entry = state.first;
	        while (entry) {
	          entry.removed = true;
	          if (entry.previous) entry.previous = entry.previous.next = undefined;
	          delete data[entry.index];
	          entry = entry.next;
	        }
	        state.first = state.last = undefined;
	        if (descriptors) state.size = 0;
	        else that.size = 0;
	      },
	      // 23.1.3.3 Map.prototype.delete(key)
	      // 23.2.3.4 Set.prototype.delete(value)
	      'delete': function (key) {
	        var that = this;
	        var state = getInternalState(that);
	        var entry = getEntry(that, key);
	        if (entry) {
	          var next = entry.next;
	          var prev = entry.previous;
	          delete state.index[entry.index];
	          entry.removed = true;
	          if (prev) prev.next = next;
	          if (next) next.previous = prev;
	          if (state.first == entry) state.first = next;
	          if (state.last == entry) state.last = prev;
	          if (descriptors) state.size--;
	          else that.size--;
	        } return !!entry;
	      },
	      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
	      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
	      forEach: function forEach(callbackfn /* , that = undefined */) {
	        var state = getInternalState(this);
	        var boundFunction = bindContext(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
	        var entry;
	        while (entry = entry ? entry.next : state.first) {
	          boundFunction(entry.value, entry.key, this);
	          // revert to the last existing entry
	          while (entry && entry.removed) entry = entry.previous;
	        }
	      },
	      // 23.1.3.7 Map.prototype.has(key)
	      // 23.2.3.7 Set.prototype.has(value)
	      has: function has(key) {
	        return !!getEntry(this, key);
	      }
	    });

	    redefineAll(C.prototype, IS_MAP ? {
	      // 23.1.3.6 Map.prototype.get(key)
	      get: function get(key) {
	        var entry = getEntry(this, key);
	        return entry && entry.value;
	      },
	      // 23.1.3.9 Map.prototype.set(key, value)
	      set: function set(key, value) {
	        return define(this, key === 0 ? 0 : key, value);
	      }
	    } : {
	      // 23.2.3.1 Set.prototype.add(value)
	      add: function add(value) {
	        return define(this, value = value === 0 ? 0 : value, value);
	      }
	    });
	    if (descriptors) defineProperty$5(C.prototype, 'size', {
	      get: function () {
	        return getInternalState(this).size;
	      }
	    });
	    return C;
	  },
	  setStrong: function (C, CONSTRUCTOR_NAME, IS_MAP) {
	    var ITERATOR_NAME = CONSTRUCTOR_NAME + ' Iterator';
	    var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);
	    var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME);
	    // add .keys, .values, .entries, [@@iterator]
	    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
	    defineIterator(C, CONSTRUCTOR_NAME, function (iterated, kind) {
	      setInternalState$3(this, {
	        type: ITERATOR_NAME,
	        target: iterated,
	        state: getInternalCollectionState(iterated),
	        kind: kind,
	        last: undefined
	      });
	    }, function () {
	      var state = getInternalIteratorState(this);
	      var kind = state.kind;
	      var entry = state.last;
	      // revert to the last existing entry
	      while (entry && entry.removed) entry = entry.previous;
	      // get next entry
	      if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
	        // or finish the iteration
	        state.target = undefined;
	        return { value: undefined, done: true };
	      }
	      // return step by kind
	      if (kind == 'keys') return { value: entry.key, done: false };
	      if (kind == 'values') return { value: entry.value, done: false };
	      return { value: [entry.key, entry.value], done: false };
	    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

	    // add [@@species], 23.1.2.2, 23.2.2.2
	    setSpecies(CONSTRUCTOR_NAME);
	  }
	};

	// `Map` constructor
	// https://tc39.github.io/ecma262/#sec-map-objects
	var es_map = collection('Map', function (init) {
	  return function Map() { return init(this, arguments.length ? arguments[0] : undefined); };
	}, collectionStrong);

	var nativeAssign = Object.assign;
	var defineProperty$6 = Object.defineProperty;

	// `Object.assign` method
	// https://tc39.github.io/ecma262/#sec-object.assign
	var objectAssign = !nativeAssign || fails(function () {
	  // should have correct order of operations (Edge bug)
	  if (descriptors && nativeAssign({ b: 1 }, nativeAssign(defineProperty$6({}, 'a', {
	    enumerable: true,
	    get: function () {
	      defineProperty$6(this, 'b', {
	        value: 3,
	        enumerable: false
	      });
	    }
	  }), { b: 2 })).b !== 1) return true;
	  // should work with symbols and should have deterministic property order (V8 bug)
	  var A = {};
	  var B = {};
	  // eslint-disable-next-line no-undef
	  var symbol = Symbol();
	  var alphabet = 'abcdefghijklmnopqrst';
	  A[symbol] = 7;
	  alphabet.split('').forEach(function (chr) { B[chr] = chr; });
	  return nativeAssign({}, A)[symbol] != 7 || objectKeys(nativeAssign({}, B)).join('') != alphabet;
	}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
	  var T = toObject(target);
	  var argumentsLength = arguments.length;
	  var index = 1;
	  var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
	  var propertyIsEnumerable = objectPropertyIsEnumerable.f;
	  while (argumentsLength > index) {
	    var S = indexedObject(arguments[index++]);
	    var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);
	    var length = keys.length;
	    var j = 0;
	    var key;
	    while (length > j) {
	      key = keys[j++];
	      if (!descriptors || propertyIsEnumerable.call(S, key)) T[key] = S[key];
	    }
	  } return T;
	} : nativeAssign;

	// `Object.assign` method
	// https://tc39.github.io/ecma262/#sec-object.assign
	_export({ target: 'Object', stat: true, forced: Object.assign !== objectAssign }, {
	  assign: objectAssign
	});

	// `Set` constructor
	// https://tc39.github.io/ecma262/#sec-set-objects
	var es_set = collection('Set', function (init) {
	  return function Set() { return init(this, arguments.length ? arguments[0] : undefined); };
	}, collectionStrong);

	var charAt$1 = stringMultibyte.charAt;



	var STRING_ITERATOR = 'String Iterator';
	var setInternalState$4 = internalState.set;
	var getInternalState$3 = internalState.getterFor(STRING_ITERATOR);

	// `String.prototype[@@iterator]` method
	// https://tc39.github.io/ecma262/#sec-string.prototype-@@iterator
	defineIterator(String, 'String', function (iterated) {
	  setInternalState$4(this, {
	    type: STRING_ITERATOR,
	    string: String(iterated),
	    index: 0
	  });
	// `%StringIteratorPrototype%.next` method
	// https://tc39.github.io/ecma262/#sec-%stringiteratorprototype%.next
	}, function next() {
	  var state = getInternalState$3(this);
	  var string = state.string;
	  var index = state.index;
	  var point;
	  if (index >= string.length) return { value: undefined, done: true };
	  point = charAt$1(string, index);
	  state.index += point.length;
	  return { value: point, done: false };
	});

	var arrayPush = [].push;
	var min$4 = Math.min;
	var MAX_UINT32 = 0xFFFFFFFF;

	// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError
	var SUPPORTS_Y = !fails(function () { return !RegExp(MAX_UINT32, 'y'); });

	// @@split logic
	fixRegexpWellKnownSymbolLogic('split', 2, function (SPLIT, nativeSplit, maybeCallNative) {
	  var internalSplit;
	  if (
	    'abbc'.split(/(b)*/)[1] == 'c' ||
	    'test'.split(/(?:)/, -1).length != 4 ||
	    'ab'.split(/(?:ab)*/).length != 2 ||
	    '.'.split(/(.?)(.?)/).length != 4 ||
	    '.'.split(/()()/).length > 1 ||
	    ''.split(/.?/).length
	  ) {
	    // based on es5-shim implementation, need to rework it
	    internalSplit = function (separator, limit) {
	      var string = String(requireObjectCoercible(this));
	      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
	      if (lim === 0) return [];
	      if (separator === undefined) return [string];
	      // If `separator` is not a regex, use native split
	      if (!isRegexp(separator)) {
	        return nativeSplit.call(string, separator, lim);
	      }
	      var output = [];
	      var flags = (separator.ignoreCase ? 'i' : '') +
	                  (separator.multiline ? 'm' : '') +
	                  (separator.unicode ? 'u' : '') +
	                  (separator.sticky ? 'y' : '');
	      var lastLastIndex = 0;
	      // Make `global` and avoid `lastIndex` issues by working with a copy
	      var separatorCopy = new RegExp(separator.source, flags + 'g');
	      var match, lastIndex, lastLength;
	      while (match = regexpExec.call(separatorCopy, string)) {
	        lastIndex = separatorCopy.lastIndex;
	        if (lastIndex > lastLastIndex) {
	          output.push(string.slice(lastLastIndex, match.index));
	          if (match.length > 1 && match.index < string.length) arrayPush.apply(output, match.slice(1));
	          lastLength = match[0].length;
	          lastLastIndex = lastIndex;
	          if (output.length >= lim) break;
	        }
	        if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop
	      }
	      if (lastLastIndex === string.length) {
	        if (lastLength || !separatorCopy.test('')) output.push('');
	      } else output.push(string.slice(lastLastIndex));
	      return output.length > lim ? output.slice(0, lim) : output;
	    };
	  // Chakra, V8
	  } else if ('0'.split(undefined, 0).length) {
	    internalSplit = function (separator, limit) {
	      return separator === undefined && limit === 0 ? [] : nativeSplit.call(this, separator, limit);
	    };
	  } else internalSplit = nativeSplit;

	  return [
	    // `String.prototype.split` method
	    // https://tc39.github.io/ecma262/#sec-string.prototype.split
	    function split(separator, limit) {
	      var O = requireObjectCoercible(this);
	      var splitter = separator == undefined ? undefined : separator[SPLIT];
	      return splitter !== undefined
	        ? splitter.call(separator, O, limit)
	        : internalSplit.call(String(O), separator, limit);
	    },
	    // `RegExp.prototype[@@split]` method
	    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
	    //
	    // NOTE: This cannot be properly polyfilled in engines that don't support
	    // the 'y' flag.
	    function (regexp, limit) {
	      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== nativeSplit);
	      if (res.done) return res.value;

	      var rx = anObject(regexp);
	      var S = String(this);
	      var C = speciesConstructor(rx, RegExp);

	      var unicodeMatching = rx.unicode;
	      var flags = (rx.ignoreCase ? 'i' : '') +
	                  (rx.multiline ? 'm' : '') +
	                  (rx.unicode ? 'u' : '') +
	                  (SUPPORTS_Y ? 'y' : 'g');

	      // ^(? + rx + ) is needed, in combination with some S slicing, to
	      // simulate the 'y' flag.
	      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
	      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
	      if (lim === 0) return [];
	      if (S.length === 0) return regexpExecAbstract(splitter, S) === null ? [S] : [];
	      var p = 0;
	      var q = 0;
	      var A = [];
	      while (q < S.length) {
	        splitter.lastIndex = SUPPORTS_Y ? q : 0;
	        var z = regexpExecAbstract(splitter, SUPPORTS_Y ? S : S.slice(q));
	        var e;
	        if (
	          z === null ||
	          (e = min$4(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p
	        ) {
	          q = advanceStringIndex(S, q, unicodeMatching);
	        } else {
	          A.push(S.slice(p, q));
	          if (A.length === lim) return A;
	          for (var i = 1; i <= z.length - 1; i++) {
	            A.push(z[i]);
	            if (A.length === lim) return A;
	          }
	          q = p = e;
	        }
	      }
	      A.push(S.slice(p));
	      return A;
	    }
	  ];
	}, !SUPPORTS_Y);

	var quot = /"/g;

	// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
	// https://tc39.github.io/ecma262/#sec-createhtml
	var createHtml = function (string, tag, attribute, value) {
	  var S = String(requireObjectCoercible(string));
	  var p1 = '<' + tag;
	  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
	  return p1 + '>' + S + '</' + tag + '>';
	};

	// check the existence of a method, lowercase
	// of a tag and escaping quotes in arguments
	var forcedStringHtmlMethod = function (METHOD_NAME) {
	  return fails(function () {
	    var test = ''[METHOD_NAME]('"');
	    return test !== test.toLowerCase() || test.split('"').length > 3;
	  });
	};

	// `String.prototype.anchor` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.anchor
	_export({ target: 'String', proto: true, forced: forcedStringHtmlMethod('anchor') }, {
	  anchor: function anchor(name) {
	    return createHtml(this, 'a', 'name', name);
	  }
	});

	var ITERATOR$5 = wellKnownSymbol('iterator');
	var TO_STRING_TAG$3 = wellKnownSymbol('toStringTag');
	var ArrayValues = es_array_iterator.values;

	for (var COLLECTION_NAME$1 in domIterables) {
	  var Collection$1 = global_1[COLLECTION_NAME$1];
	  var CollectionPrototype$1 = Collection$1 && Collection$1.prototype;
	  if (CollectionPrototype$1) {
	    // some Chrome versions have non-configurable methods on DOMTokenList
	    if (CollectionPrototype$1[ITERATOR$5] !== ArrayValues) try {
	      createNonEnumerableProperty(CollectionPrototype$1, ITERATOR$5, ArrayValues);
	    } catch (error) {
	      CollectionPrototype$1[ITERATOR$5] = ArrayValues;
	    }
	    if (!CollectionPrototype$1[TO_STRING_TAG$3]) {
	      createNonEnumerableProperty(CollectionPrototype$1, TO_STRING_TAG$3, COLLECTION_NAME$1);
	    }
	    if (domIterables[COLLECTION_NAME$1]) for (var METHOD_NAME in es_array_iterator) {
	      // some Chrome versions have non-configurable methods on DOMTokenList
	      if (CollectionPrototype$1[METHOD_NAME] !== es_array_iterator[METHOD_NAME]) try {
	        createNonEnumerableProperty(CollectionPrototype$1, METHOD_NAME, es_array_iterator[METHOD_NAME]);
	      } catch (error) {
	        CollectionPrototype$1[METHOD_NAME] = es_array_iterator[METHOD_NAME];
	      }
	    }
	  }
	}

	var getPrototypeOf = createCommonjsModule(function (module) {
	function _getPrototypeOf(o) {
	  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
	    return o.__proto__ || Object.getPrototypeOf(o);
	  };
	  return _getPrototypeOf(o);
	}

	module.exports = _getPrototypeOf;
	});

	function _superPropBase(object, property) {
	  while (!Object.prototype.hasOwnProperty.call(object, property)) {
	    object = getPrototypeOf(object);
	    if (object === null) break;
	  }

	  return object;
	}

	var superPropBase = _superPropBase;

	var get$1 = createCommonjsModule(function (module) {
	function _get(target, property, receiver) {
	  if (typeof Reflect !== "undefined" && Reflect.get) {
	    module.exports = _get = Reflect.get;
	  } else {
	    module.exports = _get = function _get(target, property, receiver) {
	      var base = superPropBase(target, property);
	      if (!base) return;
	      var desc = Object.getOwnPropertyDescriptor(base, property);

	      if (desc.get) {
	        return desc.get.call(receiver);
	      }

	      return desc.value;
	    };
	  }

	  return _get(target, property, receiver || target);
	}

	module.exports = _get;
	});

	var _typeof_1 = createCommonjsModule(function (module) {
	function _typeof2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

	function _typeof(obj) {
	  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
	    module.exports = _typeof = function _typeof(obj) {
	      return _typeof2(obj);
	    };
	  } else {
	    module.exports = _typeof = function _typeof(obj) {
	      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
	    };
	  }

	  return _typeof(obj);
	}

	module.exports = _typeof;
	});

	function _assertThisInitialized(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	var assertThisInitialized = _assertThisInitialized;

	function _possibleConstructorReturn(self, call) {
	  if (call && (_typeof_1(call) === "object" || typeof call === "function")) {
	    return call;
	  }

	  return assertThisInitialized(self);
	}

	var possibleConstructorReturn = _possibleConstructorReturn;

	var setPrototypeOf = createCommonjsModule(function (module) {
	function _setPrototypeOf(o, p) {
	  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };

	  return _setPrototypeOf(o, p);
	}

	module.exports = _setPrototypeOf;
	});

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function");
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) setPrototypeOf(subClass, superClass);
	}

	var inherits = _inherits;

	function _isNativeFunction(fn) {
	  return Function.toString.call(fn).indexOf("[native code]") !== -1;
	}

	var isNativeFunction = _isNativeFunction;

	var construct = createCommonjsModule(function (module) {
	function isNativeReflectConstruct() {
	  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	  if (Reflect.construct.sham) return false;
	  if (typeof Proxy === "function") return true;

	  try {
	    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
	    return true;
	  } catch (e) {
	    return false;
	  }
	}

	function _construct(Parent, args, Class) {
	  if (isNativeReflectConstruct()) {
	    module.exports = _construct = Reflect.construct;
	  } else {
	    module.exports = _construct = function _construct(Parent, args, Class) {
	      var a = [null];
	      a.push.apply(a, args);
	      var Constructor = Function.bind.apply(Parent, a);
	      var instance = new Constructor();
	      if (Class) setPrototypeOf(instance, Class.prototype);
	      return instance;
	    };
	  }

	  return _construct.apply(null, arguments);
	}

	module.exports = _construct;
	});

	var wrapNativeSuper = createCommonjsModule(function (module) {
	function _wrapNativeSuper(Class) {
	  var _cache = typeof Map === "function" ? new Map() : undefined;

	  module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {
	    if (Class === null || !isNativeFunction(Class)) return Class;

	    if (typeof Class !== "function") {
	      throw new TypeError("Super expression must either be null or a function");
	    }

	    if (typeof _cache !== "undefined") {
	      if (_cache.has(Class)) return _cache.get(Class);

	      _cache.set(Class, Wrapper);
	    }

	    function Wrapper() {
	      return construct(Class, arguments, getPrototypeOf(this).constructor);
	    }

	    Wrapper.prototype = Object.create(Class.prototype, {
	      constructor: {
	        value: Wrapper,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	    return setPrototypeOf(Wrapper, Class);
	  };

	  return _wrapNativeSuper(Class);
	}

	module.exports = _wrapNativeSuper;
	});

	function _arrayWithoutHoles(arr) {
	  if (Array.isArray(arr)) {
	    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
	      arr2[i] = arr[i];
	    }

	    return arr2;
	  }
	}

	var arrayWithoutHoles = _arrayWithoutHoles;

	function _iterableToArray(iter) {
	  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
	}

	var iterableToArray = _iterableToArray;

	function _nonIterableSpread() {
	  throw new TypeError("Invalid attempt to spread non-iterable instance");
	}

	var nonIterableSpread = _nonIterableSpread;

	function _toConsumableArray(arr) {
	  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();
	}

	var toConsumableArray = _toConsumableArray;

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	var classCallCheck = _classCallCheck;

	function _defineProperties(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties(Constructor, staticProps);
	  return Constructor;
	}

	var createClass = _createClass;

	function noop() {}

	var identity = function identity(x) {
	  return x;
	};

	function add_location(element, file, line, column, char) {
	  element.__svelte_meta = {
	    loc: {
	      file: file,
	      line: line,
	      column: column,
	      char: char
	    }
	  };
	}

	function run$1(fn) {
	  return fn();
	}

	function blank_object() {
	  return Object.create(null);
	}

	function run_all(fns) {
	  fns.forEach(run$1);
	}

	function is_function(thing) {
	  return typeof thing === 'function';
	}

	function safe_not_equal(a, b) {
	  return a != a ? b == b : a !== b || a && _typeof_1(a) === 'object' || typeof a === 'function';
	}

	function not_equal(a, b) {
	  return a != a ? b == b : a !== b;
	}

	function validate_store(store, name) {
	  if (!store || typeof store.subscribe !== 'function') {
	    throw new Error("'".concat(name, "' is not a store with a 'subscribe' method"));
	  }
	}

	function subscribe(store, callback) {
	  var unsub = store.subscribe(callback);
	  return unsub.unsubscribe ? function () {
	    return unsub.unsubscribe();
	  } : unsub;
	}

	function component_subscribe(component, store, callback) {
	  component.$$.on_destroy.push(subscribe(store, callback));
	}

	var is_client = typeof window !== 'undefined';
	var now = is_client ? function () {
	  return window.performance.now();
	} : function () {
	  return Date.now();
	};
	var raf = is_client ? function (cb) {
	  return requestAnimationFrame(cb);
	} : noop; // used internally for testing

	var tasks = new Set();

	function run_tasks(now) {
	  tasks.forEach(function (task) {
	    if (!task.c(now)) {
	      tasks.delete(task);
	      task.f();
	    }
	  });
	  if (tasks.size !== 0) raf(run_tasks);
	}
	/**
	 * Creates a new task that runs on each raf frame
	 * until it returns a falsy value or is aborted
	 */


	function loop(callback) {
	  var task;
	  if (tasks.size === 0) raf(run_tasks);
	  return {
	    promise: new Promise(function (fulfill) {
	      tasks.add(task = {
	        c: callback,
	        f: fulfill
	      });
	    }),
	    abort: function abort() {
	      tasks.delete(task);
	    }
	  };
	}

	function append(target, node) {
	  target.appendChild(node);
	}

	function insert(target, node, anchor) {
	  target.insertBefore(node, anchor || null);
	}

	function detach(node) {
	  node.parentNode.removeChild(node);
	}

	function destroy_each(iterations, detaching) {
	  for (var i = 0; i < iterations.length; i += 1) {
	    if (iterations[i]) iterations[i].d(detaching);
	  }
	}

	function element(name) {
	  return document.createElement(name);
	}

	function text(data) {
	  return document.createTextNode(data);
	}

	function space() {
	  return text(' ');
	}

	function empty() {
	  return text('');
	}

	function listen(node, event, handler, options) {
	  node.addEventListener(event, handler, options);
	  return function () {
	    return node.removeEventListener(event, handler, options);
	  };
	}

	function prevent_default(fn) {
	  return function (event) {
	    event.preventDefault(); // @ts-ignore

	    return fn.call(this, event);
	  };
	}

	function stop_propagation(fn) {
	  return function (event) {
	    event.stopPropagation(); // @ts-ignore

	    return fn.call(this, event);
	  };
	}

	function attr(node, attribute, value) {
	  if (value == null) node.removeAttribute(attribute);else if (node.getAttribute(attribute) !== value) node.setAttribute(attribute, value);
	}

	function children(element) {
	  return Array.from(element.childNodes);
	}

	function set_input_value(input, value) {
	  if (value != null || input.value) {
	    input.value = value;
	  }
	}

	function set_style(node, key, value, important) {
	  node.style.setProperty(key, value, important ? 'important' : '');
	}

	function custom_event(type, detail) {
	  var e = document.createEvent('CustomEvent');
	  e.initCustomEvent(type, false, false, detail);
	  return e;
	}

	var stylesheet;
	var active = 0;
	var current_rules = {}; // https://github.com/darkskyapp/string-hash/blob/master/index.js

	function hash(str) {
	  var hash = 5381;
	  var i = str.length;

	  while (i--) {
	    hash = (hash << 5) - hash ^ str.charCodeAt(i);
	  }

	  return hash >>> 0;
	}

	function create_rule(node, a, b, duration, delay, ease, fn) {
	  var uid = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;
	  var step = 16.666 / duration;
	  var keyframes = '{\n';

	  for (var p = 0; p <= 1; p += step) {
	    var t = a + (b - a) * ease(p);
	    keyframes += p * 100 + "%{".concat(fn(t, 1 - t), "}\n");
	  }

	  var rule = keyframes + "100% {".concat(fn(b, 1 - b), "}\n}");
	  var name = "__svelte_".concat(hash(rule), "_").concat(uid);

	  if (!current_rules[name]) {
	    if (!stylesheet) {
	      var style = element('style');
	      document.head.appendChild(style);
	      stylesheet = style.sheet;
	    }

	    current_rules[name] = true;
	    stylesheet.insertRule("@keyframes ".concat(name, " ").concat(rule), stylesheet.cssRules.length);
	  }

	  var animation = node.style.animation || '';
	  node.style.animation = "".concat(animation ? "".concat(animation, ", ") : "").concat(name, " ").concat(duration, "ms linear ").concat(delay, "ms 1 both");
	  active += 1;
	  return name;
	}

	function delete_rule(node, name) {
	  node.style.animation = (node.style.animation || '').split(', ').filter(name ? function (anim) {
	    return anim.indexOf(name) < 0;
	  } // remove specific animation
	  : function (anim) {
	    return anim.indexOf('__svelte') === -1;
	  } // remove all Svelte animations
	  ).join(', ');
	  if (name && ! --active) clear_rules();
	}

	function clear_rules() {
	  raf(function () {
	    if (active) return;
	    var i = stylesheet.cssRules.length;

	    while (i--) {
	      stylesheet.deleteRule(i);
	    }

	    current_rules = {};
	  });
	}

	var current_component;

	function set_current_component(component) {
	  current_component = component;
	}

	function get_current_component() {
	  if (!current_component) throw new Error("Function called outside component initialization");
	  return current_component;
	}

	function onMount(fn) {
	  get_current_component().$$.on_mount.push(fn);
	}

	function onDestroy(fn) {
	  get_current_component().$$.on_destroy.push(fn);
	}

	function setContext(key, context) {
	  get_current_component().$$.context.set(key, context);
	}

	function getContext(key) {
	  return get_current_component().$$.context.get(key);
	} // TODO figure out if we still want to support
	// shorthand events, or if we want to implement
	// a real bubbling mechanism


	function bubble(component, event) {
	  var callbacks = component.$$.callbacks[event.type];

	  if (callbacks) {
	    callbacks.slice().forEach(function (fn) {
	      return fn(event);
	    });
	  }
	}

	var dirty_components = [];
	var binding_callbacks = [];
	var render_callbacks = [];
	var flush_callbacks = [];
	var resolved_promise = Promise.resolve();
	var update_scheduled = false;

	function schedule_update() {
	  if (!update_scheduled) {
	    update_scheduled = true;
	    resolved_promise.then(flush$1);
	  }
	}

	function tick() {
	  schedule_update();
	  return resolved_promise;
	}

	function add_render_callback(fn) {
	  render_callbacks.push(fn);
	}

	function add_flush_callback(fn) {
	  flush_callbacks.push(fn);
	}

	function flush$1() {
	  var seen_callbacks = new Set();

	  do {
	    // first, call beforeUpdate functions
	    // and update components
	    while (dirty_components.length) {
	      var component = dirty_components.shift();
	      set_current_component(component);
	      update(component.$$);
	    }

	    while (binding_callbacks.length) {
	      binding_callbacks.pop()();
	    } // then, once components are updated, call
	    // afterUpdate functions. This may cause
	    // subsequent updates...


	    for (var i = 0; i < render_callbacks.length; i += 1) {
	      var callback = render_callbacks[i];

	      if (!seen_callbacks.has(callback)) {
	        callback(); // ...so guard against infinite loops

	        seen_callbacks.add(callback);
	      }
	    }

	    render_callbacks.length = 0;
	  } while (dirty_components.length);

	  while (flush_callbacks.length) {
	    flush_callbacks.pop()();
	  }

	  update_scheduled = false;
	}

	function update($$) {
	  if ($$.fragment !== null) {
	    $$.update();
	    run_all($$.before_update);
	    $$.fragment && $$.fragment.p($$.ctx, $$.dirty);
	    $$.dirty = [-1];
	    $$.after_update.forEach(add_render_callback);
	  }
	}

	var promise$1;

	function wait() {
	  if (!promise$1) {
	    promise$1 = Promise.resolve();
	    promise$1.then(function () {
	      promise$1 = null;
	    });
	  }

	  return promise$1;
	}

	function dispatch(node, direction, kind) {
	  node.dispatchEvent(custom_event("".concat(direction ? 'intro' : 'outro').concat(kind)));
	}

	var outroing = new Set();
	var outros;

	function group_outros() {
	  outros = {
	    r: 0,
	    c: [],
	    p: outros // parent group

	  };
	}

	function check_outros() {
	  if (!outros.r) {
	    run_all(outros.c);
	  }

	  outros = outros.p;
	}

	function transition_in(block, local) {
	  if (block && block.i) {
	    outroing.delete(block);
	    block.i(local);
	  }
	}

	function transition_out(block, local, detach, callback) {
	  if (block && block.o) {
	    if (outroing.has(block)) return;
	    outroing.add(block);
	    outros.c.push(function () {
	      outroing.delete(block);

	      if (callback) {
	        if (detach) block.d(1);
	        callback();
	      }
	    });
	    block.o(local);
	  }
	}

	var null_transition = {
	  duration: 0
	};

	function create_in_transition(node, fn, params) {
	  var config = fn(node, params);
	  var running = false;
	  var animation_name;
	  var task;
	  var uid = 0;

	  function cleanup() {
	    if (animation_name) delete_rule(node, animation_name);
	  }

	  function go() {
	    var _ref = config || null_transition,
	        _ref$delay = _ref.delay,
	        delay = _ref$delay === void 0 ? 0 : _ref$delay,
	        _ref$duration = _ref.duration,
	        duration = _ref$duration === void 0 ? 300 : _ref$duration,
	        _ref$easing = _ref.easing,
	        easing = _ref$easing === void 0 ? identity : _ref$easing,
	        _ref$tick = _ref.tick,
	        tick = _ref$tick === void 0 ? noop : _ref$tick,
	        css = _ref.css;

	    if (css) animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);
	    tick(0, 1);
	    var start_time = now() + delay;
	    var end_time = start_time + duration;
	    if (task) task.abort();
	    running = true;
	    add_render_callback(function () {
	      return dispatch(node, true, 'start');
	    });
	    task = loop(function (now) {
	      if (running) {
	        if (now >= end_time) {
	          tick(1, 0);
	          dispatch(node, true, 'end');
	          cleanup();
	          return running = false;
	        }

	        if (now >= start_time) {
	          var t = easing((now - start_time) / duration);
	          tick(t, 1 - t);
	        }
	      }

	      return running;
	    });
	  }

	  var started = false;
	  return {
	    start: function start() {
	      if (started) return;
	      delete_rule(node);

	      if (is_function(config)) {
	        config = config();
	        wait().then(go);
	      } else {
	        go();
	      }
	    },
	    invalidate: function invalidate() {
	      started = false;
	    },
	    end: function end() {
	      if (running) {
	        cleanup();
	        running = false;
	      }
	    }
	  };
	}

	function create_bidirectional_transition(node, fn, params, intro) {
	  var config = fn(node, params);
	  var t = intro ? 0 : 1;
	  var running_program = null;
	  var pending_program = null;
	  var animation_name = null;

	  function clear_animation() {
	    if (animation_name) delete_rule(node, animation_name);
	  }

	  function init(program, duration) {
	    var d = program.b - t;
	    duration *= Math.abs(d);
	    return {
	      a: t,
	      b: program.b,
	      d: d,
	      duration: duration,
	      start: program.start,
	      end: program.start + duration,
	      group: program.group
	    };
	  }

	  function go(b) {
	    var _ref3 = config || null_transition,
	        _ref3$delay = _ref3.delay,
	        delay = _ref3$delay === void 0 ? 0 : _ref3$delay,
	        _ref3$duration = _ref3.duration,
	        duration = _ref3$duration === void 0 ? 300 : _ref3$duration,
	        _ref3$easing = _ref3.easing,
	        easing = _ref3$easing === void 0 ? identity : _ref3$easing,
	        _ref3$tick = _ref3.tick,
	        tick = _ref3$tick === void 0 ? noop : _ref3$tick,
	        css = _ref3.css;

	    var program = {
	      start: now() + delay,
	      b: b
	    };

	    if (!b) {
	      // @ts-ignore todo: improve typings
	      program.group = outros;
	      outros.r += 1;
	    }

	    if (running_program) {
	      pending_program = program;
	    } else {
	      // if this is an intro, and there's a delay, we need to do
	      // an initial tick and/or apply CSS animation immediately
	      if (css) {
	        clear_animation();
	        animation_name = create_rule(node, t, b, duration, delay, easing, css);
	      }

	      if (b) tick(0, 1);
	      running_program = init(program, duration);
	      add_render_callback(function () {
	        return dispatch(node, b, 'start');
	      });
	      loop(function (now) {
	        if (pending_program && now > pending_program.start) {
	          running_program = init(pending_program, duration);
	          pending_program = null;
	          dispatch(node, running_program.b, 'start');

	          if (css) {
	            clear_animation();
	            animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);
	          }
	        }

	        if (running_program) {
	          if (now >= running_program.end) {
	            tick(t = running_program.b, 1 - t);
	            dispatch(node, running_program.b, 'end');

	            if (!pending_program) {
	              // we're done
	              if (running_program.b) {
	                // intro â we can tidy up immediately
	                clear_animation();
	              } else {
	                // outro â needs to be coordinated
	                if (! --running_program.group.r) run_all(running_program.group.c);
	              }
	            }

	            running_program = null;
	          } else if (now >= running_program.start) {
	            var p = now - running_program.start;
	            t = running_program.a + running_program.d * easing(p / running_program.duration);
	            tick(t, 1 - t);
	          }
	        }

	        return !!(running_program || pending_program);
	      });
	    }
	  }

	  return {
	    run: function run(b) {
	      if (is_function(config)) {
	        wait().then(function () {
	          // @ts-ignore
	          config = config();
	          go(b);
	        });
	      } else {
	        go(b);
	      }
	    },
	    end: function end() {
	      clear_animation();
	      running_program = pending_program = null;
	    }
	  };
	}

	var globals = typeof window !== 'undefined' ? window : global;

	function bind$1(component, name, callback) {
	  var index = component.$$.props[name];

	  if (index !== undefined) {
	    component.$$.bound[index] = callback;
	    callback(component.$$.ctx[index]);
	  }
	}

	function create_component(block) {
	  block && block.c();
	}

	function mount_component(component, target, anchor) {
	  var _component$$$ = component.$$,
	      fragment = _component$$$.fragment,
	      on_mount = _component$$$.on_mount,
	      on_destroy = _component$$$.on_destroy,
	      after_update = _component$$$.after_update;
	  fragment && fragment.m(target, anchor); // onMount happens before the initial afterUpdate

	  add_render_callback(function () {
	    var new_on_destroy = on_mount.map(run$1).filter(is_function);

	    if (on_destroy) {
	      on_destroy.push.apply(on_destroy, toConsumableArray(new_on_destroy));
	    } else {
	      // Edge case - component was destroyed immediately,
	      // most likely as a result of a binding initialising
	      run_all(new_on_destroy);
	    }

	    component.$$.on_mount = [];
	  });
	  after_update.forEach(add_render_callback);
	}

	function destroy_component(component, detaching) {
	  var $$ = component.$$;

	  if ($$.fragment !== null) {
	    run_all($$.on_destroy);
	    $$.fragment && $$.fragment.d(detaching); // TODO null out other refs, including component.$$ (but need to
	    // preserve final state?)

	    $$.on_destroy = $$.fragment = null;
	    $$.ctx = [];
	  }
	}

	function make_dirty(component, i) {
	  if (component.$$.dirty[0] === -1) {
	    dirty_components.push(component);
	    schedule_update();
	    component.$$.dirty.fill(0);
	  }

	  component.$$.dirty[i / 31 | 0] |= 1 << i % 31;
	}

	function init(component, options, instance, create_fragment, not_equal, props) {
	  var dirty = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [-1];
	  var parent_component = current_component;
	  set_current_component(component);
	  var prop_values = options.props || {};
	  var $$ = component.$$ = {
	    fragment: null,
	    ctx: null,
	    // state
	    props: props,
	    update: noop,
	    not_equal: not_equal,
	    bound: blank_object(),
	    // lifecycle
	    on_mount: [],
	    on_destroy: [],
	    before_update: [],
	    after_update: [],
	    context: new Map(parent_component ? parent_component.$$.context : []),
	    // everything else
	    callbacks: blank_object(),
	    dirty: dirty
	  };
	  var ready = false;
	  $$.ctx = instance ? instance(component, prop_values, function (i, ret) {
	    var value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ret;

	    if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
	      if ($$.bound[i]) $$.bound[i](value);
	      if (ready) make_dirty(component, i);
	    }

	    return ret;
	  }) : [];
	  $$.update();
	  ready = true;
	  run_all($$.before_update); // `false` as a special case of no DOM component

	  $$.fragment = create_fragment ? create_fragment($$.ctx) : false;

	  if (options.target) {
	    if (options.hydrate) {
	      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
	      $$.fragment && $$.fragment.l(children(options.target));
	    } else {
	      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
	      $$.fragment && $$.fragment.c();
	    }

	    if (options.intro) transition_in(component.$$.fragment);
	    mount_component(component, options.target, options.anchor);
	    flush$1();
	  }

	  set_current_component(parent_component);
	}

	var SvelteElement;

	if (typeof HTMLElement === 'function') {
	  SvelteElement =
	  /*#__PURE__*/
	  function (_HTMLElement) {
	    inherits(SvelteElement, _HTMLElement);

	    function SvelteElement() {
	      var _this;

	      classCallCheck(this, SvelteElement);

	      _this = possibleConstructorReturn(this, getPrototypeOf(SvelteElement).call(this));

	      _this.attachShadow({
	        mode: 'open'
	      });

	      return _this;
	    }

	    createClass(SvelteElement, [{
	      key: "connectedCallback",
	      value: function connectedCallback() {
	        // @ts-ignore todo: improve typings
	        for (var key in this.$$.slotted) {
	          // @ts-ignore todo: improve typings
	          this.appendChild(this.$$.slotted[key]);
	        }
	      }
	    }, {
	      key: "attributeChangedCallback",
	      value: function attributeChangedCallback(attr, _oldValue, newValue) {
	        this[attr] = newValue;
	      }
	    }, {
	      key: "$destroy",
	      value: function $destroy() {
	        destroy_component(this, 1);
	        this.$destroy = noop;
	      }
	    }, {
	      key: "$on",
	      value: function $on(type, callback) {
	        // TODO should this delegate to addEventListener?
	        var callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
	        callbacks.push(callback);
	        return function () {
	          var index = callbacks.indexOf(callback);
	          if (index !== -1) callbacks.splice(index, 1);
	        };
	      }
	    }, {
	      key: "$set",
	      value: function $set() {// overridden by instance, if it has props
	      }
	    }]);

	    return SvelteElement;
	  }(wrapNativeSuper(HTMLElement));
	}

	var SvelteComponent =
	/*#__PURE__*/
	function () {
	  function SvelteComponent() {
	    classCallCheck(this, SvelteComponent);
	  }

	  createClass(SvelteComponent, [{
	    key: "$destroy",
	    value: function $destroy() {
	      destroy_component(this, 1);
	      this.$destroy = noop;
	    }
	  }, {
	    key: "$on",
	    value: function $on(type, callback) {
	      var callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
	      callbacks.push(callback);
	      return function () {
	        var index = callbacks.indexOf(callback);
	        if (index !== -1) callbacks.splice(index, 1);
	      };
	    }
	  }, {
	    key: "$set",
	    value: function $set() {// overridden by instance, if it has props
	    }
	  }]);

	  return SvelteComponent;
	}();

	function dispatch_dev(type, detail) {
	  document.dispatchEvent(custom_event(type, detail));
	}

	function append_dev(target, node) {
	  dispatch_dev("SvelteDOMInsert", {
	    target: target,
	    node: node
	  });
	  append(target, node);
	}

	function insert_dev(target, node, anchor) {
	  dispatch_dev("SvelteDOMInsert", {
	    target: target,
	    node: node,
	    anchor: anchor
	  });
	  insert(target, node, anchor);
	}

	function detach_dev(node) {
	  dispatch_dev("SvelteDOMRemove", {
	    node: node
	  });
	  detach(node);
	}

	function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
	  var modifiers = options === true ? ["capture"] : options ? Array.from(Object.keys(options)) : [];
	  if (has_prevent_default) modifiers.push('preventDefault');
	  if (has_stop_propagation) modifiers.push('stopPropagation');
	  dispatch_dev("SvelteDOMAddEventListener", {
	    node: node,
	    event: event,
	    handler: handler,
	    modifiers: modifiers
	  });
	  var dispose = listen(node, event, handler, options);
	  return function () {
	    dispatch_dev("SvelteDOMRemoveEventListener", {
	      node: node,
	      event: event,
	      handler: handler,
	      modifiers: modifiers
	    });
	    dispose();
	  };
	}

	function attr_dev(node, attribute, value) {
	  attr(node, attribute, value);
	  if (value == null) dispatch_dev("SvelteDOMRemoveAttribute", {
	    node: node,
	    attribute: attribute
	  });else dispatch_dev("SvelteDOMSetAttribute", {
	    node: node,
	    attribute: attribute,
	    value: value
	  });
	}

	function prop_dev(node, property, value) {
	  node[property] = value;
	  dispatch_dev("SvelteDOMSetProperty", {
	    node: node,
	    property: property,
	    value: value
	  });
	}

	function set_data_dev(text, data) {
	  data = '' + data;
	  if (text.data === data) return;
	  dispatch_dev("SvelteDOMSetData", {
	    node: text,
	    data: data
	  });
	  text.data = data;
	}

	var SvelteComponentDev =
	/*#__PURE__*/
	function (_SvelteComponent) {
	  inherits(SvelteComponentDev, _SvelteComponent);

	  function SvelteComponentDev(options) {
	    classCallCheck(this, SvelteComponentDev);

	    if (!options || !options.target && !options.$$inline) {
	      throw new Error("'target' is a required option");
	    }

	    return possibleConstructorReturn(this, getPrototypeOf(SvelteComponentDev).call(this));
	  }

	  createClass(SvelteComponentDev, [{
	    key: "$destroy",
	    value: function $destroy() {
	      get$1(getPrototypeOf(SvelteComponentDev.prototype), "$destroy", this).call(this);

	      this.$destroy = function () {
	        console.warn("Component was already destroyed"); // eslint-disable-line no-console
	      };
	    }
	  }]);

	  return SvelteComponentDev;
	}(SvelteComponent);

	// `thisNumberValue` abstract operation
	// https://tc39.github.io/ecma262/#sec-thisnumbervalue
	var thisNumberValue = function (value) {
	  if (typeof value != 'number' && classofRaw(value) != 'Number') {
	    throw TypeError('Incorrect invocation');
	  }
	  return +value;
	};

	// `String.prototype.repeat` method implementation
	// https://tc39.github.io/ecma262/#sec-string.prototype.repeat
	var stringRepeat = ''.repeat || function repeat(count) {
	  var str = String(requireObjectCoercible(this));
	  var result = '';
	  var n = toInteger(count);
	  if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');
	  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;
	  return result;
	};

	var nativeToFixed = 1.0.toFixed;
	var floor$2 = Math.floor;

	var pow = function (x, n, acc) {
	  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
	};

	var log = function (x) {
	  var n = 0;
	  var x2 = x;
	  while (x2 >= 4096) {
	    n += 12;
	    x2 /= 4096;
	  }
	  while (x2 >= 2) {
	    n += 1;
	    x2 /= 2;
	  } return n;
	};

	var FORCED$4 = nativeToFixed && (
	  0.00008.toFixed(3) !== '0.000' ||
	  0.9.toFixed(0) !== '1' ||
	  1.255.toFixed(2) !== '1.25' ||
	  1000000000000000128.0.toFixed(0) !== '1000000000000000128'
	) || !fails(function () {
	  // V8 ~ Android 4.3-
	  nativeToFixed.call({});
	});

	// `Number.prototype.toFixed` method
	// https://tc39.github.io/ecma262/#sec-number.prototype.tofixed
	_export({ target: 'Number', proto: true, forced: FORCED$4 }, {
	  // eslint-disable-next-line max-statements
	  toFixed: function toFixed(fractionDigits) {
	    var number = thisNumberValue(this);
	    var fractDigits = toInteger(fractionDigits);
	    var data = [0, 0, 0, 0, 0, 0];
	    var sign = '';
	    var result = '0';
	    var e, z, j, k;

	    var multiply = function (n, c) {
	      var index = -1;
	      var c2 = c;
	      while (++index < 6) {
	        c2 += n * data[index];
	        data[index] = c2 % 1e7;
	        c2 = floor$2(c2 / 1e7);
	      }
	    };

	    var divide = function (n) {
	      var index = 6;
	      var c = 0;
	      while (--index >= 0) {
	        c += data[index];
	        data[index] = floor$2(c / n);
	        c = (c % n) * 1e7;
	      }
	    };

	    var dataToString = function () {
	      var index = 6;
	      var s = '';
	      while (--index >= 0) {
	        if (s !== '' || index === 0 || data[index] !== 0) {
	          var t = String(data[index]);
	          s = s === '' ? t : s + stringRepeat.call('0', 7 - t.length) + t;
	        }
	      } return s;
	    };

	    if (fractDigits < 0 || fractDigits > 20) throw RangeError('Incorrect fraction digits');
	    // eslint-disable-next-line no-self-compare
	    if (number != number) return 'NaN';
	    if (number <= -1e21 || number >= 1e21) return String(number);
	    if (number < 0) {
	      sign = '-';
	      number = -number;
	    }
	    if (number > 1e-21) {
	      e = log(number * pow(2, 69, 1)) - 69;
	      z = e < 0 ? number * pow(2, -e, 1) : number / pow(2, e, 1);
	      z *= 0x10000000000000;
	      e = 52 - e;
	      if (e > 0) {
	        multiply(0, z);
	        j = fractDigits;
	        while (j >= 7) {
	          multiply(1e7, 0);
	          j -= 7;
	        }
	        multiply(pow(10, j, 1), 0);
	        j = e - 1;
	        while (j >= 23) {
	          divide(1 << 23);
	          j -= 23;
	        }
	        divide(1 << j);
	        multiply(1, 1);
	        divide(2);
	        result = dataToString();
	      } else {
	        multiply(0, z);
	        multiply(1 << -e, 0);
	        result = dataToString() + stringRepeat.call('0', fractDigits);
	      }
	    }
	    if (fractDigits > 0) {
	      k = result.length;
	      result = sign + (k <= fractDigits
	        ? '0.' + stringRepeat.call('0', fractDigits - k) + result
	        : result.slice(0, k - fractDigits) + '.' + result.slice(k - fractDigits));
	    } else {
	      result = sign + result;
	    } return result;
	  }
	});

	var has$2 = Object.prototype.hasOwnProperty;
	var isArray$1 = Array.isArray;

	var hexTable = (function () {
	    var array = [];
	    for (var i = 0; i < 256; ++i) {
	        array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());
	    }

	    return array;
	}());

	var compactQueue = function compactQueue(queue) {
	    while (queue.length > 1) {
	        var item = queue.pop();
	        var obj = item.obj[item.prop];

	        if (isArray$1(obj)) {
	            var compacted = [];

	            for (var j = 0; j < obj.length; ++j) {
	                if (typeof obj[j] !== 'undefined') {
	                    compacted.push(obj[j]);
	                }
	            }

	            item.obj[item.prop] = compacted;
	        }
	    }
	};

	var arrayToObject = function arrayToObject(source, options) {
	    var obj = options && options.plainObjects ? Object.create(null) : {};
	    for (var i = 0; i < source.length; ++i) {
	        if (typeof source[i] !== 'undefined') {
	            obj[i] = source[i];
	        }
	    }

	    return obj;
	};

	var merge = function merge(target, source, options) {
	    /* eslint no-param-reassign: 0 */
	    if (!source) {
	        return target;
	    }

	    if (typeof source !== 'object') {
	        if (isArray$1(target)) {
	            target.push(source);
	        } else if (target && typeof target === 'object') {
	            if ((options && (options.plainObjects || options.allowPrototypes)) || !has$2.call(Object.prototype, source)) {
	                target[source] = true;
	            }
	        } else {
	            return [target, source];
	        }

	        return target;
	    }

	    if (!target || typeof target !== 'object') {
	        return [target].concat(source);
	    }

	    var mergeTarget = target;
	    if (isArray$1(target) && !isArray$1(source)) {
	        mergeTarget = arrayToObject(target, options);
	    }

	    if (isArray$1(target) && isArray$1(source)) {
	        source.forEach(function (item, i) {
	            if (has$2.call(target, i)) {
	                var targetItem = target[i];
	                if (targetItem && typeof targetItem === 'object' && item && typeof item === 'object') {
	                    target[i] = merge(targetItem, item, options);
	                } else {
	                    target.push(item);
	                }
	            } else {
	                target[i] = item;
	            }
	        });
	        return target;
	    }

	    return Object.keys(source).reduce(function (acc, key) {
	        var value = source[key];

	        if (has$2.call(acc, key)) {
	            acc[key] = merge(acc[key], value, options);
	        } else {
	            acc[key] = value;
	        }
	        return acc;
	    }, mergeTarget);
	};

	var assign = function assignSingleSource(target, source) {
	    return Object.keys(source).reduce(function (acc, key) {
	        acc[key] = source[key];
	        return acc;
	    }, target);
	};

	var decode = function (str, decoder, charset) {
	    var strWithoutPlus = str.replace(/\+/g, ' ');
	    if (charset === 'iso-8859-1') {
	        // unescape never throws, no try...catch needed:
	        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
	    }
	    // utf-8
	    try {
	        return decodeURIComponent(strWithoutPlus);
	    } catch (e) {
	        return strWithoutPlus;
	    }
	};

	var encode = function encode(str, defaultEncoder, charset) {
	    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
	    // It has been adapted here for stricter adherence to RFC 3986
	    if (str.length === 0) {
	        return str;
	    }

	    var string = str;
	    if (typeof str === 'symbol') {
	        string = Symbol.prototype.toString.call(str);
	    } else if (typeof str !== 'string') {
	        string = String(str);
	    }

	    if (charset === 'iso-8859-1') {
	        return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {
	            return '%26%23' + parseInt($0.slice(2), 16) + '%3B';
	        });
	    }

	    var out = '';
	    for (var i = 0; i < string.length; ++i) {
	        var c = string.charCodeAt(i);

	        if (
	            c === 0x2D // -
	            || c === 0x2E // .
	            || c === 0x5F // _
	            || c === 0x7E // ~
	            || (c >= 0x30 && c <= 0x39) // 0-9
	            || (c >= 0x41 && c <= 0x5A) // a-z
	            || (c >= 0x61 && c <= 0x7A) // A-Z
	        ) {
	            out += string.charAt(i);
	            continue;
	        }

	        if (c < 0x80) {
	            out = out + hexTable[c];
	            continue;
	        }

	        if (c < 0x800) {
	            out = out + (hexTable[0xC0 | (c >> 6)] + hexTable[0x80 | (c & 0x3F)]);
	            continue;
	        }

	        if (c < 0xD800 || c >= 0xE000) {
	            out = out + (hexTable[0xE0 | (c >> 12)] + hexTable[0x80 | ((c >> 6) & 0x3F)] + hexTable[0x80 | (c & 0x3F)]);
	            continue;
	        }

	        i += 1;
	        c = 0x10000 + (((c & 0x3FF) << 10) | (string.charCodeAt(i) & 0x3FF));
	        out += hexTable[0xF0 | (c >> 18)]
	            + hexTable[0x80 | ((c >> 12) & 0x3F)]
	            + hexTable[0x80 | ((c >> 6) & 0x3F)]
	            + hexTable[0x80 | (c & 0x3F)];
	    }

	    return out;
	};

	var compact = function compact(value) {
	    var queue = [{ obj: { o: value }, prop: 'o' }];
	    var refs = [];

	    for (var i = 0; i < queue.length; ++i) {
	        var item = queue[i];
	        var obj = item.obj[item.prop];

	        var keys = Object.keys(obj);
	        for (var j = 0; j < keys.length; ++j) {
	            var key = keys[j];
	            var val = obj[key];
	            if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {
	                queue.push({ obj: obj, prop: key });
	                refs.push(val);
	            }
	        }
	    }

	    compactQueue(queue);

	    return value;
	};

	var isRegExp = function isRegExp(obj) {
	    return Object.prototype.toString.call(obj) === '[object RegExp]';
	};

	var isBuffer = function isBuffer(obj) {
	    if (!obj || typeof obj !== 'object') {
	        return false;
	    }

	    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
	};

	var combine = function combine(a, b) {
	    return [].concat(a, b);
	};

	var utils = {
	    arrayToObject: arrayToObject,
	    assign: assign,
	    combine: combine,
	    compact: compact,
	    decode: decode,
	    encode: encode,
	    isBuffer: isBuffer,
	    isRegExp: isRegExp,
	    merge: merge
	};

	var replace = String.prototype.replace;
	var percentTwenties = /%20/g;



	var Format = {
	    RFC1738: 'RFC1738',
	    RFC3986: 'RFC3986'
	};

	var formats = utils.assign(
	    {
	        'default': Format.RFC3986,
	        formatters: {
	            RFC1738: function (value) {
	                return replace.call(value, percentTwenties, '+');
	            },
	            RFC3986: function (value) {
	                return String(value);
	            }
	        }
	    },
	    Format
	);

	var has$3 = Object.prototype.hasOwnProperty;

	var arrayPrefixGenerators = {
	    brackets: function brackets(prefix) {
	        return prefix + '[]';
	    },
	    comma: 'comma',
	    indices: function indices(prefix, key) {
	        return prefix + '[' + key + ']';
	    },
	    repeat: function repeat(prefix) {
	        return prefix;
	    }
	};

	var isArray$2 = Array.isArray;
	var push$1 = Array.prototype.push;
	var pushToArray = function (arr, valueOrArray) {
	    push$1.apply(arr, isArray$2(valueOrArray) ? valueOrArray : [valueOrArray]);
	};

	var toISO = Date.prototype.toISOString;

	var defaultFormat = formats['default'];
	var defaults = {
	    addQueryPrefix: false,
	    allowDots: false,
	    charset: 'utf-8',
	    charsetSentinel: false,
	    delimiter: '&',
	    encode: true,
	    encoder: utils.encode,
	    encodeValuesOnly: false,
	    format: defaultFormat,
	    formatter: formats.formatters[defaultFormat],
	    // deprecated
	    indices: false,
	    serializeDate: function serializeDate(date) {
	        return toISO.call(date);
	    },
	    skipNulls: false,
	    strictNullHandling: false
	};

	var isNonNullishPrimitive = function isNonNullishPrimitive(v) {
	    return typeof v === 'string'
	        || typeof v === 'number'
	        || typeof v === 'boolean'
	        || typeof v === 'symbol'
	        || typeof v === 'bigint';
	};

	var stringify = function stringify(
	    object,
	    prefix,
	    generateArrayPrefix,
	    strictNullHandling,
	    skipNulls,
	    encoder,
	    filter,
	    sort,
	    allowDots,
	    serializeDate,
	    formatter,
	    encodeValuesOnly,
	    charset
	) {
	    var obj = object;
	    if (typeof filter === 'function') {
	        obj = filter(prefix, obj);
	    } else if (obj instanceof Date) {
	        obj = serializeDate(obj);
	    } else if (generateArrayPrefix === 'comma' && isArray$2(obj)) {
	        obj = obj.join(',');
	    }

	    if (obj === null) {
	        if (strictNullHandling) {
	            return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, 'key') : prefix;
	        }

	        obj = '';
	    }

	    if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {
	        if (encoder) {
	            var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, 'key');
	            return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults.encoder, charset, 'value'))];
	        }
	        return [formatter(prefix) + '=' + formatter(String(obj))];
	    }

	    var values = [];

	    if (typeof obj === 'undefined') {
	        return values;
	    }

	    var objKeys;
	    if (isArray$2(filter)) {
	        objKeys = filter;
	    } else {
	        var keys = Object.keys(obj);
	        objKeys = sort ? keys.sort(sort) : keys;
	    }

	    for (var i = 0; i < objKeys.length; ++i) {
	        var key = objKeys[i];

	        if (skipNulls && obj[key] === null) {
	            continue;
	        }

	        if (isArray$2(obj)) {
	            pushToArray(values, stringify(
	                obj[key],
	                typeof generateArrayPrefix === 'function' ? generateArrayPrefix(prefix, key) : prefix,
	                generateArrayPrefix,
	                strictNullHandling,
	                skipNulls,
	                encoder,
	                filter,
	                sort,
	                allowDots,
	                serializeDate,
	                formatter,
	                encodeValuesOnly,
	                charset
	            ));
	        } else {
	            pushToArray(values, stringify(
	                obj[key],
	                prefix + (allowDots ? '.' + key : '[' + key + ']'),
	                generateArrayPrefix,
	                strictNullHandling,
	                skipNulls,
	                encoder,
	                filter,
	                sort,
	                allowDots,
	                serializeDate,
	                formatter,
	                encodeValuesOnly,
	                charset
	            ));
	        }
	    }

	    return values;
	};

	var normalizeStringifyOptions = function normalizeStringifyOptions(opts) {
	    if (!opts) {
	        return defaults;
	    }

	    if (opts.encoder !== null && opts.encoder !== undefined && typeof opts.encoder !== 'function') {
	        throw new TypeError('Encoder has to be a function.');
	    }

	    var charset = opts.charset || defaults.charset;
	    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
	        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');
	    }

	    var format = formats['default'];
	    if (typeof opts.format !== 'undefined') {
	        if (!has$3.call(formats.formatters, opts.format)) {
	            throw new TypeError('Unknown format option provided.');
	        }
	        format = opts.format;
	    }
	    var formatter = formats.formatters[format];

	    var filter = defaults.filter;
	    if (typeof opts.filter === 'function' || isArray$2(opts.filter)) {
	        filter = opts.filter;
	    }

	    return {
	        addQueryPrefix: typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults.addQueryPrefix,
	        allowDots: typeof opts.allowDots === 'undefined' ? defaults.allowDots : !!opts.allowDots,
	        charset: charset,
	        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,
	        delimiter: typeof opts.delimiter === 'undefined' ? defaults.delimiter : opts.delimiter,
	        encode: typeof opts.encode === 'boolean' ? opts.encode : defaults.encode,
	        encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults.encoder,
	        encodeValuesOnly: typeof opts.encodeValuesOnly === 'boolean' ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
	        filter: filter,
	        formatter: formatter,
	        serializeDate: typeof opts.serializeDate === 'function' ? opts.serializeDate : defaults.serializeDate,
	        skipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults.skipNulls,
	        sort: typeof opts.sort === 'function' ? opts.sort : null,
	        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling
	    };
	};

	var stringify_1 = function (object, opts) {
	    var obj = object;
	    var options = normalizeStringifyOptions(opts);

	    var objKeys;
	    var filter;

	    if (typeof options.filter === 'function') {
	        filter = options.filter;
	        obj = filter('', obj);
	    } else if (isArray$2(options.filter)) {
	        filter = options.filter;
	        objKeys = filter;
	    }

	    var keys = [];

	    if (typeof obj !== 'object' || obj === null) {
	        return '';
	    }

	    var arrayFormat;
	    if (opts && opts.arrayFormat in arrayPrefixGenerators) {
	        arrayFormat = opts.arrayFormat;
	    } else if (opts && 'indices' in opts) {
	        arrayFormat = opts.indices ? 'indices' : 'repeat';
	    } else {
	        arrayFormat = 'indices';
	    }

	    var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];

	    if (!objKeys) {
	        objKeys = Object.keys(obj);
	    }

	    if (options.sort) {
	        objKeys.sort(options.sort);
	    }

	    for (var i = 0; i < objKeys.length; ++i) {
	        var key = objKeys[i];

	        if (options.skipNulls && obj[key] === null) {
	            continue;
	        }
	        pushToArray(keys, stringify(
	            obj[key],
	            key,
	            generateArrayPrefix,
	            options.strictNullHandling,
	            options.skipNulls,
	            options.encode ? options.encoder : null,
	            options.filter,
	            options.sort,
	            options.allowDots,
	            options.serializeDate,
	            options.formatter,
	            options.encodeValuesOnly,
	            options.charset
	        ));
	    }

	    var joined = keys.join(options.delimiter);
	    var prefix = options.addQueryPrefix === true ? '?' : '';

	    if (options.charsetSentinel) {
	        if (options.charset === 'iso-8859-1') {
	            // encodeURIComponent('&#10003;'), the "numeric entity" representation of a checkmark
	            prefix += 'utf8=%26%2310003%3B&';
	        } else {
	            // encodeURIComponent('â')
	            prefix += 'utf8=%E2%9C%93&';
	        }
	    }

	    return joined.length > 0 ? prefix + joined : '';
	};

	var has$4 = Object.prototype.hasOwnProperty;
	var isArray$3 = Array.isArray;

	var defaults$1 = {
	    allowDots: false,
	    allowPrototypes: false,
	    arrayLimit: 20,
	    charset: 'utf-8',
	    charsetSentinel: false,
	    comma: false,
	    decoder: utils.decode,
	    delimiter: '&',
	    depth: 5,
	    ignoreQueryPrefix: false,
	    interpretNumericEntities: false,
	    parameterLimit: 1000,
	    parseArrays: true,
	    plainObjects: false,
	    strictNullHandling: false
	};

	var interpretNumericEntities = function (str) {
	    return str.replace(/&#(\d+);/g, function ($0, numberStr) {
	        return String.fromCharCode(parseInt(numberStr, 10));
	    });
	};

	// This is what browsers will submit when the â character occurs in an
	// application/x-www-form-urlencoded body and the encoding of the page containing
	// the form is iso-8859-1, or when the submitted form has an accept-charset
	// attribute of iso-8859-1. Presumably also with other charsets that do not contain
	// the â character, such as us-ascii.
	var isoSentinel = 'utf8=%26%2310003%3B'; // encodeURIComponent('&#10003;')

	// These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.
	var charsetSentinel = 'utf8=%E2%9C%93'; // encodeURIComponent('â')

	var parseValues = function parseQueryStringValues(str, options) {
	    var obj = {};
	    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, '') : str;
	    var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;
	    var parts = cleanStr.split(options.delimiter, limit);
	    var skipIndex = -1; // Keep track of where the utf8 sentinel was found
	    var i;

	    var charset = options.charset;
	    if (options.charsetSentinel) {
	        for (i = 0; i < parts.length; ++i) {
	            if (parts[i].indexOf('utf8=') === 0) {
	                if (parts[i] === charsetSentinel) {
	                    charset = 'utf-8';
	                } else if (parts[i] === isoSentinel) {
	                    charset = 'iso-8859-1';
	                }
	                skipIndex = i;
	                i = parts.length; // The eslint settings do not allow break;
	            }
	        }
	    }

	    for (i = 0; i < parts.length; ++i) {
	        if (i === skipIndex) {
	            continue;
	        }
	        var part = parts[i];

	        var bracketEqualsPos = part.indexOf(']=');
	        var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;

	        var key, val;
	        if (pos === -1) {
	            key = options.decoder(part, defaults$1.decoder, charset, 'key');
	            val = options.strictNullHandling ? null : '';
	        } else {
	            key = options.decoder(part.slice(0, pos), defaults$1.decoder, charset, 'key');
	            val = options.decoder(part.slice(pos + 1), defaults$1.decoder, charset, 'value');
	        }

	        if (val && options.interpretNumericEntities && charset === 'iso-8859-1') {
	            val = interpretNumericEntities(val);
	        }

	        if (val && typeof val === 'string' && options.comma && val.indexOf(',') > -1) {
	            val = val.split(',');
	        }

	        if (part.indexOf('[]=') > -1) {
	            val = isArray$3(val) ? [val] : val;
	        }

	        if (has$4.call(obj, key)) {
	            obj[key] = utils.combine(obj[key], val);
	        } else {
	            obj[key] = val;
	        }
	    }

	    return obj;
	};

	var parseObject = function (chain, val, options) {
	    var leaf = val;

	    for (var i = chain.length - 1; i >= 0; --i) {
	        var obj;
	        var root = chain[i];

	        if (root === '[]' && options.parseArrays) {
	            obj = [].concat(leaf);
	        } else {
	            obj = options.plainObjects ? Object.create(null) : {};
	            var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;
	            var index = parseInt(cleanRoot, 10);
	            if (!options.parseArrays && cleanRoot === '') {
	                obj = { 0: leaf };
	            } else if (
	                !isNaN(index)
	                && root !== cleanRoot
	                && String(index) === cleanRoot
	                && index >= 0
	                && (options.parseArrays && index <= options.arrayLimit)
	            ) {
	                obj = [];
	                obj[index] = leaf;
	            } else {
	                obj[cleanRoot] = leaf;
	            }
	        }

	        leaf = obj;
	    }

	    return leaf;
	};

	var parseKeys = function parseQueryStringKeys(givenKey, val, options) {
	    if (!givenKey) {
	        return;
	    }

	    // Transform dot notation to bracket notation
	    var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, '[$1]') : givenKey;

	    // The regex chunks

	    var brackets = /(\[[^[\]]*])/;
	    var child = /(\[[^[\]]*])/g;

	    // Get the parent

	    var segment = options.depth > 0 && brackets.exec(key);
	    var parent = segment ? key.slice(0, segment.index) : key;

	    // Stash the parent if it exists

	    var keys = [];
	    if (parent) {
	        // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties
	        if (!options.plainObjects && has$4.call(Object.prototype, parent)) {
	            if (!options.allowPrototypes) {
	                return;
	            }
	        }

	        keys.push(parent);
	    }

	    // Loop through children appending to the array until we hit depth

	    var i = 0;
	    while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {
	        i += 1;
	        if (!options.plainObjects && has$4.call(Object.prototype, segment[1].slice(1, -1))) {
	            if (!options.allowPrototypes) {
	                return;
	            }
	        }
	        keys.push(segment[1]);
	    }

	    // If there's a remainder, just add whatever is left

	    if (segment) {
	        keys.push('[' + key.slice(segment.index) + ']');
	    }

	    return parseObject(keys, val, options);
	};

	var normalizeParseOptions = function normalizeParseOptions(opts) {
	    if (!opts) {
	        return defaults$1;
	    }

	    if (opts.decoder !== null && opts.decoder !== undefined && typeof opts.decoder !== 'function') {
	        throw new TypeError('Decoder has to be a function.');
	    }

	    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {
	        throw new Error('The charset option must be either utf-8, iso-8859-1, or undefined');
	    }
	    var charset = typeof opts.charset === 'undefined' ? defaults$1.charset : opts.charset;

	    return {
	        allowDots: typeof opts.allowDots === 'undefined' ? defaults$1.allowDots : !!opts.allowDots,
	        allowPrototypes: typeof opts.allowPrototypes === 'boolean' ? opts.allowPrototypes : defaults$1.allowPrototypes,
	        arrayLimit: typeof opts.arrayLimit === 'number' ? opts.arrayLimit : defaults$1.arrayLimit,
	        charset: charset,
	        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults$1.charsetSentinel,
	        comma: typeof opts.comma === 'boolean' ? opts.comma : defaults$1.comma,
	        decoder: typeof opts.decoder === 'function' ? opts.decoder : defaults$1.decoder,
	        delimiter: typeof opts.delimiter === 'string' || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults$1.delimiter,
	        // eslint-disable-next-line no-implicit-coercion, no-extra-parens
	        depth: (typeof opts.depth === 'number' || opts.depth === false) ? +opts.depth : defaults$1.depth,
	        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
	        interpretNumericEntities: typeof opts.interpretNumericEntities === 'boolean' ? opts.interpretNumericEntities : defaults$1.interpretNumericEntities,
	        parameterLimit: typeof opts.parameterLimit === 'number' ? opts.parameterLimit : defaults$1.parameterLimit,
	        parseArrays: opts.parseArrays !== false,
	        plainObjects: typeof opts.plainObjects === 'boolean' ? opts.plainObjects : defaults$1.plainObjects,
	        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults$1.strictNullHandling
	    };
	};

	var parse = function (str, opts) {
	    var options = normalizeParseOptions(opts);

	    if (str === '' || str === null || typeof str === 'undefined') {
	        return options.plainObjects ? Object.create(null) : {};
	    }

	    var tempObj = typeof str === 'string' ? parseValues(str, options) : str;
	    var obj = options.plainObjects ? Object.create(null) : {};

	    // Iterate over the keys and setup the new object

	    var keys = Object.keys(tempObj);
	    for (var i = 0; i < keys.length; ++i) {
	        var key = keys[i];
	        var newObj = parseKeys(key, tempObj[key], options);
	        obj = utils.merge(obj, newObj, options);
	    }

	    return utils.compact(obj);
	};

	var lib = {
	    formats: formats,
	    parse: parse,
	    stringify: stringify_1
	};

	var INPUT_DEBOUNCE_TIME = 1000; // Breakpoints

	var SM_WIDTH = 576;
	var MD_WIDTH = 768;
	var LG_WIDTH = 992;
	var XL_WIDTH = 1200;

	var API_URL = "http://localhost:6543/".replace(/\/+$/, '');
	function makeApiUrl() {
	  for (var _len = arguments.length, segments = new Array(_len), _key = 0; _key < _len; _key++) {
	    segments[_key] = arguments[_key];
	  }

	  if (!segments.length) {
	    return API_URL;
	  }

	  var lastSegment = segments.pop();
	  segments = [API_URL].concat(toConsumableArray(segments.map(function (segment) {
	    return segment.replace(/^\/+/, '').replace(/\/+$/, '');
	  })), [lastSegment.replace(/^\/+/, '')]);
	  return segments.join('/');
	}
	/**
	 * Like the builtin Number.toFixed() but will truncate the number to an
	 * integer if it's equal to its rounded value.
	 *
	 * @param value {number}
	 * @param fractionDigits {number} Same as for Number.toFixed()
	 * @returns {string}
	 */

	function toFixed(value) {
	  var fractionDigits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
	  var fixedValue = value.toFixed(fractionDigits);
	  var roundedValue = Math.round(value);
	  return fixedValue == roundedValue ? roundedValue.toString() : fixedValue;
	}
	/**
	 * Call a function that switches on the current breakpoint.
	 *
	 * Determines the current breakpoint (one of xs, sm, md, lg, or xl) then
	 * calls the provided function with it.
	 *
	 *     breakpointSwitch(breakpoint => {
	 *         switch(breakpoint) {
	 *             case 'xs':
	 *                 return <xs value>;
	 *             case 'sm':
	 *                 return <sm value>;
	 *             default:
	 *                 return <default value>;
	 *         }
	 *     });
	 *
	 * @param fn {Function}
	 * @returns {Any}
	 */

	function breakpointSwitch(fn) {
	  var bodyWidth = document.body.getBoundingClientRect().width;
	  var breakpoint;

	  if (bodyWidth >= XL_WIDTH) {
	    breakpoint = 'xl';
	  } else if (bodyWidth >= LG_WIDTH) {
	    breakpoint = 'lg';
	  } else if (bodyWidth >= MD_WIDTH) {
	    breakpoint = 'md';
	  } else if (bodyWidth >= SM_WIDTH) {
	    breakpoint = 'sm';
	  } else {
	    breakpoint = 'xs';
	  }

	  return fn(breakpoint);
	}
	/**
	 * Convert query string to Object.
	 *
	 * Blank values are converted to null.
	 *
	 * @param queryString Query string w/o leading ?
	 * @returns {Object} Query parameters
	 */

	function queryStringToParams(queryString) {
	  var params = queryString ? lib.parse(queryString) : {};

	  for (var _i = 0, _Object$keys = Object.keys(params); _i < _Object$keys.length; _i++) {
	    var name = _Object$keys[_i];
	    var value = params[name];

	    if (value === '') {
	      params[name] = null;
	    }
	  }

	  return params;
	}

	/**
	 * @module ol/math
	 */
	/**
	 * Takes a number and clamps it to within the provided bounds.
	 * @param {number} value The input number.
	 * @param {number} min The minimum value to return.
	 * @param {number} max The maximum value to return.
	 * @return {number} The input number if it is within bounds, or the nearest
	 *     number within the bounds.
	 */
	function clamp(value, min, max) {
	    return Math.min(Math.max(value, min), max);
	}
	/**
	 * Return the hyperbolic cosine of a given number. The method will use the
	 * native `Math.cosh` function if it is available, otherwise the hyperbolic
	 * cosine will be calculated via the reference implementation of the Mozilla
	 * developer network.
	 *
	 * @param {number} x X.
	 * @return {number} Hyperbolic cosine of x.
	 */
	var cosh = (function () {
	    // Wrapped in a iife, to save the overhead of checking for the native
	    // implementation on every invocation.
	    var cosh;
	    if ('cosh' in Math) {
	        // The environment supports the native Math.cosh function, use itâ¦
	        cosh = Math.cosh;
	    }
	    else {
	        // â¦ else, use the reference implementation of MDN:
	        cosh = function (x) {
	            var y = /** @type {Math} */ (Math).exp(x);
	            return (y + 1 / y) / 2;
	        };
	    }
	    return cosh;
	}());
	/**
	 * Returns the square of the closest distance between the point (x, y) and the
	 * line segment (x1, y1) to (x2, y2).
	 * @param {number} x X.
	 * @param {number} y Y.
	 * @param {number} x1 X1.
	 * @param {number} y1 Y1.
	 * @param {number} x2 X2.
	 * @param {number} y2 Y2.
	 * @return {number} Squared distance.
	 */
	function squaredSegmentDistance(x, y, x1, y1, x2, y2) {
	    var dx = x2 - x1;
	    var dy = y2 - y1;
	    if (dx !== 0 || dy !== 0) {
	        var t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);
	        if (t > 1) {
	            x1 = x2;
	            y1 = y2;
	        }
	        else if (t > 0) {
	            x1 += dx * t;
	            y1 += dy * t;
	        }
	    }
	    return squaredDistance(x, y, x1, y1);
	}
	/**
	 * Returns the square of the distance between the points (x1, y1) and (x2, y2).
	 * @param {number} x1 X1.
	 * @param {number} y1 Y1.
	 * @param {number} x2 X2.
	 * @param {number} y2 Y2.
	 * @return {number} Squared distance.
	 */
	function squaredDistance(x1, y1, x2, y2) {
	    var dx = x2 - x1;
	    var dy = y2 - y1;
	    return dx * dx + dy * dy;
	}
	/**
	 * Solves system of linear equations using Gaussian elimination method.
	 *
	 * @param {Array<Array<number>>} mat Augmented matrix (n x n + 1 column)
	 *                                     in row-major order.
	 * @return {Array<number>} The resulting vector.
	 */
	function solveLinearSystem(mat) {
	    var n = mat.length;
	    for (var i = 0; i < n; i++) {
	        // Find max in the i-th column (ignoring i - 1 first rows)
	        var maxRow = i;
	        var maxEl = Math.abs(mat[i][i]);
	        for (var r = i + 1; r < n; r++) {
	            var absValue = Math.abs(mat[r][i]);
	            if (absValue > maxEl) {
	                maxEl = absValue;
	                maxRow = r;
	            }
	        }
	        if (maxEl === 0) {
	            return null; // matrix is singular
	        }
	        // Swap max row with i-th (current) row
	        var tmp = mat[maxRow];
	        mat[maxRow] = mat[i];
	        mat[i] = tmp;
	        // Subtract the i-th row to make all the remaining rows 0 in the i-th column
	        for (var j = i + 1; j < n; j++) {
	            var coef = -mat[j][i] / mat[i][i];
	            for (var k = i; k < n + 1; k++) {
	                if (i == k) {
	                    mat[j][k] = 0;
	                }
	                else {
	                    mat[j][k] += coef * mat[i][k];
	                }
	            }
	        }
	    }
	    // Solve Ax=b for upper triangular matrix A (mat)
	    var x = new Array(n);
	    for (var l = n - 1; l >= 0; l--) {
	        x[l] = mat[l][n] / mat[l][l];
	        for (var m = l - 1; m >= 0; m--) {
	            mat[m][n] -= mat[m][l] * x[l];
	        }
	    }
	    return x;
	}
	/**
	 * Converts radians to to degrees.
	 *
	 * @param {number} angleInRadians Angle in radians.
	 * @return {number} Angle in degrees.
	 */
	function toDegrees(angleInRadians) {
	    return angleInRadians * 180 / Math.PI;
	}
	/**
	 * Converts degrees to radians.
	 *
	 * @param {number} angleInDegrees Angle in degrees.
	 * @return {number} Angle in radians.
	 */
	function toRadians(angleInDegrees) {
	    return angleInDegrees * Math.PI / 180;
	}
	/**
	 * Returns the modulo of a / b, depending on the sign of b.
	 *
	 * @param {number} a Dividend.
	 * @param {number} b Divisor.
	 * @return {number} Modulo.
	 */
	function modulo(a, b) {
	    var r = a % b;
	    return r * b < 0 ? r + b : r;
	}
	/**
	 * Calculates the linearly interpolated value of x between a and b.
	 *
	 * @param {number} a Number
	 * @param {number} b Number
	 * @param {number} x Value to be interpolated.
	 * @return {number} Interpolated value.
	 */
	function lerp(a, b, x) {
	    return a + x * (b - a);
	}

	/**
	 * @module ol/geom/GeometryType
	 */
	/**
	 * The geometry type. One of `'Point'`, `'LineString'`, `'LinearRing'`,
	 * `'Polygon'`, `'MultiPoint'`, `'MultiLineString'`, `'MultiPolygon'`,
	 * `'GeometryCollection'`, `'Circle'`.
	 * @enum {string}
	 */
	var GeometryType = {
	    POINT: 'Point',
	    LINE_STRING: 'LineString',
	    LINEAR_RING: 'LinearRing',
	    POLYGON: 'Polygon',
	    MULTI_POINT: 'MultiPoint',
	    MULTI_LINE_STRING: 'MultiLineString',
	    MULTI_POLYGON: 'MultiPolygon',
	    GEOMETRY_COLLECTION: 'GeometryCollection',
	    CIRCLE: 'Circle'
	};

	/**
	 * @license
	 * Latitude/longitude spherical geodesy formulae taken from
	 * http://www.movable-type.co.uk/scripts/latlong.html
	 * Licensed under CC-BY-3.0.
	 */
	/**
	 * Object literal with options for the {@link getLength} or {@link getArea}
	 * functions.
	 * @typedef {Object} SphereMetricOptions
	 * @property {import("./proj.js").ProjectionLike} [projection='EPSG:3857']
	 * Projection of the  geometry.  By default, the geometry is assumed to be in
	 * Web Mercator.
	 * @property {number} [radius=6371008.8] Sphere radius.  By default, the
	 * [mean Earth radius](https://en.wikipedia.org/wiki/Earth_radius#Mean_radius)
	 * for the WGS84 ellipsoid is used.
	 */
	/**
	 * The mean Earth radius (1/3 * (2a + b)) for the WGS84 ellipsoid.
	 * https://en.wikipedia.org/wiki/Earth_radius#Mean_radius
	 * @type {number}
	 */
	var DEFAULT_RADIUS = 6371008.8;
	/**
	 * Get the great circle distance (in meters) between two geographic coordinates.
	 * @param {Array} c1 Starting coordinate.
	 * @param {Array} c2 Ending coordinate.
	 * @param {number=} opt_radius The sphere radius to use.  Defaults to the Earth's
	 *     mean radius using the WGS84 ellipsoid.
	 * @return {number} The great circle distance between the points (in meters).
	 * @api
	 */
	function getDistance(c1, c2, opt_radius) {
	    var radius = opt_radius || DEFAULT_RADIUS;
	    var lat1 = toRadians(c1[1]);
	    var lat2 = toRadians(c2[1]);
	    var deltaLatBy2 = (lat2 - lat1) / 2;
	    var deltaLonBy2 = toRadians(c2[0] - c1[0]) / 2;
	    var a = Math.sin(deltaLatBy2) * Math.sin(deltaLatBy2) +
	        Math.sin(deltaLonBy2) * Math.sin(deltaLonBy2) *
	            Math.cos(lat1) * Math.cos(lat2);
	    return 2 * radius * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
	}
	/**
	 * Returns the coordinate at the given distance and bearing from `c1`.
	 *
	 * @param {import("./coordinate.js").Coordinate} c1 The origin point (`[lon, lat]` in degrees).
	 * @param {number} distance The great-circle distance between the origin
	 *     point and the target point.
	 * @param {number} bearing The bearing (in radians).
	 * @param {number=} opt_radius The sphere radius to use.  Defaults to the Earth's
	 *     mean radius using the WGS84 ellipsoid.
	 * @return {import("./coordinate.js").Coordinate} The target point.
	 */
	function offset(c1, distance, bearing, opt_radius) {
	    var radius = opt_radius || DEFAULT_RADIUS;
	    var lat1 = toRadians(c1[1]);
	    var lon1 = toRadians(c1[0]);
	    var dByR = distance / radius;
	    var lat = Math.asin(Math.sin(lat1) * Math.cos(dByR) +
	        Math.cos(lat1) * Math.sin(dByR) * Math.cos(bearing));
	    var lon = lon1 + Math.atan2(Math.sin(bearing) * Math.sin(dByR) * Math.cos(lat1), Math.cos(dByR) - Math.sin(lat1) * Math.sin(lat));
	    return [toDegrees(lon), toDegrees(lat)];
	}

	/**
	 * @module ol/util
	 */
	/**
	 * @return {?} Any return.
	 */
	function abstract() {
	    return /** @type {?} */ ((function () {
	        throw new Error('Unimplemented abstract method.');
	    })());
	}
	/**
	 * Counter for getUid.
	 * @type {number}
	 * @private
	 */
	var uidCounter_ = 0;
	/**
	 * Gets a unique ID for an object. This mutates the object so that further calls
	 * with the same object as a parameter returns the same value. Unique IDs are generated
	 * as a strictly increasing sequence. Adapted from goog.getUid.
	 *
	 * @param {Object} obj The object to get the unique ID for.
	 * @return {string} The unique ID for the object.
	 * @api
	 */
	function getUid(obj) {
	    return obj.ol_uid || (obj.ol_uid = String(++uidCounter_));
	}
	/**
	 * OpenLayers version.
	 * @type {string}
	 */
	var VERSION = '6.1.1';

	var __extends = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * Error object thrown when an assertion failed. This is an ECMA-262 Error,
	 * extended with a `code` property.
	 * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error.
	 */
	var AssertionError = /** @class */ (function (_super) {
	    __extends(AssertionError, _super);
	    /**
	     * @param {number} code Error code.
	     */
	    function AssertionError(code) {
	        var _this = this;
	        var path =  'v' + VERSION.split('-')[0];
	        var message = 'Assertion failed. See https://openlayers.org/en/' + path +
	            '/doc/errors/#' + code + ' for details.';
	        _this = _super.call(this, message) || this;
	        /**
	         * Error code. The meaning of the code can be found on
	         * https://openlayers.org/en/latest/doc/errors/ (replace `latest` with
	         * the version found in the OpenLayers script's header comment if a version
	         * other than the latest is used).
	         * @type {number}
	         * @api
	         */
	        _this.code = code;
	        /**
	         * @type {string}
	         */
	        _this.name = 'AssertionError';
	        // Re-assign message, see https://github.com/Rich-Harris/buble/issues/40
	        _this.message = message;
	        return _this;
	    }
	    return AssertionError;
	}(Error));

	/**
	 * @module ol/asserts
	 */
	/**
	 * @param {*} assertion Assertion we expected to be truthy.
	 * @param {number} errorCode Error code.
	 */
	function assert(assertion, errorCode) {
	    if (!assertion) {
	        throw new AssertionError(errorCode);
	    }
	}

	/**
	 * @module ol/extent/Corner
	 */
	/**
	 * Extent corner.
	 * @enum {string}
	 */
	var Corner = {
	    BOTTOM_LEFT: 'bottom-left',
	    BOTTOM_RIGHT: 'bottom-right',
	    TOP_LEFT: 'top-left',
	    TOP_RIGHT: 'top-right'
	};

	/**
	 * @module ol/extent/Relationship
	 */
	/**
	 * Relationship to an extent.
	 * @enum {number}
	 */
	var Relationship = {
	    UNKNOWN: 0,
	    INTERSECTING: 1,
	    ABOVE: 2,
	    RIGHT: 4,
	    BELOW: 8,
	    LEFT: 16
	};

	/**
	 * @module ol/extent
	 */
	/**
	 * An array of numbers representing an extent: `[minx, miny, maxx, maxy]`.
	 * @typedef {Array<number>} Extent
	 * @api
	 */
	/**
	 * Build an extent that includes all given coordinates.
	 *
	 * @param {Array<import("./coordinate.js").Coordinate>} coordinates Coordinates.
	 * @return {Extent} Bounding extent.
	 * @api
	 */
	function boundingExtent(coordinates) {
	    var extent = createEmpty();
	    for (var i = 0, ii = coordinates.length; i < ii; ++i) {
	        extendCoordinate(extent, coordinates[i]);
	    }
	    return extent;
	}
	/**
	 * @param {Array<number>} xs Xs.
	 * @param {Array<number>} ys Ys.
	 * @param {Extent=} opt_extent Destination extent.
	 * @private
	 * @return {Extent} Extent.
	 */
	function _boundingExtentXYs(xs, ys, opt_extent) {
	    var minX = Math.min.apply(null, xs);
	    var minY = Math.min.apply(null, ys);
	    var maxX = Math.max.apply(null, xs);
	    var maxY = Math.max.apply(null, ys);
	    return createOrUpdate(minX, minY, maxX, maxY, opt_extent);
	}
	/**
	 * Return extent increased by the provided value.
	 * @param {Extent} extent Extent.
	 * @param {number} value The amount by which the extent should be buffered.
	 * @param {Extent=} opt_extent Extent.
	 * @return {Extent} Extent.
	 * @api
	 */
	function buffer(extent, value, opt_extent) {
	    if (opt_extent) {
	        opt_extent[0] = extent[0] - value;
	        opt_extent[1] = extent[1] - value;
	        opt_extent[2] = extent[2] + value;
	        opt_extent[3] = extent[3] + value;
	        return opt_extent;
	    }
	    else {
	        return [
	            extent[0] - value,
	            extent[1] - value,
	            extent[2] + value,
	            extent[3] + value
	        ];
	    }
	}
	/**
	 * Creates a clone of an extent.
	 *
	 * @param {Extent} extent Extent to clone.
	 * @param {Extent=} opt_extent Extent.
	 * @return {Extent} The clone.
	 */
	function clone(extent, opt_extent) {
	    if (opt_extent) {
	        opt_extent[0] = extent[0];
	        opt_extent[1] = extent[1];
	        opt_extent[2] = extent[2];
	        opt_extent[3] = extent[3];
	        return opt_extent;
	    }
	    else {
	        return extent.slice();
	    }
	}
	/**
	 * @param {Extent} extent Extent.
	 * @param {number} x X.
	 * @param {number} y Y.
	 * @return {number} Closest squared distance.
	 */
	function closestSquaredDistanceXY(extent, x, y) {
	    var dx, dy;
	    if (x < extent[0]) {
	        dx = extent[0] - x;
	    }
	    else if (extent[2] < x) {
	        dx = x - extent[2];
	    }
	    else {
	        dx = 0;
	    }
	    if (y < extent[1]) {
	        dy = extent[1] - y;
	    }
	    else if (extent[3] < y) {
	        dy = y - extent[3];
	    }
	    else {
	        dy = 0;
	    }
	    return dx * dx + dy * dy;
	}
	/**
	 * Check if the passed coordinate is contained or on the edge of the extent.
	 *
	 * @param {Extent} extent Extent.
	 * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
	 * @return {boolean} The coordinate is contained in the extent.
	 * @api
	 */
	function containsCoordinate(extent, coordinate) {
	    return containsXY(extent, coordinate[0], coordinate[1]);
	}
	/**
	 * Check if one extent contains another.
	 *
	 * An extent is deemed contained if it lies completely within the other extent,
	 * including if they share one or more edges.
	 *
	 * @param {Extent} extent1 Extent 1.
	 * @param {Extent} extent2 Extent 2.
	 * @return {boolean} The second extent is contained by or on the edge of the
	 *     first.
	 * @api
	 */
	function containsExtent(extent1, extent2) {
	    return extent1[0] <= extent2[0] && extent2[2] <= extent1[2] &&
	        extent1[1] <= extent2[1] && extent2[3] <= extent1[3];
	}
	/**
	 * Check if the passed coordinate is contained or on the edge of the extent.
	 *
	 * @param {Extent} extent Extent.
	 * @param {number} x X coordinate.
	 * @param {number} y Y coordinate.
	 * @return {boolean} The x, y values are contained in the extent.
	 * @api
	 */
	function containsXY(extent, x, y) {
	    return extent[0] <= x && x <= extent[2] && extent[1] <= y && y <= extent[3];
	}
	/**
	 * Get the relationship between a coordinate and extent.
	 * @param {Extent} extent The extent.
	 * @param {import("./coordinate.js").Coordinate} coordinate The coordinate.
	 * @return {Relationship} The relationship (bitwise compare with
	 *     import("./extent/Relationship.js").Relationship).
	 */
	function coordinateRelationship(extent, coordinate) {
	    var minX = extent[0];
	    var minY = extent[1];
	    var maxX = extent[2];
	    var maxY = extent[3];
	    var x = coordinate[0];
	    var y = coordinate[1];
	    var relationship = Relationship.UNKNOWN;
	    if (x < minX) {
	        relationship = relationship | Relationship.LEFT;
	    }
	    else if (x > maxX) {
	        relationship = relationship | Relationship.RIGHT;
	    }
	    if (y < minY) {
	        relationship = relationship | Relationship.BELOW;
	    }
	    else if (y > maxY) {
	        relationship = relationship | Relationship.ABOVE;
	    }
	    if (relationship === Relationship.UNKNOWN) {
	        relationship = Relationship.INTERSECTING;
	    }
	    return relationship;
	}
	/**
	 * Create an empty extent.
	 * @return {Extent} Empty extent.
	 * @api
	 */
	function createEmpty() {
	    return [Infinity, Infinity, -Infinity, -Infinity];
	}
	/**
	 * Create a new extent or update the provided extent.
	 * @param {number} minX Minimum X.
	 * @param {number} minY Minimum Y.
	 * @param {number} maxX Maximum X.
	 * @param {number} maxY Maximum Y.
	 * @param {Extent=} opt_extent Destination extent.
	 * @return {Extent} Extent.
	 */
	function createOrUpdate(minX, minY, maxX, maxY, opt_extent) {
	    if (opt_extent) {
	        opt_extent[0] = minX;
	        opt_extent[1] = minY;
	        opt_extent[2] = maxX;
	        opt_extent[3] = maxY;
	        return opt_extent;
	    }
	    else {
	        return [minX, minY, maxX, maxY];
	    }
	}
	/**
	 * Create a new empty extent or make the provided one empty.
	 * @param {Extent=} opt_extent Extent.
	 * @return {Extent} Extent.
	 */
	function createOrUpdateEmpty(opt_extent) {
	    return createOrUpdate(Infinity, Infinity, -Infinity, -Infinity, opt_extent);
	}
	/**
	 * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
	 * @param {Extent=} opt_extent Extent.
	 * @return {Extent} Extent.
	 */
	function createOrUpdateFromCoordinate(coordinate, opt_extent) {
	    var x = coordinate[0];
	    var y = coordinate[1];
	    return createOrUpdate(x, y, x, y, opt_extent);
	}
	/**
	 * @param {Array<import("./coordinate.js").Coordinate>} coordinates Coordinates.
	 * @param {Extent=} opt_extent Extent.
	 * @return {Extent} Extent.
	 */
	function createOrUpdateFromCoordinates(coordinates, opt_extent) {
	    var extent = createOrUpdateEmpty(opt_extent);
	    return extendCoordinates(extent, coordinates);
	}
	/**
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {number} end End.
	 * @param {number} stride Stride.
	 * @param {Extent=} opt_extent Extent.
	 * @return {Extent} Extent.
	 */
	function createOrUpdateFromFlatCoordinates(flatCoordinates, offset, end, stride, opt_extent) {
	    var extent = createOrUpdateEmpty(opt_extent);
	    return extendFlatCoordinates(extent, flatCoordinates, offset, end, stride);
	}
	/**
	 * Determine if two extents are equivalent.
	 * @param {Extent} extent1 Extent 1.
	 * @param {Extent} extent2 Extent 2.
	 * @return {boolean} The two extents are equivalent.
	 * @api
	 */
	function equals(extent1, extent2) {
	    return extent1[0] == extent2[0] && extent1[2] == extent2[2] &&
	        extent1[1] == extent2[1] && extent1[3] == extent2[3];
	}
	/**
	 * Modify an extent to include another extent.
	 * @param {Extent} extent1 The extent to be modified.
	 * @param {Extent} extent2 The extent that will be included in the first.
	 * @return {Extent} A reference to the first (extended) extent.
	 * @api
	 */
	function extend(extent1, extent2) {
	    if (extent2[0] < extent1[0]) {
	        extent1[0] = extent2[0];
	    }
	    if (extent2[2] > extent1[2]) {
	        extent1[2] = extent2[2];
	    }
	    if (extent2[1] < extent1[1]) {
	        extent1[1] = extent2[1];
	    }
	    if (extent2[3] > extent1[3]) {
	        extent1[3] = extent2[3];
	    }
	    return extent1;
	}
	/**
	 * @param {Extent} extent Extent.
	 * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
	 */
	function extendCoordinate(extent, coordinate) {
	    if (coordinate[0] < extent[0]) {
	        extent[0] = coordinate[0];
	    }
	    if (coordinate[0] > extent[2]) {
	        extent[2] = coordinate[0];
	    }
	    if (coordinate[1] < extent[1]) {
	        extent[1] = coordinate[1];
	    }
	    if (coordinate[1] > extent[3]) {
	        extent[3] = coordinate[1];
	    }
	}
	/**
	 * @param {Extent} extent Extent.
	 * @param {Array<import("./coordinate.js").Coordinate>} coordinates Coordinates.
	 * @return {Extent} Extent.
	 */
	function extendCoordinates(extent, coordinates) {
	    for (var i = 0, ii = coordinates.length; i < ii; ++i) {
	        extendCoordinate(extent, coordinates[i]);
	    }
	    return extent;
	}
	/**
	 * @param {Extent} extent Extent.
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {number} end End.
	 * @param {number} stride Stride.
	 * @return {Extent} Extent.
	 */
	function extendFlatCoordinates(extent, flatCoordinates, offset, end, stride) {
	    for (; offset < end; offset += stride) {
	        extendXY(extent, flatCoordinates[offset], flatCoordinates[offset + 1]);
	    }
	    return extent;
	}
	/**
	 * @param {Extent} extent Extent.
	 * @param {number} x X.
	 * @param {number} y Y.
	 */
	function extendXY(extent, x, y) {
	    extent[0] = Math.min(extent[0], x);
	    extent[1] = Math.min(extent[1], y);
	    extent[2] = Math.max(extent[2], x);
	    extent[3] = Math.max(extent[3], y);
	}
	/**
	 * This function calls `callback` for each corner of the extent. If the
	 * callback returns a truthy value the function returns that value
	 * immediately. Otherwise the function returns `false`.
	 * @param {Extent} extent Extent.
	 * @param {function(import("./coordinate.js").Coordinate): S} callback Callback.
	 * @return {S|boolean} Value.
	 * @template S
	 */
	function forEachCorner(extent, callback) {
	    var val;
	    val = callback(getBottomLeft(extent));
	    if (val) {
	        return val;
	    }
	    val = callback(getBottomRight(extent));
	    if (val) {
	        return val;
	    }
	    val = callback(getTopRight(extent));
	    if (val) {
	        return val;
	    }
	    val = callback(getTopLeft(extent));
	    if (val) {
	        return val;
	    }
	    return false;
	}
	/**
	 * Get the size of an extent.
	 * @param {Extent} extent Extent.
	 * @return {number} Area.
	 * @api
	 */
	function getArea(extent) {
	    var area = 0;
	    if (!isEmpty(extent)) {
	        area = getWidth(extent) * getHeight(extent);
	    }
	    return area;
	}
	/**
	 * Get the bottom left coordinate of an extent.
	 * @param {Extent} extent Extent.
	 * @return {import("./coordinate.js").Coordinate} Bottom left coordinate.
	 * @api
	 */
	function getBottomLeft(extent) {
	    return [extent[0], extent[1]];
	}
	/**
	 * Get the bottom right coordinate of an extent.
	 * @param {Extent} extent Extent.
	 * @return {import("./coordinate.js").Coordinate} Bottom right coordinate.
	 * @api
	 */
	function getBottomRight(extent) {
	    return [extent[2], extent[1]];
	}
	/**
	 * Get the center coordinate of an extent.
	 * @param {Extent} extent Extent.
	 * @return {import("./coordinate.js").Coordinate} Center.
	 * @api
	 */
	function getCenter(extent) {
	    return [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];
	}
	/**
	 * Get a corner coordinate of an extent.
	 * @param {Extent} extent Extent.
	 * @param {Corner} corner Corner.
	 * @return {import("./coordinate.js").Coordinate} Corner coordinate.
	 */
	function getCorner(extent, corner) {
	    var coordinate;
	    if (corner === Corner.BOTTOM_LEFT) {
	        coordinate = getBottomLeft(extent);
	    }
	    else if (corner === Corner.BOTTOM_RIGHT) {
	        coordinate = getBottomRight(extent);
	    }
	    else if (corner === Corner.TOP_LEFT) {
	        coordinate = getTopLeft(extent);
	    }
	    else if (corner === Corner.TOP_RIGHT) {
	        coordinate = getTopRight(extent);
	    }
	    else {
	        assert(false, 13); // Invalid corner
	    }
	    return coordinate;
	}
	/**
	 * @param {import("./coordinate.js").Coordinate} center Center.
	 * @param {number} resolution Resolution.
	 * @param {number} rotation Rotation.
	 * @param {import("./size.js").Size} size Size.
	 * @param {Extent=} opt_extent Destination extent.
	 * @return {Extent} Extent.
	 */
	function getForViewAndSize(center, resolution, rotation, size, opt_extent) {
	    var dx = resolution * size[0] / 2;
	    var dy = resolution * size[1] / 2;
	    var cosRotation = Math.cos(rotation);
	    var sinRotation = Math.sin(rotation);
	    var xCos = dx * cosRotation;
	    var xSin = dx * sinRotation;
	    var yCos = dy * cosRotation;
	    var ySin = dy * sinRotation;
	    var x = center[0];
	    var y = center[1];
	    var x0 = x - xCos + ySin;
	    var x1 = x - xCos - ySin;
	    var x2 = x + xCos - ySin;
	    var x3 = x + xCos + ySin;
	    var y0 = y - xSin - yCos;
	    var y1 = y - xSin + yCos;
	    var y2 = y + xSin + yCos;
	    var y3 = y + xSin - yCos;
	    return createOrUpdate(Math.min(x0, x1, x2, x3), Math.min(y0, y1, y2, y3), Math.max(x0, x1, x2, x3), Math.max(y0, y1, y2, y3), opt_extent);
	}
	/**
	 * Get the height of an extent.
	 * @param {Extent} extent Extent.
	 * @return {number} Height.
	 * @api
	 */
	function getHeight(extent) {
	    return extent[3] - extent[1];
	}
	/**
	 * Get the intersection of two extents.
	 * @param {Extent} extent1 Extent 1.
	 * @param {Extent} extent2 Extent 2.
	 * @param {Extent=} opt_extent Optional extent to populate with intersection.
	 * @return {Extent} Intersecting extent.
	 * @api
	 */
	function getIntersection(extent1, extent2, opt_extent) {
	    var intersection = opt_extent ? opt_extent : createEmpty();
	    if (intersects(extent1, extent2)) {
	        if (extent1[0] > extent2[0]) {
	            intersection[0] = extent1[0];
	        }
	        else {
	            intersection[0] = extent2[0];
	        }
	        if (extent1[1] > extent2[1]) {
	            intersection[1] = extent1[1];
	        }
	        else {
	            intersection[1] = extent2[1];
	        }
	        if (extent1[2] < extent2[2]) {
	            intersection[2] = extent1[2];
	        }
	        else {
	            intersection[2] = extent2[2];
	        }
	        if (extent1[3] < extent2[3]) {
	            intersection[3] = extent1[3];
	        }
	        else {
	            intersection[3] = extent2[3];
	        }
	    }
	    else {
	        createOrUpdateEmpty(intersection);
	    }
	    return intersection;
	}
	/**
	 * Get the top left coordinate of an extent.
	 * @param {Extent} extent Extent.
	 * @return {import("./coordinate.js").Coordinate} Top left coordinate.
	 * @api
	 */
	function getTopLeft(extent) {
	    return [extent[0], extent[3]];
	}
	/**
	 * Get the top right coordinate of an extent.
	 * @param {Extent} extent Extent.
	 * @return {import("./coordinate.js").Coordinate} Top right coordinate.
	 * @api
	 */
	function getTopRight(extent) {
	    return [extent[2], extent[3]];
	}
	/**
	 * Get the width of an extent.
	 * @param {Extent} extent Extent.
	 * @return {number} Width.
	 * @api
	 */
	function getWidth(extent) {
	    return extent[2] - extent[0];
	}
	/**
	 * Determine if one extent intersects another.
	 * @param {Extent} extent1 Extent 1.
	 * @param {Extent} extent2 Extent.
	 * @return {boolean} The two extents intersect.
	 * @api
	 */
	function intersects(extent1, extent2) {
	    return extent1[0] <= extent2[2] &&
	        extent1[2] >= extent2[0] &&
	        extent1[1] <= extent2[3] &&
	        extent1[3] >= extent2[1];
	}
	/**
	 * Determine if an extent is empty.
	 * @param {Extent} extent Extent.
	 * @return {boolean} Is empty.
	 * @api
	 */
	function isEmpty(extent) {
	    return extent[2] < extent[0] || extent[3] < extent[1];
	}
	/**
	 * @param {Extent} extent Extent.
	 * @param {Extent=} opt_extent Extent.
	 * @return {Extent} Extent.
	 */
	function returnOrUpdate(extent, opt_extent) {
	    if (opt_extent) {
	        opt_extent[0] = extent[0];
	        opt_extent[1] = extent[1];
	        opt_extent[2] = extent[2];
	        opt_extent[3] = extent[3];
	        return opt_extent;
	    }
	    else {
	        return extent;
	    }
	}
	/**
	 * @param {Extent} extent Extent.
	 * @param {number} value Value.
	 */
	function scaleFromCenter(extent, value) {
	    var deltaX = ((extent[2] - extent[0]) / 2) * (value - 1);
	    var deltaY = ((extent[3] - extent[1]) / 2) * (value - 1);
	    extent[0] -= deltaX;
	    extent[2] += deltaX;
	    extent[1] -= deltaY;
	    extent[3] += deltaY;
	}
	/**
	 * Determine if the segment between two coordinates intersects (crosses,
	 * touches, or is contained by) the provided extent.
	 * @param {Extent} extent The extent.
	 * @param {import("./coordinate.js").Coordinate} start Segment start coordinate.
	 * @param {import("./coordinate.js").Coordinate} end Segment end coordinate.
	 * @return {boolean} The segment intersects the extent.
	 */
	function intersectsSegment(extent, start, end) {
	    var intersects = false;
	    var startRel = coordinateRelationship(extent, start);
	    var endRel = coordinateRelationship(extent, end);
	    if (startRel === Relationship.INTERSECTING ||
	        endRel === Relationship.INTERSECTING) {
	        intersects = true;
	    }
	    else {
	        var minX = extent[0];
	        var minY = extent[1];
	        var maxX = extent[2];
	        var maxY = extent[3];
	        var startX = start[0];
	        var startY = start[1];
	        var endX = end[0];
	        var endY = end[1];
	        var slope = (endY - startY) / (endX - startX);
	        var x = void 0, y = void 0;
	        if (!!(endRel & Relationship.ABOVE) &&
	            !(startRel & Relationship.ABOVE)) {
	            // potentially intersects top
	            x = endX - ((endY - maxY) / slope);
	            intersects = x >= minX && x <= maxX;
	        }
	        if (!intersects && !!(endRel & Relationship.RIGHT) &&
	            !(startRel & Relationship.RIGHT)) {
	            // potentially intersects right
	            y = endY - ((endX - maxX) * slope);
	            intersects = y >= minY && y <= maxY;
	        }
	        if (!intersects && !!(endRel & Relationship.BELOW) &&
	            !(startRel & Relationship.BELOW)) {
	            // potentially intersects bottom
	            x = endX - ((endY - minY) / slope);
	            intersects = x >= minX && x <= maxX;
	        }
	        if (!intersects && !!(endRel & Relationship.LEFT) &&
	            !(startRel & Relationship.LEFT)) {
	            // potentially intersects left
	            y = endY - ((endX - minX) * slope);
	            intersects = y >= minY && y <= maxY;
	        }
	    }
	    return intersects;
	}
	/**
	 * Apply a transform function to the extent.
	 * @param {Extent} extent Extent.
	 * @param {import("./proj.js").TransformFunction} transformFn Transform function.
	 * Called with `[minX, minY, maxX, maxY]` extent coordinates.
	 * @param {Extent=} opt_extent Destination extent.
	 * @return {Extent} Extent.
	 * @api
	 */
	function applyTransform(extent, transformFn, opt_extent) {
	    var coordinates = [
	        extent[0], extent[1],
	        extent[0], extent[3],
	        extent[2], extent[1],
	        extent[2], extent[3]
	    ];
	    transformFn(coordinates, coordinates, 2);
	    var xs = [coordinates[0], coordinates[2], coordinates[4], coordinates[6]];
	    var ys = [coordinates[1], coordinates[3], coordinates[5], coordinates[7]];
	    return _boundingExtentXYs(xs, ys, opt_extent);
	}

	/**
	 * @module ol/proj/Units
	 */
	/**
	 * Projection units: `'degrees'`, `'ft'`, `'m'`, `'pixels'`, `'tile-pixels'` or
	 * `'us-ft'`.
	 * @enum {string}
	 */
	var Units = {
	    DEGREES: 'degrees',
	    FEET: 'ft',
	    METERS: 'm',
	    PIXELS: 'pixels',
	    TILE_PIXELS: 'tile-pixels',
	    USFEET: 'us-ft'
	};
	/**
	 * Meters per unit lookup table.
	 * @const
	 * @type {Object<Units, number>}
	 * @api
	 */
	var METERS_PER_UNIT = {};
	// use the radius of the Normal sphere
	METERS_PER_UNIT[Units.DEGREES] = 2 * Math.PI * 6370997 / 360;
	METERS_PER_UNIT[Units.FEET] = 0.3048;
	METERS_PER_UNIT[Units.METERS] = 1;
	METERS_PER_UNIT[Units.USFEET] = 1200 / 3937;

	/**
	 * @module ol/proj/Projection
	 */
	/**
	 * @typedef {Object} Options
	 * @property {string} code The SRS identifier code, e.g. `EPSG:4326`.
	 * @property {import("./Units.js").default|string} [units] Units. Required unless a
	 * proj4 projection is defined for `code`.
	 * @property {import("../extent.js").Extent} [extent] The validity extent for the SRS.
	 * @property {string} [axisOrientation='enu'] The axis orientation as specified in Proj4.
	 * @property {boolean} [global=false] Whether the projection is valid for the whole globe.
	 * @property {number} [metersPerUnit] The meters per unit for the SRS.
	 * If not provided, the `units` are used to get the meters per unit from the {@link module:ol/proj/Units~METERS_PER_UNIT}
	 * lookup table.
	 * @property {import("../extent.js").Extent} [worldExtent] The world extent for the SRS.
	 * @property {function(number, import("../coordinate.js").Coordinate):number} [getPointResolution]
	 * Function to determine resolution at a point. The function is called with a
	 * `{number}` view resolution and an `{import("../coordinate.js").Coordinate}` as arguments, and returns
	 * the `{number}` resolution in projection units at the passed coordinate. If this is `undefined`,
	 * the default {@link module:ol/proj#getPointResolution} function will be used.
	 */
	/**
	 * @classdesc
	 * Projection definition class. One of these is created for each projection
	 * supported in the application and stored in the {@link module:ol/proj} namespace.
	 * You can use these in applications, but this is not required, as API params
	 * and options use {@link module:ol/proj~ProjectionLike} which means the simple string
	 * code will suffice.
	 *
	 * You can use {@link module:ol/proj~get} to retrieve the object for a particular
	 * projection.
	 *
	 * The library includes definitions for `EPSG:4326` and `EPSG:3857`, together
	 * with the following aliases:
	 * * `EPSG:4326`: CRS:84, urn:ogc:def:crs:EPSG:6.6:4326,
	 *     urn:ogc:def:crs:OGC:1.3:CRS84, urn:ogc:def:crs:OGC:2:84,
	 *     http://www.opengis.net/gml/srs/epsg.xml#4326,
	 *     urn:x-ogc:def:crs:EPSG:4326
	 * * `EPSG:3857`: EPSG:102100, EPSG:102113, EPSG:900913,
	 *     urn:ogc:def:crs:EPSG:6.18:3:3857,
	 *     http://www.opengis.net/gml/srs/epsg.xml#3857
	 *
	 * If you use [proj4js](https://github.com/proj4js/proj4js), aliases can
	 * be added using `proj4.defs()`. After all required projection definitions are
	 * added, call the {@link module:ol/proj/proj4~register} function.
	 *
	 * @api
	 */
	var Projection = /** @class */ (function () {
	    /**
	     * @param {Options} options Projection options.
	     */
	    function Projection(options) {
	        /**
	         * @private
	         * @type {string}
	         */
	        this.code_ = options.code;
	        /**
	         * Units of projected coordinates. When set to `TILE_PIXELS`, a
	         * `this.extent_` and `this.worldExtent_` must be configured properly for each
	         * tile.
	         * @private
	         * @type {import("./Units.js").default}
	         */
	        this.units_ = /** @type {import("./Units.js").default} */ (options.units);
	        /**
	         * Validity extent of the projection in projected coordinates. For projections
	         * with `TILE_PIXELS` units, this is the extent of the tile in
	         * tile pixel space.
	         * @private
	         * @type {import("../extent.js").Extent}
	         */
	        this.extent_ = options.extent !== undefined ? options.extent : null;
	        /**
	         * Extent of the world in EPSG:4326. For projections with
	         * `TILE_PIXELS` units, this is the extent of the tile in
	         * projected coordinate space.
	         * @private
	         * @type {import("../extent.js").Extent}
	         */
	        this.worldExtent_ = options.worldExtent !== undefined ?
	            options.worldExtent : null;
	        /**
	         * @private
	         * @type {string}
	         */
	        this.axisOrientation_ = options.axisOrientation !== undefined ?
	            options.axisOrientation : 'enu';
	        /**
	         * @private
	         * @type {boolean}
	         */
	        this.global_ = options.global !== undefined ? options.global : false;
	        /**
	         * @private
	         * @type {boolean}
	         */
	        this.canWrapX_ = !!(this.global_ && this.extent_);
	        /**
	         * @private
	         * @type {function(number, import("../coordinate.js").Coordinate):number|undefined}
	         */
	        this.getPointResolutionFunc_ = options.getPointResolution;
	        /**
	         * @private
	         * @type {import("../tilegrid/TileGrid.js").default}
	         */
	        this.defaultTileGrid_ = null;
	        /**
	         * @private
	         * @type {number|undefined}
	         */
	        this.metersPerUnit_ = options.metersPerUnit;
	    }
	    /**
	     * @return {boolean} The projection is suitable for wrapping the x-axis
	     */
	    Projection.prototype.canWrapX = function () {
	        return this.canWrapX_;
	    };
	    /**
	     * Get the code for this projection, e.g. 'EPSG:4326'.
	     * @return {string} Code.
	     * @api
	     */
	    Projection.prototype.getCode = function () {
	        return this.code_;
	    };
	    /**
	     * Get the validity extent for this projection.
	     * @return {import("../extent.js").Extent} Extent.
	     * @api
	     */
	    Projection.prototype.getExtent = function () {
	        return this.extent_;
	    };
	    /**
	     * Get the units of this projection.
	     * @return {import("./Units.js").default} Units.
	     * @api
	     */
	    Projection.prototype.getUnits = function () {
	        return this.units_;
	    };
	    /**
	     * Get the amount of meters per unit of this projection.  If the projection is
	     * not configured with `metersPerUnit` or a units identifier, the return is
	     * `undefined`.
	     * @return {number|undefined} Meters.
	     * @api
	     */
	    Projection.prototype.getMetersPerUnit = function () {
	        return this.metersPerUnit_ || METERS_PER_UNIT[this.units_];
	    };
	    /**
	     * Get the world extent for this projection.
	     * @return {import("../extent.js").Extent} Extent.
	     * @api
	     */
	    Projection.prototype.getWorldExtent = function () {
	        return this.worldExtent_;
	    };
	    /**
	     * Get the axis orientation of this projection.
	     * Example values are:
	     * enu - the default easting, northing, elevation.
	     * neu - northing, easting, up - useful for "lat/long" geographic coordinates,
	     *     or south orientated transverse mercator.
	     * wnu - westing, northing, up - some planetary coordinate systems have
	     *     "west positive" coordinate systems
	     * @return {string} Axis orientation.
	     * @api
	     */
	    Projection.prototype.getAxisOrientation = function () {
	        return this.axisOrientation_;
	    };
	    /**
	     * Is this projection a global projection which spans the whole world?
	     * @return {boolean} Whether the projection is global.
	     * @api
	     */
	    Projection.prototype.isGlobal = function () {
	        return this.global_;
	    };
	    /**
	     * Set if the projection is a global projection which spans the whole world
	     * @param {boolean} global Whether the projection is global.
	     * @api
	     */
	    Projection.prototype.setGlobal = function (global) {
	        this.global_ = global;
	        this.canWrapX_ = !!(global && this.extent_);
	    };
	    /**
	     * @return {import("../tilegrid/TileGrid.js").default} The default tile grid.
	     */
	    Projection.prototype.getDefaultTileGrid = function () {
	        return this.defaultTileGrid_;
	    };
	    /**
	     * @param {import("../tilegrid/TileGrid.js").default} tileGrid The default tile grid.
	     */
	    Projection.prototype.setDefaultTileGrid = function (tileGrid) {
	        this.defaultTileGrid_ = tileGrid;
	    };
	    /**
	     * Set the validity extent for this projection.
	     * @param {import("../extent.js").Extent} extent Extent.
	     * @api
	     */
	    Projection.prototype.setExtent = function (extent) {
	        this.extent_ = extent;
	        this.canWrapX_ = !!(this.global_ && extent);
	    };
	    /**
	     * Set the world extent for this projection.
	     * @param {import("../extent.js").Extent} worldExtent World extent
	     *     [minlon, minlat, maxlon, maxlat].
	     * @api
	     */
	    Projection.prototype.setWorldExtent = function (worldExtent) {
	        this.worldExtent_ = worldExtent;
	    };
	    /**
	     * Set the getPointResolution function (see {@link module:ol/proj~getPointResolution}
	     * for this projection.
	     * @param {function(number, import("../coordinate.js").Coordinate):number} func Function
	     * @api
	     */
	    Projection.prototype.setGetPointResolution = function (func) {
	        this.getPointResolutionFunc_ = func;
	    };
	    /**
	     * Get the custom point resolution function for this projection (if set).
	     * @return {function(number, import("../coordinate.js").Coordinate):number|undefined} The custom point
	     * resolution function (if set).
	     */
	    Projection.prototype.getPointResolutionFunc = function () {
	        return this.getPointResolutionFunc_;
	    };
	    return Projection;
	}());

	var __extends$1 = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * Radius of WGS84 sphere
	 *
	 * @const
	 * @type {number}
	 */
	var RADIUS = 6378137;
	/**
	 * @const
	 * @type {number}
	 */
	var HALF_SIZE = Math.PI * RADIUS;
	/**
	 * @const
	 * @type {import("../extent.js").Extent}
	 */
	var EXTENT = [
	    -HALF_SIZE, -HALF_SIZE,
	    HALF_SIZE, HALF_SIZE
	];
	/**
	 * @const
	 * @type {import("../extent.js").Extent}
	 */
	var WORLD_EXTENT = [-180, -85, 180, 85];
	/**
	 * @classdesc
	 * Projection object for web/spherical Mercator (EPSG:3857).
	 */
	var EPSG3857Projection = /** @class */ (function (_super) {
	    __extends$1(EPSG3857Projection, _super);
	    /**
	     * @param {string} code Code.
	     */
	    function EPSG3857Projection(code) {
	        return _super.call(this, {
	            code: code,
	            units: Units.METERS,
	            extent: EXTENT,
	            global: true,
	            worldExtent: WORLD_EXTENT,
	            getPointResolution: function (resolution, point) {
	                return resolution / cosh(point[1] / RADIUS);
	            }
	        }) || this;
	    }
	    return EPSG3857Projection;
	}(Projection));
	/**
	 * Projections equal to EPSG:3857.
	 *
	 * @const
	 * @type {Array<import("./Projection.js").default>}
	 */
	var PROJECTIONS = [
	    new EPSG3857Projection('EPSG:3857'),
	    new EPSG3857Projection('EPSG:102100'),
	    new EPSG3857Projection('EPSG:102113'),
	    new EPSG3857Projection('EPSG:900913'),
	    new EPSG3857Projection('urn:ogc:def:crs:EPSG:6.18:3:3857'),
	    new EPSG3857Projection('urn:ogc:def:crs:EPSG::3857'),
	    new EPSG3857Projection('http://www.opengis.net/gml/srs/epsg.xml#3857')
	];
	/**
	 * Transformation from EPSG:4326 to EPSG:3857.
	 *
	 * @param {Array<number>} input Input array of coordinate values.
	 * @param {Array<number>=} opt_output Output array of coordinate values.
	 * @param {number=} opt_dimension Dimension (default is `2`).
	 * @return {Array<number>} Output array of coordinate values.
	 */
	function fromEPSG4326(input, opt_output, opt_dimension) {
	    var length = input.length;
	    var dimension = opt_dimension > 1 ? opt_dimension : 2;
	    var output = opt_output;
	    if (output === undefined) {
	        if (dimension > 2) {
	            // preserve values beyond second dimension
	            output = input.slice();
	        }
	        else {
	            output = new Array(length);
	        }
	    }
	    var halfSize = HALF_SIZE;
	    for (var i = 0; i < length; i += dimension) {
	        output[i] = halfSize * input[i] / 180;
	        var y = RADIUS *
	            Math.log(Math.tan(Math.PI * (+input[i + 1] + 90) / 360));
	        if (y > halfSize) {
	            y = halfSize;
	        }
	        else if (y < -halfSize) {
	            y = -halfSize;
	        }
	        output[i + 1] = y;
	    }
	    return output;
	}
	/**
	 * Transformation from EPSG:3857 to EPSG:4326.
	 *
	 * @param {Array<number>} input Input array of coordinate values.
	 * @param {Array<number>=} opt_output Output array of coordinate values.
	 * @param {number=} opt_dimension Dimension (default is `2`).
	 * @return {Array<number>} Output array of coordinate values.
	 */
	function toEPSG4326(input, opt_output, opt_dimension) {
	    var length = input.length;
	    var dimension = opt_dimension > 1 ? opt_dimension : 2;
	    var output = opt_output;
	    if (output === undefined) {
	        if (dimension > 2) {
	            // preserve values beyond second dimension
	            output = input.slice();
	        }
	        else {
	            output = new Array(length);
	        }
	    }
	    for (var i = 0; i < length; i += dimension) {
	        output[i] = 180 * input[i] / HALF_SIZE;
	        output[i + 1] = 360 * Math.atan(Math.exp(input[i + 1] / RADIUS)) / Math.PI - 90;
	    }
	    return output;
	}

	var __extends$2 = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * Semi-major radius of the WGS84 ellipsoid.
	 *
	 * @const
	 * @type {number}
	 */
	var RADIUS$1 = 6378137;
	/**
	 * Extent of the EPSG:4326 projection which is the whole world.
	 *
	 * @const
	 * @type {import("../extent.js").Extent}
	 */
	var EXTENT$1 = [-180, -90, 180, 90];
	/**
	 * @const
	 * @type {number}
	 */
	var METERS_PER_UNIT$1 = Math.PI * RADIUS$1 / 180;
	/**
	 * @classdesc
	 * Projection object for WGS84 geographic coordinates (EPSG:4326).
	 *
	 * Note that OpenLayers does not strictly comply with the EPSG definition.
	 * The EPSG registry defines 4326 as a CRS for Latitude,Longitude (y,x).
	 * OpenLayers treats EPSG:4326 as a pseudo-projection, with x,y coordinates.
	 */
	var EPSG4326Projection = /** @class */ (function (_super) {
	    __extends$2(EPSG4326Projection, _super);
	    /**
	     * @param {string} code Code.
	     * @param {string=} opt_axisOrientation Axis orientation.
	     */
	    function EPSG4326Projection(code, opt_axisOrientation) {
	        return _super.call(this, {
	            code: code,
	            units: Units.DEGREES,
	            extent: EXTENT$1,
	            axisOrientation: opt_axisOrientation,
	            global: true,
	            metersPerUnit: METERS_PER_UNIT$1,
	            worldExtent: EXTENT$1
	        }) || this;
	    }
	    return EPSG4326Projection;
	}(Projection));
	/**
	 * Projections equal to EPSG:4326.
	 *
	 * @const
	 * @type {Array<import("./Projection.js").default>}
	 */
	var PROJECTIONS$1 = [
	    new EPSG4326Projection('CRS:84'),
	    new EPSG4326Projection('EPSG:4326', 'neu'),
	    new EPSG4326Projection('urn:ogc:def:crs:EPSG::4326', 'neu'),
	    new EPSG4326Projection('urn:ogc:def:crs:EPSG:6.6:4326', 'neu'),
	    new EPSG4326Projection('urn:ogc:def:crs:OGC:1.3:CRS84'),
	    new EPSG4326Projection('urn:ogc:def:crs:OGC:2:84'),
	    new EPSG4326Projection('http://www.opengis.net/gml/srs/epsg.xml#4326', 'neu'),
	    new EPSG4326Projection('urn:x-ogc:def:crs:EPSG:4326', 'neu')
	];

	/**
	 * @module ol/obj
	 */
	/**
	 * Polyfill for Object.assign().  Assigns enumerable and own properties from
	 * one or more source objects to a target object.
	 * See https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign.
	 *
	 * @param {!Object} target The target object.
	 * @param {...Object} var_sources The source object(s).
	 * @return {!Object} The modified target object.
	 */
	var assign$1 = (typeof Object.assign === 'function') ? Object.assign : function (target, var_sources) {
	    if (target === undefined || target === null) {
	        throw new TypeError('Cannot convert undefined or null to object');
	    }
	    var output = Object(target);
	    for (var i = 1, ii = arguments.length; i < ii; ++i) {
	        var source = arguments[i];
	        if (source !== undefined && source !== null) {
	            for (var key in source) {
	                if (source.hasOwnProperty(key)) {
	                    output[key] = source[key];
	                }
	            }
	        }
	    }
	    return output;
	};
	/**
	 * Removes all properties from an object.
	 * @param {Object} object The object to clear.
	 */
	function clear$1(object) {
	    for (var property in object) {
	        delete object[property];
	    }
	}
	/**
	 * Polyfill for Object.values().  Get an array of property values from an object.
	 * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values
	 *
	 * @param {!Object<K,V>} object The object from which to get the values.
	 * @return {!Array<V>} The property values.
	 * @template K,V
	 */
	var getValues = (typeof Object.values === 'function') ? Object.values : function (object) {
	    var values = [];
	    for (var property in object) {
	        values.push(object[property]);
	    }
	    return values;
	};
	/**
	 * Determine if an object has any properties.
	 * @param {Object} object The object to check.
	 * @return {boolean} The object is empty.
	 */
	function isEmpty$1(object) {
	    var property;
	    for (property in object) {
	        return false;
	    }
	    return !property;
	}

	/**
	 * @module ol/proj/transforms
	 */
	/**
	 * @private
	 * @type {!Object<string, Object<string, import("../proj.js").TransformFunction>>}
	 */
	var transforms = {};
	/**
	 * Registers a conversion function to convert coordinates from the source
	 * projection to the destination projection.
	 *
	 * @param {import("./Projection.js").default} source Source.
	 * @param {import("./Projection.js").default} destination Destination.
	 * @param {import("../proj.js").TransformFunction} transformFn Transform.
	 */
	function add(source, destination, transformFn) {
	    var sourceCode = source.getCode();
	    var destinationCode = destination.getCode();
	    if (!(sourceCode in transforms)) {
	        transforms[sourceCode] = {};
	    }
	    transforms[sourceCode][destinationCode] = transformFn;
	}
	/**
	 * Get a transform given a source code and a destination code.
	 * @param {string} sourceCode The code for the source projection.
	 * @param {string} destinationCode The code for the destination projection.
	 * @return {import("../proj.js").TransformFunction|undefined} The transform function (if found).
	 */
	function get$2(sourceCode, destinationCode) {
	    var transform;
	    if (sourceCode in transforms && destinationCode in transforms[sourceCode]) {
	        transform = transforms[sourceCode][destinationCode];
	    }
	    return transform;
	}

	/**
	 * @module ol/proj/projections
	 */
	/**
	 * @type {Object<string, import("./Projection.js").default>}
	 */
	var cache = {};
	/**
	 * Get a cached projection by code.
	 * @param {string} code The code for the projection.
	 * @return {import("./Projection.js").default} The projection (if cached).
	 */
	function get$3(code) {
	    return cache[code] || null;
	}
	/**
	 * Add a projection to the cache.
	 * @param {string} code The projection code.
	 * @param {import("./Projection.js").default} projection The projection to cache.
	 */
	function add$1(code, projection) {
	    cache[code] = projection;
	}

	/**
	 * @module ol/proj
	 */
	/**
	 * @param {Array<number>} input Input coordinate array.
	 * @param {Array<number>=} opt_output Output array of coordinate values.
	 * @param {number=} opt_dimension Dimension.
	 * @return {Array<number>} Output coordinate array (new array, same coordinate
	 *     values).
	 */
	function cloneTransform(input, opt_output, opt_dimension) {
	    var output;
	    if (opt_output !== undefined) {
	        for (var i = 0, ii = input.length; i < ii; ++i) {
	            opt_output[i] = input[i];
	        }
	        output = opt_output;
	    }
	    else {
	        output = input.slice();
	    }
	    return output;
	}
	/**
	 * @param {Array<number>} input Input coordinate array.
	 * @param {Array<number>=} opt_output Output array of coordinate values.
	 * @param {number=} opt_dimension Dimension.
	 * @return {Array<number>} Input coordinate array (same array as input).
	 */
	function identityTransform(input, opt_output, opt_dimension) {
	    if (opt_output !== undefined && input !== opt_output) {
	        for (var i = 0, ii = input.length; i < ii; ++i) {
	            opt_output[i] = input[i];
	        }
	        input = opt_output;
	    }
	    return input;
	}
	/**
	 * Add a Projection object to the list of supported projections that can be
	 * looked up by their code.
	 *
	 * @param {Projection} projection Projection instance.
	 * @api
	 */
	function addProjection(projection) {
	    add$1(projection.getCode(), projection);
	    add(projection, projection, cloneTransform);
	}
	/**
	 * @param {Array<Projection>} projections Projections.
	 */
	function addProjections(projections) {
	    projections.forEach(addProjection);
	}
	/**
	 * Fetches a Projection object for the code specified.
	 *
	 * @param {ProjectionLike} projectionLike Either a code string which is
	 *     a combination of authority and identifier such as "EPSG:4326", or an
	 *     existing projection object, or undefined.
	 * @return {Projection} Projection object, or null if not in list.
	 * @api
	 */
	function get$4(projectionLike) {
	    return typeof projectionLike === 'string' ?
	        get$3(/** @type {string} */ (projectionLike)) :
	        ( /** @type {Projection} */(projectionLike) || null);
	}
	/**
	 * Get the resolution of the point in degrees or distance units.
	 * For projections with degrees as the unit this will simply return the
	 * provided resolution. For other projections the point resolution is
	 * by default estimated by transforming the 'point' pixel to EPSG:4326,
	 * measuring its width and height on the normal sphere,
	 * and taking the average of the width and height.
	 * A custom function can be provided for a specific projection, either
	 * by setting the `getPointResolution` option in the
	 * {@link module:ol/proj/Projection~Projection} constructor or by using
	 * {@link module:ol/proj/Projection~Projection#setGetPointResolution} to change an existing
	 * projection object.
	 * @param {ProjectionLike} projection The projection.
	 * @param {number} resolution Nominal resolution in projection units.
	 * @param {import("./coordinate.js").Coordinate} point Point to find adjusted resolution at.
	 * @param {Units=} opt_units Units to get the point resolution in.
	 * Default is the projection's units.
	 * @return {number} Point resolution.
	 * @api
	 */
	function getPointResolution(projection, resolution, point, opt_units) {
	    projection = get$4(projection);
	    var pointResolution;
	    var getter = projection.getPointResolutionFunc();
	    if (getter) {
	        pointResolution = getter(resolution, point);
	        if (opt_units && opt_units !== projection.getUnits()) {
	            var metersPerUnit = projection.getMetersPerUnit();
	            if (metersPerUnit) {
	                pointResolution = pointResolution * metersPerUnit / METERS_PER_UNIT[opt_units];
	            }
	        }
	    }
	    else {
	        var units = projection.getUnits();
	        if (units == Units.DEGREES && !opt_units || opt_units == Units.DEGREES) {
	            pointResolution = resolution;
	        }
	        else {
	            // Estimate point resolution by transforming the center pixel to EPSG:4326,
	            // measuring its width and height on the normal sphere, and taking the
	            // average of the width and height.
	            var toEPSG4326_1 = getTransformFromProjections(projection, get$4('EPSG:4326'));
	            var vertices = [
	                point[0] - resolution / 2, point[1],
	                point[0] + resolution / 2, point[1],
	                point[0], point[1] - resolution / 2,
	                point[0], point[1] + resolution / 2
	            ];
	            vertices = toEPSG4326_1(vertices, vertices, 2);
	            var width = getDistance(vertices.slice(0, 2), vertices.slice(2, 4));
	            var height = getDistance(vertices.slice(4, 6), vertices.slice(6, 8));
	            pointResolution = (width + height) / 2;
	            var metersPerUnit = opt_units ?
	                METERS_PER_UNIT[opt_units] :
	                projection.getMetersPerUnit();
	            if (metersPerUnit !== undefined) {
	                pointResolution /= metersPerUnit;
	            }
	        }
	    }
	    return pointResolution;
	}
	/**
	 * Registers transformation functions that don't alter coordinates. Those allow
	 * to transform between projections with equal meaning.
	 *
	 * @param {Array<Projection>} projections Projections.
	 * @api
	 */
	function addEquivalentProjections(projections) {
	    addProjections(projections);
	    projections.forEach(function (source) {
	        projections.forEach(function (destination) {
	            if (source !== destination) {
	                add(source, destination, cloneTransform);
	            }
	        });
	    });
	}
	/**
	 * Registers transformation functions to convert coordinates in any projection
	 * in projection1 to any projection in projection2.
	 *
	 * @param {Array<Projection>} projections1 Projections with equal
	 *     meaning.
	 * @param {Array<Projection>} projections2 Projections with equal
	 *     meaning.
	 * @param {TransformFunction} forwardTransform Transformation from any
	 *   projection in projection1 to any projection in projection2.
	 * @param {TransformFunction} inverseTransform Transform from any projection
	 *   in projection2 to any projection in projection1..
	 */
	function addEquivalentTransforms(projections1, projections2, forwardTransform, inverseTransform) {
	    projections1.forEach(function (projection1) {
	        projections2.forEach(function (projection2) {
	            add(projection1, projection2, forwardTransform);
	            add(projection2, projection1, inverseTransform);
	        });
	    });
	}
	/**
	 * @param {Projection|string|undefined} projection Projection.
	 * @param {string} defaultCode Default code.
	 * @return {Projection} Projection.
	 */
	function createProjection(projection, defaultCode) {
	    if (!projection) {
	        return get$4(defaultCode);
	    }
	    else if (typeof projection === 'string') {
	        return get$4(projection);
	    }
	    else {
	        return (
	        /** @type {Projection} */ (projection));
	    }
	}
	/**
	 * Transforms a coordinate to longitude/latitude.
	 * @param {import("./coordinate.js").Coordinate} coordinate Projected coordinate.
	 * @param {ProjectionLike=} opt_projection Projection of the coordinate.
	 *     The default is Web Mercator, i.e. 'EPSG:3857'.
	 * @return {import("./coordinate.js").Coordinate} Coordinate as longitude and latitude, i.e. an array
	 *     with longitude as 1st and latitude as 2nd element.
	 * @api
	 */
	function toLonLat(coordinate, opt_projection) {
	    var lonLat = transform(coordinate, opt_projection !== undefined ? opt_projection : 'EPSG:3857', 'EPSG:4326');
	    var lon = lonLat[0];
	    if (lon < -180 || lon > 180) {
	        lonLat[0] = modulo(lon + 180, 360) - 180;
	    }
	    return lonLat;
	}
	/**
	 * Checks if two projections are the same, that is every coordinate in one
	 * projection does represent the same geographic point as the same coordinate in
	 * the other projection.
	 *
	 * @param {Projection} projection1 Projection 1.
	 * @param {Projection} projection2 Projection 2.
	 * @return {boolean} Equivalent.
	 * @api
	 */
	function equivalent(projection1, projection2) {
	    if (projection1 === projection2) {
	        return true;
	    }
	    var equalUnits = projection1.getUnits() === projection2.getUnits();
	    if (projection1.getCode() === projection2.getCode()) {
	        return equalUnits;
	    }
	    else {
	        var transformFunc = getTransformFromProjections(projection1, projection2);
	        return transformFunc === cloneTransform && equalUnits;
	    }
	}
	/**
	 * Searches in the list of transform functions for the function for converting
	 * coordinates from the source projection to the destination projection.
	 *
	 * @param {Projection} sourceProjection Source Projection object.
	 * @param {Projection} destinationProjection Destination Projection
	 *     object.
	 * @return {TransformFunction} Transform function.
	 */
	function getTransformFromProjections(sourceProjection, destinationProjection) {
	    var sourceCode = sourceProjection.getCode();
	    var destinationCode = destinationProjection.getCode();
	    var transformFunc = get$2(sourceCode, destinationCode);
	    if (!transformFunc) {
	        transformFunc = identityTransform;
	    }
	    return transformFunc;
	}
	/**
	 * Given the projection-like objects, searches for a transformation
	 * function to convert a coordinates array from the source projection to the
	 * destination projection.
	 *
	 * @param {ProjectionLike} source Source.
	 * @param {ProjectionLike} destination Destination.
	 * @return {TransformFunction} Transform function.
	 * @api
	 */
	function getTransform(source, destination) {
	    var sourceProjection = get$4(source);
	    var destinationProjection = get$4(destination);
	    return getTransformFromProjections(sourceProjection, destinationProjection);
	}
	/**
	 * Transforms a coordinate from source projection to destination projection.
	 * This returns a new coordinate (and does not modify the original).
	 *
	 * See {@link module:ol/proj~transformExtent} for extent transformation.
	 * See the transform method of {@link module:ol/geom/Geometry~Geometry} and its
	 * subclasses for geometry transforms.
	 *
	 * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
	 * @param {ProjectionLike} source Source projection-like.
	 * @param {ProjectionLike} destination Destination projection-like.
	 * @return {import("./coordinate.js").Coordinate} Coordinate.
	 * @api
	 */
	function transform(coordinate, source, destination) {
	    var transformFunc = getTransform(source, destination);
	    return transformFunc(coordinate, undefined, coordinate.length);
	}
	/**
	 * Transforms an extent from source projection to destination projection.  This
	 * returns a new extent (and does not modify the original).
	 *
	 * @param {import("./extent.js").Extent} extent The extent to transform.
	 * @param {ProjectionLike} source Source projection-like.
	 * @param {ProjectionLike} destination Destination projection-like.
	 * @return {import("./extent.js").Extent} The transformed extent.
	 * @api
	 */
	function transformExtent(extent, source, destination) {
	    var transformFunc = getTransform(source, destination);
	    return applyTransform(extent, transformFunc);
	}
	/**
	 * @type {?Projection}
	 */
	var userProjection = null;
	/**
	 * Get the projection for coordinates supplied from and returned by API methods.
	 * Note that this method is not yet a part of the stable API.  Support for user
	 * projections is not yet complete and should be considered experimental.
	 * @returns {?Projection} The user projection (or null if not set).
	 */
	function getUserProjection() {
	    return userProjection;
	}
	/**
	 * Return a coordinate transformed into the user projection.  If no user projection
	 * is set, the original coordinate is returned.
	 * @param {Array<number>} coordinate Input coordinate.
	 * @param {ProjectionLike} sourceProjection The input coordinate projection.
	 * @returns {Array<number>} The input coordinate in the user projection.
	 */
	function toUserCoordinate(coordinate, sourceProjection) {
	    if (!userProjection) {
	        return coordinate;
	    }
	    return transform(coordinate, sourceProjection, userProjection);
	}
	/**
	 * Return a coordinate transformed from the user projection.  If no user projection
	 * is set, the original coordinate is returned.
	 * @param {Array<number>} coordinate Input coordinate.
	 * @param {ProjectionLike} destProjection The destination projection.
	 * @returns {Array<number>} The input coordinate transformed.
	 */
	function fromUserCoordinate(coordinate, destProjection) {
	    if (!userProjection) {
	        return coordinate;
	    }
	    return transform(coordinate, userProjection, destProjection);
	}
	/**
	 * Return an extent transformed into the user projection.  If no user projection
	 * is set, the original extent is returned.
	 * @param {import("./extent.js").Extent} extent Input extent.
	 * @param {ProjectionLike} sourceProjection The input extent projection.
	 * @returns {import("./extent.js").Extent} The input extent in the user projection.
	 */
	function toUserExtent(extent, sourceProjection) {
	    if (!userProjection) {
	        return extent;
	    }
	    return transformExtent(extent, sourceProjection, userProjection);
	}
	/**
	 * Return an extent transformed from the user projection.  If no user projection
	 * is set, the original extent is returned.
	 * @param {import("./extent.js").Extent} extent Input extent.
	 * @param {ProjectionLike} destProjection The destination projection.
	 * @returns {import("./extent.js").Extent} The input extent transformed.
	 */
	function fromUserExtent(extent, destProjection) {
	    if (!userProjection) {
	        return extent;
	    }
	    return transformExtent(extent, userProjection, destProjection);
	}
	/**
	 * Add transforms to and from EPSG:4326 and EPSG:3857.  This function is called
	 * by when this module is executed and should only need to be called again after
	 * `clearAllProjections()` is called (e.g. in tests).
	 */
	function addCommon() {
	    // Add transformations that don't alter coordinates to convert within set of
	    // projections with equal meaning.
	    addEquivalentProjections(PROJECTIONS);
	    addEquivalentProjections(PROJECTIONS$1);
	    // Add transformations to convert EPSG:4326 like coordinates to EPSG:3857 like
	    // coordinates and back.
	    addEquivalentTransforms(PROJECTIONS$1, PROJECTIONS, fromEPSG4326, toEPSG4326);
	}
	addCommon();

	var subscriber_queue = [];
	/**
	 * Creates a `Readable` store that allows reading by subscription.
	 * @param value initial value
	 * @param {StartStopNotifier}start start and stop notifications for subscriptions
	 */

	function readable(value, start) {
	  return {
	    subscribe: writable(value, start).subscribe
	  };
	}
	/**
	 * Create a `Writable` store that allows both updating and reading by subscription.
	 * @param {*=}value initial value
	 * @param {StartStopNotifier=}start start and stop notifications for subscriptions
	 */


	function writable(value) {
	  var start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;
	  var stop;
	  var subscribers = [];

	  function set(new_value) {
	    if (safe_not_equal(value, new_value)) {
	      value = new_value;

	      if (stop) {
	        // store is ready
	        var run_queue = !subscriber_queue.length;

	        for (var i = 0; i < subscribers.length; i += 1) {
	          var s = subscribers[i];
	          s[1]();
	          subscriber_queue.push(s, value);
	        }

	        if (run_queue) {
	          for (var _i = 0; _i < subscriber_queue.length; _i += 2) {
	            subscriber_queue[_i][0](subscriber_queue[_i + 1]);
	          }

	          subscriber_queue.length = 0;
	        }
	      }
	    }
	  }

	  function update(fn) {
	    set(fn(value));
	  }

	  function subscribe(run) {
	    var invalidate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;
	    var subscriber = [run, invalidate];
	    subscribers.push(subscriber);

	    if (subscribers.length === 1) {
	      stop = start(set) || noop;
	    }

	    run(value);
	    return function () {
	      var index = subscribers.indexOf(subscriber);

	      if (index !== -1) {
	        subscribers.splice(index, 1);
	      }

	      if (subscribers.length === 0) {
	        stop();
	        stop = null;
	      }
	    };
	  }

	  return {
	    set: set,
	    update: update,
	    subscribe: subscribe
	  };
	}

	/**
	 * @module ol/ObjectEventType
	 */
	/**
	 * @enum {string}
	 */
	var ObjectEventType = {
	    /**
	     * Triggered when a property is changed.
	     * @event module:ol/Object.ObjectEvent#propertychange
	     * @api
	     */
	    PROPERTYCHANGE: 'propertychange'
	};

	/**
	 * @module ol/events
	 */
	/**
	 * Key to use with {@link module:ol/Observable~Observable#unByKey}.
	 * @typedef {Object} EventsKey
	 * @property {ListenerFunction} listener
	 * @property {import("./events/Target.js").EventTargetLike} target
	 * @property {string} type
	 * @api
	 */
	/**
	 * Listener function. This function is called with an event object as argument.
	 * When the function returns `false`, event propagation will stop.
	 *
	 * @typedef {function((Event|import("./events/Event.js").default)): (void|boolean)} ListenerFunction
	 * @api
	 */
	/**
	 * Registers an event listener on an event target. Inspired by
	 * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html
	 *
	 * This function efficiently binds a `listener` to a `this` object, and returns
	 * a key for use with {@link module:ol/events~unlistenByKey}.
	 *
	 * @param {import("./events/Target.js").EventTargetLike} target Event target.
	 * @param {string} type Event type.
	 * @param {ListenerFunction} listener Listener.
	 * @param {Object=} opt_this Object referenced by the `this` keyword in the
	 *     listener. Default is the `target`.
	 * @param {boolean=} opt_once If true, add the listener as one-off listener.
	 * @return {EventsKey} Unique key for the listener.
	 */
	function listen$1(target, type, listener, opt_this, opt_once) {
	    if (opt_this && opt_this !== target) {
	        listener = listener.bind(opt_this);
	    }
	    if (opt_once) {
	        var originalListener_1 = listener;
	        listener = function () {
	            target.removeEventListener(type, listener);
	            originalListener_1.apply(this, arguments);
	        };
	    }
	    var eventsKey = {
	        target: target,
	        type: type,
	        listener: listener
	    };
	    target.addEventListener(type, listener);
	    return eventsKey;
	}
	/**
	 * Registers a one-off event listener on an event target. Inspired by
	 * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html
	 *
	 * This function efficiently binds a `listener` as self-unregistering listener
	 * to a `this` object, and returns a key for use with
	 * {@link module:ol/events~unlistenByKey} in case the listener needs to be
	 * unregistered before it is called.
	 *
	 * When {@link module:ol/events~listen} is called with the same arguments after this
	 * function, the self-unregistering listener will be turned into a permanent
	 * listener.
	 *
	 * @param {import("./events/Target.js").EventTargetLike} target Event target.
	 * @param {string} type Event type.
	 * @param {ListenerFunction} listener Listener.
	 * @param {Object=} opt_this Object referenced by the `this` keyword in the
	 *     listener. Default is the `target`.
	 * @return {EventsKey} Key for unlistenByKey.
	 */
	function listenOnce(target, type, listener, opt_this) {
	    return listen$1(target, type, listener, opt_this, true);
	}
	/**
	 * Unregisters event listeners on an event target. Inspired by
	 * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html
	 *
	 * The argument passed to this function is the key returned from
	 * {@link module:ol/events~listen} or {@link module:ol/events~listenOnce}.
	 *
	 * @param {EventsKey} key The key.
	 */
	function unlistenByKey(key) {
	    if (key && key.target) {
	        key.target.removeEventListener(key.type, key.listener);
	        clear$1(key);
	    }
	}

	/**
	 * @module ol/Disposable
	 */
	/**
	 * @classdesc
	 * Objects that need to clean up after themselves.
	 */
	var Disposable = /** @class */ (function () {
	    function Disposable() {
	        /**
	         * The object has already been disposed.
	         * @type {boolean}
	         * @private
	         */
	        this.disposed_ = false;
	    }
	    /**
	     * Clean up.
	     */
	    Disposable.prototype.dispose = function () {
	        if (!this.disposed_) {
	            this.disposed_ = true;
	            this.disposeInternal();
	        }
	    };
	    /**
	     * Extension point for disposable objects.
	     * @protected
	     */
	    Disposable.prototype.disposeInternal = function () { };
	    return Disposable;
	}());

	/**
	 * @module ol/array
	 */
	/**
	 * Performs a binary search on the provided sorted list and returns the index of the item if found. If it can't be found it'll return -1.
	 * https://github.com/darkskyapp/binary-search
	 *
	 * @param {Array<*>} haystack Items to search through.
	 * @param {*} needle The item to look for.
	 * @param {Function=} opt_comparator Comparator function.
	 * @return {number} The index of the item if found, -1 if not.
	 */
	function binarySearch(haystack, needle, opt_comparator) {
	    var mid, cmp;
	    var comparator = opt_comparator || numberSafeCompareFunction;
	    var low = 0;
	    var high = haystack.length;
	    var found = false;
	    while (low < high) {
	        /* Note that "(low + high) >>> 1" may overflow, and results in a typecast
	         * to double (which gives the wrong results). */
	        mid = low + (high - low >> 1);
	        cmp = +comparator(haystack[mid], needle);
	        if (cmp < 0.0) { /* Too low. */
	            low = mid + 1;
	        }
	        else { /* Key found or too high */
	            high = mid;
	            found = !cmp;
	        }
	    }
	    /* Key not found. */
	    return found ? low : ~low;
	}
	/**
	 * Compare function for array sort that is safe for numbers.
	 * @param {*} a The first object to be compared.
	 * @param {*} b The second object to be compared.
	 * @return {number} A negative number, zero, or a positive number as the first
	 *     argument is less than, equal to, or greater than the second.
	 */
	function numberSafeCompareFunction(a, b) {
	    return a > b ? 1 : a < b ? -1 : 0;
	}
	/**
	 * @param {Array<number>} arr Array.
	 * @param {number} target Target.
	 * @param {number} direction 0 means return the nearest, > 0
	 *    means return the largest nearest, < 0 means return the
	 *    smallest nearest.
	 * @return {number} Index.
	 */
	function linearFindNearest(arr, target, direction) {
	    var n = arr.length;
	    if (arr[0] <= target) {
	        return 0;
	    }
	    else if (target <= arr[n - 1]) {
	        return n - 1;
	    }
	    else {
	        var i = void 0;
	        if (direction > 0) {
	            for (i = 1; i < n; ++i) {
	                if (arr[i] < target) {
	                    return i - 1;
	                }
	            }
	        }
	        else if (direction < 0) {
	            for (i = 1; i < n; ++i) {
	                if (arr[i] <= target) {
	                    return i;
	                }
	            }
	        }
	        else {
	            for (i = 1; i < n; ++i) {
	                if (arr[i] == target) {
	                    return i;
	                }
	                else if (arr[i] < target) {
	                    if (arr[i - 1] - target < target - arr[i]) {
	                        return i - 1;
	                    }
	                    else {
	                        return i;
	                    }
	                }
	            }
	        }
	        return n - 1;
	    }
	}
	/**
	 * @param {Array<*>} arr Array.
	 * @param {number} begin Begin index.
	 * @param {number} end End index.
	 */
	function reverseSubArray(arr, begin, end) {
	    while (begin < end) {
	        var tmp = arr[begin];
	        arr[begin] = arr[end];
	        arr[end] = tmp;
	        ++begin;
	        --end;
	    }
	}
	/**
	 * @param {Array<VALUE>} arr The array to modify.
	 * @param {!Array<VALUE>|VALUE} data The elements or arrays of elements to add to arr.
	 * @template VALUE
	 */
	function extend$1(arr, data) {
	    var extension = Array.isArray(data) ? data : [data];
	    var length = extension.length;
	    for (var i = 0; i < length; i++) {
	        arr[arr.length] = extension[i];
	    }
	}
	/**
	 * @param {Array<VALUE>} arr The array to modify.
	 * @param {VALUE} obj The element to remove.
	 * @template VALUE
	 * @return {boolean} If the element was removed.
	 */
	function remove(arr, obj) {
	    var i = arr.indexOf(obj);
	    var found = i > -1;
	    if (found) {
	        arr.splice(i, 1);
	    }
	    return found;
	}
	/**
	 * @param {Array|Uint8ClampedArray} arr1 The first array to compare.
	 * @param {Array|Uint8ClampedArray} arr2 The second array to compare.
	 * @return {boolean} Whether the two arrays are equal.
	 */
	function equals$1(arr1, arr2) {
	    var len1 = arr1.length;
	    if (len1 !== arr2.length) {
	        return false;
	    }
	    for (var i = 0; i < len1; i++) {
	        if (arr1[i] !== arr2[i]) {
	            return false;
	        }
	    }
	    return true;
	}
	/**
	 * @param {Array<*>} arr The array to test.
	 * @param {Function=} opt_func Comparison function.
	 * @param {boolean=} opt_strict Strictly sorted (default false).
	 * @return {boolean} Return index.
	 */
	function isSorted(arr, opt_func, opt_strict) {
	    var compare = opt_func || numberSafeCompareFunction;
	    return arr.every(function (currentVal, index) {
	        if (index === 0) {
	            return true;
	        }
	        var res = compare(arr[index - 1], currentVal);
	        return !(res > 0 || opt_strict && res === 0);
	    });
	}

	/**
	 * @module ol/functions
	 */
	/**
	 * Always returns true.
	 * @returns {boolean} true.
	 */
	function TRUE() {
	    return true;
	}
	/**
	 * Always returns false.
	 * @returns {boolean} false.
	 */
	function FALSE() {
	    return false;
	}
	/**
	 * A reusable function, used e.g. as a default for callbacks.
	 *
	 * @return {void} Nothing.
	 */
	function VOID() { }
	/**
	 * Wrap a function in another function that remembers the last return.  If the
	 * returned function is called twice in a row with the same arguments and the same
	 * this object, it will return the value from the first call in the second call.
	 *
	 * @param {function(...any): ReturnType} fn The function to memoize.
	 * @return {function(...any): ReturnType} The memoized function.
	 * @template ReturnType
	 */
	function memoizeOne(fn) {
	    var called = false;
	    /** @type {ReturnType} */
	    var lastResult;
	    /** @type {Array<any>} */
	    var lastArgs;
	    var lastThis;
	    return function () {
	        var nextArgs = Array.prototype.slice.call(arguments);
	        if (!called || this !== lastThis || !equals$1(nextArgs, lastArgs)) {
	            called = true;
	            lastThis = this;
	            lastArgs = nextArgs;
	            lastResult = fn.apply(this, arguments);
	        }
	        return lastResult;
	    };
	}

	/**
	 * @module ol/events/Event
	 */
	/**
	 * @classdesc
	 * Stripped down implementation of the W3C DOM Level 2 Event interface.
	 * See https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-interface.
	 *
	 * This implementation only provides `type` and `target` properties, and
	 * `stopPropagation` and `preventDefault` methods. It is meant as base class
	 * for higher level events defined in the library, and works with
	 * {@link module:ol/events/Target~Target}.
	 */
	var BaseEvent = /** @class */ (function () {
	    /**
	     * @param {string} type Type.
	     */
	    function BaseEvent(type) {
	        /**
	         * @type {boolean}
	         */
	        this.propagationStopped;
	        /**
	         * The event type.
	         * @type {string}
	         * @api
	         */
	        this.type = type;
	        /**
	         * The event target.
	         * @type {Object}
	         * @api
	         */
	        this.target = null;
	    }
	    /**
	     * Stop event propagation.
	     * @api
	     */
	    BaseEvent.prototype.preventDefault = function () {
	        this.propagationStopped = true;
	    };
	    /**
	     * Stop event propagation.
	     * @api
	     */
	    BaseEvent.prototype.stopPropagation = function () {
	        this.propagationStopped = true;
	    };
	    return BaseEvent;
	}());

	var __extends$3 = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @typedef {EventTarget|Target} EventTargetLike
	 */
	/**
	 * @classdesc
	 * A simplified implementation of the W3C DOM Level 2 EventTarget interface.
	 * See https://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-EventTarget.
	 *
	 * There are two important simplifications compared to the specification:
	 *
	 * 1. The handling of `useCapture` in `addEventListener` and
	 *    `removeEventListener`. There is no real capture model.
	 * 2. The handling of `stopPropagation` and `preventDefault` on `dispatchEvent`.
	 *    There is no event target hierarchy. When a listener calls
	 *    `stopPropagation` or `preventDefault` on an event object, it means that no
	 *    more listeners after this one will be called. Same as when the listener
	 *    returns false.
	 */
	var Target = /** @class */ (function (_super) {
	    __extends$3(Target, _super);
	    /**
	     * @param {*=} opt_target Default event target for dispatched events.
	     */
	    function Target(opt_target) {
	        var _this = _super.call(this) || this;
	        /**
	         * @private
	         * @type {*}
	         */
	        _this.eventTarget_ = opt_target;
	        /**
	         * @private
	         * @type {!Object<string, number>}
	         */
	        _this.pendingRemovals_ = {};
	        /**
	         * @private
	         * @type {!Object<string, number>}
	         */
	        _this.dispatching_ = {};
	        /**
	         * @private
	         * @type {!Object<string, Array<import("../events.js").ListenerFunction>>}
	         */
	        _this.listeners_ = {};
	        return _this;
	    }
	    /**
	     * @param {string} type Type.
	     * @param {import("../events.js").ListenerFunction} listener Listener.
	     */
	    Target.prototype.addEventListener = function (type, listener) {
	        if (!type || !listener) {
	            return;
	        }
	        var listeners = this.listeners_[type];
	        if (!listeners) {
	            listeners = [];
	            this.listeners_[type] = listeners;
	        }
	        if (listeners.indexOf(listener) === -1) {
	            listeners.push(listener);
	        }
	    };
	    /**
	     * Dispatches an event and calls all listeners listening for events
	     * of this type. The event parameter can either be a string or an
	     * Object with a `type` property.
	     *
	     * @param {{type: string,
	     *     target: (EventTargetLike|undefined),
	     *     propagationStopped: (boolean|undefined)}|
	     *     import("./Event.js").default|string} event Event object.
	     * @return {boolean|undefined} `false` if anyone called preventDefault on the
	     *     event object or if any of the listeners returned false.
	     * @api
	     */
	    Target.prototype.dispatchEvent = function (event) {
	        var evt = typeof event === 'string' ? new BaseEvent(event) : event;
	        var type = evt.type;
	        if (!evt.target) {
	            evt.target = this.eventTarget_ || this;
	        }
	        var listeners = this.listeners_[type];
	        var propagate;
	        if (listeners) {
	            if (!(type in this.dispatching_)) {
	                this.dispatching_[type] = 0;
	                this.pendingRemovals_[type] = 0;
	            }
	            ++this.dispatching_[type];
	            for (var i = 0, ii = listeners.length; i < ii; ++i) {
	                if (listeners[i].call(this, evt) === false || evt.propagationStopped) {
	                    propagate = false;
	                    break;
	                }
	            }
	            --this.dispatching_[type];
	            if (this.dispatching_[type] === 0) {
	                var pendingRemovals = this.pendingRemovals_[type];
	                delete this.pendingRemovals_[type];
	                while (pendingRemovals--) {
	                    this.removeEventListener(type, VOID);
	                }
	                delete this.dispatching_[type];
	            }
	            return propagate;
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    Target.prototype.disposeInternal = function () {
	        clear$1(this.listeners_);
	    };
	    /**
	     * Get the listeners for a specified event type. Listeners are returned in the
	     * order that they will be called in.
	     *
	     * @param {string} type Type.
	     * @return {Array<import("../events.js").ListenerFunction>} Listeners.
	     */
	    Target.prototype.getListeners = function (type) {
	        return this.listeners_[type];
	    };
	    /**
	     * @param {string=} opt_type Type. If not provided,
	     *     `true` will be returned if this event target has any listeners.
	     * @return {boolean} Has listeners.
	     */
	    Target.prototype.hasListener = function (opt_type) {
	        return opt_type ?
	            opt_type in this.listeners_ :
	            Object.keys(this.listeners_).length > 0;
	    };
	    /**
	     * @param {string} type Type.
	     * @param {import("../events.js").ListenerFunction} listener Listener.
	     */
	    Target.prototype.removeEventListener = function (type, listener) {
	        var listeners = this.listeners_[type];
	        if (listeners) {
	            var index = listeners.indexOf(listener);
	            if (index !== -1) {
	                if (type in this.pendingRemovals_) {
	                    // make listener a no-op, and remove later in #dispatchEvent()
	                    listeners[index] = VOID;
	                    ++this.pendingRemovals_[type];
	                }
	                else {
	                    listeners.splice(index, 1);
	                    if (listeners.length === 0) {
	                        delete this.listeners_[type];
	                    }
	                }
	            }
	        }
	    };
	    return Target;
	}(Disposable));

	/**
	 * @module ol/events/EventType
	 */
	/**
	 * @enum {string}
	 * @const
	 */
	var EventType = {
	    /**
	     * Generic change event. Triggered when the revision counter is increased.
	     * @event module:ol/events/Event~BaseEvent#change
	     * @api
	     */
	    CHANGE: 'change',
	    /**
	     * Generic error event. Triggered when an error occurs.
	     * @event module:ol/events/Event~BaseEvent#error
	     * @api
	     */
	    ERROR: 'error',
	    BLUR: 'blur',
	    CLEAR: 'clear',
	    CONTEXTMENU: 'contextmenu',
	    CLICK: 'click',
	    DBLCLICK: 'dblclick',
	    DRAGENTER: 'dragenter',
	    DRAGOVER: 'dragover',
	    DROP: 'drop',
	    FOCUS: 'focus',
	    KEYDOWN: 'keydown',
	    KEYPRESS: 'keypress',
	    LOAD: 'load',
	    RESIZE: 'resize',
	    WHEEL: 'wheel'
	};

	var __extends$4 = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @classdesc
	 * Abstract base class; normally only used for creating subclasses and not
	 * instantiated in apps.
	 * An event target providing convenient methods for listener registration
	 * and unregistration. A generic `change` event is always available through
	 * {@link module:ol/Observable~Observable#changed}.
	 *
	 * @fires import("./events/Event.js").default
	 * @api
	 */
	var Observable = /** @class */ (function (_super) {
	    __extends$4(Observable, _super);
	    function Observable() {
	        var _this = _super.call(this) || this;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.revision_ = 0;
	        return _this;
	    }
	    /**
	     * Increases the revision counter and dispatches a 'change' event.
	     * @api
	     */
	    Observable.prototype.changed = function () {
	        ++this.revision_;
	        this.dispatchEvent(EventType.CHANGE);
	    };
	    /**
	     * Get the version number for this object.  Each time the object is modified,
	     * its version number will be incremented.
	     * @return {number} Revision.
	     * @api
	     */
	    Observable.prototype.getRevision = function () {
	        return this.revision_;
	    };
	    /**
	     * Listen for a certain type of event.
	     * @param {string|Array<string>} type The event type or array of event types.
	     * @param {function(?): ?} listener The listener function.
	     * @return {import("./events.js").EventsKey|Array<import("./events.js").EventsKey>} Unique key for the listener. If
	     *     called with an array of event types as the first argument, the return
	     *     will be an array of keys.
	     * @api
	     */
	    Observable.prototype.on = function (type, listener) {
	        if (Array.isArray(type)) {
	            var len = type.length;
	            var keys = new Array(len);
	            for (var i = 0; i < len; ++i) {
	                keys[i] = listen$1(this, type[i], listener);
	            }
	            return keys;
	        }
	        else {
	            return listen$1(this, /** @type {string} */ (type), listener);
	        }
	    };
	    /**
	     * Listen once for a certain type of event.
	     * @param {string|Array<string>} type The event type or array of event types.
	     * @param {function(?): ?} listener The listener function.
	     * @return {import("./events.js").EventsKey|Array<import("./events.js").EventsKey>} Unique key for the listener. If
	     *     called with an array of event types as the first argument, the return
	     *     will be an array of keys.
	     * @api
	     */
	    Observable.prototype.once = function (type, listener) {
	        if (Array.isArray(type)) {
	            var len = type.length;
	            var keys = new Array(len);
	            for (var i = 0; i < len; ++i) {
	                keys[i] = listenOnce(this, type[i], listener);
	            }
	            return keys;
	        }
	        else {
	            return listenOnce(this, /** @type {string} */ (type), listener);
	        }
	    };
	    /**
	     * Unlisten for a certain type of event.
	     * @param {string|Array<string>} type The event type or array of event types.
	     * @param {function(?): ?} listener The listener function.
	     * @api
	     */
	    Observable.prototype.un = function (type, listener) {
	        if (Array.isArray(type)) {
	            for (var i = 0, ii = type.length; i < ii; ++i) {
	                this.removeEventListener(type[i], listener);
	            }
	        }
	        else {
	            this.removeEventListener(type, listener);
	        }
	    };
	    return Observable;
	}(Target));
	/**
	 * Removes an event listener using the key returned by `on()` or `once()`.
	 * @param {import("./events.js").EventsKey|Array<import("./events.js").EventsKey>} key The key returned by `on()`
	 *     or `once()` (or an array of keys).
	 * @api
	 */
	function unByKey(key) {
	    if (Array.isArray(key)) {
	        for (var i = 0, ii = key.length; i < ii; ++i) {
	            unlistenByKey(key[i]);
	        }
	    }
	    else {
	        unlistenByKey(/** @type {import("./events.js").EventsKey} */ (key));
	    }
	}

	var __extends$5 = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @classdesc
	 * Events emitted by {@link module:ol/Object~BaseObject} instances are instances of this type.
	 */
	var ObjectEvent = /** @class */ (function (_super) {
	    __extends$5(ObjectEvent, _super);
	    /**
	     * @param {string} type The event type.
	     * @param {string} key The property name.
	     * @param {*} oldValue The old value for `key`.
	     */
	    function ObjectEvent(type, key, oldValue) {
	        var _this = _super.call(this, type) || this;
	        /**
	         * The name of the property whose value is changing.
	         * @type {string}
	         * @api
	         */
	        _this.key = key;
	        /**
	         * The old value. To get the new value use `e.target.get(e.key)` where
	         * `e` is the event object.
	         * @type {*}
	         * @api
	         */
	        _this.oldValue = oldValue;
	        return _this;
	    }
	    return ObjectEvent;
	}(BaseEvent));
	/**
	 * @classdesc
	 * Abstract base class; normally only used for creating subclasses and not
	 * instantiated in apps.
	 * Most non-trivial classes inherit from this.
	 *
	 * This extends {@link module:ol/Observable} with observable
	 * properties, where each property is observable as well as the object as a
	 * whole.
	 *
	 * Classes that inherit from this have pre-defined properties, to which you can
	 * add your owns. The pre-defined properties are listed in this documentation as
	 * 'Observable Properties', and have their own accessors; for example,
	 * {@link module:ol/Map~Map} has a `target` property, accessed with
	 * `getTarget()` and changed with `setTarget()`. Not all properties are however
	 * settable. There are also general-purpose accessors `get()` and `set()`. For
	 * example, `get('target')` is equivalent to `getTarget()`.
	 *
	 * The `set` accessors trigger a change event, and you can monitor this by
	 * registering a listener. For example, {@link module:ol/View~View} has a
	 * `center` property, so `view.on('change:center', function(evt) {...});` would
	 * call the function whenever the value of the center property changes. Within
	 * the function, `evt.target` would be the view, so `evt.target.getCenter()`
	 * would return the new center.
	 *
	 * You can add your own observable properties with
	 * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.
	 * You can listen for changes on that property value with
	 * `object.on('change:prop', listener)`. You can get a list of all
	 * properties with {@link module:ol/Object~BaseObject#getProperties}.
	 *
	 * Note that the observable properties are separate from standard JS properties.
	 * You can, for example, give your map object a title with
	 * `map.title='New title'` and with `map.set('title', 'Another title')`. The
	 * first will be a `hasOwnProperty`; the second will appear in
	 * `getProperties()`. Only the second is observable.
	 *
	 * Properties can be deleted by using the unset method. E.g.
	 * object.unset('foo').
	 *
	 * @fires ObjectEvent
	 * @api
	 */
	var BaseObject = /** @class */ (function (_super) {
	    __extends$5(BaseObject, _super);
	    /**
	     * @param {Object<string, *>=} opt_values An object with key-value pairs.
	     */
	    function BaseObject(opt_values) {
	        var _this = _super.call(this) || this;
	        // Call {@link module:ol/util~getUid} to ensure that the order of objects' ids is
	        // the same as the order in which they were created.  This also helps to
	        // ensure that object properties are always added in the same order, which
	        // helps many JavaScript engines generate faster code.
	        getUid(_this);
	        /**
	         * @private
	         * @type {!Object<string, *>}
	         */
	        _this.values_ = {};
	        if (opt_values !== undefined) {
	            _this.setProperties(opt_values);
	        }
	        return _this;
	    }
	    /**
	     * Gets a value.
	     * @param {string} key Key name.
	     * @return {*} Value.
	     * @api
	     */
	    BaseObject.prototype.get = function (key) {
	        var value;
	        if (this.values_.hasOwnProperty(key)) {
	            value = this.values_[key];
	        }
	        return value;
	    };
	    /**
	     * Get a list of object property names.
	     * @return {Array<string>} List of property names.
	     * @api
	     */
	    BaseObject.prototype.getKeys = function () {
	        return Object.keys(this.values_);
	    };
	    /**
	     * Get an object of all property names and values.
	     * @return {Object<string, *>} Object.
	     * @api
	     */
	    BaseObject.prototype.getProperties = function () {
	        return assign$1({}, this.values_);
	    };
	    /**
	     * @param {string} key Key name.
	     * @param {*} oldValue Old value.
	     */
	    BaseObject.prototype.notify = function (key, oldValue) {
	        var eventType;
	        eventType = getChangeEventType(key);
	        this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));
	        eventType = ObjectEventType.PROPERTYCHANGE;
	        this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));
	    };
	    /**
	     * Sets a value.
	     * @param {string} key Key name.
	     * @param {*} value Value.
	     * @param {boolean=} opt_silent Update without triggering an event.
	     * @api
	     */
	    BaseObject.prototype.set = function (key, value, opt_silent) {
	        if (opt_silent) {
	            this.values_[key] = value;
	        }
	        else {
	            var oldValue = this.values_[key];
	            this.values_[key] = value;
	            if (oldValue !== value) {
	                this.notify(key, oldValue);
	            }
	        }
	    };
	    /**
	     * Sets a collection of key-value pairs.  Note that this changes any existing
	     * properties and adds new ones (it does not remove any existing properties).
	     * @param {Object<string, *>} values Values.
	     * @param {boolean=} opt_silent Update without triggering an event.
	     * @api
	     */
	    BaseObject.prototype.setProperties = function (values, opt_silent) {
	        for (var key in values) {
	            this.set(key, values[key], opt_silent);
	        }
	    };
	    /**
	     * Unsets a property.
	     * @param {string} key Key name.
	     * @param {boolean=} opt_silent Unset without triggering an event.
	     * @api
	     */
	    BaseObject.prototype.unset = function (key, opt_silent) {
	        if (key in this.values_) {
	            var oldValue = this.values_[key];
	            delete this.values_[key];
	            if (!opt_silent) {
	                this.notify(key, oldValue);
	            }
	        }
	    };
	    return BaseObject;
	}(Observable));
	/**
	 * @type {Object<string, string>}
	 */
	var changeEventTypeCache = {};
	/**
	 * @param {string} key Key name.
	 * @return {string} Change name.
	 */
	function getChangeEventType(key) {
	    return changeEventTypeCache.hasOwnProperty(key) ?
	        changeEventTypeCache[key] :
	        (changeEventTypeCache[key] = 'change:' + key);
	}

	/**
	 * @module ol/geom/GeometryLayout
	 */
	/**
	 * The coordinate layout for geometries, indicating whether a 3rd or 4th z ('Z')
	 * or measure ('M') coordinate is available. Supported values are `'XY'`,
	 * `'XYZ'`, `'XYM'`, `'XYZM'`.
	 * @enum {string}
	 */
	var GeometryLayout = {
	    XY: 'XY',
	    XYZ: 'XYZ',
	    XYM: 'XYM',
	    XYZM: 'XYZM'
	};

	/**
	 * @module ol/geom/flat/transform
	 */
	/**
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {number} end End.
	 * @param {number} stride Stride.
	 * @param {import("../../transform.js").Transform} transform Transform.
	 * @param {Array<number>=} opt_dest Destination.
	 * @return {Array<number>} Transformed coordinates.
	 */
	function transform2D(flatCoordinates, offset, end, stride, transform, opt_dest) {
	    var dest = opt_dest ? opt_dest : [];
	    var i = 0;
	    for (var j = offset; j < end; j += stride) {
	        var x = flatCoordinates[j];
	        var y = flatCoordinates[j + 1];
	        dest[i++] = transform[0] * x + transform[2] * y + transform[4];
	        dest[i++] = transform[1] * x + transform[3] * y + transform[5];
	    }
	    if (opt_dest && dest.length != i) {
	        dest.length = i;
	    }
	    return dest;
	}
	/**
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {number} end End.
	 * @param {number} stride Stride.
	 * @param {number} angle Angle.
	 * @param {Array<number>} anchor Rotation anchor point.
	 * @param {Array<number>=} opt_dest Destination.
	 * @return {Array<number>} Transformed coordinates.
	 */
	function rotate(flatCoordinates, offset, end, stride, angle, anchor, opt_dest) {
	    var dest = opt_dest ? opt_dest : [];
	    var cos = Math.cos(angle);
	    var sin = Math.sin(angle);
	    var anchorX = anchor[0];
	    var anchorY = anchor[1];
	    var i = 0;
	    for (var j = offset; j < end; j += stride) {
	        var deltaX = flatCoordinates[j] - anchorX;
	        var deltaY = flatCoordinates[j + 1] - anchorY;
	        dest[i++] = anchorX + deltaX * cos - deltaY * sin;
	        dest[i++] = anchorY + deltaX * sin + deltaY * cos;
	        for (var k = j + 2; k < j + stride; ++k) {
	            dest[i++] = flatCoordinates[k];
	        }
	    }
	    if (opt_dest && dest.length != i) {
	        dest.length = i;
	    }
	    return dest;
	}
	/**
	 * Scale the coordinates.
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {number} end End.
	 * @param {number} stride Stride.
	 * @param {number} sx Scale factor in the x-direction.
	 * @param {number} sy Scale factor in the y-direction.
	 * @param {Array<number>} anchor Scale anchor point.
	 * @param {Array<number>=} opt_dest Destination.
	 * @return {Array<number>} Transformed coordinates.
	 */
	function scale(flatCoordinates, offset, end, stride, sx, sy, anchor, opt_dest) {
	    var dest = opt_dest ? opt_dest : [];
	    var anchorX = anchor[0];
	    var anchorY = anchor[1];
	    var i = 0;
	    for (var j = offset; j < end; j += stride) {
	        var deltaX = flatCoordinates[j] - anchorX;
	        var deltaY = flatCoordinates[j + 1] - anchorY;
	        dest[i++] = anchorX + sx * deltaX;
	        dest[i++] = anchorY + sy * deltaY;
	        for (var k = j + 2; k < j + stride; ++k) {
	            dest[i++] = flatCoordinates[k];
	        }
	    }
	    if (opt_dest && dest.length != i) {
	        dest.length = i;
	    }
	    return dest;
	}
	/**
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {number} end End.
	 * @param {number} stride Stride.
	 * @param {number} deltaX Delta X.
	 * @param {number} deltaY Delta Y.
	 * @param {Array<number>=} opt_dest Destination.
	 * @return {Array<number>} Transformed coordinates.
	 */
	function translate(flatCoordinates, offset, end, stride, deltaX, deltaY, opt_dest) {
	    var dest = opt_dest ? opt_dest : [];
	    var i = 0;
	    for (var j = offset; j < end; j += stride) {
	        dest[i++] = flatCoordinates[j] + deltaX;
	        dest[i++] = flatCoordinates[j + 1] + deltaY;
	        for (var k = j + 2; k < j + stride; ++k) {
	            dest[i++] = flatCoordinates[k];
	        }
	    }
	    if (opt_dest && dest.length != i) {
	        dest.length = i;
	    }
	    return dest;
	}

	/**
	 * @module ol/transform
	 */
	/**
	 * An array representing an affine 2d transformation for use with
	 * {@link module:ol/transform} functions. The array has 6 elements.
	 * @typedef {!Array<number>} Transform
	 */
	/**
	 * Collection of affine 2d transformation functions. The functions work on an
	 * array of 6 elements. The element order is compatible with the [SVGMatrix
	 * interface](https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix) and is
	 * a subset (elements a to f) of a 3Ã3 matrix:
	 * ```
	 * [ a c e ]
	 * [ b d f ]
	 * [ 0 0 1 ]
	 * ```
	 */
	/**
	 * @private
	 * @type {Transform}
	 */
	var tmp_ = new Array(6);
	/**
	 * Create an identity transform.
	 * @return {!Transform} Identity transform.
	 */
	function create() {
	    return [1, 0, 0, 1, 0, 0];
	}
	/**
	 * Resets the given transform to an identity transform.
	 * @param {!Transform} transform Transform.
	 * @return {!Transform} Transform.
	 */
	function reset(transform) {
	    return set$2(transform, 1, 0, 0, 1, 0, 0);
	}
	/**
	 * Multiply the underlying matrices of two transforms and return the result in
	 * the first transform.
	 * @param {!Transform} transform1 Transform parameters of matrix 1.
	 * @param {!Transform} transform2 Transform parameters of matrix 2.
	 * @return {!Transform} transform1 multiplied with transform2.
	 */
	function multiply(transform1, transform2) {
	    var a1 = transform1[0];
	    var b1 = transform1[1];
	    var c1 = transform1[2];
	    var d1 = transform1[3];
	    var e1 = transform1[4];
	    var f1 = transform1[5];
	    var a2 = transform2[0];
	    var b2 = transform2[1];
	    var c2 = transform2[2];
	    var d2 = transform2[3];
	    var e2 = transform2[4];
	    var f2 = transform2[5];
	    transform1[0] = a1 * a2 + c1 * b2;
	    transform1[1] = b1 * a2 + d1 * b2;
	    transform1[2] = a1 * c2 + c1 * d2;
	    transform1[3] = b1 * c2 + d1 * d2;
	    transform1[4] = a1 * e2 + c1 * f2 + e1;
	    transform1[5] = b1 * e2 + d1 * f2 + f1;
	    return transform1;
	}
	/**
	 * Set the transform components a-f on a given transform.
	 * @param {!Transform} transform Transform.
	 * @param {number} a The a component of the transform.
	 * @param {number} b The b component of the transform.
	 * @param {number} c The c component of the transform.
	 * @param {number} d The d component of the transform.
	 * @param {number} e The e component of the transform.
	 * @param {number} f The f component of the transform.
	 * @return {!Transform} Matrix with transform applied.
	 */
	function set$2(transform, a, b, c, d, e, f) {
	    transform[0] = a;
	    transform[1] = b;
	    transform[2] = c;
	    transform[3] = d;
	    transform[4] = e;
	    transform[5] = f;
	    return transform;
	}
	/**
	 * Set transform on one matrix from another matrix.
	 * @param {!Transform} transform1 Matrix to set transform to.
	 * @param {!Transform} transform2 Matrix to set transform from.
	 * @return {!Transform} transform1 with transform from transform2 applied.
	 */
	function setFromArray(transform1, transform2) {
	    transform1[0] = transform2[0];
	    transform1[1] = transform2[1];
	    transform1[2] = transform2[2];
	    transform1[3] = transform2[3];
	    transform1[4] = transform2[4];
	    transform1[5] = transform2[5];
	    return transform1;
	}
	/**
	 * Transforms the given coordinate with the given transform returning the
	 * resulting, transformed coordinate. The coordinate will be modified in-place.
	 *
	 * @param {Transform} transform The transformation.
	 * @param {import("./coordinate.js").Coordinate|import("./pixel.js").Pixel} coordinate The coordinate to transform.
	 * @return {import("./coordinate.js").Coordinate|import("./pixel.js").Pixel} return coordinate so that operations can be
	 *     chained together.
	 */
	function apply(transform, coordinate) {
	    var x = coordinate[0];
	    var y = coordinate[1];
	    coordinate[0] = transform[0] * x + transform[2] * y + transform[4];
	    coordinate[1] = transform[1] * x + transform[3] * y + transform[5];
	    return coordinate;
	}
	/**
	 * Applies scale to a given transform.
	 * @param {!Transform} transform Transform.
	 * @param {number} x Scale factor x.
	 * @param {number} y Scale factor y.
	 * @return {!Transform} The scaled transform.
	 */
	function scale$1(transform, x, y) {
	    return multiply(transform, set$2(tmp_, x, 0, 0, y, 0, 0));
	}
	/**
	 * Creates a scale transform.
	 * @param {!Transform} target Transform to overwrite.
	 * @param {number} x Scale factor x.
	 * @param {number} y Scale factor y.
	 * @return {!Transform} The scale transform.
	 */
	function makeScale(target, x, y) {
	    return set$2(target, x, 0, 0, y, 0, 0);
	}
	/**
	 * Applies translation to the given transform.
	 * @param {!Transform} transform Transform.
	 * @param {number} dx Translation x.
	 * @param {number} dy Translation y.
	 * @return {!Transform} The translated transform.
	 */
	function translate$1(transform, dx, dy) {
	    return multiply(transform, set$2(tmp_, 1, 0, 0, 1, dx, dy));
	}
	/**
	 * Creates a composite transform given an initial translation, scale, rotation, and
	 * final translation (in that order only, not commutative).
	 * @param {!Transform} transform The transform (will be modified in place).
	 * @param {number} dx1 Initial translation x.
	 * @param {number} dy1 Initial translation y.
	 * @param {number} sx Scale factor x.
	 * @param {number} sy Scale factor y.
	 * @param {number} angle Rotation (in counter-clockwise radians).
	 * @param {number} dx2 Final translation x.
	 * @param {number} dy2 Final translation y.
	 * @return {!Transform} The composite transform.
	 */
	function compose(transform, dx1, dy1, sx, sy, angle, dx2, dy2) {
	    var sin = Math.sin(angle);
	    var cos = Math.cos(angle);
	    transform[0] = sx * cos;
	    transform[1] = sy * sin;
	    transform[2] = -sx * sin;
	    transform[3] = sy * cos;
	    transform[4] = dx2 * sx * cos - dy2 * sx * sin + dx1;
	    transform[5] = dx2 * sy * sin + dy2 * sy * cos + dy1;
	    return transform;
	}
	/**
	 * Invert the given transform.
	 * @param {!Transform} target Transform to be set as the inverse of
	 *     the source transform.
	 * @param {!Transform} source The source transform to invert.
	 * @return {!Transform} The inverted (target) transform.
	 */
	function makeInverse(target, source) {
	    var det = determinant(source);
	    assert(det !== 0, 32); // Transformation matrix cannot be inverted
	    var a = source[0];
	    var b = source[1];
	    var c = source[2];
	    var d = source[3];
	    var e = source[4];
	    var f = source[5];
	    target[0] = d / det;
	    target[1] = -b / det;
	    target[2] = -c / det;
	    target[3] = a / det;
	    target[4] = (c * f - d * e) / det;
	    target[5] = -(a * f - b * e) / det;
	    return target;
	}
	/**
	 * Returns the determinant of the given matrix.
	 * @param {!Transform} mat Matrix.
	 * @return {number} Determinant.
	 */
	function determinant(mat) {
	    return mat[0] * mat[3] - mat[1] * mat[2];
	}
	/**
	 * A string version of the transform.  This can be used
	 * for CSS transforms.
	 * @param {!Transform} mat Matrix.
	 * @return {string} The transform as a string.
	 */
	function toString$2(mat) {
	    return 'matrix(' + mat.join(', ') + ')';
	}

	var __extends$6 = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @type {import("../transform.js").Transform}
	 */
	var tmpTransform = create();
	/**
	 * @classdesc
	 * Abstract base class; normally only used for creating subclasses and not
	 * instantiated in apps.
	 * Base class for vector geometries.
	 *
	 * To get notified of changes to the geometry, register a listener for the
	 * generic `change` event on your geometry instance.
	 *
	 * @abstract
	 * @api
	 */
	var Geometry = /** @class */ (function (_super) {
	    __extends$6(Geometry, _super);
	    function Geometry() {
	        var _this = _super.call(this) || this;
	        /**
	         * @private
	         * @type {import("../extent.js").Extent}
	         */
	        _this.extent_ = createEmpty();
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.extentRevision_ = -1;
	        /**
	         * @protected
	         * @type {number}
	         */
	        _this.simplifiedGeometryMaxMinSquaredTolerance = 0;
	        /**
	         * @protected
	         * @type {number}
	         */
	        _this.simplifiedGeometryRevision = 0;
	        /**
	         * Get a transformed and simplified version of the geometry.
	         * @abstract
	         * @param {number} revision The geometry revision.
	         * @param {number} squaredTolerance Squared tolerance.
	         * @param {import("../proj.js").TransformFunction} [opt_transform] Optional transform function.
	         * @return {Geometry} Simplified geometry.
	         */
	        _this.simplifyTransformedInternal = memoizeOne(function (revision, squaredTolerance, opt_transform) {
	            if (!opt_transform) {
	                return this.getSimplifiedGeometry(squaredTolerance);
	            }
	            var clone = this.clone();
	            clone.applyTransform(opt_transform);
	            return clone.getSimplifiedGeometry(squaredTolerance);
	        });
	        return _this;
	    }
	    /**
	     * Get a transformed and simplified version of the geometry.
	     * @abstract
	     * @param {number} squaredTolerance Squared tolerance.
	     * @param {import("../proj.js").TransformFunction} [opt_transform] Optional transform function.
	     * @return {Geometry} Simplified geometry.
	     */
	    Geometry.prototype.simplifyTransformed = function (squaredTolerance, opt_transform) {
	        return this.simplifyTransformedInternal(this.getRevision(), squaredTolerance, opt_transform);
	    };
	    /**
	     * Make a complete copy of the geometry.
	     * @abstract
	     * @return {!Geometry} Clone.
	     */
	    Geometry.prototype.clone = function () {
	        return abstract();
	    };
	    /**
	     * @abstract
	     * @param {number} x X.
	     * @param {number} y Y.
	     * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
	     * @param {number} minSquaredDistance Minimum squared distance.
	     * @return {number} Minimum squared distance.
	     */
	    Geometry.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {
	        return abstract();
	    };
	    /**
	     * @param {number} x X.
	     * @param {number} y Y.
	     * @return {boolean} Contains (x, y).
	     */
	    Geometry.prototype.containsXY = function (x, y) {
	        var coord = this.getClosestPoint([x, y]);
	        return coord[0] === x && coord[1] === y;
	    };
	    /**
	     * Return the closest point of the geometry to the passed point as
	     * {@link module:ol/coordinate~Coordinate coordinate}.
	     * @param {import("../coordinate.js").Coordinate} point Point.
	     * @param {import("../coordinate.js").Coordinate=} opt_closestPoint Closest point.
	     * @return {import("../coordinate.js").Coordinate} Closest point.
	     * @api
	     */
	    Geometry.prototype.getClosestPoint = function (point, opt_closestPoint) {
	        var closestPoint = opt_closestPoint ? opt_closestPoint : [NaN, NaN];
	        this.closestPointXY(point[0], point[1], closestPoint, Infinity);
	        return closestPoint;
	    };
	    /**
	     * Returns true if this geometry includes the specified coordinate. If the
	     * coordinate is on the boundary of the geometry, returns false.
	     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
	     * @return {boolean} Contains coordinate.
	     * @api
	     */
	    Geometry.prototype.intersectsCoordinate = function (coordinate) {
	        return this.containsXY(coordinate[0], coordinate[1]);
	    };
	    /**
	     * @abstract
	     * @param {import("../extent.js").Extent} extent Extent.
	     * @protected
	     * @return {import("../extent.js").Extent} extent Extent.
	     */
	    Geometry.prototype.computeExtent = function (extent) {
	        return abstract();
	    };
	    /**
	     * Get the extent of the geometry.
	     * @param {import("../extent.js").Extent=} opt_extent Extent.
	     * @return {import("../extent.js").Extent} extent Extent.
	     * @api
	     */
	    Geometry.prototype.getExtent = function (opt_extent) {
	        if (this.extentRevision_ != this.getRevision()) {
	            this.extent_ = this.computeExtent(this.extent_);
	            this.extentRevision_ = this.getRevision();
	        }
	        return returnOrUpdate(this.extent_, opt_extent);
	    };
	    /**
	     * Rotate the geometry around a given coordinate. This modifies the geometry
	     * coordinates in place.
	     * @abstract
	     * @param {number} angle Rotation angle in radians.
	     * @param {import("../coordinate.js").Coordinate} anchor The rotation center.
	     * @api
	     */
	    Geometry.prototype.rotate = function (angle, anchor) {
	        abstract();
	    };
	    /**
	     * Scale the geometry (with an optional origin).  This modifies the geometry
	     * coordinates in place.
	     * @abstract
	     * @param {number} sx The scaling factor in the x-direction.
	     * @param {number=} opt_sy The scaling factor in the y-direction (defaults to
	     *     sx).
	     * @param {import("../coordinate.js").Coordinate=} opt_anchor The scale origin (defaults to the center
	     *     of the geometry extent).
	     * @api
	     */
	    Geometry.prototype.scale = function (sx, opt_sy, opt_anchor) {
	        abstract();
	    };
	    /**
	     * Create a simplified version of this geometry.  For linestrings, this uses
	     * the [Douglas Peucker](https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm)
	     * algorithm.  For polygons, a quantization-based
	     * simplification is used to preserve topology.
	     * @param {number} tolerance The tolerance distance for simplification.
	     * @return {Geometry} A new, simplified version of the original geometry.
	     * @api
	     */
	    Geometry.prototype.simplify = function (tolerance) {
	        return this.getSimplifiedGeometry(tolerance * tolerance);
	    };
	    /**
	     * Create a simplified version of this geometry using the Douglas Peucker
	     * algorithm.
	     * See https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm.
	     * @abstract
	     * @param {number} squaredTolerance Squared tolerance.
	     * @return {Geometry} Simplified geometry.
	     */
	    Geometry.prototype.getSimplifiedGeometry = function (squaredTolerance) {
	        return abstract();
	    };
	    /**
	     * Get the type of this geometry.
	     * @abstract
	     * @return {import("./GeometryType.js").default} Geometry type.
	     */
	    Geometry.prototype.getType = function () {
	        return abstract();
	    };
	    /**
	     * Apply a transform function to the coordinates of the geometry.
	     * The geometry is modified in place.
	     * If you do not want the geometry modified in place, first `clone()` it and
	     * then use this function on the clone.
	     * @abstract
	     * @param {import("../proj.js").TransformFunction} transformFn Transform function.
	     * Called with a flat array of geometry coordinates.
	     */
	    Geometry.prototype.applyTransform = function (transformFn) {
	        abstract();
	    };
	    /**
	     * Test if the geometry and the passed extent intersect.
	     * @abstract
	     * @param {import("../extent.js").Extent} extent Extent.
	     * @return {boolean} `true` if the geometry and the extent intersect.
	     */
	    Geometry.prototype.intersectsExtent = function (extent) {
	        return abstract();
	    };
	    /**
	     * Translate the geometry.  This modifies the geometry coordinates in place.  If
	     * instead you want a new geometry, first `clone()` this geometry.
	     * @abstract
	     * @param {number} deltaX Delta X.
	     * @param {number} deltaY Delta Y.
	     * @api
	     */
	    Geometry.prototype.translate = function (deltaX, deltaY) {
	        abstract();
	    };
	    /**
	     * Transform each coordinate of the geometry from one coordinate reference
	     * system to another. The geometry is modified in place.
	     * For example, a line will be transformed to a line and a circle to a circle.
	     * If you do not want the geometry modified in place, first `clone()` it and
	     * then use this function on the clone.
	     *
	     * @param {import("../proj.js").ProjectionLike} source The current projection.  Can be a
	     *     string identifier or a {@link module:ol/proj/Projection~Projection} object.
	     * @param {import("../proj.js").ProjectionLike} destination The desired projection.  Can be a
	     *     string identifier or a {@link module:ol/proj/Projection~Projection} object.
	     * @return {Geometry} This geometry.  Note that original geometry is
	     *     modified in place.
	     * @api
	     */
	    Geometry.prototype.transform = function (source, destination) {
	        /** @type {import("../proj/Projection.js").default} */
	        var sourceProj = get$4(source);
	        var transformFn = sourceProj.getUnits() == Units.TILE_PIXELS ?
	            function (inCoordinates, outCoordinates, stride) {
	                var pixelExtent = sourceProj.getExtent();
	                var projectedExtent = sourceProj.getWorldExtent();
	                var scale = getHeight(projectedExtent) / getHeight(pixelExtent);
	                compose(tmpTransform, projectedExtent[0], projectedExtent[3], scale, -scale, 0, 0, 0);
	                transform2D(inCoordinates, 0, inCoordinates.length, stride, tmpTransform, outCoordinates);
	                return getTransform(sourceProj, destination)(inCoordinates, outCoordinates, stride);
	            } :
	            getTransform(sourceProj, destination);
	        this.applyTransform(transformFn);
	        return this;
	    };
	    return Geometry;
	}(BaseObject));

	var __extends$7 = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @classdesc
	 * Abstract base class; only used for creating subclasses; do not instantiate
	 * in apps, as cannot be rendered.
	 *
	 * @abstract
	 * @api
	 */
	var SimpleGeometry = /** @class */ (function (_super) {
	    __extends$7(SimpleGeometry, _super);
	    function SimpleGeometry() {
	        var _this = _super.call(this) || this;
	        /**
	         * @protected
	         * @type {GeometryLayout}
	         */
	        _this.layout = GeometryLayout.XY;
	        /**
	         * @protected
	         * @type {number}
	         */
	        _this.stride = 2;
	        /**
	         * @protected
	         * @type {Array<number>}
	         */
	        _this.flatCoordinates = null;
	        return _this;
	    }
	    /**
	     * @inheritDoc
	     */
	    SimpleGeometry.prototype.computeExtent = function (extent) {
	        return createOrUpdateFromFlatCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, extent);
	    };
	    /**
	     * @abstract
	     * @return {Array<*>} Coordinates.
	     */
	    SimpleGeometry.prototype.getCoordinates = function () {
	        return abstract();
	    };
	    /**
	     * Return the first coordinate of the geometry.
	     * @return {import("../coordinate.js").Coordinate} First coordinate.
	     * @api
	     */
	    SimpleGeometry.prototype.getFirstCoordinate = function () {
	        return this.flatCoordinates.slice(0, this.stride);
	    };
	    /**
	     * @return {Array<number>} Flat coordinates.
	     */
	    SimpleGeometry.prototype.getFlatCoordinates = function () {
	        return this.flatCoordinates;
	    };
	    /**
	     * Return the last coordinate of the geometry.
	     * @return {import("../coordinate.js").Coordinate} Last point.
	     * @api
	     */
	    SimpleGeometry.prototype.getLastCoordinate = function () {
	        return this.flatCoordinates.slice(this.flatCoordinates.length - this.stride);
	    };
	    /**
	     * Return the {@link module:ol/geom/GeometryLayout layout} of the geometry.
	     * @return {GeometryLayout} Layout.
	     * @api
	     */
	    SimpleGeometry.prototype.getLayout = function () {
	        return this.layout;
	    };
	    /**
	     * @inheritDoc
	     */
	    SimpleGeometry.prototype.getSimplifiedGeometry = function (squaredTolerance) {
	        if (this.simplifiedGeometryRevision !== this.getRevision()) {
	            this.simplifiedGeometryMaxMinSquaredTolerance = 0;
	            this.simplifiedGeometryRevision = this.getRevision();
	        }
	        // If squaredTolerance is negative or if we know that simplification will not
	        // have any effect then just return this.
	        if (squaredTolerance < 0 ||
	            (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&
	                squaredTolerance <= this.simplifiedGeometryMaxMinSquaredTolerance)) {
	            return this;
	        }
	        var simplifiedGeometry = this.getSimplifiedGeometryInternal(squaredTolerance);
	        var simplifiedFlatCoordinates = simplifiedGeometry.getFlatCoordinates();
	        if (simplifiedFlatCoordinates.length < this.flatCoordinates.length) {
	            return simplifiedGeometry;
	        }
	        else {
	            // Simplification did not actually remove any coordinates.  We now know
	            // that any calls to getSimplifiedGeometry with a squaredTolerance less
	            // than or equal to the current squaredTolerance will also not have any
	            // effect.  This allows us to short circuit simplification (saving CPU
	            // cycles) and prevents the cache of simplified geometries from filling
	            // up with useless identical copies of this geometry (saving memory).
	            this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;
	            return this;
	        }
	    };
	    /**
	     * @param {number} squaredTolerance Squared tolerance.
	     * @return {SimpleGeometry} Simplified geometry.
	     * @protected
	     */
	    SimpleGeometry.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {
	        return this;
	    };
	    /**
	     * @return {number} Stride.
	     */
	    SimpleGeometry.prototype.getStride = function () {
	        return this.stride;
	    };
	    /**
	     * @param {GeometryLayout} layout Layout.
	     * @param {Array<number>} flatCoordinates Flat coordinates.
	     */
	    SimpleGeometry.prototype.setFlatCoordinates = function (layout, flatCoordinates) {
	        this.stride = getStrideForLayout(layout);
	        this.layout = layout;
	        this.flatCoordinates = flatCoordinates;
	    };
	    /**
	     * @abstract
	     * @param {!Array<*>} coordinates Coordinates.
	     * @param {GeometryLayout=} opt_layout Layout.
	     */
	    SimpleGeometry.prototype.setCoordinates = function (coordinates, opt_layout) {
	        abstract();
	    };
	    /**
	     * @param {GeometryLayout|undefined} layout Layout.
	     * @param {Array<*>} coordinates Coordinates.
	     * @param {number} nesting Nesting.
	     * @protected
	     */
	    SimpleGeometry.prototype.setLayout = function (layout, coordinates, nesting) {
	        /** @type {number} */
	        var stride;
	        if (layout) {
	            stride = getStrideForLayout(layout);
	        }
	        else {
	            for (var i = 0; i < nesting; ++i) {
	                if (coordinates.length === 0) {
	                    this.layout = GeometryLayout.XY;
	                    this.stride = 2;
	                    return;
	                }
	                else {
	                    coordinates = /** @type {Array} */ (coordinates[0]);
	                }
	            }
	            stride = coordinates.length;
	            layout = getLayoutForStride(stride);
	        }
	        this.layout = layout;
	        this.stride = stride;
	    };
	    /**
	     * Apply a transform function to the coordinates of the geometry.
	     * The geometry is modified in place.
	     * If you do not want the geometry modified in place, first `clone()` it and
	     * then use this function on the clone.
	     * @param {import("../proj.js").TransformFunction} transformFn Transform function.
	     * Called with a flat array of geometry coordinates.
	     * @api
	     */
	    SimpleGeometry.prototype.applyTransform = function (transformFn) {
	        if (this.flatCoordinates) {
	            transformFn(this.flatCoordinates, this.flatCoordinates, this.stride);
	            this.changed();
	        }
	    };
	    /**
	     * Rotate the geometry around a given coordinate. This modifies the geometry
	     * coordinates in place.
	     * @param {number} angle Rotation angle in radians.
	     * @param {import("../coordinate.js").Coordinate} anchor The rotation center.
	     * @api
	     */
	    SimpleGeometry.prototype.rotate = function (angle, anchor) {
	        var flatCoordinates = this.getFlatCoordinates();
	        if (flatCoordinates) {
	            var stride = this.getStride();
	            rotate(flatCoordinates, 0, flatCoordinates.length, stride, angle, anchor, flatCoordinates);
	            this.changed();
	        }
	    };
	    /**
	     * Scale the geometry (with an optional origin).  This modifies the geometry
	     * coordinates in place.
	      * @param {number} sx The scaling factor in the x-direction.
	     * @param {number=} opt_sy The scaling factor in the y-direction (defaults to
	     *     sx).
	     * @param {import("../coordinate.js").Coordinate=} opt_anchor The scale origin (defaults to the center
	     *     of the geometry extent).
	     * @api
	     */
	    SimpleGeometry.prototype.scale = function (sx, opt_sy, opt_anchor) {
	        var sy = opt_sy;
	        if (sy === undefined) {
	            sy = sx;
	        }
	        var anchor = opt_anchor;
	        if (!anchor) {
	            anchor = getCenter(this.getExtent());
	        }
	        var flatCoordinates = this.getFlatCoordinates();
	        if (flatCoordinates) {
	            var stride = this.getStride();
	            scale(flatCoordinates, 0, flatCoordinates.length, stride, sx, sy, anchor, flatCoordinates);
	            this.changed();
	        }
	    };
	    /**
	     * Translate the geometry.  This modifies the geometry coordinates in place.  If
	     * instead you want a new geometry, first `clone()` this geometry.
	     * @param {number} deltaX Delta X.
	     * @param {number} deltaY Delta Y.
	     * @api
	     */
	    SimpleGeometry.prototype.translate = function (deltaX, deltaY) {
	        var flatCoordinates = this.getFlatCoordinates();
	        if (flatCoordinates) {
	            var stride = this.getStride();
	            translate(flatCoordinates, 0, flatCoordinates.length, stride, deltaX, deltaY, flatCoordinates);
	            this.changed();
	        }
	    };
	    return SimpleGeometry;
	}(Geometry));
	/**
	 * @param {number} stride Stride.
	 * @return {GeometryLayout} layout Layout.
	 */
	function getLayoutForStride(stride) {
	    var layout;
	    if (stride == 2) {
	        layout = GeometryLayout.XY;
	    }
	    else if (stride == 3) {
	        layout = GeometryLayout.XYZ;
	    }
	    else if (stride == 4) {
	        layout = GeometryLayout.XYZM;
	    }
	    return (
	    /** @type {GeometryLayout} */ (layout));
	}
	/**
	 * @param {GeometryLayout} layout Layout.
	 * @return {number} Stride.
	 */
	function getStrideForLayout(layout) {
	    var stride;
	    if (layout == GeometryLayout.XY) {
	        stride = 2;
	    }
	    else if (layout == GeometryLayout.XYZ || layout == GeometryLayout.XYM) {
	        stride = 3;
	    }
	    else if (layout == GeometryLayout.XYZM) {
	        stride = 4;
	    }
	    return /** @type {number} */ (stride);
	}
	/**
	 * @param {SimpleGeometry} simpleGeometry Simple geometry.
	 * @param {import("../transform.js").Transform} transform Transform.
	 * @param {Array<number>=} opt_dest Destination.
	 * @return {Array<number>} Transformed flat coordinates.
	 */
	function transformGeom2D(simpleGeometry, transform, opt_dest) {
	    var flatCoordinates = simpleGeometry.getFlatCoordinates();
	    if (!flatCoordinates) {
	        return null;
	    }
	    else {
	        var stride = simpleGeometry.getStride();
	        return transform2D(flatCoordinates, 0, flatCoordinates.length, stride, transform, opt_dest);
	    }
	}

	/**
	 * @module ol/geom/flat/area
	 */
	/**
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {number} end End.
	 * @param {number} stride Stride.
	 * @return {number} Area.
	 */
	function linearRing(flatCoordinates, offset, end, stride) {
	    var twiceArea = 0;
	    var x1 = flatCoordinates[end - stride];
	    var y1 = flatCoordinates[end - stride + 1];
	    for (; offset < end; offset += stride) {
	        var x2 = flatCoordinates[offset];
	        var y2 = flatCoordinates[offset + 1];
	        twiceArea += y1 * x2 - x1 * y2;
	        x1 = x2;
	        y1 = y2;
	    }
	    return twiceArea / 2;
	}
	/**
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {Array<number>} ends Ends.
	 * @param {number} stride Stride.
	 * @return {number} Area.
	 */
	function linearRings(flatCoordinates, offset, ends, stride) {
	    var area = 0;
	    for (var i = 0, ii = ends.length; i < ii; ++i) {
	        var end = ends[i];
	        area += linearRing(flatCoordinates, offset, end, stride);
	        offset = end;
	    }
	    return area;
	}
	/**
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {Array<Array<number>>} endss Endss.
	 * @param {number} stride Stride.
	 * @return {number} Area.
	 */
	function linearRingss(flatCoordinates, offset, endss, stride) {
	    var area = 0;
	    for (var i = 0, ii = endss.length; i < ii; ++i) {
	        var ends = endss[i];
	        area += linearRings(flatCoordinates, offset, ends, stride);
	        offset = ends[ends.length - 1];
	    }
	    return area;
	}

	/**
	 * @module ol/geom/flat/closest
	 */
	/**
	 * Returns the point on the 2D line segment flatCoordinates[offset1] to
	 * flatCoordinates[offset2] that is closest to the point (x, y).  Extra
	 * dimensions are linearly interpolated.
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset1 Offset 1.
	 * @param {number} offset2 Offset 2.
	 * @param {number} stride Stride.
	 * @param {number} x X.
	 * @param {number} y Y.
	 * @param {Array<number>} closestPoint Closest point.
	 */
	function assignClosest(flatCoordinates, offset1, offset2, stride, x, y, closestPoint) {
	    var x1 = flatCoordinates[offset1];
	    var y1 = flatCoordinates[offset1 + 1];
	    var dx = flatCoordinates[offset2] - x1;
	    var dy = flatCoordinates[offset2 + 1] - y1;
	    var offset;
	    if (dx === 0 && dy === 0) {
	        offset = offset1;
	    }
	    else {
	        var t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);
	        if (t > 1) {
	            offset = offset2;
	        }
	        else if (t > 0) {
	            for (var i = 0; i < stride; ++i) {
	                closestPoint[i] = lerp(flatCoordinates[offset1 + i], flatCoordinates[offset2 + i], t);
	            }
	            closestPoint.length = stride;
	            return;
	        }
	        else {
	            offset = offset1;
	        }
	    }
	    for (var i = 0; i < stride; ++i) {
	        closestPoint[i] = flatCoordinates[offset + i];
	    }
	    closestPoint.length = stride;
	}
	/**
	 * Return the squared of the largest distance between any pair of consecutive
	 * coordinates.
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {number} end End.
	 * @param {number} stride Stride.
	 * @param {number} max Max squared delta.
	 * @return {number} Max squared delta.
	 */
	function maxSquaredDelta(flatCoordinates, offset, end, stride, max) {
	    var x1 = flatCoordinates[offset];
	    var y1 = flatCoordinates[offset + 1];
	    for (offset += stride; offset < end; offset += stride) {
	        var x2 = flatCoordinates[offset];
	        var y2 = flatCoordinates[offset + 1];
	        var squaredDelta = squaredDistance(x1, y1, x2, y2);
	        if (squaredDelta > max) {
	            max = squaredDelta;
	        }
	        x1 = x2;
	        y1 = y2;
	    }
	    return max;
	}
	/**
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {Array<number>} ends Ends.
	 * @param {number} stride Stride.
	 * @param {number} max Max squared delta.
	 * @return {number} Max squared delta.
	 */
	function arrayMaxSquaredDelta(flatCoordinates, offset, ends, stride, max) {
	    for (var i = 0, ii = ends.length; i < ii; ++i) {
	        var end = ends[i];
	        max = maxSquaredDelta(flatCoordinates, offset, end, stride, max);
	        offset = end;
	    }
	    return max;
	}
	/**
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {Array<Array<number>>} endss Endss.
	 * @param {number} stride Stride.
	 * @param {number} max Max squared delta.
	 * @return {number} Max squared delta.
	 */
	function multiArrayMaxSquaredDelta(flatCoordinates, offset, endss, stride, max) {
	    for (var i = 0, ii = endss.length; i < ii; ++i) {
	        var ends = endss[i];
	        max = arrayMaxSquaredDelta(flatCoordinates, offset, ends, stride, max);
	        offset = ends[ends.length - 1];
	    }
	    return max;
	}
	/**
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {number} end End.
	 * @param {number} stride Stride.
	 * @param {number} maxDelta Max delta.
	 * @param {boolean} isRing Is ring.
	 * @param {number} x X.
	 * @param {number} y Y.
	 * @param {Array<number>} closestPoint Closest point.
	 * @param {number} minSquaredDistance Minimum squared distance.
	 * @param {Array<number>=} opt_tmpPoint Temporary point object.
	 * @return {number} Minimum squared distance.
	 */
	function assignClosestPoint(flatCoordinates, offset, end, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, opt_tmpPoint) {
	    if (offset == end) {
	        return minSquaredDistance;
	    }
	    var i, squaredDistance$1;
	    if (maxDelta === 0) {
	        // All points are identical, so just test the first point.
	        squaredDistance$1 = squaredDistance(x, y, flatCoordinates[offset], flatCoordinates[offset + 1]);
	        if (squaredDistance$1 < minSquaredDistance) {
	            for (i = 0; i < stride; ++i) {
	                closestPoint[i] = flatCoordinates[offset + i];
	            }
	            closestPoint.length = stride;
	            return squaredDistance$1;
	        }
	        else {
	            return minSquaredDistance;
	        }
	    }
	    var tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];
	    var index = offset + stride;
	    while (index < end) {
	        assignClosest(flatCoordinates, index - stride, index, stride, x, y, tmpPoint);
	        squaredDistance$1 = squaredDistance(x, y, tmpPoint[0], tmpPoint[1]);
	        if (squaredDistance$1 < minSquaredDistance) {
	            minSquaredDistance = squaredDistance$1;
	            for (i = 0; i < stride; ++i) {
	                closestPoint[i] = tmpPoint[i];
	            }
	            closestPoint.length = stride;
	            index += stride;
	        }
	        else {
	            // Skip ahead multiple points, because we know that all the skipped
	            // points cannot be any closer than the closest point we have found so
	            // far.  We know this because we know how close the current point is, how
	            // close the closest point we have found so far is, and the maximum
	            // distance between consecutive points.  For example, if we're currently
	            // at distance 10, the best we've found so far is 3, and that the maximum
	            // distance between consecutive points is 2, then we'll need to skip at
	            // least (10 - 3) / 2 == 3 (rounded down) points to have any chance of
	            // finding a closer point.  We use Math.max(..., 1) to ensure that we
	            // always advance at least one point, to avoid an infinite loop.
	            index += stride * Math.max(((Math.sqrt(squaredDistance$1) -
	                Math.sqrt(minSquaredDistance)) / maxDelta) | 0, 1);
	        }
	    }
	    if (isRing) {
	        // Check the closing segment.
	        assignClosest(flatCoordinates, end - stride, offset, stride, x, y, tmpPoint);
	        squaredDistance$1 = squaredDistance(x, y, tmpPoint[0], tmpPoint[1]);
	        if (squaredDistance$1 < minSquaredDistance) {
	            minSquaredDistance = squaredDistance$1;
	            for (i = 0; i < stride; ++i) {
	                closestPoint[i] = tmpPoint[i];
	            }
	            closestPoint.length = stride;
	        }
	    }
	    return minSquaredDistance;
	}
	/**
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {Array<number>} ends Ends.
	 * @param {number} stride Stride.
	 * @param {number} maxDelta Max delta.
	 * @param {boolean} isRing Is ring.
	 * @param {number} x X.
	 * @param {number} y Y.
	 * @param {Array<number>} closestPoint Closest point.
	 * @param {number} minSquaredDistance Minimum squared distance.
	 * @param {Array<number>=} opt_tmpPoint Temporary point object.
	 * @return {number} Minimum squared distance.
	 */
	function assignClosestArrayPoint(flatCoordinates, offset, ends, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, opt_tmpPoint) {
	    var tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];
	    for (var i = 0, ii = ends.length; i < ii; ++i) {
	        var end = ends[i];
	        minSquaredDistance = assignClosestPoint(flatCoordinates, offset, end, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint);
	        offset = end;
	    }
	    return minSquaredDistance;
	}
	/**
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {Array<Array<number>>} endss Endss.
	 * @param {number} stride Stride.
	 * @param {number} maxDelta Max delta.
	 * @param {boolean} isRing Is ring.
	 * @param {number} x X.
	 * @param {number} y Y.
	 * @param {Array<number>} closestPoint Closest point.
	 * @param {number} minSquaredDistance Minimum squared distance.
	 * @param {Array<number>=} opt_tmpPoint Temporary point object.
	 * @return {number} Minimum squared distance.
	 */
	function assignClosestMultiArrayPoint(flatCoordinates, offset, endss, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, opt_tmpPoint) {
	    var tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];
	    for (var i = 0, ii = endss.length; i < ii; ++i) {
	        var ends = endss[i];
	        minSquaredDistance = assignClosestArrayPoint(flatCoordinates, offset, ends, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint);
	        offset = ends[ends.length - 1];
	    }
	    return minSquaredDistance;
	}

	/**
	 * @module ol/geom/flat/deflate
	 */
	/**
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
	 * @param {number} stride Stride.
	 * @return {number} offset Offset.
	 */
	function deflateCoordinate(flatCoordinates, offset, coordinate, stride) {
	    for (var i = 0, ii = coordinate.length; i < ii; ++i) {
	        flatCoordinates[offset++] = coordinate[i];
	    }
	    return offset;
	}
	/**
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {Array<import("../../coordinate.js").Coordinate>} coordinates Coordinates.
	 * @param {number} stride Stride.
	 * @return {number} offset Offset.
	 */
	function deflateCoordinates(flatCoordinates, offset, coordinates, stride) {
	    for (var i = 0, ii = coordinates.length; i < ii; ++i) {
	        var coordinate = coordinates[i];
	        for (var j = 0; j < stride; ++j) {
	            flatCoordinates[offset++] = coordinate[j];
	        }
	    }
	    return offset;
	}
	/**
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {Array<Array<import("../../coordinate.js").Coordinate>>} coordinatess Coordinatess.
	 * @param {number} stride Stride.
	 * @param {Array<number>=} opt_ends Ends.
	 * @return {Array<number>} Ends.
	 */
	function deflateCoordinatesArray(flatCoordinates, offset, coordinatess, stride, opt_ends) {
	    var ends = opt_ends ? opt_ends : [];
	    var i = 0;
	    for (var j = 0, jj = coordinatess.length; j < jj; ++j) {
	        var end = deflateCoordinates(flatCoordinates, offset, coordinatess[j], stride);
	        ends[i++] = end;
	        offset = end;
	    }
	    ends.length = i;
	    return ends;
	}
	/**
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {Array<Array<Array<import("../../coordinate.js").Coordinate>>>} coordinatesss Coordinatesss.
	 * @param {number} stride Stride.
	 * @param {Array<Array<number>>=} opt_endss Endss.
	 * @return {Array<Array<number>>} Endss.
	 */
	function deflateMultiCoordinatesArray(flatCoordinates, offset, coordinatesss, stride, opt_endss) {
	    var endss = opt_endss ? opt_endss : [];
	    var i = 0;
	    for (var j = 0, jj = coordinatesss.length; j < jj; ++j) {
	        var ends = deflateCoordinatesArray(flatCoordinates, offset, coordinatesss[j], stride, endss[i]);
	        endss[i++] = ends;
	        offset = ends[ends.length - 1];
	    }
	    endss.length = i;
	    return endss;
	}

	/**
	 * @module ol/geom/flat/inflate
	 */
	/**
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {number} end End.
	 * @param {number} stride Stride.
	 * @param {Array<import("../../coordinate.js").Coordinate>=} opt_coordinates Coordinates.
	 * @return {Array<import("../../coordinate.js").Coordinate>} Coordinates.
	 */
	function inflateCoordinates(flatCoordinates, offset, end, stride, opt_coordinates) {
	    var coordinates = opt_coordinates !== undefined ? opt_coordinates : [];
	    var i = 0;
	    for (var j = offset; j < end; j += stride) {
	        coordinates[i++] = flatCoordinates.slice(j, j + stride);
	    }
	    coordinates.length = i;
	    return coordinates;
	}
	/**
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {Array<number>} ends Ends.
	 * @param {number} stride Stride.
	 * @param {Array<Array<import("../../coordinate.js").Coordinate>>=} opt_coordinatess Coordinatess.
	 * @return {Array<Array<import("../../coordinate.js").Coordinate>>} Coordinatess.
	 */
	function inflateCoordinatesArray(flatCoordinates, offset, ends, stride, opt_coordinatess) {
	    var coordinatess = opt_coordinatess !== undefined ? opt_coordinatess : [];
	    var i = 0;
	    for (var j = 0, jj = ends.length; j < jj; ++j) {
	        var end = ends[j];
	        coordinatess[i++] = inflateCoordinates(flatCoordinates, offset, end, stride, coordinatess[i]);
	        offset = end;
	    }
	    coordinatess.length = i;
	    return coordinatess;
	}
	/**
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {Array<Array<number>>} endss Endss.
	 * @param {number} stride Stride.
	 * @param {Array<Array<Array<import("../../coordinate.js").Coordinate>>>=} opt_coordinatesss
	 *     Coordinatesss.
	 * @return {Array<Array<Array<import("../../coordinate.js").Coordinate>>>} Coordinatesss.
	 */
	function inflateMultiCoordinatesArray(flatCoordinates, offset, endss, stride, opt_coordinatesss) {
	    var coordinatesss = opt_coordinatesss !== undefined ? opt_coordinatesss : [];
	    var i = 0;
	    for (var j = 0, jj = endss.length; j < jj; ++j) {
	        var ends = endss[j];
	        coordinatesss[i++] = inflateCoordinatesArray(flatCoordinates, offset, ends, stride, coordinatesss[i]);
	        offset = ends[ends.length - 1];
	    }
	    coordinatesss.length = i;
	    return coordinatesss;
	}

	/**
	 * @module ol/geom/flat/simplify
	 */
	/**
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {number} end End.
	 * @param {number} stride Stride.
	 * @param {number} squaredTolerance Squared tolerance.
	 * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
	 *     coordinates.
	 * @param {number} simplifiedOffset Simplified offset.
	 * @return {number} Simplified offset.
	 */
	function douglasPeucker(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset) {
	    var n = (end - offset) / stride;
	    if (n < 3) {
	        for (; offset < end; offset += stride) {
	            simplifiedFlatCoordinates[simplifiedOffset++] =
	                flatCoordinates[offset];
	            simplifiedFlatCoordinates[simplifiedOffset++] =
	                flatCoordinates[offset + 1];
	        }
	        return simplifiedOffset;
	    }
	    /** @type {Array<number>} */
	    var markers = new Array(n);
	    markers[0] = 1;
	    markers[n - 1] = 1;
	    /** @type {Array<number>} */
	    var stack = [offset, end - stride];
	    var index = 0;
	    while (stack.length > 0) {
	        var last = stack.pop();
	        var first = stack.pop();
	        var maxSquaredDistance = 0;
	        var x1 = flatCoordinates[first];
	        var y1 = flatCoordinates[first + 1];
	        var x2 = flatCoordinates[last];
	        var y2 = flatCoordinates[last + 1];
	        for (var i = first + stride; i < last; i += stride) {
	            var x = flatCoordinates[i];
	            var y = flatCoordinates[i + 1];
	            var squaredDistance_1 = squaredSegmentDistance(x, y, x1, y1, x2, y2);
	            if (squaredDistance_1 > maxSquaredDistance) {
	                index = i;
	                maxSquaredDistance = squaredDistance_1;
	            }
	        }
	        if (maxSquaredDistance > squaredTolerance) {
	            markers[(index - offset) / stride] = 1;
	            if (first + stride < index) {
	                stack.push(first, index);
	            }
	            if (index + stride < last) {
	                stack.push(index, last);
	            }
	        }
	    }
	    for (var i = 0; i < n; ++i) {
	        if (markers[i]) {
	            simplifiedFlatCoordinates[simplifiedOffset++] =
	                flatCoordinates[offset + i * stride];
	            simplifiedFlatCoordinates[simplifiedOffset++] =
	                flatCoordinates[offset + i * stride + 1];
	        }
	    }
	    return simplifiedOffset;
	}
	/**
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {Array<number>} ends Ends.
	 * @param {number} stride Stride.
	 * @param {number} squaredTolerance Squared tolerance.
	 * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
	 *     coordinates.
	 * @param {number} simplifiedOffset Simplified offset.
	 * @param {Array<number>} simplifiedEnds Simplified ends.
	 * @return {number} Simplified offset.
	 */
	function douglasPeuckerArray(flatCoordinates, offset, ends, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds) {
	    for (var i = 0, ii = ends.length; i < ii; ++i) {
	        var end = ends[i];
	        simplifiedOffset = douglasPeucker(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset);
	        simplifiedEnds.push(simplifiedOffset);
	        offset = end;
	    }
	    return simplifiedOffset;
	}
	/**
	 * @param {number} value Value.
	 * @param {number} tolerance Tolerance.
	 * @return {number} Rounded value.
	 */
	function snap(value, tolerance) {
	    return tolerance * Math.round(value / tolerance);
	}
	/**
	 * Simplifies a line string using an algorithm designed by Tim Schaub.
	 * Coordinates are snapped to the nearest value in a virtual grid and
	 * consecutive duplicate coordinates are discarded.  This effectively preserves
	 * topology as the simplification of any subsection of a line string is
	 * independent of the rest of the line string.  This means that, for examples,
	 * the common edge between two polygons will be simplified to the same line
	 * string independently in both polygons.  This implementation uses a single
	 * pass over the coordinates and eliminates intermediate collinear points.
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {number} end End.
	 * @param {number} stride Stride.
	 * @param {number} tolerance Tolerance.
	 * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
	 *     coordinates.
	 * @param {number} simplifiedOffset Simplified offset.
	 * @return {number} Simplified offset.
	 */
	function quantize(flatCoordinates, offset, end, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset) {
	    // do nothing if the line is empty
	    if (offset == end) {
	        return simplifiedOffset;
	    }
	    // snap the first coordinate (P1)
	    var x1 = snap(flatCoordinates[offset], tolerance);
	    var y1 = snap(flatCoordinates[offset + 1], tolerance);
	    offset += stride;
	    // add the first coordinate to the output
	    simplifiedFlatCoordinates[simplifiedOffset++] = x1;
	    simplifiedFlatCoordinates[simplifiedOffset++] = y1;
	    // find the next coordinate that does not snap to the same value as the first
	    // coordinate (P2)
	    var x2, y2;
	    do {
	        x2 = snap(flatCoordinates[offset], tolerance);
	        y2 = snap(flatCoordinates[offset + 1], tolerance);
	        offset += stride;
	        if (offset == end) {
	            // all coordinates snap to the same value, the line collapses to a point
	            // push the last snapped value anyway to ensure that the output contains
	            // at least two points
	            // FIXME should we really return at least two points anyway?
	            simplifiedFlatCoordinates[simplifiedOffset++] = x2;
	            simplifiedFlatCoordinates[simplifiedOffset++] = y2;
	            return simplifiedOffset;
	        }
	    } while (x2 == x1 && y2 == y1);
	    while (offset < end) {
	        // snap the next coordinate (P3)
	        var x3 = snap(flatCoordinates[offset], tolerance);
	        var y3 = snap(flatCoordinates[offset + 1], tolerance);
	        offset += stride;
	        // skip P3 if it is equal to P2
	        if (x3 == x2 && y3 == y2) {
	            continue;
	        }
	        // calculate the delta between P1 and P2
	        var dx1 = x2 - x1;
	        var dy1 = y2 - y1;
	        // calculate the delta between P3 and P1
	        var dx2 = x3 - x1;
	        var dy2 = y3 - y1;
	        // if P1, P2, and P3 are colinear and P3 is further from P1 than P2 is from
	        // P1 in the same direction then P2 is on the straight line between P1 and
	        // P3
	        if ((dx1 * dy2 == dy1 * dx2) &&
	            ((dx1 < 0 && dx2 < dx1) || dx1 == dx2 || (dx1 > 0 && dx2 > dx1)) &&
	            ((dy1 < 0 && dy2 < dy1) || dy1 == dy2 || (dy1 > 0 && dy2 > dy1))) {
	            // discard P2 and set P2 = P3
	            x2 = x3;
	            y2 = y3;
	            continue;
	        }
	        // either P1, P2, and P3 are not colinear, or they are colinear but P3 is
	        // between P3 and P1 or on the opposite half of the line to P2.  add P2,
	        // and continue with P1 = P2 and P2 = P3
	        simplifiedFlatCoordinates[simplifiedOffset++] = x2;
	        simplifiedFlatCoordinates[simplifiedOffset++] = y2;
	        x1 = x2;
	        y1 = y2;
	        x2 = x3;
	        y2 = y3;
	    }
	    // add the last point (P2)
	    simplifiedFlatCoordinates[simplifiedOffset++] = x2;
	    simplifiedFlatCoordinates[simplifiedOffset++] = y2;
	    return simplifiedOffset;
	}
	/**
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {Array<number>} ends Ends.
	 * @param {number} stride Stride.
	 * @param {number} tolerance Tolerance.
	 * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
	 *     coordinates.
	 * @param {number} simplifiedOffset Simplified offset.
	 * @param {Array<number>} simplifiedEnds Simplified ends.
	 * @return {number} Simplified offset.
	 */
	function quantizeArray(flatCoordinates, offset, ends, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds) {
	    for (var i = 0, ii = ends.length; i < ii; ++i) {
	        var end = ends[i];
	        simplifiedOffset = quantize(flatCoordinates, offset, end, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset);
	        simplifiedEnds.push(simplifiedOffset);
	        offset = end;
	    }
	    return simplifiedOffset;
	}
	/**
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {Array<Array<number>>} endss Endss.
	 * @param {number} stride Stride.
	 * @param {number} tolerance Tolerance.
	 * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
	 *     coordinates.
	 * @param {number} simplifiedOffset Simplified offset.
	 * @param {Array<Array<number>>} simplifiedEndss Simplified endss.
	 * @return {number} Simplified offset.
	 */
	function quantizeMultiArray(flatCoordinates, offset, endss, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEndss) {
	    for (var i = 0, ii = endss.length; i < ii; ++i) {
	        var ends = endss[i];
	        var simplifiedEnds = [];
	        simplifiedOffset = quantizeArray(flatCoordinates, offset, ends, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds);
	        simplifiedEndss.push(simplifiedEnds);
	        offset = ends[ends.length - 1];
	    }
	    return simplifiedOffset;
	}

	var __extends$8 = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @classdesc
	 * Linear ring geometry. Only used as part of polygon; cannot be rendered
	 * on its own.
	 *
	 * @api
	 */
	var LinearRing = /** @class */ (function (_super) {
	    __extends$8(LinearRing, _super);
	    /**
	     * @param {Array<import("../coordinate.js").Coordinate>|Array<number>} coordinates Coordinates.
	     *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.
	     * @param {GeometryLayout=} opt_layout Layout.
	     */
	    function LinearRing(coordinates, opt_layout) {
	        var _this = _super.call(this) || this;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.maxDelta_ = -1;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.maxDeltaRevision_ = -1;
	        if (opt_layout !== undefined && !Array.isArray(coordinates[0])) {
	            _this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */ (coordinates));
	        }
	        else {
	            _this.setCoordinates(/** @type {Array<import("../coordinate.js").Coordinate>} */ (coordinates), opt_layout);
	        }
	        return _this;
	    }
	    /**
	     * Make a complete copy of the geometry.
	     * @return {!LinearRing} Clone.
	     * @override
	     * @api
	     */
	    LinearRing.prototype.clone = function () {
	        return new LinearRing(this.flatCoordinates.slice(), this.layout);
	    };
	    /**
	     * @inheritDoc
	     */
	    LinearRing.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {
	        if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
	            return minSquaredDistance;
	        }
	        if (this.maxDeltaRevision_ != this.getRevision()) {
	            this.maxDelta_ = Math.sqrt(maxSquaredDelta(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));
	            this.maxDeltaRevision_ = this.getRevision();
	        }
	        return assignClosestPoint(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);
	    };
	    /**
	     * Return the area of the linear ring on projected plane.
	     * @return {number} Area (on projected plane).
	     * @api
	     */
	    LinearRing.prototype.getArea = function () {
	        return linearRing(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
	    };
	    /**
	     * Return the coordinates of the linear ring.
	     * @return {Array<import("../coordinate.js").Coordinate>} Coordinates.
	     * @override
	     * @api
	     */
	    LinearRing.prototype.getCoordinates = function () {
	        return inflateCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
	    };
	    /**
	     * @inheritDoc
	     */
	    LinearRing.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {
	        var simplifiedFlatCoordinates = [];
	        simplifiedFlatCoordinates.length = douglasPeucker(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0);
	        return new LinearRing(simplifiedFlatCoordinates, GeometryLayout.XY);
	    };
	    /**
	     * @inheritDoc
	     * @api
	     */
	    LinearRing.prototype.getType = function () {
	        return GeometryType.LINEAR_RING;
	    };
	    /**
	     * @inheritDoc
	     */
	    LinearRing.prototype.intersectsExtent = function (extent) {
	        return false;
	    };
	    /**
	     * Set the coordinates of the linear ring.
	     * @param {!Array<import("../coordinate.js").Coordinate>} coordinates Coordinates.
	     * @param {GeometryLayout=} opt_layout Layout.
	     * @override
	     * @api
	     */
	    LinearRing.prototype.setCoordinates = function (coordinates, opt_layout) {
	        this.setLayout(opt_layout, coordinates, 1);
	        if (!this.flatCoordinates) {
	            this.flatCoordinates = [];
	        }
	        this.flatCoordinates.length = deflateCoordinates(this.flatCoordinates, 0, coordinates, this.stride);
	        this.changed();
	    };
	    return LinearRing;
	}(SimpleGeometry));

	var __extends$9 = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @classdesc
	 * Point geometry.
	 *
	 * @api
	 */
	var Point = /** @class */ (function (_super) {
	    __extends$9(Point, _super);
	    /**
	     * @param {import("../coordinate.js").Coordinate} coordinates Coordinates.
	     * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
	     */
	    function Point(coordinates, opt_layout) {
	        var _this = _super.call(this) || this;
	        _this.setCoordinates(coordinates, opt_layout);
	        return _this;
	    }
	    /**
	     * Make a complete copy of the geometry.
	     * @return {!Point} Clone.
	     * @override
	     * @api
	     */
	    Point.prototype.clone = function () {
	        var point = new Point(this.flatCoordinates.slice(), this.layout);
	        return point;
	    };
	    /**
	     * @inheritDoc
	     */
	    Point.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {
	        var flatCoordinates = this.flatCoordinates;
	        var squaredDistance$1 = squaredDistance(x, y, flatCoordinates[0], flatCoordinates[1]);
	        if (squaredDistance$1 < minSquaredDistance) {
	            var stride = this.stride;
	            for (var i = 0; i < stride; ++i) {
	                closestPoint[i] = flatCoordinates[i];
	            }
	            closestPoint.length = stride;
	            return squaredDistance$1;
	        }
	        else {
	            return minSquaredDistance;
	        }
	    };
	    /**
	     * Return the coordinate of the point.
	     * @return {import("../coordinate.js").Coordinate} Coordinates.
	     * @override
	     * @api
	     */
	    Point.prototype.getCoordinates = function () {
	        return !this.flatCoordinates ? [] : this.flatCoordinates.slice();
	    };
	    /**
	     * @inheritDoc
	     */
	    Point.prototype.computeExtent = function (extent) {
	        return createOrUpdateFromCoordinate(this.flatCoordinates, extent);
	    };
	    /**
	     * @inheritDoc
	     * @api
	     */
	    Point.prototype.getType = function () {
	        return GeometryType.POINT;
	    };
	    /**
	     * @inheritDoc
	     * @api
	     */
	    Point.prototype.intersectsExtent = function (extent) {
	        return containsXY(extent, this.flatCoordinates[0], this.flatCoordinates[1]);
	    };
	    /**
	     * @inheritDoc
	     * @api
	     */
	    Point.prototype.setCoordinates = function (coordinates, opt_layout) {
	        this.setLayout(opt_layout, coordinates, 0);
	        if (!this.flatCoordinates) {
	            this.flatCoordinates = [];
	        }
	        this.flatCoordinates.length = deflateCoordinate(this.flatCoordinates, 0, coordinates, this.stride);
	        this.changed();
	    };
	    return Point;
	}(SimpleGeometry));

	/**
	 * @module ol/geom/flat/contains
	 */
	/**
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {number} end End.
	 * @param {number} stride Stride.
	 * @param {import("../../extent.js").Extent} extent Extent.
	 * @return {boolean} Contains extent.
	 */
	function linearRingContainsExtent(flatCoordinates, offset, end, stride, extent) {
	    var outside = forEachCorner(extent, 
	    /**
	     * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
	     * @return {boolean} Contains (x, y).
	     */
	    function (coordinate) {
	        return !linearRingContainsXY(flatCoordinates, offset, end, stride, coordinate[0], coordinate[1]);
	    });
	    return !outside;
	}
	/**
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {number} end End.
	 * @param {number} stride Stride.
	 * @param {number} x X.
	 * @param {number} y Y.
	 * @return {boolean} Contains (x, y).
	 */
	function linearRingContainsXY(flatCoordinates, offset, end, stride, x, y) {
	    // http://geomalgorithms.com/a03-_inclusion.html
	    // Copyright 2000 softSurfer, 2012 Dan Sunday
	    // This code may be freely used and modified for any purpose
	    // providing that this copyright notice is included with it.
	    // SoftSurfer makes no warranty for this code, and cannot be held
	    // liable for any real or imagined damage resulting from its use.
	    // Users of this code must verify correctness for their application.
	    var wn = 0;
	    var x1 = flatCoordinates[end - stride];
	    var y1 = flatCoordinates[end - stride + 1];
	    for (; offset < end; offset += stride) {
	        var x2 = flatCoordinates[offset];
	        var y2 = flatCoordinates[offset + 1];
	        if (y1 <= y) {
	            if (y2 > y && ((x2 - x1) * (y - y1)) - ((x - x1) * (y2 - y1)) > 0) {
	                wn++;
	            }
	        }
	        else if (y2 <= y && ((x2 - x1) * (y - y1)) - ((x - x1) * (y2 - y1)) < 0) {
	            wn--;
	        }
	        x1 = x2;
	        y1 = y2;
	    }
	    return wn !== 0;
	}
	/**
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {Array<number>} ends Ends.
	 * @param {number} stride Stride.
	 * @param {number} x X.
	 * @param {number} y Y.
	 * @return {boolean} Contains (x, y).
	 */
	function linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y) {
	    if (ends.length === 0) {
	        return false;
	    }
	    if (!linearRingContainsXY(flatCoordinates, offset, ends[0], stride, x, y)) {
	        return false;
	    }
	    for (var i = 1, ii = ends.length; i < ii; ++i) {
	        if (linearRingContainsXY(flatCoordinates, ends[i - 1], ends[i], stride, x, y)) {
	            return false;
	        }
	    }
	    return true;
	}
	/**
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {Array<Array<number>>} endss Endss.
	 * @param {number} stride Stride.
	 * @param {number} x X.
	 * @param {number} y Y.
	 * @return {boolean} Contains (x, y).
	 */
	function linearRingssContainsXY(flatCoordinates, offset, endss, stride, x, y) {
	    if (endss.length === 0) {
	        return false;
	    }
	    for (var i = 0, ii = endss.length; i < ii; ++i) {
	        var ends = endss[i];
	        if (linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y)) {
	            return true;
	        }
	        offset = ends[ends.length - 1];
	    }
	    return false;
	}

	/**
	 * @module ol/geom/flat/interiorpoint
	 */
	/**
	 * Calculates a point that is likely to lie in the interior of the linear rings.
	 * Inspired by JTS's com.vividsolutions.jts.geom.Geometry#getInteriorPoint.
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {Array<number>} ends Ends.
	 * @param {number} stride Stride.
	 * @param {Array<number>} flatCenters Flat centers.
	 * @param {number} flatCentersOffset Flat center offset.
	 * @param {Array<number>=} opt_dest Destination.
	 * @return {Array<number>} Destination point as XYM coordinate, where M is the
	 * length of the horizontal intersection that the point belongs to.
	 */
	function getInteriorPointOfArray(flatCoordinates, offset, ends, stride, flatCenters, flatCentersOffset, opt_dest) {
	    var i, ii, x, x1, x2, y1, y2;
	    var y = flatCenters[flatCentersOffset + 1];
	    /** @type {Array<number>} */
	    var intersections = [];
	    // Calculate intersections with the horizontal line
	    for (var r = 0, rr = ends.length; r < rr; ++r) {
	        var end = ends[r];
	        x1 = flatCoordinates[end - stride];
	        y1 = flatCoordinates[end - stride + 1];
	        for (i = offset; i < end; i += stride) {
	            x2 = flatCoordinates[i];
	            y2 = flatCoordinates[i + 1];
	            if ((y <= y1 && y2 <= y) || (y1 <= y && y <= y2)) {
	                x = (y - y1) / (y2 - y1) * (x2 - x1) + x1;
	                intersections.push(x);
	            }
	            x1 = x2;
	            y1 = y2;
	        }
	    }
	    // Find the longest segment of the horizontal line that has its center point
	    // inside the linear ring.
	    var pointX = NaN;
	    var maxSegmentLength = -Infinity;
	    intersections.sort(numberSafeCompareFunction);
	    x1 = intersections[0];
	    for (i = 1, ii = intersections.length; i < ii; ++i) {
	        x2 = intersections[i];
	        var segmentLength = Math.abs(x2 - x1);
	        if (segmentLength > maxSegmentLength) {
	            x = (x1 + x2) / 2;
	            if (linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y)) {
	                pointX = x;
	                maxSegmentLength = segmentLength;
	            }
	        }
	        x1 = x2;
	    }
	    if (isNaN(pointX)) {
	        // There is no horizontal line that has its center point inside the linear
	        // ring.  Use the center of the the linear ring's extent.
	        pointX = flatCenters[flatCentersOffset];
	    }
	    if (opt_dest) {
	        opt_dest.push(pointX, y, maxSegmentLength);
	        return opt_dest;
	    }
	    else {
	        return [pointX, y, maxSegmentLength];
	    }
	}
	/**
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {Array<Array<number>>} endss Endss.
	 * @param {number} stride Stride.
	 * @param {Array<number>} flatCenters Flat centers.
	 * @return {Array<number>} Interior points as XYM coordinates, where M is the
	 * length of the horizontal intersection that the point belongs to.
	 */
	function getInteriorPointsOfMultiArray(flatCoordinates, offset, endss, stride, flatCenters) {
	    var interiorPoints = [];
	    for (var i = 0, ii = endss.length; i < ii; ++i) {
	        var ends = endss[i];
	        interiorPoints = getInteriorPointOfArray(flatCoordinates, offset, ends, stride, flatCenters, 2 * i, interiorPoints);
	        offset = ends[ends.length - 1];
	    }
	    return interiorPoints;
	}

	/**
	 * @module ol/geom/flat/segments
	 */
	/**
	 * This function calls `callback` for each segment of the flat coordinates
	 * array. If the callback returns a truthy value the function returns that
	 * value immediately. Otherwise the function returns `false`.
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {number} end End.
	 * @param {number} stride Stride.
	 * @param {function(import("../../coordinate.js").Coordinate, import("../../coordinate.js").Coordinate): T} callback Function
	 *     called for each segment.
	 * @return {T|boolean} Value.
	 * @template T
	 */
	function forEach(flatCoordinates, offset, end, stride, callback) {
	    var point1 = [flatCoordinates[offset], flatCoordinates[offset + 1]];
	    var point2 = [];
	    var ret;
	    for (; (offset + stride) < end; offset += stride) {
	        point2[0] = flatCoordinates[offset + stride];
	        point2[1] = flatCoordinates[offset + stride + 1];
	        ret = callback(point1, point2);
	        if (ret) {
	            return ret;
	        }
	        point1[0] = point2[0];
	        point1[1] = point2[1];
	    }
	    return false;
	}

	/**
	 * @module ol/geom/flat/intersectsextent
	 */
	/**
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {number} end End.
	 * @param {number} stride Stride.
	 * @param {import("../../extent.js").Extent} extent Extent.
	 * @return {boolean} True if the geometry and the extent intersect.
	 */
	function intersectsLineString(flatCoordinates, offset, end, stride, extent) {
	    var coordinatesExtent = extendFlatCoordinates(createEmpty(), flatCoordinates, offset, end, stride);
	    if (!intersects(extent, coordinatesExtent)) {
	        return false;
	    }
	    if (containsExtent(extent, coordinatesExtent)) {
	        return true;
	    }
	    if (coordinatesExtent[0] >= extent[0] &&
	        coordinatesExtent[2] <= extent[2]) {
	        return true;
	    }
	    if (coordinatesExtent[1] >= extent[1] &&
	        coordinatesExtent[3] <= extent[3]) {
	        return true;
	    }
	    return forEach(flatCoordinates, offset, end, stride, 
	    /**
	     * @param {import("../../coordinate.js").Coordinate} point1 Start point.
	     * @param {import("../../coordinate.js").Coordinate} point2 End point.
	     * @return {boolean} `true` if the segment and the extent intersect,
	     *     `false` otherwise.
	     */
	    function (point1, point2) {
	        return intersectsSegment(extent, point1, point2);
	    });
	}
	/**
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {Array<number>} ends Ends.
	 * @param {number} stride Stride.
	 * @param {import("../../extent.js").Extent} extent Extent.
	 * @return {boolean} True if the geometry and the extent intersect.
	 */
	function intersectsLineStringArray(flatCoordinates, offset, ends, stride, extent) {
	    for (var i = 0, ii = ends.length; i < ii; ++i) {
	        if (intersectsLineString(flatCoordinates, offset, ends[i], stride, extent)) {
	            return true;
	        }
	        offset = ends[i];
	    }
	    return false;
	}
	/**
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {number} end End.
	 * @param {number} stride Stride.
	 * @param {import("../../extent.js").Extent} extent Extent.
	 * @return {boolean} True if the geometry and the extent intersect.
	 */
	function intersectsLinearRing(flatCoordinates, offset, end, stride, extent) {
	    if (intersectsLineString(flatCoordinates, offset, end, stride, extent)) {
	        return true;
	    }
	    if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[0], extent[1])) {
	        return true;
	    }
	    if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[0], extent[3])) {
	        return true;
	    }
	    if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[2], extent[1])) {
	        return true;
	    }
	    if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[2], extent[3])) {
	        return true;
	    }
	    return false;
	}
	/**
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {Array<number>} ends Ends.
	 * @param {number} stride Stride.
	 * @param {import("../../extent.js").Extent} extent Extent.
	 * @return {boolean} True if the geometry and the extent intersect.
	 */
	function intersectsLinearRingArray(flatCoordinates, offset, ends, stride, extent) {
	    if (!intersectsLinearRing(flatCoordinates, offset, ends[0], stride, extent)) {
	        return false;
	    }
	    if (ends.length === 1) {
	        return true;
	    }
	    for (var i = 1, ii = ends.length; i < ii; ++i) {
	        if (linearRingContainsExtent(flatCoordinates, ends[i - 1], ends[i], stride, extent)) {
	            if (!intersectsLineString(flatCoordinates, ends[i - 1], ends[i], stride, extent)) {
	                return false;
	            }
	        }
	    }
	    return true;
	}
	/**
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {Array<Array<number>>} endss Endss.
	 * @param {number} stride Stride.
	 * @param {import("../../extent.js").Extent} extent Extent.
	 * @return {boolean} True if the geometry and the extent intersect.
	 */
	function intersectsLinearRingMultiArray(flatCoordinates, offset, endss, stride, extent) {
	    for (var i = 0, ii = endss.length; i < ii; ++i) {
	        var ends = endss[i];
	        if (intersectsLinearRingArray(flatCoordinates, offset, ends, stride, extent)) {
	            return true;
	        }
	        offset = ends[ends.length - 1];
	    }
	    return false;
	}

	/**
	 * @module ol/geom/flat/reverse
	 */
	/**
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {number} end End.
	 * @param {number} stride Stride.
	 */
	function coordinates(flatCoordinates, offset, end, stride) {
	    while (offset < end - stride) {
	        for (var i = 0; i < stride; ++i) {
	            var tmp = flatCoordinates[offset + i];
	            flatCoordinates[offset + i] = flatCoordinates[end - stride + i];
	            flatCoordinates[end - stride + i] = tmp;
	        }
	        offset += stride;
	        end -= stride;
	    }
	}

	/**
	 * @module ol/geom/flat/orient
	 */
	/**
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {number} end End.
	 * @param {number} stride Stride.
	 * @return {boolean} Is clockwise.
	 */
	function linearRingIsClockwise(flatCoordinates, offset, end, stride) {
	    // http://tinyurl.com/clockwise-method
	    // https://github.com/OSGeo/gdal/blob/trunk/gdal/ogr/ogrlinearring.cpp
	    var edge = 0;
	    var x1 = flatCoordinates[end - stride];
	    var y1 = flatCoordinates[end - stride + 1];
	    for (; offset < end; offset += stride) {
	        var x2 = flatCoordinates[offset];
	        var y2 = flatCoordinates[offset + 1];
	        edge += (x2 - x1) * (y2 + y1);
	        x1 = x2;
	        y1 = y2;
	    }
	    return edge > 0;
	}
	/**
	 * Determines if linear rings are oriented.  By default, left-hand orientation
	 * is tested (first ring must be clockwise, remaining rings counter-clockwise).
	 * To test for right-hand orientation, use the `opt_right` argument.
	 *
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {Array<number>} ends Array of end indexes.
	 * @param {number} stride Stride.
	 * @param {boolean=} opt_right Test for right-hand orientation
	 *     (counter-clockwise exterior ring and clockwise interior rings).
	 * @return {boolean} Rings are correctly oriented.
	 */
	function linearRingsAreOriented(flatCoordinates, offset, ends, stride, opt_right) {
	    var right = opt_right !== undefined ? opt_right : false;
	    for (var i = 0, ii = ends.length; i < ii; ++i) {
	        var end = ends[i];
	        var isClockwise = linearRingIsClockwise(flatCoordinates, offset, end, stride);
	        if (i === 0) {
	            if ((right && isClockwise) || (!right && !isClockwise)) {
	                return false;
	            }
	        }
	        else {
	            if ((right && !isClockwise) || (!right && isClockwise)) {
	                return false;
	            }
	        }
	        offset = end;
	    }
	    return true;
	}
	/**
	 * Determines if linear rings are oriented.  By default, left-hand orientation
	 * is tested (first ring must be clockwise, remaining rings counter-clockwise).
	 * To test for right-hand orientation, use the `opt_right` argument.
	 *
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {Array<Array<number>>} endss Array of array of end indexes.
	 * @param {number} stride Stride.
	 * @param {boolean=} opt_right Test for right-hand orientation
	 *     (counter-clockwise exterior ring and clockwise interior rings).
	 * @return {boolean} Rings are correctly oriented.
	 */
	function linearRingssAreOriented(flatCoordinates, offset, endss, stride, opt_right) {
	    for (var i = 0, ii = endss.length; i < ii; ++i) {
	        var ends = endss[i];
	        if (!linearRingsAreOriented(flatCoordinates, offset, ends, stride, opt_right)) {
	            return false;
	        }
	        if (ends.length) {
	            offset = ends[ends.length - 1];
	        }
	    }
	    return true;
	}
	/**
	 * Orient coordinates in a flat array of linear rings.  By default, rings
	 * are oriented following the left-hand rule (clockwise for exterior and
	 * counter-clockwise for interior rings).  To orient according to the
	 * right-hand rule, use the `opt_right` argument.
	 *
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {Array<number>} ends Ends.
	 * @param {number} stride Stride.
	 * @param {boolean=} opt_right Follow the right-hand rule for orientation.
	 * @return {number} End.
	 */
	function orientLinearRings(flatCoordinates, offset, ends, stride, opt_right) {
	    var right = opt_right !== undefined ? opt_right : false;
	    for (var i = 0, ii = ends.length; i < ii; ++i) {
	        var end = ends[i];
	        var isClockwise = linearRingIsClockwise(flatCoordinates, offset, end, stride);
	        var reverse = i === 0 ?
	            (right && isClockwise) || (!right && !isClockwise) :
	            (right && !isClockwise) || (!right && isClockwise);
	        if (reverse) {
	            coordinates(flatCoordinates, offset, end, stride);
	        }
	        offset = end;
	    }
	    return offset;
	}
	/**
	 * Orient coordinates in a flat array of linear rings.  By default, rings
	 * are oriented following the left-hand rule (clockwise for exterior and
	 * counter-clockwise for interior rings).  To orient according to the
	 * right-hand rule, use the `opt_right` argument.
	 *
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {Array<Array<number>>} endss Array of array of end indexes.
	 * @param {number} stride Stride.
	 * @param {boolean=} opt_right Follow the right-hand rule for orientation.
	 * @return {number} End.
	 */
	function orientLinearRingsArray(flatCoordinates, offset, endss, stride, opt_right) {
	    for (var i = 0, ii = endss.length; i < ii; ++i) {
	        offset = orientLinearRings(flatCoordinates, offset, endss[i], stride, opt_right);
	    }
	    return offset;
	}

	var __extends$a = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @classdesc
	 * Polygon geometry.
	 *
	 * @api
	 */
	var Polygon = /** @class */ (function (_super) {
	    __extends$a(Polygon, _super);
	    /**
	     * @param {!Array<Array<import("../coordinate.js").Coordinate>>|!Array<number>} coordinates
	     *     Array of linear rings that define the polygon. The first linear ring of the
	     *     array defines the outer-boundary or surface of the polygon. Each subsequent
	     *     linear ring defines a hole in the surface of the polygon. A linear ring is
	     *     an array of vertices' coordinates where the first coordinate and the last are
	     *     equivalent. (For internal use, flat coordinates in combination with
	     *     `opt_layout` and `opt_ends` are also accepted.)
	     * @param {GeometryLayout=} opt_layout Layout.
	     * @param {Array<number>=} opt_ends Ends (for internal use with flat coordinates).
	     */
	    function Polygon(coordinates, opt_layout, opt_ends) {
	        var _this = _super.call(this) || this;
	        /**
	         * @type {Array<number>}
	         * @private
	         */
	        _this.ends_ = [];
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.flatInteriorPointRevision_ = -1;
	        /**
	         * @private
	         * @type {import("../coordinate.js").Coordinate}
	         */
	        _this.flatInteriorPoint_ = null;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.maxDelta_ = -1;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.maxDeltaRevision_ = -1;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.orientedRevision_ = -1;
	        /**
	         * @private
	         * @type {Array<number>}
	         */
	        _this.orientedFlatCoordinates_ = null;
	        if (opt_layout !== undefined && opt_ends) {
	            _this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */ (coordinates));
	            _this.ends_ = opt_ends;
	        }
	        else {
	            _this.setCoordinates(/** @type {Array<Array<import("../coordinate.js").Coordinate>>} */ (coordinates), opt_layout);
	        }
	        return _this;
	    }
	    /**
	     * Append the passed linear ring to this polygon.
	     * @param {LinearRing} linearRing Linear ring.
	     * @api
	     */
	    Polygon.prototype.appendLinearRing = function (linearRing) {
	        if (!this.flatCoordinates) {
	            this.flatCoordinates = linearRing.getFlatCoordinates().slice();
	        }
	        else {
	            extend$1(this.flatCoordinates, linearRing.getFlatCoordinates());
	        }
	        this.ends_.push(this.flatCoordinates.length);
	        this.changed();
	    };
	    /**
	     * Make a complete copy of the geometry.
	     * @return {!Polygon} Clone.
	     * @override
	     * @api
	     */
	    Polygon.prototype.clone = function () {
	        return new Polygon(this.flatCoordinates.slice(), this.layout, this.ends_.slice());
	    };
	    /**
	     * @inheritDoc
	     */
	    Polygon.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {
	        if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
	            return minSquaredDistance;
	        }
	        if (this.maxDeltaRevision_ != this.getRevision()) {
	            this.maxDelta_ = Math.sqrt(arrayMaxSquaredDelta(this.flatCoordinates, 0, this.ends_, this.stride, 0));
	            this.maxDeltaRevision_ = this.getRevision();
	        }
	        return assignClosestArrayPoint(this.flatCoordinates, 0, this.ends_, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);
	    };
	    /**
	     * @inheritDoc
	     */
	    Polygon.prototype.containsXY = function (x, y) {
	        return linearRingsContainsXY(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, x, y);
	    };
	    /**
	     * Return the area of the polygon on projected plane.
	     * @return {number} Area (on projected plane).
	     * @api
	     */
	    Polygon.prototype.getArea = function () {
	        return linearRings(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride);
	    };
	    /**
	     * Get the coordinate array for this geometry.  This array has the structure
	     * of a GeoJSON coordinate array for polygons.
	     *
	     * @param {boolean=} opt_right Orient coordinates according to the right-hand
	     *     rule (counter-clockwise for exterior and clockwise for interior rings).
	     *     If `false`, coordinates will be oriented according to the left-hand rule
	     *     (clockwise for exterior and counter-clockwise for interior rings).
	     *     By default, coordinate orientation will depend on how the geometry was
	     *     constructed.
	     * @return {Array<Array<import("../coordinate.js").Coordinate>>} Coordinates.
	     * @override
	     * @api
	     */
	    Polygon.prototype.getCoordinates = function (opt_right) {
	        var flatCoordinates;
	        if (opt_right !== undefined) {
	            flatCoordinates = this.getOrientedFlatCoordinates().slice();
	            orientLinearRings(flatCoordinates, 0, this.ends_, this.stride, opt_right);
	        }
	        else {
	            flatCoordinates = this.flatCoordinates;
	        }
	        return inflateCoordinatesArray(flatCoordinates, 0, this.ends_, this.stride);
	    };
	    /**
	     * @return {Array<number>} Ends.
	     */
	    Polygon.prototype.getEnds = function () {
	        return this.ends_;
	    };
	    /**
	     * @return {Array<number>} Interior point.
	     */
	    Polygon.prototype.getFlatInteriorPoint = function () {
	        if (this.flatInteriorPointRevision_ != this.getRevision()) {
	            var flatCenter = getCenter(this.getExtent());
	            this.flatInteriorPoint_ = getInteriorPointOfArray(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, flatCenter, 0);
	            this.flatInteriorPointRevision_ = this.getRevision();
	        }
	        return this.flatInteriorPoint_;
	    };
	    /**
	     * Return an interior point of the polygon.
	     * @return {Point} Interior point as XYM coordinate, where M is the
	     * length of the horizontal intersection that the point belongs to.
	     * @api
	     */
	    Polygon.prototype.getInteriorPoint = function () {
	        return new Point(this.getFlatInteriorPoint(), GeometryLayout.XYM);
	    };
	    /**
	     * Return the number of rings of the polygon,  this includes the exterior
	     * ring and any interior rings.
	     *
	     * @return {number} Number of rings.
	     * @api
	     */
	    Polygon.prototype.getLinearRingCount = function () {
	        return this.ends_.length;
	    };
	    /**
	     * Return the Nth linear ring of the polygon geometry. Return `null` if the
	     * given index is out of range.
	     * The exterior linear ring is available at index `0` and the interior rings
	     * at index `1` and beyond.
	     *
	     * @param {number} index Index.
	     * @return {LinearRing} Linear ring.
	     * @api
	     */
	    Polygon.prototype.getLinearRing = function (index) {
	        if (index < 0 || this.ends_.length <= index) {
	            return null;
	        }
	        return new LinearRing(this.flatCoordinates.slice(index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);
	    };
	    /**
	     * Return the linear rings of the polygon.
	     * @return {Array<LinearRing>} Linear rings.
	     * @api
	     */
	    Polygon.prototype.getLinearRings = function () {
	        var layout = this.layout;
	        var flatCoordinates = this.flatCoordinates;
	        var ends = this.ends_;
	        var linearRings = [];
	        var offset = 0;
	        for (var i = 0, ii = ends.length; i < ii; ++i) {
	            var end = ends[i];
	            var linearRing = new LinearRing(flatCoordinates.slice(offset, end), layout);
	            linearRings.push(linearRing);
	            offset = end;
	        }
	        return linearRings;
	    };
	    /**
	     * @return {Array<number>} Oriented flat coordinates.
	     */
	    Polygon.prototype.getOrientedFlatCoordinates = function () {
	        if (this.orientedRevision_ != this.getRevision()) {
	            var flatCoordinates = this.flatCoordinates;
	            if (linearRingsAreOriented(flatCoordinates, 0, this.ends_, this.stride)) {
	                this.orientedFlatCoordinates_ = flatCoordinates;
	            }
	            else {
	                this.orientedFlatCoordinates_ = flatCoordinates.slice();
	                this.orientedFlatCoordinates_.length =
	                    orientLinearRings(this.orientedFlatCoordinates_, 0, this.ends_, this.stride);
	            }
	            this.orientedRevision_ = this.getRevision();
	        }
	        return this.orientedFlatCoordinates_;
	    };
	    /**
	     * @inheritDoc
	     */
	    Polygon.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {
	        var simplifiedFlatCoordinates = [];
	        var simplifiedEnds = [];
	        simplifiedFlatCoordinates.length = quantizeArray(this.flatCoordinates, 0, this.ends_, this.stride, Math.sqrt(squaredTolerance), simplifiedFlatCoordinates, 0, simplifiedEnds);
	        return new Polygon(simplifiedFlatCoordinates, GeometryLayout.XY, simplifiedEnds);
	    };
	    /**
	     * @inheritDoc
	     * @api
	     */
	    Polygon.prototype.getType = function () {
	        return GeometryType.POLYGON;
	    };
	    /**
	     * @inheritDoc
	     * @api
	     */
	    Polygon.prototype.intersectsExtent = function (extent) {
	        return intersectsLinearRingArray(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, extent);
	    };
	    /**
	     * Set the coordinates of the polygon.
	     * @param {!Array<Array<import("../coordinate.js").Coordinate>>} coordinates Coordinates.
	     * @param {GeometryLayout=} opt_layout Layout.
	     * @override
	     * @api
	     */
	    Polygon.prototype.setCoordinates = function (coordinates, opt_layout) {
	        this.setLayout(opt_layout, coordinates, 2);
	        if (!this.flatCoordinates) {
	            this.flatCoordinates = [];
	        }
	        var ends = deflateCoordinatesArray(this.flatCoordinates, 0, coordinates, this.stride, this.ends_);
	        this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];
	        this.changed();
	    };
	    return Polygon;
	}(SimpleGeometry));
	/**
	 * Create an approximation of a circle on the surface of a sphere.
	 * @param {import("../coordinate.js").Coordinate} center Center (`[lon, lat]` in degrees).
	 * @param {number} radius The great-circle distance from the center to
	 *     the polygon vertices.
	 * @param {number=} opt_n Optional number of vertices for the resulting
	 *     polygon. Default is `32`.
	 * @param {number=} opt_sphereRadius Optional radius for the sphere (defaults to
	 *     the Earth's mean radius using the WGS84 ellipsoid).
	 * @return {Polygon} The "circular" polygon.
	 * @api
	 */
	function circular(center, radius, opt_n, opt_sphereRadius) {
	    var n = opt_n ? opt_n : 32;
	    /** @type {Array<number>} */
	    var flatCoordinates = [];
	    for (var i = 0; i < n; ++i) {
	        extend$1(flatCoordinates, offset(center, radius, 2 * Math.PI * i / n, opt_sphereRadius));
	    }
	    flatCoordinates.push(flatCoordinates[0], flatCoordinates[1]);
	    return new Polygon(flatCoordinates, GeometryLayout.XY, [flatCoordinates.length]);
	}
	/**
	 * Create a polygon from an extent. The layout used is `XY`.
	 * @param {import("../extent.js").Extent} extent The extent.
	 * @return {Polygon} The polygon.
	 * @api
	 */
	function fromExtent(extent) {
	    var minX = extent[0];
	    var minY = extent[1];
	    var maxX = extent[2];
	    var maxY = extent[3];
	    var flatCoordinates = [minX, minY, minX, maxY, maxX, maxY, maxX, minY, minX, minY];
	    return new Polygon(flatCoordinates, GeometryLayout.XY, [flatCoordinates.length]);
	}

	var __extends$b = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @enum {string}
	 */
	var Property = {
	    ACCURACY: 'accuracy',
	    ACCURACY_GEOMETRY: 'accuracyGeometry',
	    ALTITUDE: 'altitude',
	    ALTITUDE_ACCURACY: 'altitudeAccuracy',
	    HEADING: 'heading',
	    POSITION: 'position',
	    PROJECTION: 'projection',
	    SPEED: 'speed',
	    TRACKING: 'tracking',
	    TRACKING_OPTIONS: 'trackingOptions'
	};
	/**
	 * @classdesc
	 * Events emitted on Geolocation error.
	 */
	var GeolocationError = /** @class */ (function (_super) {
	    __extends$b(GeolocationError, _super);
	    /**
	     * @param {PositionError} error error object.
	     */
	    function GeolocationError(error) {
	        var _this = _super.call(this, EventType.ERROR) || this;
	        /**
	         * @type {number}
	         */
	        _this.code = error.code;
	        /**
	         * @type {string}
	         */
	        _this.message = error.message;
	        return _this;
	    }
	    return GeolocationError;
	}(BaseEvent));
	/**
	 * @typedef {Object} Options
	 * @property {boolean} [tracking=false] Start Tracking right after
	 * instantiation.
	 * @property {PositionOptions} [trackingOptions] Tracking options.
	 * See http://www.w3.org/TR/geolocation-API/#position_options_interface.
	 * @property {import("./proj.js").ProjectionLike} [projection] The projection the position
	 * is reported in.
	 */
	/**
	 * @classdesc
	 * Helper class for providing HTML5 Geolocation capabilities.
	 * The [Geolocation API](http://www.w3.org/TR/geolocation-API/)
	 * is used to locate a user's position.
	 *
	 * To get notified of position changes, register a listener for the generic
	 * `change` event on your instance of {@link module:ol/Geolocation~Geolocation}.
	 *
	 * Example:
	 *
	 *     var geolocation = new Geolocation({
	 *       // take the projection to use from the map's view
	 *       projection: view.getProjection()
	 *     });
	 *     // listen to changes in position
	 *     geolocation.on('change', function(evt) {
	 *       window.console.log(geolocation.getPosition());
	 *     });
	 *
	 * @fires module:ol/events/Event~BaseEvent#event:error
	 * @api
	 */
	var Geolocation = /** @class */ (function (_super) {
	    __extends$b(Geolocation, _super);
	    /**
	     * @param {Options=} opt_options Options.
	     */
	    function Geolocation(opt_options) {
	        var _this = _super.call(this) || this;
	        var options = opt_options || {};
	        /**
	         * The unprojected (EPSG:4326) device position.
	         * @private
	         * @type {?import("./coordinate.js").Coordinate}
	         */
	        _this.position_ = null;
	        /**
	         * @private
	         * @type {import("./proj.js").TransformFunction}
	         */
	        _this.transform_ = identityTransform;
	        /**
	         * @private
	         * @type {number|undefined}
	         */
	        _this.watchId_ = undefined;
	        _this.addEventListener(getChangeEventType(Property.PROJECTION), _this.handleProjectionChanged_);
	        _this.addEventListener(getChangeEventType(Property.TRACKING), _this.handleTrackingChanged_);
	        if (options.projection !== undefined) {
	            _this.setProjection(options.projection);
	        }
	        if (options.trackingOptions !== undefined) {
	            _this.setTrackingOptions(options.trackingOptions);
	        }
	        _this.setTracking(options.tracking !== undefined ? options.tracking : false);
	        return _this;
	    }
	    /**
	     * @inheritDoc
	     */
	    Geolocation.prototype.disposeInternal = function () {
	        this.setTracking(false);
	        _super.prototype.disposeInternal.call(this);
	    };
	    /**
	     * @private
	     */
	    Geolocation.prototype.handleProjectionChanged_ = function () {
	        var projection = this.getProjection();
	        if (projection) {
	            this.transform_ = getTransformFromProjections(get$4('EPSG:4326'), projection);
	            if (this.position_) {
	                this.set(Property.POSITION, this.transform_(this.position_));
	            }
	        }
	    };
	    /**
	     * @private
	     */
	    Geolocation.prototype.handleTrackingChanged_ = function () {
	        if ('geolocation' in navigator) {
	            var tracking = this.getTracking();
	            if (tracking && this.watchId_ === undefined) {
	                this.watchId_ = navigator.geolocation.watchPosition(this.positionChange_.bind(this), this.positionError_.bind(this), this.getTrackingOptions());
	            }
	            else if (!tracking && this.watchId_ !== undefined) {
	                navigator.geolocation.clearWatch(this.watchId_);
	                this.watchId_ = undefined;
	            }
	        }
	    };
	    /**
	     * @private
	     * @param {Position} position position event.
	     */
	    Geolocation.prototype.positionChange_ = function (position) {
	        var coords = position.coords;
	        this.set(Property.ACCURACY, coords.accuracy);
	        this.set(Property.ALTITUDE, coords.altitude === null ? undefined : coords.altitude);
	        this.set(Property.ALTITUDE_ACCURACY, coords.altitudeAccuracy === null ?
	            undefined : coords.altitudeAccuracy);
	        this.set(Property.HEADING, coords.heading === null ?
	            undefined : toRadians(coords.heading));
	        if (!this.position_) {
	            this.position_ = [coords.longitude, coords.latitude];
	        }
	        else {
	            this.position_[0] = coords.longitude;
	            this.position_[1] = coords.latitude;
	        }
	        var projectedPosition = this.transform_(this.position_);
	        this.set(Property.POSITION, projectedPosition);
	        this.set(Property.SPEED, coords.speed === null ? undefined : coords.speed);
	        var geometry = circular(this.position_, coords.accuracy);
	        geometry.applyTransform(this.transform_);
	        this.set(Property.ACCURACY_GEOMETRY, geometry);
	        this.changed();
	    };
	    /**
	     * @private
	     * @param {PositionError} error error object.
	     */
	    Geolocation.prototype.positionError_ = function (error) {
	        this.setTracking(false);
	        this.dispatchEvent(new GeolocationError(error));
	    };
	    /**
	     * Get the accuracy of the position in meters.
	     * @return {number|undefined} The accuracy of the position measurement in
	     *     meters.
	     * @observable
	     * @api
	     */
	    Geolocation.prototype.getAccuracy = function () {
	        return /** @type {number|undefined} */ (this.get(Property.ACCURACY));
	    };
	    /**
	     * Get a geometry of the position accuracy.
	     * @return {?import("./geom/Polygon.js").default} A geometry of the position accuracy.
	     * @observable
	     * @api
	     */
	    Geolocation.prototype.getAccuracyGeometry = function () {
	        return (
	        /** @type {?import("./geom/Polygon.js").default} */ (this.get(Property.ACCURACY_GEOMETRY) || null));
	    };
	    /**
	     * Get the altitude associated with the position.
	     * @return {number|undefined} The altitude of the position in meters above mean
	     *     sea level.
	     * @observable
	     * @api
	     */
	    Geolocation.prototype.getAltitude = function () {
	        return /** @type {number|undefined} */ (this.get(Property.ALTITUDE));
	    };
	    /**
	     * Get the altitude accuracy of the position.
	     * @return {number|undefined} The accuracy of the altitude measurement in
	     *     meters.
	     * @observable
	     * @api
	     */
	    Geolocation.prototype.getAltitudeAccuracy = function () {
	        return /** @type {number|undefined} */ (this.get(Property.ALTITUDE_ACCURACY));
	    };
	    /**
	     * Get the heading as radians clockwise from North.
	     * Note: depending on the browser, the heading is only defined if the `enableHighAccuracy`
	     * is set to `true` in the tracking options.
	     * @return {number|undefined} The heading of the device in radians from north.
	     * @observable
	     * @api
	     */
	    Geolocation.prototype.getHeading = function () {
	        return /** @type {number|undefined} */ (this.get(Property.HEADING));
	    };
	    /**
	     * Get the position of the device.
	     * @return {import("./coordinate.js").Coordinate|undefined} The current position of the device reported
	     *     in the current projection.
	     * @observable
	     * @api
	     */
	    Geolocation.prototype.getPosition = function () {
	        return (
	        /** @type {import("./coordinate.js").Coordinate|undefined} */ (this.get(Property.POSITION)));
	    };
	    /**
	     * Get the projection associated with the position.
	     * @return {import("./proj/Projection.js").default|undefined} The projection the position is
	     *     reported in.
	     * @observable
	     * @api
	     */
	    Geolocation.prototype.getProjection = function () {
	        return (
	        /** @type {import("./proj/Projection.js").default|undefined} */ (this.get(Property.PROJECTION)));
	    };
	    /**
	     * Get the speed in meters per second.
	     * @return {number|undefined} The instantaneous speed of the device in meters
	     *     per second.
	     * @observable
	     * @api
	     */
	    Geolocation.prototype.getSpeed = function () {
	        return /** @type {number|undefined} */ (this.get(Property.SPEED));
	    };
	    /**
	     * Determine if the device location is being tracked.
	     * @return {boolean} The device location is being tracked.
	     * @observable
	     * @api
	     */
	    Geolocation.prototype.getTracking = function () {
	        return /** @type {boolean} */ (this.get(Property.TRACKING));
	    };
	    /**
	     * Get the tracking options.
	     * See http://www.w3.org/TR/geolocation-API/#position-options.
	     * @return {PositionOptions|undefined} PositionOptions as defined by
	     *     the [HTML5 Geolocation spec
	     *     ](http://www.w3.org/TR/geolocation-API/#position_options_interface).
	     * @observable
	     * @api
	     */
	    Geolocation.prototype.getTrackingOptions = function () {
	        return /** @type {PositionOptions|undefined} */ (this.get(Property.TRACKING_OPTIONS));
	    };
	    /**
	     * Set the projection to use for transforming the coordinates.
	     * @param {import("./proj.js").ProjectionLike} projection The projection the position is
	     *     reported in.
	     * @observable
	     * @api
	     */
	    Geolocation.prototype.setProjection = function (projection) {
	        this.set(Property.PROJECTION, get$4(projection));
	    };
	    /**
	     * Enable or disable tracking.
	     * @param {boolean} tracking Enable tracking.
	     * @observable
	     * @api
	     */
	    Geolocation.prototype.setTracking = function (tracking) {
	        this.set(Property.TRACKING, tracking);
	    };
	    /**
	     * Set the tracking options.
	     * See http://www.w3.org/TR/geolocation-API/#position-options.
	     * @param {PositionOptions} options PositionOptions as defined by the
	     *     [HTML5 Geolocation spec
	     *     ](http://www.w3.org/TR/geolocation-API/#position_options_interface).
	     * @observable
	     * @api
	     */
	    Geolocation.prototype.setTrackingOptions = function (options) {
	        this.set(Property.TRACKING_OPTIONS, options);
	    };
	    return Geolocation;
	}(BaseObject));

	var DEBUG = JSON.parse("true" );
	var ANIMATION_DURATION = 500;
	var DEFAULT_CENTER = [-13655274.508685641, 5704240.981993447];
	var DEFAULT_ZOOM = 15;
	var MAX_ZOOM = 19;
	var MIN_ZOOM = 4;
	var OVERVIEW_SWITCHER_ZOOM = 12;
	var STREET_LEVEL_ZOOM = 17;
	var GEOGRAPHIC_SRID = '4326';
	var GEOGRAPHIC_PROJECTION = get$4("EPSG:".concat(GEOGRAPHIC_SRID));
	var NATIVE_SRID = '3857';
	var NATIVE_PROJECTION = get$4("EPSG:".concat(NATIVE_SRID));
	var MAPBOX_ACCESS_TOKEN = "pk.eyJ1Ijoid3lsZWUiLCJhIjoiY2pwZzVwODE3MGk5NjNwcnUwcGljdGNoZiJ9.6Mmlea6mFERvwQVyMkhcLA";
	var MAPBOX_API_URL = '//api.mapbox.com';
	var MY_LOCATION_ACCURACY_THRESHOLD = 50;

	var currentLocation = readable({
	  position: null,
	  accuracy: Infinity,
	  accuracyGeometry: null,
	  heading: null,
	  speed: 0,
	  error: null
	}, function (set) {
	  var timeoutSeconds = 10;
	  var geolocation = new Geolocation({
	    projection: NATIVE_PROJECTION,
	    trackingOptions: {
	      maximumAge: 2 * 1000,
	      enableHighAccuracy: true,
	      timeout: timeoutSeconds * 1000
	    }
	  });
	  var changeKey = geolocation.on('change', function () {
	    set({
	      position: geolocation.getPosition(),
	      accuracy: geolocation.getAccuracy(),
	      accuracyGeometry: geolocation.getAccuracyGeometry(),
	      heading: geolocation.getHeading() || 0,
	      speed: geolocation.getSpeed() || 0,
	      error: null
	    });
	  });
	  var errorKey = geolocation.on('error', function (error) {
	    var detail;

	    switch (error.code) {
	      case 1:
	        detail = 'You may need to enable location services for this site in your browser.';
	        break;

	      case 3:
	        detail = "Could not find location after ".concat(timeoutSeconds, " seconds.");
	        geolocation.setTracking(true);
	        break;

	      default:
	        detail = 'Could not determine location.';
	    }

	    set({
	      position: null,
	      accuracy: Infinity,
	      accuracyGeometry: null,
	      heading: null,
	      speed: 0,
	      error: {
	        title: 'Location Unavailable',
	        explanation: 'Your location is currently unavailable',
	        detail: detail
	      }
	    });
	  });
	  geolocation.setTracking(true);
	  return function () {
	    geolocation.setTracking(false);
	    unByKey(changeKey);
	    unByKey(errorKey);
	  };
	});

	var abortStore = writable(null);
	var abortRequest = function abortRequest() {
	  var controller = new AbortController();
	  abortStore.update(function (value) {
	    if (value) {
	      value.controller.abort();
	    }

	    return {
	      controller: controller,
	      signal: controller.signal
	    };
	  });
	  return controller;
	};
	var progressCounter = function () {
	  var _writable = writable(1),
	      subscribe = _writable.subscribe,
	      set = _writable.set,
	      update = _writable.update;

	  return {
	    subscribe: subscribe,
	    increment: function increment() {
	      return update(function (n) {
	        return n + 1;
	      });
	    },
	    decrement: function decrement() {
	      return update(function (n) {
	        return n - 1;
	      });
	    },
	    reset: function reset() {
	      return set(0);
	    }
	  };
	}(); // URL Routing

	var currentRoute = writable({});
	var currentUrl = function () {
	  var store = writable({
	    routeName: 'home',
	    path: '/',
	    params: {},
	    queryParams: {}
	  });
	  return {
	    set: store.set,
	    update: store.update,
	    subscribe: function subscribe(routeName, run) {
	      return store.subscribe(function (data) {
	        return data.routeName === routeName ? run(data) : undefined;
	      });
	    }
	  };
	}();

	function displayLatLong(coordinates) {
	  var sep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ', ';
	  var transform = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

	  if (transform) {
	    coordinates = toLonLat(coordinates);
	  }

	  return "".concat(coordinates[1].toFixed(5)).concat(sep).concat(coordinates[0].toFixed(5));
	}
	/**
	 * Wait for location to be ready.
	 *
	 * @param callback
	 * @param showProgress
	 */

	function waitForLocation(callback) {
	  var showProgress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

	  if (showProgress) {
	    progressCounter.increment();
	  }

	  var unsubscribe = currentLocation.subscribe(function _callee(locationData) {
	    return regenerator.async(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            if (!(locationData.position || locationData.error)) {
	              _context.next = 6;
	              break;
	            }

	            _context.next = 3;
	            return regenerator.awrap(tick());

	          case 3:
	            unsubscribe();
	            callback(locationData);

	            if (showProgress) {
	              progressCounter.decrement();
	            }

	          case 6:
	          case "end":
	            return _context.stop();
	        }
	      }
	    });
	  });
	}

	function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(Object(source), true).forEach(function (key) { defineProperty$4(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
	var routes = {
	  'home': {
	    path: '/',
	    component: 'Query'
	  },
	  'search': {
	    basePath: '/search',
	    path: new RegExp(['^/search', '(/([^/]+?)(@([+-]?\\d+\\.\\d+,[+-]\\d+\\.\\d+))?)?$'].join('')),
	    // XXX: Workaround for lack of named regex groups
	    groups: {
	      term: 1,
	      point: 3
	    },
	    makePath: function makePath(_ref) {
	      var term = _ref.term,
	          point = _ref.point;
	      return pathSegmentForTermAndPoint(term, point);
	    },
	    component: 'Query'
	  },
	  'directions': {
	    basePath: '/directions',
	    path: new RegExp(['^/directions', '(/(([^/]+?)(@([+-]?\\d+\\.\\d+,[+-]\\d+\\.\\d+))?|)', '(/([^/]+?)(@([+-]?\\d+\\.\\d+,[+-]\\d+\\.\\d+))?)?)?$'].join('')),
	    // XXX: Workaround for lack of named regex groups
	    groups: {
	      fromTerm: 2,
	      fromPoint: 4,
	      toTerm: 6,
	      toPoint: 8
	    },
	    makePath: function makePath(_ref2) {
	      var fromTerm = _ref2.fromTerm,
	          fromPoint = _ref2.fromPoint,
	          toTerm = _ref2.toTerm,
	          toPoint = _ref2.toPoint;
	      var fromSegment = pathSegmentForTermAndPoint(fromTerm, fromPoint);
	      var toSegment = pathSegmentForTermAndPoint(toTerm, toPoint);

	      if (toSegment) {
	        return [fromSegment || '', toSegment];
	      } else if (fromSegment) {
	        return [fromSegment];
	      }

	      return [];
	    },
	    component: 'Directions'
	  },
	  'default': {
	    path: '*',
	    component: 'Query'
	  }
	};
	function configureRoutes(components, currentRoute, currentUrl) {
	  page('*', function (ctx, next) {
	    ctx.queryParams = queryStringToParams(ctx.querystring);
	    next();
	  });

	  var _loop = function _loop() {
	    var routeName = _Object$keys[_i];
	    var route = routes[routeName];
	    var component = components[route.component];
	    var groups = route.groups;

	    if (!component) {
	      throw new Error("Unknown component: ".concat(route.component));
	    }

	    route.name = routeName;
	    route.component = component;

	    if (!route.basePath) {
	      route.basePath = "".concat(route.path);
	    }

	    page(route.path, function _callee(ctx) {
	      var path, params, queryParams;
	      return regenerator.async(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              currentRoute.set(route);
	              _context.next = 3;
	              return regenerator.awrap(tick());

	            case 3:
	              path = ctx.path, params = ctx.params, queryParams = ctx.queryParams; // XXX: Workaround for lack of named regex groups

	              if (groups) {
	                Object.keys(groups).forEach(function (name) {
	                  var i = groups[name];
	                  var value = params[i];

	                  if (typeof value !== 'undefined') {
	                    params[name] = value;
	                  }
	                });
	              }

	              currentUrl.set({
	                routeName: routeName,
	                path: path,
	                params: params,
	                queryParams: queryParams
	              });

	            case 6:
	            case "end":
	              return _context.stop();
	          }
	        }
	      });
	    });
	  };

	  for (var _i = 0, _Object$keys = Object.keys(routes); _i < _Object$keys.length; _i++) {
	    _loop();
	  } // Configure page.js; without this, page.js does nothing.


	  page({
	    decodeURLComponents: false
	  });
	}
	/* External API */

	function setCurrentRoute(name) {
	  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  var route = getRoute(name);
	  var path = routePath(route, params);
	  return page(path);
	}
	/**
	 * Set the current URL without navigating.
	 */

	function pushState(name) {
	  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	  var title = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
	  var replace = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
	  var route = getRoute(name);
	  var path = routePath(route, params);
	  history[replace ? 'replaceState' : 'pushState'](_objectSpread({}, data, {
	    path: path
	  }), title, path);
	}
	/**
	 * Replace the current URL without navigating.
	 */

	function replaceState(name) {
	  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	  var title = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
	  pushState(name, params, data, title, true);
	}
	/* Utilities */

	function getRoute(name) {
	  var route = routes[name];

	  if (!route) {
	    throw new Error("Unknown route: ".concat(name));
	  }

	  return route;
	}

	function routePath(route) {
	  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  var path = [route.basePath];
	  var segments = route.makePath ? route.makePath(params) : [];
	  segments.forEach(function (segment, i) {
	    return segments[i] = encodeURIComponent$1(segment);
	  });
	  return path.concat(segments).join('/');
	}

	function pathSegmentForTermAndPoint(term, point) {
	  if (point && typeof point !== 'string') {
	    point = displayLatLong(point, ',');
	  }

	  if (point && point.replace(/ +/, '') === term.replace(/ +/, '')) {
	    point = null;
	  }

	  return point ? "".concat(term, "@").concat(point) : term || '';
	}

	function encodeURIComponent$1(string) {
	  return window.encodeURIComponent(string).replace(/%40/g, function () {
	    return '@';
	  }).replace(/%2C/g, function () {
	    return ',';
	  });
	}

	function _arrayWithHoles(arr) {
	  if (Array.isArray(arr)) return arr;
	}

	var arrayWithHoles = _arrayWithHoles;

	function _iterableToArrayLimit(arr, i) {
	  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
	    return;
	  }

	  var _arr = [];
	  var _n = true;
	  var _d = false;
	  var _e = undefined;

	  try {
	    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	      _arr.push(_s.value);

	      if (i && _arr.length === i) break;
	    }
	  } catch (err) {
	    _d = true;
	    _e = err;
	  } finally {
	    try {
	      if (!_n && _i["return"] != null) _i["return"]();
	    } finally {
	      if (_d) throw _e;
	    }
	  }

	  return _arr;
	}

	var iterableToArrayLimit = _iterableToArrayLimit;

	function _nonIterableRest() {
	  throw new TypeError("Invalid attempt to destructure non-iterable instance");
	}

	var nonIterableRest = _nonIterableRest;

	function _slicedToArray(arr, i) {
	  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();
	}

	var slicedToArray = _slicedToArray;

	// a string of all valid unicode whitespaces
	// eslint-disable-next-line max-len
	var whitespaces = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

	var whitespace = '[' + whitespaces + ']';
	var ltrim = RegExp('^' + whitespace + whitespace + '*');
	var rtrim = RegExp(whitespace + whitespace + '*$');

	// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation
	var createMethod$3 = function (TYPE) {
	  return function ($this) {
	    var string = String(requireObjectCoercible($this));
	    if (TYPE & 1) string = string.replace(ltrim, '');
	    if (TYPE & 2) string = string.replace(rtrim, '');
	    return string;
	  };
	};

	var stringTrim = {
	  // `String.prototype.{ trimLeft, trimStart }` methods
	  // https://tc39.github.io/ecma262/#sec-string.prototype.trimstart
	  start: createMethod$3(1),
	  // `String.prototype.{ trimRight, trimEnd }` methods
	  // https://tc39.github.io/ecma262/#sec-string.prototype.trimend
	  end: createMethod$3(2),
	  // `String.prototype.trim` method
	  // https://tc39.github.io/ecma262/#sec-string.prototype.trim
	  trim: createMethod$3(3)
	};

	var trim = stringTrim.trim;


	var nativeParseFloat = global_1.parseFloat;
	var FORCED$5 = 1 / nativeParseFloat(whitespaces + '-0') !== -Infinity;

	// `parseFloat` method
	// https://tc39.github.io/ecma262/#sec-parsefloat-string
	var _parseFloat = FORCED$5 ? function parseFloat(string) {
	  var trimmedString = trim(String(string));
	  var result = nativeParseFloat(trimmedString);
	  return result === 0 && trimmedString.charAt(0) == '-' ? -0 : result;
	} : nativeParseFloat;

	// `parseFloat` method
	// https://tc39.github.io/ecma262/#sec-parsefloat-string
	_export({ global: true, forced: parseFloat != _parseFloat }, {
	  parseFloat: _parseFloat
	});

	function cubicOut(t) {
	  var f = t - 1.0;
	  return f * f * f + 1.0;
	}

	function fade(node, _ref2) {
	  var _ref2$delay = _ref2.delay,
	      delay = _ref2$delay === void 0 ? 0 : _ref2$delay,
	      _ref2$duration = _ref2.duration,
	      duration = _ref2$duration === void 0 ? 400 : _ref2$duration,
	      _ref2$easing = _ref2.easing,
	      easing = _ref2$easing === void 0 ? identity : _ref2$easing;
	  var o = +getComputedStyle(node).opacity;
	  return {
	    delay: delay,
	    duration: duration,
	    easing: easing,
	    css: function css(t) {
	      return "opacity: ".concat(t * o);
	    }
	  };
	}

	function fly(node, _ref3) {
	  var _ref3$delay = _ref3.delay,
	      delay = _ref3$delay === void 0 ? 0 : _ref3$delay,
	      _ref3$duration = _ref3.duration,
	      duration = _ref3$duration === void 0 ? 400 : _ref3$duration,
	      _ref3$easing = _ref3.easing,
	      easing = _ref3$easing === void 0 ? cubicOut : _ref3$easing,
	      _ref3$x = _ref3.x,
	      x = _ref3$x === void 0 ? 0 : _ref3$x,
	      _ref3$y = _ref3.y,
	      y = _ref3$y === void 0 ? 0 : _ref3$y,
	      _ref3$opacity = _ref3.opacity,
	      opacity = _ref3$opacity === void 0 ? 0 : _ref3$opacity;
	  var style = getComputedStyle(node);
	  var target_opacity = +style.opacity;
	  var transform = style.transform === 'none' ? '' : style.transform;
	  var od = target_opacity * (1 - opacity);
	  return {
	    delay: delay,
	    duration: duration,
	    easing: easing,
	    css: function css(t, u) {
	      return "\n\t\t\ttransform: ".concat(transform, " translate(").concat((1 - t) * x, "px, ").concat((1 - t) * y, "px);\n\t\t\topacity: ").concat(target_opacity - od * u);
	    }
	  };
	}

	var hammer = createCommonjsModule(function (module) {
	/*! Hammer.JS - v2.0.7 - 2016-04-22
	 * http://hammerjs.github.io/
	 *
	 * Copyright (c) 2016 Jorik Tangelder;
	 * Licensed under the MIT license */
	(function(window, document, exportName, undefined$1) {

	var VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];
	var TEST_ELEMENT = document.createElement('div');

	var TYPE_FUNCTION = 'function';

	var round = Math.round;
	var abs = Math.abs;
	var now = Date.now;

	/**
	 * set a timeout with a given scope
	 * @param {Function} fn
	 * @param {Number} timeout
	 * @param {Object} context
	 * @returns {number}
	 */
	function setTimeoutContext(fn, timeout, context) {
	    return setTimeout(bindFn(fn, context), timeout);
	}

	/**
	 * if the argument is an array, we want to execute the fn on each entry
	 * if it aint an array we don't want to do a thing.
	 * this is used by all the methods that accept a single and array argument.
	 * @param {*|Array} arg
	 * @param {String} fn
	 * @param {Object} [context]
	 * @returns {Boolean}
	 */
	function invokeArrayArg(arg, fn, context) {
	    if (Array.isArray(arg)) {
	        each(arg, context[fn], context);
	        return true;
	    }
	    return false;
	}

	/**
	 * walk objects and arrays
	 * @param {Object} obj
	 * @param {Function} iterator
	 * @param {Object} context
	 */
	function each(obj, iterator, context) {
	    var i;

	    if (!obj) {
	        return;
	    }

	    if (obj.forEach) {
	        obj.forEach(iterator, context);
	    } else if (obj.length !== undefined$1) {
	        i = 0;
	        while (i < obj.length) {
	            iterator.call(context, obj[i], i, obj);
	            i++;
	        }
	    } else {
	        for (i in obj) {
	            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);
	        }
	    }
	}

	/**
	 * wrap a method with a deprecation warning and stack trace
	 * @param {Function} method
	 * @param {String} name
	 * @param {String} message
	 * @returns {Function} A new function wrapping the supplied method.
	 */
	function deprecate(method, name, message) {
	    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\n' + message + ' AT \n';
	    return function() {
	        var e = new Error('get-stack-trace');
	        var stack = e && e.stack ? e.stack.replace(/^[^\(]+?[\n$]/gm, '')
	            .replace(/^\s+at\s+/gm, '')
	            .replace(/^Object.<anonymous>\s*\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';

	        var log = window.console && (window.console.warn || window.console.log);
	        if (log) {
	            log.call(window.console, deprecationMessage, stack);
	        }
	        return method.apply(this, arguments);
	    };
	}

	/**
	 * extend object.
	 * means that properties in dest will be overwritten by the ones in src.
	 * @param {Object} target
	 * @param {...Object} objects_to_assign
	 * @returns {Object} target
	 */
	var assign;
	if (typeof Object.assign !== 'function') {
	    assign = function assign(target) {
	        if (target === undefined$1 || target === null) {
	            throw new TypeError('Cannot convert undefined or null to object');
	        }

	        var output = Object(target);
	        for (var index = 1; index < arguments.length; index++) {
	            var source = arguments[index];
	            if (source !== undefined$1 && source !== null) {
	                for (var nextKey in source) {
	                    if (source.hasOwnProperty(nextKey)) {
	                        output[nextKey] = source[nextKey];
	                    }
	                }
	            }
	        }
	        return output;
	    };
	} else {
	    assign = Object.assign;
	}

	/**
	 * extend object.
	 * means that properties in dest will be overwritten by the ones in src.
	 * @param {Object} dest
	 * @param {Object} src
	 * @param {Boolean} [merge=false]
	 * @returns {Object} dest
	 */
	var extend = deprecate(function extend(dest, src, merge) {
	    var keys = Object.keys(src);
	    var i = 0;
	    while (i < keys.length) {
	        if (!merge || (merge && dest[keys[i]] === undefined$1)) {
	            dest[keys[i]] = src[keys[i]];
	        }
	        i++;
	    }
	    return dest;
	}, 'extend', 'Use `assign`.');

	/**
	 * merge the values from src in the dest.
	 * means that properties that exist in dest will not be overwritten by src
	 * @param {Object} dest
	 * @param {Object} src
	 * @returns {Object} dest
	 */
	var merge = deprecate(function merge(dest, src) {
	    return extend(dest, src, true);
	}, 'merge', 'Use `assign`.');

	/**
	 * simple class inheritance
	 * @param {Function} child
	 * @param {Function} base
	 * @param {Object} [properties]
	 */
	function inherit(child, base, properties) {
	    var baseP = base.prototype,
	        childP;

	    childP = child.prototype = Object.create(baseP);
	    childP.constructor = child;
	    childP._super = baseP;

	    if (properties) {
	        assign(childP, properties);
	    }
	}

	/**
	 * simple function bind
	 * @param {Function} fn
	 * @param {Object} context
	 * @returns {Function}
	 */
	function bindFn(fn, context) {
	    return function boundFn() {
	        return fn.apply(context, arguments);
	    };
	}

	/**
	 * let a boolean value also be a function that must return a boolean
	 * this first item in args will be used as the context
	 * @param {Boolean|Function} val
	 * @param {Array} [args]
	 * @returns {Boolean}
	 */
	function boolOrFn(val, args) {
	    if (typeof val == TYPE_FUNCTION) {
	        return val.apply(args ? args[0] || undefined$1 : undefined$1, args);
	    }
	    return val;
	}

	/**
	 * use the val2 when val1 is undefined
	 * @param {*} val1
	 * @param {*} val2
	 * @returns {*}
	 */
	function ifUndefined(val1, val2) {
	    return (val1 === undefined$1) ? val2 : val1;
	}

	/**
	 * addEventListener with multiple events at once
	 * @param {EventTarget} target
	 * @param {String} types
	 * @param {Function} handler
	 */
	function addEventListeners(target, types, handler) {
	    each(splitStr(types), function(type) {
	        target.addEventListener(type, handler, false);
	    });
	}

	/**
	 * removeEventListener with multiple events at once
	 * @param {EventTarget} target
	 * @param {String} types
	 * @param {Function} handler
	 */
	function removeEventListeners(target, types, handler) {
	    each(splitStr(types), function(type) {
	        target.removeEventListener(type, handler, false);
	    });
	}

	/**
	 * find if a node is in the given parent
	 * @method hasParent
	 * @param {HTMLElement} node
	 * @param {HTMLElement} parent
	 * @return {Boolean} found
	 */
	function hasParent(node, parent) {
	    while (node) {
	        if (node == parent) {
	            return true;
	        }
	        node = node.parentNode;
	    }
	    return false;
	}

	/**
	 * small indexOf wrapper
	 * @param {String} str
	 * @param {String} find
	 * @returns {Boolean} found
	 */
	function inStr(str, find) {
	    return str.indexOf(find) > -1;
	}

	/**
	 * split string on whitespace
	 * @param {String} str
	 * @returns {Array} words
	 */
	function splitStr(str) {
	    return str.trim().split(/\s+/g);
	}

	/**
	 * find if a array contains the object using indexOf or a simple polyFill
	 * @param {Array} src
	 * @param {String} find
	 * @param {String} [findByKey]
	 * @return {Boolean|Number} false when not found, or the index
	 */
	function inArray(src, find, findByKey) {
	    if (src.indexOf && !findByKey) {
	        return src.indexOf(find);
	    } else {
	        var i = 0;
	        while (i < src.length) {
	            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {
	                return i;
	            }
	            i++;
	        }
	        return -1;
	    }
	}

	/**
	 * convert array-like objects to real arrays
	 * @param {Object} obj
	 * @returns {Array}
	 */
	function toArray(obj) {
	    return Array.prototype.slice.call(obj, 0);
	}

	/**
	 * unique array with objects based on a key (like 'id') or just by the array's value
	 * @param {Array} src [{id:1},{id:2},{id:1}]
	 * @param {String} [key]
	 * @param {Boolean} [sort=False]
	 * @returns {Array} [{id:1},{id:2}]
	 */
	function uniqueArray(src, key, sort) {
	    var results = [];
	    var values = [];
	    var i = 0;

	    while (i < src.length) {
	        var val = key ? src[i][key] : src[i];
	        if (inArray(values, val) < 0) {
	            results.push(src[i]);
	        }
	        values[i] = val;
	        i++;
	    }

	    if (sort) {
	        if (!key) {
	            results = results.sort();
	        } else {
	            results = results.sort(function sortUniqueArray(a, b) {
	                return a[key] > b[key];
	            });
	        }
	    }

	    return results;
	}

	/**
	 * get the prefixed property
	 * @param {Object} obj
	 * @param {String} property
	 * @returns {String|Undefined} prefixed
	 */
	function prefixed(obj, property) {
	    var prefix, prop;
	    var camelProp = property[0].toUpperCase() + property.slice(1);

	    var i = 0;
	    while (i < VENDOR_PREFIXES.length) {
	        prefix = VENDOR_PREFIXES[i];
	        prop = (prefix) ? prefix + camelProp : property;

	        if (prop in obj) {
	            return prop;
	        }
	        i++;
	    }
	    return undefined$1;
	}

	/**
	 * get a unique id
	 * @returns {number} uniqueId
	 */
	var _uniqueId = 1;
	function uniqueId() {
	    return _uniqueId++;
	}

	/**
	 * get the window object of an element
	 * @param {HTMLElement} element
	 * @returns {DocumentView|Window}
	 */
	function getWindowForElement(element) {
	    var doc = element.ownerDocument || element;
	    return (doc.defaultView || doc.parentWindow || window);
	}

	var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;

	var SUPPORT_TOUCH = ('ontouchstart' in window);
	var SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined$1;
	var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);

	var INPUT_TYPE_TOUCH = 'touch';
	var INPUT_TYPE_PEN = 'pen';
	var INPUT_TYPE_MOUSE = 'mouse';
	var INPUT_TYPE_KINECT = 'kinect';

	var COMPUTE_INTERVAL = 25;

	var INPUT_START = 1;
	var INPUT_MOVE = 2;
	var INPUT_END = 4;
	var INPUT_CANCEL = 8;

	var DIRECTION_NONE = 1;
	var DIRECTION_LEFT = 2;
	var DIRECTION_RIGHT = 4;
	var DIRECTION_UP = 8;
	var DIRECTION_DOWN = 16;

	var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;
	var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
	var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;

	var PROPS_XY = ['x', 'y'];
	var PROPS_CLIENT_XY = ['clientX', 'clientY'];

	/**
	 * create new input type manager
	 * @param {Manager} manager
	 * @param {Function} callback
	 * @returns {Input}
	 * @constructor
	 */
	function Input(manager, callback) {
	    var self = this;
	    this.manager = manager;
	    this.callback = callback;
	    this.element = manager.element;
	    this.target = manager.options.inputTarget;

	    // smaller wrapper around the handler, for the scope and the enabled state of the manager,
	    // so when disabled the input events are completely bypassed.
	    this.domHandler = function(ev) {
	        if (boolOrFn(manager.options.enable, [manager])) {
	            self.handler(ev);
	        }
	    };

	    this.init();

	}

	Input.prototype = {
	    /**
	     * should handle the inputEvent data and trigger the callback
	     * @virtual
	     */
	    handler: function() { },

	    /**
	     * bind the events
	     */
	    init: function() {
	        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
	        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
	        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
	    },

	    /**
	     * unbind the events
	     */
	    destroy: function() {
	        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
	        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
	        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
	    }
	};

	/**
	 * create new input type manager
	 * called by the Manager constructor
	 * @param {Hammer} manager
	 * @returns {Input}
	 */
	function createInputInstance(manager) {
	    var Type;
	    var inputClass = manager.options.inputClass;

	    if (inputClass) {
	        Type = inputClass;
	    } else if (SUPPORT_POINTER_EVENTS) {
	        Type = PointerEventInput;
	    } else if (SUPPORT_ONLY_TOUCH) {
	        Type = TouchInput;
	    } else if (!SUPPORT_TOUCH) {
	        Type = MouseInput;
	    } else {
	        Type = TouchMouseInput;
	    }
	    return new (Type)(manager, inputHandler);
	}

	/**
	 * handle input events
	 * @param {Manager} manager
	 * @param {String} eventType
	 * @param {Object} input
	 */
	function inputHandler(manager, eventType, input) {
	    var pointersLen = input.pointers.length;
	    var changedPointersLen = input.changedPointers.length;
	    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));
	    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));

	    input.isFirst = !!isFirst;
	    input.isFinal = !!isFinal;

	    if (isFirst) {
	        manager.session = {};
	    }

	    // source event is the normalized value of the domEvents
	    // like 'touchstart, mouseup, pointerdown'
	    input.eventType = eventType;

	    // compute scale, rotation etc
	    computeInputData(manager, input);

	    // emit secret event
	    manager.emit('hammer.input', input);

	    manager.recognize(input);
	    manager.session.prevInput = input;
	}

	/**
	 * extend the data with some usable properties like scale, rotate, velocity etc
	 * @param {Object} manager
	 * @param {Object} input
	 */
	function computeInputData(manager, input) {
	    var session = manager.session;
	    var pointers = input.pointers;
	    var pointersLength = pointers.length;

	    // store the first input to calculate the distance and direction
	    if (!session.firstInput) {
	        session.firstInput = simpleCloneInputData(input);
	    }

	    // to compute scale and rotation we need to store the multiple touches
	    if (pointersLength > 1 && !session.firstMultiple) {
	        session.firstMultiple = simpleCloneInputData(input);
	    } else if (pointersLength === 1) {
	        session.firstMultiple = false;
	    }

	    var firstInput = session.firstInput;
	    var firstMultiple = session.firstMultiple;
	    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;

	    var center = input.center = getCenter(pointers);
	    input.timeStamp = now();
	    input.deltaTime = input.timeStamp - firstInput.timeStamp;

	    input.angle = getAngle(offsetCenter, center);
	    input.distance = getDistance(offsetCenter, center);

	    computeDeltaXY(session, input);
	    input.offsetDirection = getDirection(input.deltaX, input.deltaY);

	    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);
	    input.overallVelocityX = overallVelocity.x;
	    input.overallVelocityY = overallVelocity.y;
	    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;

	    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
	    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;

	    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >
	        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);

	    computeIntervalInputData(session, input);

	    // find the correct target
	    var target = manager.element;
	    if (hasParent(input.srcEvent.target, target)) {
	        target = input.srcEvent.target;
	    }
	    input.target = target;
	}

	function computeDeltaXY(session, input) {
	    var center = input.center;
	    var offset = session.offsetDelta || {};
	    var prevDelta = session.prevDelta || {};
	    var prevInput = session.prevInput || {};

	    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
	        prevDelta = session.prevDelta = {
	            x: prevInput.deltaX || 0,
	            y: prevInput.deltaY || 0
	        };

	        offset = session.offsetDelta = {
	            x: center.x,
	            y: center.y
	        };
	    }

	    input.deltaX = prevDelta.x + (center.x - offset.x);
	    input.deltaY = prevDelta.y + (center.y - offset.y);
	}

	/**
	 * velocity is calculated every x ms
	 * @param {Object} session
	 * @param {Object} input
	 */
	function computeIntervalInputData(session, input) {
	    var last = session.lastInterval || input,
	        deltaTime = input.timeStamp - last.timeStamp,
	        velocity, velocityX, velocityY, direction;

	    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined$1)) {
	        var deltaX = input.deltaX - last.deltaX;
	        var deltaY = input.deltaY - last.deltaY;

	        var v = getVelocity(deltaTime, deltaX, deltaY);
	        velocityX = v.x;
	        velocityY = v.y;
	        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;
	        direction = getDirection(deltaX, deltaY);

	        session.lastInterval = input;
	    } else {
	        // use latest velocity info if it doesn't overtake a minimum period
	        velocity = last.velocity;
	        velocityX = last.velocityX;
	        velocityY = last.velocityY;
	        direction = last.direction;
	    }

	    input.velocity = velocity;
	    input.velocityX = velocityX;
	    input.velocityY = velocityY;
	    input.direction = direction;
	}

	/**
	 * create a simple clone from the input used for storage of firstInput and firstMultiple
	 * @param {Object} input
	 * @returns {Object} clonedInputData
	 */
	function simpleCloneInputData(input) {
	    // make a simple copy of the pointers because we will get a reference if we don't
	    // we only need clientXY for the calculations
	    var pointers = [];
	    var i = 0;
	    while (i < input.pointers.length) {
	        pointers[i] = {
	            clientX: round(input.pointers[i].clientX),
	            clientY: round(input.pointers[i].clientY)
	        };
	        i++;
	    }

	    return {
	        timeStamp: now(),
	        pointers: pointers,
	        center: getCenter(pointers),
	        deltaX: input.deltaX,
	        deltaY: input.deltaY
	    };
	}

	/**
	 * get the center of all the pointers
	 * @param {Array} pointers
	 * @return {Object} center contains `x` and `y` properties
	 */
	function getCenter(pointers) {
	    var pointersLength = pointers.length;

	    // no need to loop when only one touch
	    if (pointersLength === 1) {
	        return {
	            x: round(pointers[0].clientX),
	            y: round(pointers[0].clientY)
	        };
	    }

	    var x = 0, y = 0, i = 0;
	    while (i < pointersLength) {
	        x += pointers[i].clientX;
	        y += pointers[i].clientY;
	        i++;
	    }

	    return {
	        x: round(x / pointersLength),
	        y: round(y / pointersLength)
	    };
	}

	/**
	 * calculate the velocity between two points. unit is in px per ms.
	 * @param {Number} deltaTime
	 * @param {Number} x
	 * @param {Number} y
	 * @return {Object} velocity `x` and `y`
	 */
	function getVelocity(deltaTime, x, y) {
	    return {
	        x: x / deltaTime || 0,
	        y: y / deltaTime || 0
	    };
	}

	/**
	 * get the direction between two points
	 * @param {Number} x
	 * @param {Number} y
	 * @return {Number} direction
	 */
	function getDirection(x, y) {
	    if (x === y) {
	        return DIRECTION_NONE;
	    }

	    if (abs(x) >= abs(y)) {
	        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
	    }
	    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
	}

	/**
	 * calculate the absolute distance between two points
	 * @param {Object} p1 {x, y}
	 * @param {Object} p2 {x, y}
	 * @param {Array} [props] containing x and y keys
	 * @return {Number} distance
	 */
	function getDistance(p1, p2, props) {
	    if (!props) {
	        props = PROPS_XY;
	    }
	    var x = p2[props[0]] - p1[props[0]],
	        y = p2[props[1]] - p1[props[1]];

	    return Math.sqrt((x * x) + (y * y));
	}

	/**
	 * calculate the angle between two coordinates
	 * @param {Object} p1
	 * @param {Object} p2
	 * @param {Array} [props] containing x and y keys
	 * @return {Number} angle
	 */
	function getAngle(p1, p2, props) {
	    if (!props) {
	        props = PROPS_XY;
	    }
	    var x = p2[props[0]] - p1[props[0]],
	        y = p2[props[1]] - p1[props[1]];
	    return Math.atan2(y, x) * 180 / Math.PI;
	}

	/**
	 * calculate the rotation degrees between two pointersets
	 * @param {Array} start array of pointers
	 * @param {Array} end array of pointers
	 * @return {Number} rotation
	 */
	function getRotation(start, end) {
	    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);
	}

	/**
	 * calculate the scale factor between two pointersets
	 * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
	 * @param {Array} start array of pointers
	 * @param {Array} end array of pointers
	 * @return {Number} scale
	 */
	function getScale(start, end) {
	    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
	}

	var MOUSE_INPUT_MAP = {
	    mousedown: INPUT_START,
	    mousemove: INPUT_MOVE,
	    mouseup: INPUT_END
	};

	var MOUSE_ELEMENT_EVENTS = 'mousedown';
	var MOUSE_WINDOW_EVENTS = 'mousemove mouseup';

	/**
	 * Mouse events input
	 * @constructor
	 * @extends Input
	 */
	function MouseInput() {
	    this.evEl = MOUSE_ELEMENT_EVENTS;
	    this.evWin = MOUSE_WINDOW_EVENTS;

	    this.pressed = false; // mousedown state

	    Input.apply(this, arguments);
	}

	inherit(MouseInput, Input, {
	    /**
	     * handle mouse events
	     * @param {Object} ev
	     */
	    handler: function MEhandler(ev) {
	        var eventType = MOUSE_INPUT_MAP[ev.type];

	        // on start we want to have the left mouse button down
	        if (eventType & INPUT_START && ev.button === 0) {
	            this.pressed = true;
	        }

	        if (eventType & INPUT_MOVE && ev.which !== 1) {
	            eventType = INPUT_END;
	        }

	        // mouse must be down
	        if (!this.pressed) {
	            return;
	        }

	        if (eventType & INPUT_END) {
	            this.pressed = false;
	        }

	        this.callback(this.manager, eventType, {
	            pointers: [ev],
	            changedPointers: [ev],
	            pointerType: INPUT_TYPE_MOUSE,
	            srcEvent: ev
	        });
	    }
	});

	var POINTER_INPUT_MAP = {
	    pointerdown: INPUT_START,
	    pointermove: INPUT_MOVE,
	    pointerup: INPUT_END,
	    pointercancel: INPUT_CANCEL,
	    pointerout: INPUT_CANCEL
	};

	// in IE10 the pointer types is defined as an enum
	var IE10_POINTER_TYPE_ENUM = {
	    2: INPUT_TYPE_TOUCH,
	    3: INPUT_TYPE_PEN,
	    4: INPUT_TYPE_MOUSE,
	    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816
	};

	var POINTER_ELEMENT_EVENTS = 'pointerdown';
	var POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';

	// IE10 has prefixed support, and case-sensitive
	if (window.MSPointerEvent && !window.PointerEvent) {
	    POINTER_ELEMENT_EVENTS = 'MSPointerDown';
	    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';
	}

	/**
	 * Pointer events input
	 * @constructor
	 * @extends Input
	 */
	function PointerEventInput() {
	    this.evEl = POINTER_ELEMENT_EVENTS;
	    this.evWin = POINTER_WINDOW_EVENTS;

	    Input.apply(this, arguments);

	    this.store = (this.manager.session.pointerEvents = []);
	}

	inherit(PointerEventInput, Input, {
	    /**
	     * handle mouse events
	     * @param {Object} ev
	     */
	    handler: function PEhandler(ev) {
	        var store = this.store;
	        var removePointer = false;

	        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');
	        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
	        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;

	        var isTouch = (pointerType == INPUT_TYPE_TOUCH);

	        // get index of the event in the store
	        var storeIndex = inArray(store, ev.pointerId, 'pointerId');

	        // start and mouse must be down
	        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
	            if (storeIndex < 0) {
	                store.push(ev);
	                storeIndex = store.length - 1;
	            }
	        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
	            removePointer = true;
	        }

	        // it not found, so the pointer hasn't been down (so it's probably a hover)
	        if (storeIndex < 0) {
	            return;
	        }

	        // update the event in the store
	        store[storeIndex] = ev;

	        this.callback(this.manager, eventType, {
	            pointers: store,
	            changedPointers: [ev],
	            pointerType: pointerType,
	            srcEvent: ev
	        });

	        if (removePointer) {
	            // remove from the store
	            store.splice(storeIndex, 1);
	        }
	    }
	});

	var SINGLE_TOUCH_INPUT_MAP = {
	    touchstart: INPUT_START,
	    touchmove: INPUT_MOVE,
	    touchend: INPUT_END,
	    touchcancel: INPUT_CANCEL
	};

	var SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';
	var SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';

	/**
	 * Touch events input
	 * @constructor
	 * @extends Input
	 */
	function SingleTouchInput() {
	    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
	    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
	    this.started = false;

	    Input.apply(this, arguments);
	}

	inherit(SingleTouchInput, Input, {
	    handler: function TEhandler(ev) {
	        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];

	        // should we handle the touch events?
	        if (type === INPUT_START) {
	            this.started = true;
	        }

	        if (!this.started) {
	            return;
	        }

	        var touches = normalizeSingleTouches.call(this, ev, type);

	        // when done, reset the started state
	        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {
	            this.started = false;
	        }

	        this.callback(this.manager, type, {
	            pointers: touches[0],
	            changedPointers: touches[1],
	            pointerType: INPUT_TYPE_TOUCH,
	            srcEvent: ev
	        });
	    }
	});

	/**
	 * @this {TouchInput}
	 * @param {Object} ev
	 * @param {Number} type flag
	 * @returns {undefined|Array} [all, changed]
	 */
	function normalizeSingleTouches(ev, type) {
	    var all = toArray(ev.touches);
	    var changed = toArray(ev.changedTouches);

	    if (type & (INPUT_END | INPUT_CANCEL)) {
	        all = uniqueArray(all.concat(changed), 'identifier', true);
	    }

	    return [all, changed];
	}

	var TOUCH_INPUT_MAP = {
	    touchstart: INPUT_START,
	    touchmove: INPUT_MOVE,
	    touchend: INPUT_END,
	    touchcancel: INPUT_CANCEL
	};

	var TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';

	/**
	 * Multi-user touch events input
	 * @constructor
	 * @extends Input
	 */
	function TouchInput() {
	    this.evTarget = TOUCH_TARGET_EVENTS;
	    this.targetIds = {};

	    Input.apply(this, arguments);
	}

	inherit(TouchInput, Input, {
	    handler: function MTEhandler(ev) {
	        var type = TOUCH_INPUT_MAP[ev.type];
	        var touches = getTouches.call(this, ev, type);
	        if (!touches) {
	            return;
	        }

	        this.callback(this.manager, type, {
	            pointers: touches[0],
	            changedPointers: touches[1],
	            pointerType: INPUT_TYPE_TOUCH,
	            srcEvent: ev
	        });
	    }
	});

	/**
	 * @this {TouchInput}
	 * @param {Object} ev
	 * @param {Number} type flag
	 * @returns {undefined|Array} [all, changed]
	 */
	function getTouches(ev, type) {
	    var allTouches = toArray(ev.touches);
	    var targetIds = this.targetIds;

	    // when there is only one touch, the process can be simplified
	    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
	        targetIds[allTouches[0].identifier] = true;
	        return [allTouches, allTouches];
	    }

	    var i,
	        targetTouches,
	        changedTouches = toArray(ev.changedTouches),
	        changedTargetTouches = [],
	        target = this.target;

	    // get target touches from touches
	    targetTouches = allTouches.filter(function(touch) {
	        return hasParent(touch.target, target);
	    });

	    // collect touches
	    if (type === INPUT_START) {
	        i = 0;
	        while (i < targetTouches.length) {
	            targetIds[targetTouches[i].identifier] = true;
	            i++;
	        }
	    }

	    // filter changed touches to only contain touches that exist in the collected target ids
	    i = 0;
	    while (i < changedTouches.length) {
	        if (targetIds[changedTouches[i].identifier]) {
	            changedTargetTouches.push(changedTouches[i]);
	        }

	        // cleanup removed touches
	        if (type & (INPUT_END | INPUT_CANCEL)) {
	            delete targetIds[changedTouches[i].identifier];
	        }
	        i++;
	    }

	    if (!changedTargetTouches.length) {
	        return;
	    }

	    return [
	        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'
	        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),
	        changedTargetTouches
	    ];
	}

	/**
	 * Combined touch and mouse input
	 *
	 * Touch has a higher priority then mouse, and while touching no mouse events are allowed.
	 * This because touch devices also emit mouse events while doing a touch.
	 *
	 * @constructor
	 * @extends Input
	 */

	var DEDUP_TIMEOUT = 2500;
	var DEDUP_DISTANCE = 25;

	function TouchMouseInput() {
	    Input.apply(this, arguments);

	    var handler = bindFn(this.handler, this);
	    this.touch = new TouchInput(this.manager, handler);
	    this.mouse = new MouseInput(this.manager, handler);

	    this.primaryTouch = null;
	    this.lastTouches = [];
	}

	inherit(TouchMouseInput, Input, {
	    /**
	     * handle mouse and touch events
	     * @param {Hammer} manager
	     * @param {String} inputEvent
	     * @param {Object} inputData
	     */
	    handler: function TMEhandler(manager, inputEvent, inputData) {
	        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),
	            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);

	        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {
	            return;
	        }

	        // when we're in a touch event, record touches to  de-dupe synthetic mouse event
	        if (isTouch) {
	            recordTouches.call(this, inputEvent, inputData);
	        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {
	            return;
	        }

	        this.callback(manager, inputEvent, inputData);
	    },

	    /**
	     * remove the event listeners
	     */
	    destroy: function destroy() {
	        this.touch.destroy();
	        this.mouse.destroy();
	    }
	});

	function recordTouches(eventType, eventData) {
	    if (eventType & INPUT_START) {
	        this.primaryTouch = eventData.changedPointers[0].identifier;
	        setLastTouch.call(this, eventData);
	    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
	        setLastTouch.call(this, eventData);
	    }
	}

	function setLastTouch(eventData) {
	    var touch = eventData.changedPointers[0];

	    if (touch.identifier === this.primaryTouch) {
	        var lastTouch = {x: touch.clientX, y: touch.clientY};
	        this.lastTouches.push(lastTouch);
	        var lts = this.lastTouches;
	        var removeLastTouch = function() {
	            var i = lts.indexOf(lastTouch);
	            if (i > -1) {
	                lts.splice(i, 1);
	            }
	        };
	        setTimeout(removeLastTouch, DEDUP_TIMEOUT);
	    }
	}

	function isSyntheticEvent(eventData) {
	    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;
	    for (var i = 0; i < this.lastTouches.length; i++) {
	        var t = this.lastTouches[i];
	        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);
	        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {
	            return true;
	        }
	    }
	    return false;
	}

	var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');
	var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined$1;

	// magical touchAction value
	var TOUCH_ACTION_COMPUTE = 'compute';
	var TOUCH_ACTION_AUTO = 'auto';
	var TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented
	var TOUCH_ACTION_NONE = 'none';
	var TOUCH_ACTION_PAN_X = 'pan-x';
	var TOUCH_ACTION_PAN_Y = 'pan-y';
	var TOUCH_ACTION_MAP = getTouchActionProps();

	/**
	 * Touch Action
	 * sets the touchAction property or uses the js alternative
	 * @param {Manager} manager
	 * @param {String} value
	 * @constructor
	 */
	function TouchAction(manager, value) {
	    this.manager = manager;
	    this.set(value);
	}

	TouchAction.prototype = {
	    /**
	     * set the touchAction value on the element or enable the polyfill
	     * @param {String} value
	     */
	    set: function(value) {
	        // find out the touch-action by the event handlers
	        if (value == TOUCH_ACTION_COMPUTE) {
	            value = this.compute();
	        }

	        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {
	            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
	        }
	        this.actions = value.toLowerCase().trim();
	    },

	    /**
	     * just re-set the touchAction value
	     */
	    update: function() {
	        this.set(this.manager.options.touchAction);
	    },

	    /**
	     * compute the value for the touchAction property based on the recognizer's settings
	     * @returns {String} value
	     */
	    compute: function() {
	        var actions = [];
	        each(this.manager.recognizers, function(recognizer) {
	            if (boolOrFn(recognizer.options.enable, [recognizer])) {
	                actions = actions.concat(recognizer.getTouchAction());
	            }
	        });
	        return cleanTouchActions(actions.join(' '));
	    },

	    /**
	     * this method is called on each input cycle and provides the preventing of the browser behavior
	     * @param {Object} input
	     */
	    preventDefaults: function(input) {
	        var srcEvent = input.srcEvent;
	        var direction = input.offsetDirection;

	        // if the touch action did prevented once this session
	        if (this.manager.session.prevented) {
	            srcEvent.preventDefault();
	            return;
	        }

	        var actions = this.actions;
	        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];
	        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];
	        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];

	        if (hasNone) {
	            //do not prevent defaults if this is a tap gesture

	            var isTapPointer = input.pointers.length === 1;
	            var isTapMovement = input.distance < 2;
	            var isTapTouchTime = input.deltaTime < 250;

	            if (isTapPointer && isTapMovement && isTapTouchTime) {
	                return;
	            }
	        }

	        if (hasPanX && hasPanY) {
	            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent
	            return;
	        }

	        if (hasNone ||
	            (hasPanY && direction & DIRECTION_HORIZONTAL) ||
	            (hasPanX && direction & DIRECTION_VERTICAL)) {
	            return this.preventSrc(srcEvent);
	        }
	    },

	    /**
	     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)
	     * @param {Object} srcEvent
	     */
	    preventSrc: function(srcEvent) {
	        this.manager.session.prevented = true;
	        srcEvent.preventDefault();
	    }
	};

	/**
	 * when the touchActions are collected they are not a valid value, so we need to clean things up. *
	 * @param {String} actions
	 * @returns {*}
	 */
	function cleanTouchActions(actions) {
	    // none
	    if (inStr(actions, TOUCH_ACTION_NONE)) {
	        return TOUCH_ACTION_NONE;
	    }

	    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
	    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);

	    // if both pan-x and pan-y are set (different recognizers
	    // for different directions, e.g. horizontal pan but vertical swipe?)
	    // we need none (as otherwise with pan-x pan-y combined none of these
	    // recognizers will work, since the browser would handle all panning
	    if (hasPanX && hasPanY) {
	        return TOUCH_ACTION_NONE;
	    }

	    // pan-x OR pan-y
	    if (hasPanX || hasPanY) {
	        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
	    }

	    // manipulation
	    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {
	        return TOUCH_ACTION_MANIPULATION;
	    }

	    return TOUCH_ACTION_AUTO;
	}

	function getTouchActionProps() {
	    if (!NATIVE_TOUCH_ACTION) {
	        return false;
	    }
	    var touchMap = {};
	    var cssSupports = window.CSS && window.CSS.supports;
	    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {

	        // If css.supports is not supported but there is native touch-action assume it supports
	        // all values. This is the case for IE 10 and 11.
	        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;
	    });
	    return touchMap;
	}

	/**
	 * Recognizer flow explained; *
	 * All recognizers have the initial state of POSSIBLE when a input session starts.
	 * The definition of a input session is from the first input until the last input, with all it's movement in it. *
	 * Example session for mouse-input: mousedown -> mousemove -> mouseup
	 *
	 * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed
	 * which determines with state it should be.
	 *
	 * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to
	 * POSSIBLE to give it another change on the next cycle.
	 *
	 *               Possible
	 *                  |
	 *            +-----+---------------+
	 *            |                     |
	 *      +-----+-----+               |
	 *      |           |               |
	 *   Failed      Cancelled          |
	 *                          +-------+------+
	 *                          |              |
	 *                      Recognized       Began
	 *                                         |
	 *                                      Changed
	 *                                         |
	 *                                  Ended/Recognized
	 */
	var STATE_POSSIBLE = 1;
	var STATE_BEGAN = 2;
	var STATE_CHANGED = 4;
	var STATE_ENDED = 8;
	var STATE_RECOGNIZED = STATE_ENDED;
	var STATE_CANCELLED = 16;
	var STATE_FAILED = 32;

	/**
	 * Recognizer
	 * Every recognizer needs to extend from this class.
	 * @constructor
	 * @param {Object} options
	 */
	function Recognizer(options) {
	    this.options = assign({}, this.defaults, options || {});

	    this.id = uniqueId();

	    this.manager = null;

	    // default is enable true
	    this.options.enable = ifUndefined(this.options.enable, true);

	    this.state = STATE_POSSIBLE;

	    this.simultaneous = {};
	    this.requireFail = [];
	}

	Recognizer.prototype = {
	    /**
	     * @virtual
	     * @type {Object}
	     */
	    defaults: {},

	    /**
	     * set options
	     * @param {Object} options
	     * @return {Recognizer}
	     */
	    set: function(options) {
	        assign(this.options, options);

	        // also update the touchAction, in case something changed about the directions/enabled state
	        this.manager && this.manager.touchAction.update();
	        return this;
	    },

	    /**
	     * recognize simultaneous with an other recognizer.
	     * @param {Recognizer} otherRecognizer
	     * @returns {Recognizer} this
	     */
	    recognizeWith: function(otherRecognizer) {
	        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {
	            return this;
	        }

	        var simultaneous = this.simultaneous;
	        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
	        if (!simultaneous[otherRecognizer.id]) {
	            simultaneous[otherRecognizer.id] = otherRecognizer;
	            otherRecognizer.recognizeWith(this);
	        }
	        return this;
	    },

	    /**
	     * drop the simultaneous link. it doesnt remove the link on the other recognizer.
	     * @param {Recognizer} otherRecognizer
	     * @returns {Recognizer} this
	     */
	    dropRecognizeWith: function(otherRecognizer) {
	        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {
	            return this;
	        }

	        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
	        delete this.simultaneous[otherRecognizer.id];
	        return this;
	    },

	    /**
	     * recognizer can only run when an other is failing
	     * @param {Recognizer} otherRecognizer
	     * @returns {Recognizer} this
	     */
	    requireFailure: function(otherRecognizer) {
	        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {
	            return this;
	        }

	        var requireFail = this.requireFail;
	        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
	        if (inArray(requireFail, otherRecognizer) === -1) {
	            requireFail.push(otherRecognizer);
	            otherRecognizer.requireFailure(this);
	        }
	        return this;
	    },

	    /**
	     * drop the requireFailure link. it does not remove the link on the other recognizer.
	     * @param {Recognizer} otherRecognizer
	     * @returns {Recognizer} this
	     */
	    dropRequireFailure: function(otherRecognizer) {
	        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {
	            return this;
	        }

	        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
	        var index = inArray(this.requireFail, otherRecognizer);
	        if (index > -1) {
	            this.requireFail.splice(index, 1);
	        }
	        return this;
	    },

	    /**
	     * has require failures boolean
	     * @returns {boolean}
	     */
	    hasRequireFailures: function() {
	        return this.requireFail.length > 0;
	    },

	    /**
	     * if the recognizer can recognize simultaneous with an other recognizer
	     * @param {Recognizer} otherRecognizer
	     * @returns {Boolean}
	     */
	    canRecognizeWith: function(otherRecognizer) {
	        return !!this.simultaneous[otherRecognizer.id];
	    },

	    /**
	     * You should use `tryEmit` instead of `emit` directly to check
	     * that all the needed recognizers has failed before emitting.
	     * @param {Object} input
	     */
	    emit: function(input) {
	        var self = this;
	        var state = this.state;

	        function emit(event) {
	            self.manager.emit(event, input);
	        }

	        // 'panstart' and 'panmove'
	        if (state < STATE_ENDED) {
	            emit(self.options.event + stateStr(state));
	        }

	        emit(self.options.event); // simple 'eventName' events

	        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)
	            emit(input.additionalEvent);
	        }

	        // panend and pancancel
	        if (state >= STATE_ENDED) {
	            emit(self.options.event + stateStr(state));
	        }
	    },

	    /**
	     * Check that all the require failure recognizers has failed,
	     * if true, it emits a gesture event,
	     * otherwise, setup the state to FAILED.
	     * @param {Object} input
	     */
	    tryEmit: function(input) {
	        if (this.canEmit()) {
	            return this.emit(input);
	        }
	        // it's failing anyway
	        this.state = STATE_FAILED;
	    },

	    /**
	     * can we emit?
	     * @returns {boolean}
	     */
	    canEmit: function() {
	        var i = 0;
	        while (i < this.requireFail.length) {
	            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {
	                return false;
	            }
	            i++;
	        }
	        return true;
	    },

	    /**
	     * update the recognizer
	     * @param {Object} inputData
	     */
	    recognize: function(inputData) {
	        // make a new copy of the inputData
	        // so we can change the inputData without messing up the other recognizers
	        var inputDataClone = assign({}, inputData);

	        // is is enabled and allow recognizing?
	        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {
	            this.reset();
	            this.state = STATE_FAILED;
	            return;
	        }

	        // reset when we've reached the end
	        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {
	            this.state = STATE_POSSIBLE;
	        }

	        this.state = this.process(inputDataClone);

	        // the recognizer has recognized a gesture
	        // so trigger an event
	        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {
	            this.tryEmit(inputDataClone);
	        }
	    },

	    /**
	     * return the state of the recognizer
	     * the actual recognizing happens in this method
	     * @virtual
	     * @param {Object} inputData
	     * @returns {Const} STATE
	     */
	    process: function(inputData) { }, // jshint ignore:line

	    /**
	     * return the preferred touch-action
	     * @virtual
	     * @returns {Array}
	     */
	    getTouchAction: function() { },

	    /**
	     * called when the gesture isn't allowed to recognize
	     * like when another is being recognized or it is disabled
	     * @virtual
	     */
	    reset: function() { }
	};

	/**
	 * get a usable string, used as event postfix
	 * @param {Const} state
	 * @returns {String} state
	 */
	function stateStr(state) {
	    if (state & STATE_CANCELLED) {
	        return 'cancel';
	    } else if (state & STATE_ENDED) {
	        return 'end';
	    } else if (state & STATE_CHANGED) {
	        return 'move';
	    } else if (state & STATE_BEGAN) {
	        return 'start';
	    }
	    return '';
	}

	/**
	 * direction cons to string
	 * @param {Const} direction
	 * @returns {String}
	 */
	function directionStr(direction) {
	    if (direction == DIRECTION_DOWN) {
	        return 'down';
	    } else if (direction == DIRECTION_UP) {
	        return 'up';
	    } else if (direction == DIRECTION_LEFT) {
	        return 'left';
	    } else if (direction == DIRECTION_RIGHT) {
	        return 'right';
	    }
	    return '';
	}

	/**
	 * get a recognizer by name if it is bound to a manager
	 * @param {Recognizer|String} otherRecognizer
	 * @param {Recognizer} recognizer
	 * @returns {Recognizer}
	 */
	function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
	    var manager = recognizer.manager;
	    if (manager) {
	        return manager.get(otherRecognizer);
	    }
	    return otherRecognizer;
	}

	/**
	 * This recognizer is just used as a base for the simple attribute recognizers.
	 * @constructor
	 * @extends Recognizer
	 */
	function AttrRecognizer() {
	    Recognizer.apply(this, arguments);
	}

	inherit(AttrRecognizer, Recognizer, {
	    /**
	     * @namespace
	     * @memberof AttrRecognizer
	     */
	    defaults: {
	        /**
	         * @type {Number}
	         * @default 1
	         */
	        pointers: 1
	    },

	    /**
	     * Used to check if it the recognizer receives valid input, like input.distance > 10.
	     * @memberof AttrRecognizer
	     * @param {Object} input
	     * @returns {Boolean} recognized
	     */
	    attrTest: function(input) {
	        var optionPointers = this.options.pointers;
	        return optionPointers === 0 || input.pointers.length === optionPointers;
	    },

	    /**
	     * Process the input and return the state for the recognizer
	     * @memberof AttrRecognizer
	     * @param {Object} input
	     * @returns {*} State
	     */
	    process: function(input) {
	        var state = this.state;
	        var eventType = input.eventType;

	        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
	        var isValid = this.attrTest(input);

	        // on cancel input and we've recognized before, return STATE_CANCELLED
	        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {
	            return state | STATE_CANCELLED;
	        } else if (isRecognized || isValid) {
	            if (eventType & INPUT_END) {
	                return state | STATE_ENDED;
	            } else if (!(state & STATE_BEGAN)) {
	                return STATE_BEGAN;
	            }
	            return state | STATE_CHANGED;
	        }
	        return STATE_FAILED;
	    }
	});

	/**
	 * Pan
	 * Recognized when the pointer is down and moved in the allowed direction.
	 * @constructor
	 * @extends AttrRecognizer
	 */
	function PanRecognizer() {
	    AttrRecognizer.apply(this, arguments);

	    this.pX = null;
	    this.pY = null;
	}

	inherit(PanRecognizer, AttrRecognizer, {
	    /**
	     * @namespace
	     * @memberof PanRecognizer
	     */
	    defaults: {
	        event: 'pan',
	        threshold: 10,
	        pointers: 1,
	        direction: DIRECTION_ALL
	    },

	    getTouchAction: function() {
	        var direction = this.options.direction;
	        var actions = [];
	        if (direction & DIRECTION_HORIZONTAL) {
	            actions.push(TOUCH_ACTION_PAN_Y);
	        }
	        if (direction & DIRECTION_VERTICAL) {
	            actions.push(TOUCH_ACTION_PAN_X);
	        }
	        return actions;
	    },

	    directionTest: function(input) {
	        var options = this.options;
	        var hasMoved = true;
	        var distance = input.distance;
	        var direction = input.direction;
	        var x = input.deltaX;
	        var y = input.deltaY;

	        // lock to axis?
	        if (!(direction & options.direction)) {
	            if (options.direction & DIRECTION_HORIZONTAL) {
	                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;
	                hasMoved = x != this.pX;
	                distance = Math.abs(input.deltaX);
	            } else {
	                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;
	                hasMoved = y != this.pY;
	                distance = Math.abs(input.deltaY);
	            }
	        }
	        input.direction = direction;
	        return hasMoved && distance > options.threshold && direction & options.direction;
	    },

	    attrTest: function(input) {
	        return AttrRecognizer.prototype.attrTest.call(this, input) &&
	            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));
	    },

	    emit: function(input) {

	        this.pX = input.deltaX;
	        this.pY = input.deltaY;

	        var direction = directionStr(input.direction);

	        if (direction) {
	            input.additionalEvent = this.options.event + direction;
	        }
	        this._super.emit.call(this, input);
	    }
	});

	/**
	 * Pinch
	 * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).
	 * @constructor
	 * @extends AttrRecognizer
	 */
	function PinchRecognizer() {
	    AttrRecognizer.apply(this, arguments);
	}

	inherit(PinchRecognizer, AttrRecognizer, {
	    /**
	     * @namespace
	     * @memberof PinchRecognizer
	     */
	    defaults: {
	        event: 'pinch',
	        threshold: 0,
	        pointers: 2
	    },

	    getTouchAction: function() {
	        return [TOUCH_ACTION_NONE];
	    },

	    attrTest: function(input) {
	        return this._super.attrTest.call(this, input) &&
	            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
	    },

	    emit: function(input) {
	        if (input.scale !== 1) {
	            var inOut = input.scale < 1 ? 'in' : 'out';
	            input.additionalEvent = this.options.event + inOut;
	        }
	        this._super.emit.call(this, input);
	    }
	});

	/**
	 * Press
	 * Recognized when the pointer is down for x ms without any movement.
	 * @constructor
	 * @extends Recognizer
	 */
	function PressRecognizer() {
	    Recognizer.apply(this, arguments);

	    this._timer = null;
	    this._input = null;
	}

	inherit(PressRecognizer, Recognizer, {
	    /**
	     * @namespace
	     * @memberof PressRecognizer
	     */
	    defaults: {
	        event: 'press',
	        pointers: 1,
	        time: 251, // minimal time of the pointer to be pressed
	        threshold: 9 // a minimal movement is ok, but keep it low
	    },

	    getTouchAction: function() {
	        return [TOUCH_ACTION_AUTO];
	    },

	    process: function(input) {
	        var options = this.options;
	        var validPointers = input.pointers.length === options.pointers;
	        var validMovement = input.distance < options.threshold;
	        var validTime = input.deltaTime > options.time;

	        this._input = input;

	        // we only allow little movement
	        // and we've reached an end event, so a tap is possible
	        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {
	            this.reset();
	        } else if (input.eventType & INPUT_START) {
	            this.reset();
	            this._timer = setTimeoutContext(function() {
	                this.state = STATE_RECOGNIZED;
	                this.tryEmit();
	            }, options.time, this);
	        } else if (input.eventType & INPUT_END) {
	            return STATE_RECOGNIZED;
	        }
	        return STATE_FAILED;
	    },

	    reset: function() {
	        clearTimeout(this._timer);
	    },

	    emit: function(input) {
	        if (this.state !== STATE_RECOGNIZED) {
	            return;
	        }

	        if (input && (input.eventType & INPUT_END)) {
	            this.manager.emit(this.options.event + 'up', input);
	        } else {
	            this._input.timeStamp = now();
	            this.manager.emit(this.options.event, this._input);
	        }
	    }
	});

	/**
	 * Rotate
	 * Recognized when two or more pointer are moving in a circular motion.
	 * @constructor
	 * @extends AttrRecognizer
	 */
	function RotateRecognizer() {
	    AttrRecognizer.apply(this, arguments);
	}

	inherit(RotateRecognizer, AttrRecognizer, {
	    /**
	     * @namespace
	     * @memberof RotateRecognizer
	     */
	    defaults: {
	        event: 'rotate',
	        threshold: 0,
	        pointers: 2
	    },

	    getTouchAction: function() {
	        return [TOUCH_ACTION_NONE];
	    },

	    attrTest: function(input) {
	        return this._super.attrTest.call(this, input) &&
	            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
	    }
	});

	/**
	 * Swipe
	 * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.
	 * @constructor
	 * @extends AttrRecognizer
	 */
	function SwipeRecognizer() {
	    AttrRecognizer.apply(this, arguments);
	}

	inherit(SwipeRecognizer, AttrRecognizer, {
	    /**
	     * @namespace
	     * @memberof SwipeRecognizer
	     */
	    defaults: {
	        event: 'swipe',
	        threshold: 10,
	        velocity: 0.3,
	        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,
	        pointers: 1
	    },

	    getTouchAction: function() {
	        return PanRecognizer.prototype.getTouchAction.call(this);
	    },

	    attrTest: function(input) {
	        var direction = this.options.direction;
	        var velocity;

	        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {
	            velocity = input.overallVelocity;
	        } else if (direction & DIRECTION_HORIZONTAL) {
	            velocity = input.overallVelocityX;
	        } else if (direction & DIRECTION_VERTICAL) {
	            velocity = input.overallVelocityY;
	        }

	        return this._super.attrTest.call(this, input) &&
	            direction & input.offsetDirection &&
	            input.distance > this.options.threshold &&
	            input.maxPointers == this.options.pointers &&
	            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
	    },

	    emit: function(input) {
	        var direction = directionStr(input.offsetDirection);
	        if (direction) {
	            this.manager.emit(this.options.event + direction, input);
	        }

	        this.manager.emit(this.options.event, input);
	    }
	});

	/**
	 * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur
	 * between the given interval and position. The delay option can be used to recognize multi-taps without firing
	 * a single tap.
	 *
	 * The eventData from the emitted event contains the property `tapCount`, which contains the amount of
	 * multi-taps being recognized.
	 * @constructor
	 * @extends Recognizer
	 */
	function TapRecognizer() {
	    Recognizer.apply(this, arguments);

	    // previous time and center,
	    // used for tap counting
	    this.pTime = false;
	    this.pCenter = false;

	    this._timer = null;
	    this._input = null;
	    this.count = 0;
	}

	inherit(TapRecognizer, Recognizer, {
	    /**
	     * @namespace
	     * @memberof PinchRecognizer
	     */
	    defaults: {
	        event: 'tap',
	        pointers: 1,
	        taps: 1,
	        interval: 300, // max time between the multi-tap taps
	        time: 250, // max time of the pointer to be down (like finger on the screen)
	        threshold: 9, // a minimal movement is ok, but keep it low
	        posThreshold: 10 // a multi-tap can be a bit off the initial position
	    },

	    getTouchAction: function() {
	        return [TOUCH_ACTION_MANIPULATION];
	    },

	    process: function(input) {
	        var options = this.options;

	        var validPointers = input.pointers.length === options.pointers;
	        var validMovement = input.distance < options.threshold;
	        var validTouchTime = input.deltaTime < options.time;

	        this.reset();

	        if ((input.eventType & INPUT_START) && (this.count === 0)) {
	            return this.failTimeout();
	        }

	        // we only allow little movement
	        // and we've reached an end event, so a tap is possible
	        if (validMovement && validTouchTime && validPointers) {
	            if (input.eventType != INPUT_END) {
	                return this.failTimeout();
	            }

	            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;
	            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;

	            this.pTime = input.timeStamp;
	            this.pCenter = input.center;

	            if (!validMultiTap || !validInterval) {
	                this.count = 1;
	            } else {
	                this.count += 1;
	            }

	            this._input = input;

	            // if tap count matches we have recognized it,
	            // else it has began recognizing...
	            var tapCount = this.count % options.taps;
	            if (tapCount === 0) {
	                // no failing requirements, immediately trigger the tap event
	                // or wait as long as the multitap interval to trigger
	                if (!this.hasRequireFailures()) {
	                    return STATE_RECOGNIZED;
	                } else {
	                    this._timer = setTimeoutContext(function() {
	                        this.state = STATE_RECOGNIZED;
	                        this.tryEmit();
	                    }, options.interval, this);
	                    return STATE_BEGAN;
	                }
	            }
	        }
	        return STATE_FAILED;
	    },

	    failTimeout: function() {
	        this._timer = setTimeoutContext(function() {
	            this.state = STATE_FAILED;
	        }, this.options.interval, this);
	        return STATE_FAILED;
	    },

	    reset: function() {
	        clearTimeout(this._timer);
	    },

	    emit: function() {
	        if (this.state == STATE_RECOGNIZED) {
	            this._input.tapCount = this.count;
	            this.manager.emit(this.options.event, this._input);
	        }
	    }
	});

	/**
	 * Simple way to create a manager with a default set of recognizers.
	 * @param {HTMLElement} element
	 * @param {Object} [options]
	 * @constructor
	 */
	function Hammer(element, options) {
	    options = options || {};
	    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);
	    return new Manager(element, options);
	}

	/**
	 * @const {string}
	 */
	Hammer.VERSION = '2.0.7';

	/**
	 * default settings
	 * @namespace
	 */
	Hammer.defaults = {
	    /**
	     * set if DOM events are being triggered.
	     * But this is slower and unused by simple implementations, so disabled by default.
	     * @type {Boolean}
	     * @default false
	     */
	    domEvents: false,

	    /**
	     * The value for the touchAction property/fallback.
	     * When set to `compute` it will magically set the correct value based on the added recognizers.
	     * @type {String}
	     * @default compute
	     */
	    touchAction: TOUCH_ACTION_COMPUTE,

	    /**
	     * @type {Boolean}
	     * @default true
	     */
	    enable: true,

	    /**
	     * EXPERIMENTAL FEATURE -- can be removed/changed
	     * Change the parent input target element.
	     * If Null, then it is being set the to main element.
	     * @type {Null|EventTarget}
	     * @default null
	     */
	    inputTarget: null,

	    /**
	     * force an input class
	     * @type {Null|Function}
	     * @default null
	     */
	    inputClass: null,

	    /**
	     * Default recognizer setup when calling `Hammer()`
	     * When creating a new Manager these will be skipped.
	     * @type {Array}
	     */
	    preset: [
	        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]
	        [RotateRecognizer, {enable: false}],
	        [PinchRecognizer, {enable: false}, ['rotate']],
	        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],
	        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],
	        [TapRecognizer],
	        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],
	        [PressRecognizer]
	    ],

	    /**
	     * Some CSS properties can be used to improve the working of Hammer.
	     * Add them to this method and they will be set when creating a new Manager.
	     * @namespace
	     */
	    cssProps: {
	        /**
	         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
	         * @type {String}
	         * @default 'none'
	         */
	        userSelect: 'none',

	        /**
	         * Disable the Windows Phone grippers when pressing an element.
	         * @type {String}
	         * @default 'none'
	         */
	        touchSelect: 'none',

	        /**
	         * Disables the default callout shown when you touch and hold a touch target.
	         * On iOS, when you touch and hold a touch target such as a link, Safari displays
	         * a callout containing information about the link. This property allows you to disable that callout.
	         * @type {String}
	         * @default 'none'
	         */
	        touchCallout: 'none',

	        /**
	         * Specifies whether zooming is enabled. Used by IE10>
	         * @type {String}
	         * @default 'none'
	         */
	        contentZooming: 'none',

	        /**
	         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.
	         * @type {String}
	         * @default 'none'
	         */
	        userDrag: 'none',

	        /**
	         * Overrides the highlight color shown when the user taps a link or a JavaScript
	         * clickable element in iOS. This property obeys the alpha value, if specified.
	         * @type {String}
	         * @default 'rgba(0,0,0,0)'
	         */
	        tapHighlightColor: 'rgba(0,0,0,0)'
	    }
	};

	var STOP = 1;
	var FORCED_STOP = 2;

	/**
	 * Manager
	 * @param {HTMLElement} element
	 * @param {Object} [options]
	 * @constructor
	 */
	function Manager(element, options) {
	    this.options = assign({}, Hammer.defaults, options || {});

	    this.options.inputTarget = this.options.inputTarget || element;

	    this.handlers = {};
	    this.session = {};
	    this.recognizers = [];
	    this.oldCssProps = {};

	    this.element = element;
	    this.input = createInputInstance(this);
	    this.touchAction = new TouchAction(this, this.options.touchAction);

	    toggleCssProps(this, true);

	    each(this.options.recognizers, function(item) {
	        var recognizer = this.add(new (item[0])(item[1]));
	        item[2] && recognizer.recognizeWith(item[2]);
	        item[3] && recognizer.requireFailure(item[3]);
	    }, this);
	}

	Manager.prototype = {
	    /**
	     * set options
	     * @param {Object} options
	     * @returns {Manager}
	     */
	    set: function(options) {
	        assign(this.options, options);

	        // Options that need a little more setup
	        if (options.touchAction) {
	            this.touchAction.update();
	        }
	        if (options.inputTarget) {
	            // Clean up existing event listeners and reinitialize
	            this.input.destroy();
	            this.input.target = options.inputTarget;
	            this.input.init();
	        }
	        return this;
	    },

	    /**
	     * stop recognizing for this session.
	     * This session will be discarded, when a new [input]start event is fired.
	     * When forced, the recognizer cycle is stopped immediately.
	     * @param {Boolean} [force]
	     */
	    stop: function(force) {
	        this.session.stopped = force ? FORCED_STOP : STOP;
	    },

	    /**
	     * run the recognizers!
	     * called by the inputHandler function on every movement of the pointers (touches)
	     * it walks through all the recognizers and tries to detect the gesture that is being made
	     * @param {Object} inputData
	     */
	    recognize: function(inputData) {
	        var session = this.session;
	        if (session.stopped) {
	            return;
	        }

	        // run the touch-action polyfill
	        this.touchAction.preventDefaults(inputData);

	        var recognizer;
	        var recognizers = this.recognizers;

	        // this holds the recognizer that is being recognized.
	        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED
	        // if no recognizer is detecting a thing, it is set to `null`
	        var curRecognizer = session.curRecognizer;

	        // reset when the last recognizer is recognized
	        // or when we're in a new session
	        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {
	            curRecognizer = session.curRecognizer = null;
	        }

	        var i = 0;
	        while (i < recognizers.length) {
	            recognizer = recognizers[i];

	            // find out if we are allowed try to recognize the input for this one.
	            // 1.   allow if the session is NOT forced stopped (see the .stop() method)
	            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one
	            //      that is being recognized.
	            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.
	            //      this can be setup with the `recognizeWith()` method on the recognizer.
	            if (session.stopped !== FORCED_STOP && ( // 1
	                    !curRecognizer || recognizer == curRecognizer || // 2
	                    recognizer.canRecognizeWith(curRecognizer))) { // 3
	                recognizer.recognize(inputData);
	            } else {
	                recognizer.reset();
	            }

	            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the
	            // current active recognizer. but only if we don't already have an active recognizer
	            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
	                curRecognizer = session.curRecognizer = recognizer;
	            }
	            i++;
	        }
	    },

	    /**
	     * get a recognizer by its event name.
	     * @param {Recognizer|String} recognizer
	     * @returns {Recognizer|Null}
	     */
	    get: function(recognizer) {
	        if (recognizer instanceof Recognizer) {
	            return recognizer;
	        }

	        var recognizers = this.recognizers;
	        for (var i = 0; i < recognizers.length; i++) {
	            if (recognizers[i].options.event == recognizer) {
	                return recognizers[i];
	            }
	        }
	        return null;
	    },

	    /**
	     * add a recognizer to the manager
	     * existing recognizers with the same event name will be removed
	     * @param {Recognizer} recognizer
	     * @returns {Recognizer|Manager}
	     */
	    add: function(recognizer) {
	        if (invokeArrayArg(recognizer, 'add', this)) {
	            return this;
	        }

	        // remove existing
	        var existing = this.get(recognizer.options.event);
	        if (existing) {
	            this.remove(existing);
	        }

	        this.recognizers.push(recognizer);
	        recognizer.manager = this;

	        this.touchAction.update();
	        return recognizer;
	    },

	    /**
	     * remove a recognizer by name or instance
	     * @param {Recognizer|String} recognizer
	     * @returns {Manager}
	     */
	    remove: function(recognizer) {
	        if (invokeArrayArg(recognizer, 'remove', this)) {
	            return this;
	        }

	        recognizer = this.get(recognizer);

	        // let's make sure this recognizer exists
	        if (recognizer) {
	            var recognizers = this.recognizers;
	            var index = inArray(recognizers, recognizer);

	            if (index !== -1) {
	                recognizers.splice(index, 1);
	                this.touchAction.update();
	            }
	        }

	        return this;
	    },

	    /**
	     * bind event
	     * @param {String} events
	     * @param {Function} handler
	     * @returns {EventEmitter} this
	     */
	    on: function(events, handler) {
	        if (events === undefined$1) {
	            return;
	        }
	        if (handler === undefined$1) {
	            return;
	        }

	        var handlers = this.handlers;
	        each(splitStr(events), function(event) {
	            handlers[event] = handlers[event] || [];
	            handlers[event].push(handler);
	        });
	        return this;
	    },

	    /**
	     * unbind event, leave emit blank to remove all handlers
	     * @param {String} events
	     * @param {Function} [handler]
	     * @returns {EventEmitter} this
	     */
	    off: function(events, handler) {
	        if (events === undefined$1) {
	            return;
	        }

	        var handlers = this.handlers;
	        each(splitStr(events), function(event) {
	            if (!handler) {
	                delete handlers[event];
	            } else {
	                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);
	            }
	        });
	        return this;
	    },

	    /**
	     * emit event to the listeners
	     * @param {String} event
	     * @param {Object} data
	     */
	    emit: function(event, data) {
	        // we also want to trigger dom events
	        if (this.options.domEvents) {
	            triggerDomEvent(event, data);
	        }

	        // no handlers, so skip it all
	        var handlers = this.handlers[event] && this.handlers[event].slice();
	        if (!handlers || !handlers.length) {
	            return;
	        }

	        data.type = event;
	        data.preventDefault = function() {
	            data.srcEvent.preventDefault();
	        };

	        var i = 0;
	        while (i < handlers.length) {
	            handlers[i](data);
	            i++;
	        }
	    },

	    /**
	     * destroy the manager and unbinds all events
	     * it doesn't unbind dom events, that is the user own responsibility
	     */
	    destroy: function() {
	        this.element && toggleCssProps(this, false);

	        this.handlers = {};
	        this.session = {};
	        this.input.destroy();
	        this.element = null;
	    }
	};

	/**
	 * add/remove the css properties as defined in manager.options.cssProps
	 * @param {Manager} manager
	 * @param {Boolean} add
	 */
	function toggleCssProps(manager, add) {
	    var element = manager.element;
	    if (!element.style) {
	        return;
	    }
	    var prop;
	    each(manager.options.cssProps, function(value, name) {
	        prop = prefixed(element.style, name);
	        if (add) {
	            manager.oldCssProps[prop] = element.style[prop];
	            element.style[prop] = value;
	        } else {
	            element.style[prop] = manager.oldCssProps[prop] || '';
	        }
	    });
	    if (!add) {
	        manager.oldCssProps = {};
	    }
	}

	/**
	 * trigger dom event
	 * @param {String} event
	 * @param {Object} data
	 */
	function triggerDomEvent(event, data) {
	    var gestureEvent = document.createEvent('Event');
	    gestureEvent.initEvent(event, true, true);
	    gestureEvent.gesture = data;
	    data.target.dispatchEvent(gestureEvent);
	}

	assign(Hammer, {
	    INPUT_START: INPUT_START,
	    INPUT_MOVE: INPUT_MOVE,
	    INPUT_END: INPUT_END,
	    INPUT_CANCEL: INPUT_CANCEL,

	    STATE_POSSIBLE: STATE_POSSIBLE,
	    STATE_BEGAN: STATE_BEGAN,
	    STATE_CHANGED: STATE_CHANGED,
	    STATE_ENDED: STATE_ENDED,
	    STATE_RECOGNIZED: STATE_RECOGNIZED,
	    STATE_CANCELLED: STATE_CANCELLED,
	    STATE_FAILED: STATE_FAILED,

	    DIRECTION_NONE: DIRECTION_NONE,
	    DIRECTION_LEFT: DIRECTION_LEFT,
	    DIRECTION_RIGHT: DIRECTION_RIGHT,
	    DIRECTION_UP: DIRECTION_UP,
	    DIRECTION_DOWN: DIRECTION_DOWN,
	    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,
	    DIRECTION_VERTICAL: DIRECTION_VERTICAL,
	    DIRECTION_ALL: DIRECTION_ALL,

	    Manager: Manager,
	    Input: Input,
	    TouchAction: TouchAction,

	    TouchInput: TouchInput,
	    MouseInput: MouseInput,
	    PointerEventInput: PointerEventInput,
	    TouchMouseInput: TouchMouseInput,
	    SingleTouchInput: SingleTouchInput,

	    Recognizer: Recognizer,
	    AttrRecognizer: AttrRecognizer,
	    Tap: TapRecognizer,
	    Pan: PanRecognizer,
	    Swipe: SwipeRecognizer,
	    Pinch: PinchRecognizer,
	    Rotate: RotateRecognizer,
	    Press: PressRecognizer,

	    on: addEventListeners,
	    off: removeEventListeners,
	    each: each,
	    merge: merge,
	    extend: extend,
	    assign: assign,
	    inherit: inherit,
	    bindFn: bindFn,
	    prefixed: prefixed
	});

	// this prevents errors when Hammer is loaded in the presence of an AMD
	//  style loader but by script tag, not by the loader.
	var freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line
	freeGlobal.Hammer = Hammer;

	if (typeof undefined$1 === 'function' && undefined$1.amd) {
	    undefined$1(function() {
	        return Hammer;
	    });
	} else if ( module.exports) {
	    module.exports = Hammer;
	} else {
	    window[exportName] = Hammer;
	}

	})(window, document, 'Hammer');
	});

	var defineProperty$7 = objectDefineProperty.f;


	var NativeSymbol = global_1.Symbol;

	if (descriptors && typeof NativeSymbol == 'function' && (!('description' in NativeSymbol.prototype) ||
	  // Safari 12 bug
	  NativeSymbol().description !== undefined
	)) {
	  var EmptyStringDescriptionStore = {};
	  // wrap Symbol constructor for correct work with undefined description
	  var SymbolWrapper = function Symbol() {
	    var description = arguments.length < 1 || arguments[0] === undefined ? undefined : String(arguments[0]);
	    var result = this instanceof SymbolWrapper
	      ? new NativeSymbol(description)
	      // in Edge 13, String(Symbol(undefined)) === 'Symbol(undefined)'
	      : description === undefined ? NativeSymbol() : NativeSymbol(description);
	    if (description === '') EmptyStringDescriptionStore[result] = true;
	    return result;
	  };
	  copyConstructorProperties(SymbolWrapper, NativeSymbol);
	  var symbolPrototype = SymbolWrapper.prototype = NativeSymbol.prototype;
	  symbolPrototype.constructor = SymbolWrapper;

	  var symbolToString = symbolPrototype.toString;
	  var native = String(NativeSymbol('test')) == 'Symbol(test)';
	  var regexp = /^Symbol\((.*)\)[^)]+$/;
	  defineProperty$7(symbolPrototype, 'description', {
	    configurable: true,
	    get: function description() {
	      var symbol = isObject(this) ? this.valueOf() : this;
	      var string = symbolToString.call(symbol);
	      if (has(EmptyStringDescriptionStore, symbol)) return '';
	      var desc = native ? string.slice(7, -1) : string.replace(regexp, '$1');
	      return desc === '' ? undefined : desc;
	    }
	  });

	  _export({ global: true, forced: true }, {
	    Symbol: SymbolWrapper
	  });
	}

	// `Symbol.iterator` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.iterator
	defineWellKnownSymbol('iterator');

	var file = "src/map/ContextMenu.svelte"; // (148:0) {#if open}

	function create_if_block(ctx) {
	  var ul;
	  var li0;
	  var a0;
	  var t1;
	  var li1;
	  var a1;
	  var t3;
	  var li2;
	  var a2;
	  var t5;
	  var li3;
	  var a3;
	  var t7;
	  var li4;
	  var a4;
	  var t9;
	  var li5;
	  var a5;
	  var t10;
	  var dispose;
	  var block = {
	    c: function create() {
	      ul = element("ul");
	      li0 = element("li");
	      a0 = element("a");
	      a0.textContent = "What's here?";
	      t1 = space();
	      li1 = element("li");
	      a1 = element("a");
	      a1.textContent = "Get directions from";
	      t3 = space();
	      li2 = element("li");
	      a2 = element("a");
	      a2.textContent = "Get directions to";
	      t5 = space();
	      li3 = element("li");
	      a3 = element("a");
	      a3.textContent = "Center map here";
	      t7 = space();
	      li4 = element("li");
	      a4 = element("a");
	      a4.textContent = "Zoom in here";
	      t9 = space();
	      li5 = element("li");
	      a5 = element("a");
	      t10 = text("View on OpenStreetMap");
	      attr_dev(a0, "href", "#what-is-here");
	      attr_dev(a0, "class", "svelte-w3bp97");
	      add_location(a0, file, 154, 12, 3556);
	      attr_dev(li0, "class", "svelte-w3bp97");
	      add_location(li0, file, 153, 8, 3539);
	      attr_dev(a1, "href", "#get-directions-from");
	      attr_dev(a1, "class", "svelte-w3bp97");
	      add_location(a1, file, 159, 12, 3694);
	      attr_dev(li1, "class", "svelte-w3bp97");
	      add_location(li1, file, 158, 8, 3677);
	      attr_dev(a2, "href", "#get-directions-to");
	      attr_dev(a2, "class", "svelte-w3bp97");
	      add_location(a2, file, 164, 12, 3853);
	      attr_dev(li2, "class", "svelte-w3bp97");
	      add_location(li2, file, 163, 8, 3836);
	      attr_dev(a3, "href", "#center-map-here");
	      attr_dev(a3, "class", "svelte-w3bp97");
	      add_location(a3, file, 169, 12, 4006);
	      attr_dev(li3, "class", "svelte-w3bp97");
	      add_location(li3, file, 168, 8, 3989);
	      attr_dev(a4, "href", "#zoom-in-here");
	      attr_dev(a4, "class", "svelte-w3bp97");
	      add_location(a4, file, 174, 12, 4152);
	      attr_dev(li4, "class", "svelte-w3bp97");
	      add_location(li4, file, 173, 8, 4135);
	      attr_dev(a5, "href",
	      /*osmUrl*/
	      ctx[2]);
	      attr_dev(a5, "class", "svelte-w3bp97");
	      add_location(a5, file, 179, 12, 4290);
	      attr_dev(li5, "class", "svelte-w3bp97");
	      add_location(li5, file, 178, 8, 4273);
	      attr_dev(ul, "style",
	      /*style*/
	      ctx[3]);
	      attr_dev(ul, "class", "svelte-w3bp97");
	      add_location(ul, file, 148, 4, 3409);
	      dispose = [listen_dev(a0, "click",
	      /*handleWhatIsHere*/
	      ctx[5], false, false, false), listen_dev(a1, "click",
	      /*handleGetDirectionsFrom*/
	      ctx[6], false, false, false), listen_dev(a2, "click",
	      /*handleGetDirectionsTo*/
	      ctx[7], false, false, false), listen_dev(a3, "click",
	      /*handleCenterMapHere*/
	      ctx[8], false, false, false), listen_dev(a4, "click",
	      /*handleZoomInHere*/
	      ctx[9], false, false, false), listen_dev(ul, "click",
	      /*handleClick*/
	      ctx[4], false, false, false), listen_dev(ul, "contextmenu", stop_propagation(
	      /*contextmenu_handler*/
	      ctx[14]), false, false, true)];
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, ul, anchor);
	      append_dev(ul, li0);
	      append_dev(li0, a0);
	      append_dev(ul, t1);
	      append_dev(ul, li1);
	      append_dev(li1, a1);
	      append_dev(ul, t3);
	      append_dev(ul, li2);
	      append_dev(li2, a2);
	      append_dev(ul, t5);
	      append_dev(ul, li3);
	      append_dev(li3, a3);
	      append_dev(ul, t7);
	      append_dev(ul, li4);
	      append_dev(li4, a4);
	      append_dev(ul, t9);
	      append_dev(ul, li5);
	      append_dev(li5, a5);
	      append_dev(a5, t10);
	      /*ul_binding*/

	      ctx[15](ul);
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*osmUrl*/
	      4) {
	        attr_dev(a5, "href",
	        /*osmUrl*/
	        ctx[2]);
	      }

	      if (dirty &
	      /*style*/
	      8) {
	        attr_dev(ul, "style",
	        /*style*/
	        ctx[3]);
	      }
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(ul);
	      /*ul_binding*/

	      ctx[15](null);
	      run_all(dispose);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block.name,
	    type: "if",
	    source: "(148:0) {#if open}",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment(ctx) {
	  var if_block_anchor;
	  var if_block =
	  /*open*/
	  ctx[0] && create_if_block(ctx);
	  var block = {
	    c: function create() {
	      if (if_block) if_block.c();
	      if_block_anchor = empty();
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      if (if_block) if_block.m(target, anchor);
	      insert_dev(target, if_block_anchor, anchor);
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (
	      /*open*/
	      ctx[0]) {
	        if (if_block) {
	          if_block.p(ctx, dirty);
	        } else {
	          if_block = create_if_block(ctx);
	          if_block.c();
	          if_block.m(if_block_anchor.parentNode, if_block_anchor);
	        }
	      } else if (if_block) {
	        if_block.d(1);
	        if_block = null;
	      }
	    },
	    i: noop,
	    o: noop,
	    d: function destroy(detaching) {
	      if (if_block) if_block.d(detaching);
	      if (detaching) detach_dev(if_block_anchor);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	var osmBaseUrl = "//www.openstreetmap.org/#map=17/";

	function instance($$self, $$props, $$invalidate) {
	  var map = getContext("map");
	  var _$$props$open = $$props.open,
	      open = _$$props$open === void 0 ? false : _$$props$open;
	  var _$$props$pixel = $$props.pixel,
	      pixel = _$$props$pixel === void 0 ? [0, 0] : _$$props$pixel;
	  var element;
	  var osmUrl = osmBaseUrl;
	  var style;

	  function close() {
	    $$invalidate(0, open = false);
	  }

	  function handleClick(event) {
	    var target = event.target;

	    if (target.tagName === "A") {
	      var href = target.getAttribute("href");

	      if (href.charAt(0) === "#") {
	        event.preventDefault();
	      }
	    }

	    event.stopPropagation();
	    close();
	  }

	  function handleWhatIsHere() {
	    var coordinate = getCoordinate(true);
	    setCurrentRoute("search", {
	      term: coordinate
	    });
	  }

	  function handleGetDirectionsFrom() {
	    var coordinate = getCoordinate(true);
	    setCurrentRoute("directions", {
	      fromTerm: coordinate,
	      toTerm: "?"
	    });
	  }

	  function handleGetDirectionsTo() {
	    var coordinate = getCoordinate(true);
	    setCurrentRoute("directions", {
	      fromTerm: "?",
	      toTerm: coordinate
	    });
	  }

	  function handleCenterMapHere() {
	    map.setCenter(getCoordinate());
	  }

	  function handleZoomInHere() {
	    map.setCenter(getCoordinate());
	    map.zoomToStreetLevel();
	  }

	  function getCoordinate() {
	    var display = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	    var sep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ",";
	    var coordinate = map.getCoordinateFromPixel(pixel);

	    if (display) {
	      return displayLatLong(coordinate, sep);
	    }

	    return coordinate;
	  }

	  var writable_props = ["open", "pixel"];
	  Object.keys($$props).forEach(function (key) {
	    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn("<ContextMenu> was created with unknown prop '".concat(key, "'"));
	  });

	  function contextmenu_handler(event) {
	    bubble($$self, event);
	  }

	  function ul_binding($$value) {
	    binding_callbacks[$$value ? "unshift" : "push"](function () {
	      $$invalidate(1, element = $$value);
	    });
	  }

	  $$self.$set = function ($$props) {
	    if ("open" in $$props) $$invalidate(0, open = $$props.open);
	    if ("pixel" in $$props) $$invalidate(10, pixel = $$props.pixel);
	  };

	  $$self.$capture_state = function () {
	    return {
	      open: open,
	      pixel: pixel,
	      element: element,
	      osmUrl: osmUrl,
	      style: style
	    };
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("open" in $$props) $$invalidate(0, open = $$props.open);
	    if ("pixel" in $$props) $$invalidate(10, pixel = $$props.pixel);
	    if ("element" in $$props) $$invalidate(1, element = $$props.element);
	    if ("osmUrl" in $$props) $$invalidate(2, osmUrl = $$props.osmUrl);
	    if ("style" in $$props) $$invalidate(3, style = $$props.style);
	  };

	  $$self.$$.update = function () {
	    if ($$self.$$.dirty &
	    /*element, open, pixel*/
	    1027) {
	       {
	        if (element && open) {
	          var _pixel = pixel,
	              _pixel2 = slicedToArray(_pixel, 2),
	              x = _pixel2[0],
	              y = _pixel2[1];

	          var _map$getSize = map.getSize(),
	              _map$getSize2 = slicedToArray(_map$getSize, 2),
	              mapWidth = _map$getSize2[0],
	              mapHeight = _map$getSize2[1];

	          var top, right, bottom, left;
	          var _iteratorNormalCompletion = true;
	          var _didIteratorError = false;
	          var _iteratorError = undefined;

	          try {
	            for (var _iterator = element.querySelectorAll("li > a")[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	              var anchor = _step.value;
	              anchor.classList.add("map-context-menu-item");
	            }
	          } catch (err) {
	            _didIteratorError = true;
	            _iteratorError = err;
	          } finally {
	            try {
	              if (!_iteratorNormalCompletion && _iterator.return != null) {
	                _iterator.return();
	              }
	            } finally {
	              if (_didIteratorError) {
	                throw _iteratorError;
	              }
	            }
	          }

	          $$invalidate(2, osmUrl = "".concat(osmBaseUrl).concat(getCoordinate(true, "/")));

	          if (x < mapWidth / 2) {
	            left = "".concat(x, "px");
	            right = "auto";
	          } else {
	            left = "auto";
	            right = "".concat(mapWidth - x, "px");
	          }

	          if (y < mapHeight / 2) {
	            top = "".concat(y, "px");
	            bottom = "auto";
	          } else {
	            top = "auto";
	            bottom = "".concat(mapHeight - y, "px");
	          }

	          $$invalidate(3, style = "top: ".concat(top, "; right: ").concat(right, "; bottom: ").concat(bottom, "; left: ").concat(left, ";"));
	        }
	      }
	    }
	  };

	  return [open, element, osmUrl, style, handleClick, handleWhatIsHere, handleGetDirectionsFrom, handleGetDirectionsTo, handleCenterMapHere, handleZoomInHere, pixel, map, close, getCoordinate, contextmenu_handler, ul_binding];
	}

	var ContextMenu =
	/*#__PURE__*/
	function (_SvelteComponentDev) {
	  inherits(ContextMenu, _SvelteComponentDev);

	  function ContextMenu(options) {
	    var _this;

	    classCallCheck(this, ContextMenu);

	    _this = possibleConstructorReturn(this, getPrototypeOf(ContextMenu).call(this, options));
	    init(assertThisInitialized(_this), options, instance, create_fragment, not_equal, {
	      open: 0,
	      pixel: 10
	    });
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "ContextMenu",
	      options: options,
	      id: create_fragment.name
	    });
	    return _this;
	  }

	  createClass(ContextMenu, [{
	    key: "open",
	    get: function get() {
	      throw new Error("<ContextMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<ContextMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }, {
	    key: "pixel",
	    get: function get() {
	      throw new Error("<ContextMenu>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    },
	    set: function set(value) {
	      throw new Error("<ContextMenu>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	    }
	  }]);

	  return ContextMenu;
	}(SvelteComponentDev);

	/**
	 * @module ol/CollectionEventType
	 */
	/**
	 * @enum {string}
	 */
	var CollectionEventType = {
	    /**
	     * Triggered when an item is added to the collection.
	     * @event module:ol/Collection.CollectionEvent#add
	     * @api
	     */
	    ADD: 'add',
	    /**
	     * Triggered when an item is removed from the collection.
	     * @event module:ol/Collection.CollectionEvent#remove
	     * @api
	     */
	    REMOVE: 'remove'
	};

	var __extends$c = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @enum {string}
	 * @private
	 */
	var Property$1 = {
	    LENGTH: 'length'
	};
	/**
	 * @classdesc
	 * Events emitted by {@link module:ol/Collection~Collection} instances are instances of this
	 * type.
	 */
	var CollectionEvent = /** @class */ (function (_super) {
	    __extends$c(CollectionEvent, _super);
	    /**
	     * @param {CollectionEventType} type Type.
	     * @param {*=} opt_element Element.
	     * @param {number} opt_index The index of the added or removed element.
	     */
	    function CollectionEvent(type, opt_element, opt_index) {
	        var _this = _super.call(this, type) || this;
	        /**
	         * The element that is added to or removed from the collection.
	         * @type {*}
	         * @api
	         */
	        _this.element = opt_element;
	        /**
	         * The index of the added or removed element.
	         * @type {number}
	         * @api
	         */
	        _this.index = opt_index;
	        return _this;
	    }
	    return CollectionEvent;
	}(BaseEvent));
	/**
	 * @typedef {Object} Options
	 * @property {boolean} [unique=false] Disallow the same item from being added to
	 * the collection twice.
	 */
	/**
	 * @classdesc
	 * An expanded version of standard JS Array, adding convenience methods for
	 * manipulation. Add and remove changes to the Collection trigger a Collection
	 * event. Note that this does not cover changes to the objects _within_ the
	 * Collection; they trigger events on the appropriate object, not on the
	 * Collection as a whole.
	 *
	 * @fires CollectionEvent
	 *
	 * @template T
	 * @api
	 */
	var Collection$2 = /** @class */ (function (_super) {
	    __extends$c(Collection, _super);
	    /**
	     * @param {Array<T>=} opt_array Array.
	     * @param {Options=} opt_options Collection options.
	     */
	    function Collection(opt_array, opt_options) {
	        var _this = _super.call(this) || this;
	        var options = opt_options || {};
	        /**
	         * @private
	         * @type {boolean}
	         */
	        _this.unique_ = !!options.unique;
	        /**
	         * @private
	         * @type {!Array<T>}
	         */
	        _this.array_ = opt_array ? opt_array : [];
	        if (_this.unique_) {
	            for (var i = 0, ii = _this.array_.length; i < ii; ++i) {
	                _this.assertUnique_(_this.array_[i], i);
	            }
	        }
	        _this.updateLength_();
	        return _this;
	    }
	    /**
	     * Remove all elements from the collection.
	     * @api
	     */
	    Collection.prototype.clear = function () {
	        while (this.getLength() > 0) {
	            this.pop();
	        }
	    };
	    /**
	     * Add elements to the collection.  This pushes each item in the provided array
	     * to the end of the collection.
	     * @param {!Array<T>} arr Array.
	     * @return {Collection<T>} This collection.
	     * @api
	     */
	    Collection.prototype.extend = function (arr) {
	        for (var i = 0, ii = arr.length; i < ii; ++i) {
	            this.push(arr[i]);
	        }
	        return this;
	    };
	    /**
	     * Iterate over each element, calling the provided callback.
	     * @param {function(T, number, Array<T>): *} f The function to call
	     *     for every element. This function takes 3 arguments (the element, the
	     *     index and the array). The return value is ignored.
	     * @api
	     */
	    Collection.prototype.forEach = function (f) {
	        var array = this.array_;
	        for (var i = 0, ii = array.length; i < ii; ++i) {
	            f(array[i], i, array);
	        }
	    };
	    /**
	     * Get a reference to the underlying Array object. Warning: if the array
	     * is mutated, no events will be dispatched by the collection, and the
	     * collection's "length" property won't be in sync with the actual length
	     * of the array.
	     * @return {!Array<T>} Array.
	     * @api
	     */
	    Collection.prototype.getArray = function () {
	        return this.array_;
	    };
	    /**
	     * Get the element at the provided index.
	     * @param {number} index Index.
	     * @return {T} Element.
	     * @api
	     */
	    Collection.prototype.item = function (index) {
	        return this.array_[index];
	    };
	    /**
	     * Get the length of this collection.
	     * @return {number} The length of the array.
	     * @observable
	     * @api
	     */
	    Collection.prototype.getLength = function () {
	        return this.get(Property$1.LENGTH);
	    };
	    /**
	     * Insert an element at the provided index.
	     * @param {number} index Index.
	     * @param {T} elem Element.
	     * @api
	     */
	    Collection.prototype.insertAt = function (index, elem) {
	        if (this.unique_) {
	            this.assertUnique_(elem);
	        }
	        this.array_.splice(index, 0, elem);
	        this.updateLength_();
	        this.dispatchEvent(new CollectionEvent(CollectionEventType.ADD, elem, index));
	    };
	    /**
	     * Remove the last element of the collection and return it.
	     * Return `undefined` if the collection is empty.
	     * @return {T|undefined} Element.
	     * @api
	     */
	    Collection.prototype.pop = function () {
	        return this.removeAt(this.getLength() - 1);
	    };
	    /**
	     * Insert the provided element at the end of the collection.
	     * @param {T} elem Element.
	     * @return {number} New length of the collection.
	     * @api
	     */
	    Collection.prototype.push = function (elem) {
	        if (this.unique_) {
	            this.assertUnique_(elem);
	        }
	        var n = this.getLength();
	        this.insertAt(n, elem);
	        return this.getLength();
	    };
	    /**
	     * Remove the first occurrence of an element from the collection.
	     * @param {T} elem Element.
	     * @return {T|undefined} The removed element or undefined if none found.
	     * @api
	     */
	    Collection.prototype.remove = function (elem) {
	        var arr = this.array_;
	        for (var i = 0, ii = arr.length; i < ii; ++i) {
	            if (arr[i] === elem) {
	                return this.removeAt(i);
	            }
	        }
	        return undefined;
	    };
	    /**
	     * Remove the element at the provided index and return it.
	     * Return `undefined` if the collection does not contain this index.
	     * @param {number} index Index.
	     * @return {T|undefined} Value.
	     * @api
	     */
	    Collection.prototype.removeAt = function (index) {
	        var prev = this.array_[index];
	        this.array_.splice(index, 1);
	        this.updateLength_();
	        this.dispatchEvent(new CollectionEvent(CollectionEventType.REMOVE, prev, index));
	        return prev;
	    };
	    /**
	     * Set the element at the provided index.
	     * @param {number} index Index.
	     * @param {T} elem Element.
	     * @api
	     */
	    Collection.prototype.setAt = function (index, elem) {
	        var n = this.getLength();
	        if (index < n) {
	            if (this.unique_) {
	                this.assertUnique_(elem, index);
	            }
	            var prev = this.array_[index];
	            this.array_[index] = elem;
	            this.dispatchEvent(new CollectionEvent(CollectionEventType.REMOVE, prev, index));
	            this.dispatchEvent(new CollectionEvent(CollectionEventType.ADD, elem, index));
	        }
	        else {
	            for (var j = n; j < index; ++j) {
	                this.insertAt(j, undefined);
	            }
	            this.insertAt(index, elem);
	        }
	    };
	    /**
	     * @private
	     */
	    Collection.prototype.updateLength_ = function () {
	        this.set(Property$1.LENGTH, this.array_.length);
	    };
	    /**
	     * @private
	     * @param {T} elem Element.
	     * @param {number=} opt_except Optional index to ignore.
	     */
	    Collection.prototype.assertUnique_ = function (elem, opt_except) {
	        for (var i = 0, ii = this.array_.length; i < ii; ++i) {
	            if (this.array_[i] === elem && i !== opt_except) {
	                throw new AssertionError(58);
	            }
	        }
	    };
	    return Collection;
	}(BaseObject));

	var __extends$d = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @typedef {typeof Feature|typeof import("./render/Feature.js").default} FeatureClass
	 */
	/**
	 * @typedef {Feature|import("./render/Feature.js").default} FeatureLike
	 */
	/**
	 * @classdesc
	 * A vector object for geographic features with a geometry and other
	 * attribute properties, similar to the features in vector file formats like
	 * GeoJSON.
	 *
	 * Features can be styled individually with `setStyle`; otherwise they use the
	 * style of their vector layer.
	 *
	 * Note that attribute properties are set as {@link module:ol/Object} properties on
	 * the feature object, so they are observable, and have get/set accessors.
	 *
	 * Typically, a feature has a single geometry property. You can set the
	 * geometry using the `setGeometry` method and get it with `getGeometry`.
	 * It is possible to store more than one geometry on a feature using attribute
	 * properties. By default, the geometry used for rendering is identified by
	 * the property name `geometry`. If you want to use another geometry property
	 * for rendering, use the `setGeometryName` method to change the attribute
	 * property associated with the geometry for the feature.  For example:
	 *
	 * ```js
	 *
	 * import Feature from 'ol/Feature';
	 * import Polygon from 'ol/geom/Polygon';
	 * import Point from 'ol/geom/Point';
	 *
	 * var feature = new Feature({
	 *   geometry: new Polygon(polyCoords),
	 *   labelPoint: new Point(labelCoords),
	 *   name: 'My Polygon'
	 * });
	 *
	 * // get the polygon geometry
	 * var poly = feature.getGeometry();
	 *
	 * // Render the feature as a point using the coordinates from labelPoint
	 * feature.setGeometryName('labelPoint');
	 *
	 * // get the point geometry
	 * var point = feature.getGeometry();
	 * ```
	 *
	 * @api
	 * @template {import("./geom/Geometry.js").default} Geometry
	 */
	var Feature = /** @class */ (function (_super) {
	    __extends$d(Feature, _super);
	    /**
	     * @param {Geometry|Object<string, *>=} opt_geometryOrProperties
	     *     You may pass a Geometry object directly, or an object literal containing
	     *     properties. If you pass an object literal, you may include a Geometry
	     *     associated with a `geometry` key.
	     */
	    function Feature(opt_geometryOrProperties) {
	        var _this = _super.call(this) || this;
	        /**
	         * @private
	         * @type {number|string|undefined}
	         */
	        _this.id_ = undefined;
	        /**
	         * @type {string}
	         * @private
	         */
	        _this.geometryName_ = 'geometry';
	        /**
	         * User provided style.
	         * @private
	         * @type {import("./style/Style.js").StyleLike}
	         */
	        _this.style_ = null;
	        /**
	         * @private
	         * @type {import("./style/Style.js").StyleFunction|undefined}
	         */
	        _this.styleFunction_ = undefined;
	        /**
	         * @private
	         * @type {?import("./events.js").EventsKey}
	         */
	        _this.geometryChangeKey_ = null;
	        _this.addEventListener(getChangeEventType(_this.geometryName_), _this.handleGeometryChanged_);
	        if (opt_geometryOrProperties) {
	            if (typeof /** @type {?} */ (opt_geometryOrProperties).getSimplifiedGeometry === 'function') {
	                var geometry = /** @type {Geometry} */ (opt_geometryOrProperties);
	                _this.setGeometry(geometry);
	            }
	            else {
	                /** @type {Object<string, *>} */
	                var properties = opt_geometryOrProperties;
	                _this.setProperties(properties);
	            }
	        }
	        return _this;
	    }
	    /**
	     * Clone this feature. If the original feature has a geometry it
	     * is also cloned. The feature id is not set in the clone.
	     * @return {Feature} The clone.
	     * @api
	     */
	    Feature.prototype.clone = function () {
	        var clone = new Feature(this.getProperties());
	        clone.setGeometryName(this.getGeometryName());
	        var geometry = this.getGeometry();
	        if (geometry) {
	            clone.setGeometry(geometry.clone());
	        }
	        var style = this.getStyle();
	        if (style) {
	            clone.setStyle(style);
	        }
	        return clone;
	    };
	    /**
	     * Get the feature's default geometry.  A feature may have any number of named
	     * geometries.  The "default" geometry (the one that is rendered by default) is
	     * set when calling {@link module:ol/Feature~Feature#setGeometry}.
	     * @return {Geometry|undefined} The default geometry for the feature.
	     * @api
	     * @observable
	     */
	    Feature.prototype.getGeometry = function () {
	        return (
	        /** @type {Geometry|undefined} */ (this.get(this.geometryName_)));
	    };
	    /**
	     * Get the feature identifier.  This is a stable identifier for the feature and
	     * is either set when reading data from a remote source or set explicitly by
	     * calling {@link module:ol/Feature~Feature#setId}.
	     * @return {number|string|undefined} Id.
	     * @api
	     */
	    Feature.prototype.getId = function () {
	        return this.id_;
	    };
	    /**
	     * Get the name of the feature's default geometry.  By default, the default
	     * geometry is named `geometry`.
	     * @return {string} Get the property name associated with the default geometry
	     *     for this feature.
	     * @api
	     */
	    Feature.prototype.getGeometryName = function () {
	        return this.geometryName_;
	    };
	    /**
	     * Get the feature's style. Will return what was provided to the
	     * {@link module:ol/Feature~Feature#setStyle} method.
	     * @return {import("./style/Style.js").StyleLike} The feature style.
	     * @api
	     */
	    Feature.prototype.getStyle = function () {
	        return this.style_;
	    };
	    /**
	     * Get the feature's style function.
	     * @return {import("./style/Style.js").StyleFunction|undefined} Return a function
	     * representing the current style of this feature.
	     * @api
	     */
	    Feature.prototype.getStyleFunction = function () {
	        return this.styleFunction_;
	    };
	    /**
	     * @private
	     */
	    Feature.prototype.handleGeometryChange_ = function () {
	        this.changed();
	    };
	    /**
	     * @private
	     */
	    Feature.prototype.handleGeometryChanged_ = function () {
	        if (this.geometryChangeKey_) {
	            unlistenByKey(this.geometryChangeKey_);
	            this.geometryChangeKey_ = null;
	        }
	        var geometry = this.getGeometry();
	        if (geometry) {
	            this.geometryChangeKey_ = listen$1(geometry, EventType.CHANGE, this.handleGeometryChange_, this);
	        }
	        this.changed();
	    };
	    /**
	     * Set the default geometry for the feature.  This will update the property
	     * with the name returned by {@link module:ol/Feature~Feature#getGeometryName}.
	     * @param {Geometry|undefined} geometry The new geometry.
	     * @api
	     * @observable
	     */
	    Feature.prototype.setGeometry = function (geometry) {
	        this.set(this.geometryName_, geometry);
	    };
	    /**
	     * Set the style for the feature.  This can be a single style object, an array
	     * of styles, or a function that takes a resolution and returns an array of
	     * styles. If it is `null` the feature has no style (a `null` style).
	     * @param {import("./style/Style.js").StyleLike} style Style for this feature.
	     * @api
	     * @fires module:ol/events/Event~BaseEvent#event:change
	     */
	    Feature.prototype.setStyle = function (style) {
	        this.style_ = style;
	        this.styleFunction_ = !style ? undefined : createStyleFunction(style);
	        this.changed();
	    };
	    /**
	     * Set the feature id.  The feature id is considered stable and may be used when
	     * requesting features or comparing identifiers returned from a remote source.
	     * The feature id can be used with the
	     * {@link module:ol/source/Vector~VectorSource#getFeatureById} method.
	     * @param {number|string|undefined} id The feature id.
	     * @api
	     * @fires module:ol/events/Event~BaseEvent#event:change
	     */
	    Feature.prototype.setId = function (id) {
	        this.id_ = id;
	        this.changed();
	    };
	    /**
	     * Set the property name to be used when getting the feature's default geometry.
	     * When calling {@link module:ol/Feature~Feature#getGeometry}, the value of the property with
	     * this name will be returned.
	     * @param {string} name The property name of the default geometry.
	     * @api
	     */
	    Feature.prototype.setGeometryName = function (name) {
	        this.removeEventListener(getChangeEventType(this.geometryName_), this.handleGeometryChanged_);
	        this.geometryName_ = name;
	        this.addEventListener(getChangeEventType(this.geometryName_), this.handleGeometryChanged_);
	        this.handleGeometryChanged_();
	    };
	    return Feature;
	}(BaseObject));
	/**
	 * Convert the provided object into a feature style function.  Functions passed
	 * through unchanged.  Arrays of Style or single style objects wrapped
	 * in a new feature style function.
	 * @param {!import("./style/Style.js").StyleFunction|!Array<import("./style/Style.js").default>|!import("./style/Style.js").default} obj
	 *     A feature style function, a single style, or an array of styles.
	 * @return {import("./style/Style.js").StyleFunction} A style function.
	 */
	function createStyleFunction(obj) {
	    if (typeof obj === 'function') {
	        return obj;
	    }
	    else {
	        /**
	         * @type {Array<import("./style/Style.js").default>}
	         */
	        var styles_1;
	        if (Array.isArray(obj)) {
	            styles_1 = obj;
	        }
	        else {
	            assert(typeof /** @type {?} */ (obj).getZIndex === 'function', 41); // Expected an `import("./style/Style.js").Style` or an array of `import("./style/Style.js").Style`
	            var style = /** @type {import("./style/Style.js").default} */ (obj);
	            styles_1 = [style];
	        }
	        return function () {
	            return styles_1;
	        };
	    }
	}

	/**
	 * @module ol/layer/Property
	 */
	/**
	 * @enum {string}
	 */
	var LayerProperty = {
	    OPACITY: 'opacity',
	    VISIBLE: 'visible',
	    EXTENT: 'extent',
	    Z_INDEX: 'zIndex',
	    MAX_RESOLUTION: 'maxResolution',
	    MIN_RESOLUTION: 'minResolution',
	    MAX_ZOOM: 'maxZoom',
	    MIN_ZOOM: 'minZoom',
	    SOURCE: 'source'
	};

	var __extends$e = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @typedef {Object} Options
	 * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
	 * @property {number} [opacity=1] Opacity (0, 1).
	 * @property {boolean} [visible=true] Visibility.
	 * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
	 * rendered outside of this extent.
	 * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
	 * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
	 * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
	 * method was used.
	 * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
	 * visible.
	 * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
	 * be visible.
	 * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
	 * visible.
	 * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
	 * be visible.
	 */
	/**
	 * @classdesc
	 * Abstract base class; normally only used for creating subclasses and not
	 * instantiated in apps.
	 * Note that with {@link module:ol/layer/Base} and all its subclasses, any property set in
	 * the options is set as a {@link module:ol/Object} property on the layer object, so
	 * is observable, and has get/set accessors.
	 *
	 * @api
	 */
	var BaseLayer = /** @class */ (function (_super) {
	    __extends$e(BaseLayer, _super);
	    /**
	     * @param {Options} options Layer options.
	     */
	    function BaseLayer(options) {
	        var _this = _super.call(this) || this;
	        /**
	         * @type {Object<string, *>}
	         */
	        var properties = assign$1({}, options);
	        properties[LayerProperty.OPACITY] =
	            options.opacity !== undefined ? options.opacity : 1;
	        assert(typeof properties[LayerProperty.OPACITY] === 'number', 64); // Layer opacity must be a number
	        properties[LayerProperty.VISIBLE] =
	            options.visible !== undefined ? options.visible : true;
	        properties[LayerProperty.Z_INDEX] = options.zIndex;
	        properties[LayerProperty.MAX_RESOLUTION] =
	            options.maxResolution !== undefined ? options.maxResolution : Infinity;
	        properties[LayerProperty.MIN_RESOLUTION] =
	            options.minResolution !== undefined ? options.minResolution : 0;
	        properties[LayerProperty.MIN_ZOOM] =
	            options.minZoom !== undefined ? options.minZoom : -Infinity;
	        properties[LayerProperty.MAX_ZOOM] =
	            options.maxZoom !== undefined ? options.maxZoom : Infinity;
	        /**
	         * @type {string}
	         * @private
	         */
	        _this.className_ = properties.className !== undefined ? options.className : 'ol-layer';
	        delete properties.className;
	        _this.setProperties(properties);
	        /**
	         * @type {import("./Layer.js").State}
	         * @private
	         */
	        _this.state_ = null;
	        return _this;
	    }
	    /**
	     * @return {string} CSS class name.
	     */
	    BaseLayer.prototype.getClassName = function () {
	        return this.className_;
	    };
	    /**
	     * This method is not meant to be called by layers or layer renderers because the state
	     * is incorrect if the layer is included in a layer group.
	     *
	     * @param {boolean=} opt_managed Layer is managed.
	     * @return {import("./Layer.js").State} Layer state.
	     */
	    BaseLayer.prototype.getLayerState = function (opt_managed) {
	        /** @type {import("./Layer.js").State} */
	        var state = this.state_ || /** @type {?} */ ({
	            layer: this,
	            managed: opt_managed === undefined ? true : opt_managed
	        });
	        var zIndex = this.getZIndex();
	        state.opacity = clamp(Math.round(this.getOpacity() * 100) / 100, 0, 1);
	        state.sourceState = this.getSourceState();
	        state.visible = this.getVisible();
	        state.extent = this.getExtent();
	        state.zIndex = zIndex !== undefined ? zIndex : (state.managed === false ? Infinity : 0);
	        state.maxResolution = this.getMaxResolution();
	        state.minResolution = Math.max(this.getMinResolution(), 0);
	        state.minZoom = this.getMinZoom();
	        state.maxZoom = this.getMaxZoom();
	        this.state_ = state;
	        return state;
	    };
	    /**
	     * @abstract
	     * @param {Array<import("./Layer.js").default>=} opt_array Array of layers (to be
	     *     modified in place).
	     * @return {Array<import("./Layer.js").default>} Array of layers.
	     */
	    BaseLayer.prototype.getLayersArray = function (opt_array) {
	        return abstract();
	    };
	    /**
	     * @abstract
	     * @param {Array<import("./Layer.js").State>=} opt_states Optional list of layer
	     *     states (to be modified in place).
	     * @return {Array<import("./Layer.js").State>} List of layer states.
	     */
	    BaseLayer.prototype.getLayerStatesArray = function (opt_states) {
	        return abstract();
	    };
	    /**
	     * Return the {@link module:ol/extent~Extent extent} of the layer or `undefined` if it
	     * will be visible regardless of extent.
	     * @return {import("../extent.js").Extent|undefined} The layer extent.
	     * @observable
	     * @api
	     */
	    BaseLayer.prototype.getExtent = function () {
	        return (
	        /** @type {import("../extent.js").Extent|undefined} */ (this.get(LayerProperty.EXTENT)));
	    };
	    /**
	     * Return the maximum resolution of the layer.
	     * @return {number} The maximum resolution of the layer.
	     * @observable
	     * @api
	     */
	    BaseLayer.prototype.getMaxResolution = function () {
	        return /** @type {number} */ (this.get(LayerProperty.MAX_RESOLUTION));
	    };
	    /**
	     * Return the minimum resolution of the layer.
	     * @return {number} The minimum resolution of the layer.
	     * @observable
	     * @api
	     */
	    BaseLayer.prototype.getMinResolution = function () {
	        return /** @type {number} */ (this.get(LayerProperty.MIN_RESOLUTION));
	    };
	    /**
	     * Return the minimum zoom level of the layer.
	     * @return {number} The minimum zoom level of the layer.
	     * @observable
	     * @api
	     */
	    BaseLayer.prototype.getMinZoom = function () {
	        return /** @type {number} */ (this.get(LayerProperty.MIN_ZOOM));
	    };
	    /**
	     * Return the maximum zoom level of the layer.
	     * @return {number} The maximum zoom level of the layer.
	     * @observable
	     * @api
	     */
	    BaseLayer.prototype.getMaxZoom = function () {
	        return /** @type {number} */ (this.get(LayerProperty.MAX_ZOOM));
	    };
	    /**
	     * Return the opacity of the layer (between 0 and 1).
	     * @return {number} The opacity of the layer.
	     * @observable
	     * @api
	     */
	    BaseLayer.prototype.getOpacity = function () {
	        return /** @type {number} */ (this.get(LayerProperty.OPACITY));
	    };
	    /**
	     * @abstract
	     * @return {import("../source/State.js").default} Source state.
	     */
	    BaseLayer.prototype.getSourceState = function () {
	        return abstract();
	    };
	    /**
	     * Return the visibility of the layer (`true` or `false`).
	     * @return {boolean} The visibility of the layer.
	     * @observable
	     * @api
	     */
	    BaseLayer.prototype.getVisible = function () {
	        return /** @type {boolean} */ (this.get(LayerProperty.VISIBLE));
	    };
	    /**
	     * Return the Z-index of the layer, which is used to order layers before
	     * rendering. The default Z-index is 0.
	     * @return {number} The Z-index of the layer.
	     * @observable
	     * @api
	     */
	    BaseLayer.prototype.getZIndex = function () {
	        return /** @type {number} */ (this.get(LayerProperty.Z_INDEX));
	    };
	    /**
	     * Set the extent at which the layer is visible.  If `undefined`, the layer
	     * will be visible at all extents.
	     * @param {import("../extent.js").Extent|undefined} extent The extent of the layer.
	     * @observable
	     * @api
	     */
	    BaseLayer.prototype.setExtent = function (extent) {
	        this.set(LayerProperty.EXTENT, extent);
	    };
	    /**
	     * Set the maximum resolution at which the layer is visible.
	     * @param {number} maxResolution The maximum resolution of the layer.
	     * @observable
	     * @api
	     */
	    BaseLayer.prototype.setMaxResolution = function (maxResolution) {
	        this.set(LayerProperty.MAX_RESOLUTION, maxResolution);
	    };
	    /**
	     * Set the minimum resolution at which the layer is visible.
	     * @param {number} minResolution The minimum resolution of the layer.
	     * @observable
	     * @api
	     */
	    BaseLayer.prototype.setMinResolution = function (minResolution) {
	        this.set(LayerProperty.MIN_RESOLUTION, minResolution);
	    };
	    /**
	     * Set the maximum zoom (exclusive) at which the layer is visible.
	     * Note that the zoom levels for layer visibility are based on the
	     * view zoom level, which may be different from a tile source zoom level.
	     * @param {number} maxZoom The maximum zoom of the layer.
	     * @observable
	     * @api
	     */
	    BaseLayer.prototype.setMaxZoom = function (maxZoom) {
	        this.set(LayerProperty.MAX_ZOOM, maxZoom);
	    };
	    /**
	     * Set the minimum zoom (inclusive) at which the layer is visible.
	     * Note that the zoom levels for layer visibility are based on the
	     * view zoom level, which may be different from a tile source zoom level.
	     * @param {number} minZoom The minimum zoom of the layer.
	     * @observable
	     * @api
	     */
	    BaseLayer.prototype.setMinZoom = function (minZoom) {
	        this.set(LayerProperty.MIN_ZOOM, minZoom);
	    };
	    /**
	     * Set the opacity of the layer, allowed values range from 0 to 1.
	     * @param {number} opacity The opacity of the layer.
	     * @observable
	     * @api
	     */
	    BaseLayer.prototype.setOpacity = function (opacity) {
	        assert(typeof opacity === 'number', 64); // Layer opacity must be a number
	        this.set(LayerProperty.OPACITY, opacity);
	    };
	    /**
	     * Set the visibility of the layer (`true` or `false`).
	     * @param {boolean} visible The visibility of the layer.
	     * @observable
	     * @api
	     */
	    BaseLayer.prototype.setVisible = function (visible) {
	        this.set(LayerProperty.VISIBLE, visible);
	    };
	    /**
	     * Set Z-index of the layer, which is used to order layers before rendering.
	     * The default Z-index is 0.
	     * @param {number} zindex The z-index of the layer.
	     * @observable
	     * @api
	     */
	    BaseLayer.prototype.setZIndex = function (zindex) {
	        this.set(LayerProperty.Z_INDEX, zindex);
	    };
	    /**
	     * @inheritDoc
	     */
	    BaseLayer.prototype.disposeInternal = function () {
	        if (this.state_) {
	            this.state_.layer = null;
	            this.state_ = null;
	        }
	        _super.prototype.disposeInternal.call(this);
	    };
	    return BaseLayer;
	}(BaseObject));

	/**
	 * @module ol/render/EventType
	 */
	/**
	 * @enum {string}
	 */
	var RenderEventType = {
	    /**
	     * Triggered before a layer is rendered.
	     * @event module:ol/render/Event~RenderEvent#prerender
	     * @api
	     */
	    PRERENDER: 'prerender',
	    /**
	     * Triggered after a layer is rendered.
	     * @event module:ol/render/Event~RenderEvent#postrender
	     * @api
	     */
	    POSTRENDER: 'postrender',
	    /**
	     * Triggered before layers are rendered.
	     * The event object will not have a `context` set.
	     * @event module:ol/render/Event~RenderEvent#precompose
	     * @api
	     */
	    PRECOMPOSE: 'precompose',
	    /**
	     * Triggered after all layers are rendered.
	     * The event object will not have a `context` set.
	     * @event module:ol/render/Event~RenderEvent#postcompose
	     * @api
	     */
	    POSTCOMPOSE: 'postcompose',
	    /**
	     * Triggered when rendering is complete, i.e. all sources and tiles have
	     * finished loading for the current viewport, and all tiles are faded in.
	     * The event object will not have a `context` set.
	     * @event module:ol/render/Event~RenderEvent#rendercomplete
	     * @api
	     */
	    RENDERCOMPLETE: 'rendercomplete'
	};

	/**
	 * @module ol/source/State
	 */
	/**
	 * @enum {string}
	 * State of the source, one of 'undefined', 'loading', 'ready' or 'error'.
	 */
	var SourceState = {
	    UNDEFINED: 'undefined',
	    LOADING: 'loading',
	    READY: 'ready',
	    ERROR: 'error'
	};

	var __extends$f = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @typedef {function(import("../PluggableMap.js").FrameState):HTMLElement} RenderFunction
	 */
	/**
	 * @typedef {Object} Options
	 * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
	 * @property {number} [opacity=1] Opacity (0, 1).
	 * @property {boolean} [visible=true] Visibility.
	 * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
	 * rendered outside of this extent.
	 * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
	 * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
	 * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
	 * method was used.
	 * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
	 * visible.
	 * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
	 * be visible.
	 * @property {import("../source/Source.js").default} [source] Source for this layer.  If not provided to the constructor,
	 * the source can be set by calling {@link module:ol/layer/Layer#setSource layer.setSource(source)} after
	 * construction.
	 * @property {import("../PluggableMap.js").default} [map] Map.
	 * @property {RenderFunction} [render] Render function. Takes the frame state as input and is expected to return an
	 * HTML element. Will overwrite the default rendering for the layer.
	 */
	/**
	 * @typedef {Object} State
	 * @property {import("./Base.js").default} layer
	 * @property {number} opacity Opacity, the value is rounded to two digits to appear after the decimal point.
	 * @property {SourceState} sourceState
	 * @property {boolean} visible
	 * @property {boolean} managed
	 * @property {import("../extent.js").Extent} [extent]
	 * @property {number} zIndex
	 * @property {number} maxResolution
	 * @property {number} minResolution
	 * @property {number} minZoom
	 * @property {number} maxZoom
	 */
	/**
	 * @classdesc
	 * Base class from which all layer types are derived. This should only be instantiated
	 * in the case where a custom layer is be added to the map with a custom `render` function.
	 * Such a function can be specified in the `options` object, and is expected to return an HTML element.
	 *
	 * A visual representation of raster or vector map data.
	 * Layers group together those properties that pertain to how the data is to be
	 * displayed, irrespective of the source of that data.
	 *
	 * Layers are usually added to a map with {@link module:ol/Map#addLayer}. Components
	 * like {@link module:ol/interaction/Select~Select} use unmanaged layers
	 * internally. These unmanaged layers are associated with the map using
	 * {@link module:ol/layer/Layer~Layer#setMap} instead.
	 *
	 * A generic `change` event is fired when the state of the source changes.
	 *
	 * Please note that for performance reasons several layers might get rendered to
	 * the same HTML element, which will cause {@link module:ol/Map~Map#forEachLayerAtPixel} to
	 * give false positives. To avoid this, apply different `className` properties to the
	 * layers at creation time.
	 *
	 * @fires import("../render/Event.js").RenderEvent#prerender
	 * @fires import("../render/Event.js").RenderEvent#postrender
	 *
	 * @template {import("../source/Source.js").default} SourceType
	 * @api
	 */
	var Layer = /** @class */ (function (_super) {
	    __extends$f(Layer, _super);
	    /**
	     * @param {Options} options Layer options.
	     */
	    function Layer(options) {
	        var _this = this;
	        var baseOptions = assign$1({}, options);
	        delete baseOptions.source;
	        _this = _super.call(this, baseOptions) || this;
	        /**
	         * @private
	         * @type {?import("../events.js").EventsKey}
	         */
	        _this.mapPrecomposeKey_ = null;
	        /**
	         * @private
	         * @type {?import("../events.js").EventsKey}
	         */
	        _this.mapRenderKey_ = null;
	        /**
	         * @private
	         * @type {?import("../events.js").EventsKey}
	         */
	        _this.sourceChangeKey_ = null;
	        /**
	         * @private
	         * @type {import("../renderer/Layer.js").default}
	         */
	        _this.renderer_ = null;
	        // Overwrite default render method with a custom one
	        if (options.render) {
	            _this.render = options.render;
	        }
	        if (options.map) {
	            _this.setMap(options.map);
	        }
	        _this.addEventListener(getChangeEventType(LayerProperty.SOURCE), _this.handleSourcePropertyChange_);
	        var source = options.source ? /** @type {SourceType} */ (options.source) : null;
	        _this.setSource(source);
	        return _this;
	    }
	    /**
	     * @inheritDoc
	     */
	    Layer.prototype.getLayersArray = function (opt_array) {
	        var array = opt_array ? opt_array : [];
	        array.push(this);
	        return array;
	    };
	    /**
	     * @inheritDoc
	     */
	    Layer.prototype.getLayerStatesArray = function (opt_states) {
	        var states = opt_states ? opt_states : [];
	        states.push(this.getLayerState());
	        return states;
	    };
	    /**
	     * Get the layer source.
	     * @return {SourceType} The layer source (or `null` if not yet set).
	     * @observable
	     * @api
	     */
	    Layer.prototype.getSource = function () {
	        return /** @type {SourceType} */ (this.get(LayerProperty.SOURCE)) || null;
	    };
	    /**
	      * @inheritDoc
	      */
	    Layer.prototype.getSourceState = function () {
	        var source = this.getSource();
	        return !source ? SourceState.UNDEFINED : source.getState();
	    };
	    /**
	     * @private
	     */
	    Layer.prototype.handleSourceChange_ = function () {
	        this.changed();
	    };
	    /**
	     * @private
	     */
	    Layer.prototype.handleSourcePropertyChange_ = function () {
	        if (this.sourceChangeKey_) {
	            unlistenByKey(this.sourceChangeKey_);
	            this.sourceChangeKey_ = null;
	        }
	        var source = this.getSource();
	        if (source) {
	            this.sourceChangeKey_ = listen$1(source, EventType.CHANGE, this.handleSourceChange_, this);
	        }
	        this.changed();
	    };
	    /**
	     * @param {import("../pixel").Pixel} pixel Pixel.
	     * @return {Promise<Array<import("../Feature").default>>} Promise that resolves with
	     * an array of features.
	     */
	    Layer.prototype.getFeatures = function (pixel) {
	        return this.renderer_.getFeatures(pixel);
	    };
	    /**
	     * In charge to manage the rendering of the layer. One layer type is
	     * bounded with one layer renderer.
	     * @param {?import("../PluggableMap.js").FrameState} frameState Frame state.
	     * @param {HTMLElement} target Target which the renderer may (but need not) use
	     * for rendering its content.
	     * @return {HTMLElement} The rendered element.
	     */
	    Layer.prototype.render = function (frameState, target) {
	        var layerRenderer = this.getRenderer();
	        if (layerRenderer.prepareFrame(frameState)) {
	            return layerRenderer.renderFrame(frameState, target);
	        }
	    };
	    /**
	     * Sets the layer to be rendered on top of other layers on a map. The map will
	     * not manage this layer in its layers collection, and the callback in
	     * {@link module:ol/Map#forEachLayerAtPixel} will receive `null` as layer. This
	     * is useful for temporary layers. To remove an unmanaged layer from the map,
	     * use `#setMap(null)`.
	     *
	     * To add the layer to a map and have it managed by the map, use
	     * {@link module:ol/Map#addLayer} instead.
	     * @param {import("../PluggableMap.js").default} map Map.
	     * @api
	     */
	    Layer.prototype.setMap = function (map) {
	        if (this.mapPrecomposeKey_) {
	            unlistenByKey(this.mapPrecomposeKey_);
	            this.mapPrecomposeKey_ = null;
	        }
	        if (!map) {
	            this.changed();
	        }
	        if (this.mapRenderKey_) {
	            unlistenByKey(this.mapRenderKey_);
	            this.mapRenderKey_ = null;
	        }
	        if (map) {
	            this.mapPrecomposeKey_ = listen$1(map, RenderEventType.PRECOMPOSE, function (evt) {
	                var renderEvent = /** @type {import("../render/Event.js").default} */ (evt);
	                renderEvent.frameState.layerStatesArray.push(this.getLayerState(false));
	            }, this);
	            this.mapRenderKey_ = listen$1(this, EventType.CHANGE, map.render, map);
	            this.changed();
	        }
	    };
	    /**
	     * Set the layer source.
	     * @param {SourceType} source The layer source.
	     * @observable
	     * @api
	     */
	    Layer.prototype.setSource = function (source) {
	        this.set(LayerProperty.SOURCE, source);
	    };
	    /**
	     * Get the renderer for this layer.
	     * @return {import("../renderer/Layer.js").default} The layer renderer.
	     */
	    Layer.prototype.getRenderer = function () {
	        if (!this.renderer_) {
	            this.renderer_ = this.createRenderer();
	        }
	        return this.renderer_;
	    };
	    /**
	     * @return {boolean} The layer has a renderer.
	     */
	    Layer.prototype.hasRenderer = function () {
	        return !!this.renderer_;
	    };
	    /**
	     * Create a renderer for this layer.
	     * @return {import("../renderer/Layer.js").default} A layer renderer.
	     * @protected
	     */
	    Layer.prototype.createRenderer = function () {
	        return null;
	    };
	    /**
	     * @inheritDoc
	     */
	    Layer.prototype.disposeInternal = function () {
	        this.setSource(null);
	        _super.prototype.disposeInternal.call(this);
	    };
	    return Layer;
	}(BaseLayer));
	/**
	 * Return `true` if the layer is visible and if the provided view state
	 * has resolution and zoom levels that are in range of the layer's min/max.
	 * @param {State} layerState Layer state.
	 * @param {import("../View.js").State} viewState View state.
	 * @return {boolean} The layer is visible at the given view state.
	 */
	function inView(layerState, viewState) {
	    if (!layerState.visible) {
	        return false;
	    }
	    var resolution = viewState.resolution;
	    if (resolution < layerState.minResolution || resolution >= layerState.maxResolution) {
	        return false;
	    }
	    var zoom = viewState.zoom;
	    return zoom > layerState.minZoom && zoom <= layerState.maxZoom;
	}

	/**
	 * @module ol/color
	 */
	/**
	 * A color represented as a short array [red, green, blue, alpha].
	 * red, green, and blue should be integers in the range 0..255 inclusive.
	 * alpha should be a float in the range 0..1 inclusive. If no alpha value is
	 * given then `1` will be used.
	 * @typedef {Array<number>} Color
	 * @api
	 */
	/**
	 * This RegExp matches # followed by 3, 4, 6, or 8 hex digits.
	 * @const
	 * @type {RegExp}
	 * @private
	 */
	var HEX_COLOR_RE_ = /^#([a-f0-9]{3}|[a-f0-9]{4}(?:[a-f0-9]{2}){0,2})$/i;
	/**
	 * Regular expression for matching potential named color style strings.
	 * @const
	 * @type {RegExp}
	 * @private
	 */
	var NAMED_COLOR_RE_ = /^([a-z]*)$|^hsla?\(.*\)$/i;
	/**
	 * Return the color as an rgba string.
	 * @param {Color|string} color Color.
	 * @return {string} Rgba string.
	 * @api
	 */
	function asString(color) {
	    if (typeof color === 'string') {
	        return color;
	    }
	    else {
	        return toString$3(color);
	    }
	}
	/**
	 * Return named color as an rgba string.
	 * @param {string} color Named color.
	 * @return {string} Rgb string.
	 */
	function fromNamed(color) {
	    var el = document.createElement('div');
	    el.style.color = color;
	    if (el.style.color !== '') {
	        document.body.appendChild(el);
	        var rgb = getComputedStyle(el).color;
	        document.body.removeChild(el);
	        return rgb;
	    }
	    else {
	        return '';
	    }
	}
	/**
	 * @param {string} s String.
	 * @return {Color} Color.
	 */
	var fromString = (function () {
	    // We maintain a small cache of parsed strings.  To provide cheap LRU-like
	    // semantics, whenever the cache grows too large we simply delete an
	    // arbitrary 25% of the entries.
	    /**
	     * @const
	     * @type {number}
	     */
	    var MAX_CACHE_SIZE = 1024;
	    /**
	     * @type {Object<string, Color>}
	     */
	    var cache = {};
	    /**
	     * @type {number}
	     */
	    var cacheSize = 0;
	    return (
	    /**
	     * @param {string} s String.
	     * @return {Color} Color.
	     */
	    function (s) {
	        var color;
	        if (cache.hasOwnProperty(s)) {
	            color = cache[s];
	        }
	        else {
	            if (cacheSize >= MAX_CACHE_SIZE) {
	                var i = 0;
	                for (var key in cache) {
	                    if ((i++ & 3) === 0) {
	                        delete cache[key];
	                        --cacheSize;
	                    }
	                }
	            }
	            color = fromStringInternal_(s);
	            cache[s] = color;
	            ++cacheSize;
	        }
	        return color;
	    });
	})();
	/**
	 * Return the color as an array. This function maintains a cache of calculated
	 * arrays which means the result should not be modified.
	 * @param {Color|string} color Color.
	 * @return {Color} Color.
	 * @api
	 */
	function asArray(color) {
	    if (Array.isArray(color)) {
	        return color;
	    }
	    else {
	        return fromString(color);
	    }
	}
	/**
	 * @param {string} s String.
	 * @private
	 * @return {Color} Color.
	 */
	function fromStringInternal_(s) {
	    var r, g, b, a, color;
	    if (NAMED_COLOR_RE_.exec(s)) {
	        s = fromNamed(s);
	    }
	    if (HEX_COLOR_RE_.exec(s)) { // hex
	        var n = s.length - 1; // number of hex digits
	        var d = // number of digits per channel
	         void 0; // number of digits per channel
	        if (n <= 4) {
	            d = 1;
	        }
	        else {
	            d = 2;
	        }
	        var hasAlpha = n === 4 || n === 8;
	        r = parseInt(s.substr(1 + 0 * d, d), 16);
	        g = parseInt(s.substr(1 + 1 * d, d), 16);
	        b = parseInt(s.substr(1 + 2 * d, d), 16);
	        if (hasAlpha) {
	            a = parseInt(s.substr(1 + 3 * d, d), 16);
	        }
	        else {
	            a = 255;
	        }
	        if (d == 1) {
	            r = (r << 4) + r;
	            g = (g << 4) + g;
	            b = (b << 4) + b;
	            if (hasAlpha) {
	                a = (a << 4) + a;
	            }
	        }
	        color = [r, g, b, a / 255];
	    }
	    else if (s.indexOf('rgba(') == 0) { // rgba()
	        color = s.slice(5, -1).split(',').map(Number);
	        normalize$1(color);
	    }
	    else if (s.indexOf('rgb(') == 0) { // rgb()
	        color = s.slice(4, -1).split(',').map(Number);
	        color.push(1);
	        normalize$1(color);
	    }
	    else {
	        assert(false, 14); // Invalid color
	    }
	    return color;
	}
	/**
	 * TODO this function is only used in the test, we probably shouldn't export it
	 * @param {Color} color Color.
	 * @return {Color} Clamped color.
	 */
	function normalize$1(color) {
	    color[0] = clamp((color[0] + 0.5) | 0, 0, 255);
	    color[1] = clamp((color[1] + 0.5) | 0, 0, 255);
	    color[2] = clamp((color[2] + 0.5) | 0, 0, 255);
	    color[3] = clamp(color[3], 0, 1);
	    return color;
	}
	/**
	 * @param {Color} color Color.
	 * @return {string} String.
	 */
	function toString$3(color) {
	    var r = color[0];
	    if (r != (r | 0)) {
	        r = (r + 0.5) | 0;
	    }
	    var g = color[1];
	    if (g != (g | 0)) {
	        g = (g + 0.5) | 0;
	    }
	    var b = color[2];
	    if (b != (b | 0)) {
	        b = (b + 0.5) | 0;
	    }
	    var a = color[3] === undefined ? 1 : color[3];
	    return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';
	}

	/**
	 * @module ol/colorlike
	 */
	/**
	 * A type accepted by CanvasRenderingContext2D.fillStyle
	 * or CanvasRenderingContext2D.strokeStyle.
	 * Represents a color, pattern, or gradient. The origin for patterns and
	 * gradients as fill style is an increment of 512 css pixels from map coordinate
	 * `[0, 0]`. For seamless repeat patterns, width and height of the pattern image
	 * must be a factor of two (2, 4, 8, ..., 512).
	 *
	 * @typedef {string|CanvasPattern|CanvasGradient} ColorLike
	 * @api
	 */
	/**
	 * @param {import("./color.js").Color|ColorLike} color Color.
	 * @return {ColorLike} The color as an {@link ol/colorlike~ColorLike}.
	 * @api
	 */
	function asColorLike(color) {
	    if (Array.isArray(color)) {
	        return toString$3(color);
	    }
	    else {
	        return color;
	    }
	}

	/**
	 * @module ol/dom
	 */
	/**
	 * Create an html canvas element and returns its 2d context.
	 * @param {number=} opt_width Canvas width.
	 * @param {number=} opt_height Canvas height.
	 * @return {CanvasRenderingContext2D} The context.
	 */
	function createCanvasContext2D(opt_width, opt_height) {
	    var canvas = document.createElement('canvas');
	    if (opt_width) {
	        canvas.width = opt_width;
	    }
	    if (opt_height) {
	        canvas.height = opt_height;
	    }
	    return canvas.getContext('2d');
	}
	/**
	 * Get the current computed width for the given element including margin,
	 * padding and border.
	 * Equivalent to jQuery's `$(el).outerWidth(true)`.
	 * @param {!HTMLElement} element Element.
	 * @return {number} The width.
	 */
	function outerWidth(element) {
	    var width = element.offsetWidth;
	    var style = getComputedStyle(element);
	    width += parseInt(style.marginLeft, 10) + parseInt(style.marginRight, 10);
	    return width;
	}
	/**
	 * Get the current computed height for the given element including margin,
	 * padding and border.
	 * Equivalent to jQuery's `$(el).outerHeight(true)`.
	 * @param {!HTMLElement} element Element.
	 * @return {number} The height.
	 */
	function outerHeight(element) {
	    var height = element.offsetHeight;
	    var style = getComputedStyle(element);
	    height += parseInt(style.marginTop, 10) + parseInt(style.marginBottom, 10);
	    return height;
	}
	/**
	 * @param {Node} newNode Node to replace old node
	 * @param {Node} oldNode The node to be replaced
	 */
	function replaceNode(newNode, oldNode) {
	    var parent = oldNode.parentNode;
	    if (parent) {
	        parent.replaceChild(newNode, oldNode);
	    }
	}
	/**
	 * @param {Node} node The node to remove.
	 * @returns {Node} The node that was removed or null.
	 */
	function removeNode(node) {
	    return node && node.parentNode ? node.parentNode.removeChild(node) : null;
	}
	/**
	 * @param {Node} node The node to remove the children from.
	 */
	function removeChildren(node) {
	    while (node.lastChild) {
	        node.removeChild(node.lastChild);
	    }
	}
	/**
	 * Transform the children of a parent node so they match the
	 * provided list of children.  This function aims to efficiently
	 * remove, add, and reorder child nodes while maintaining a simple
	 * implementation (it is not guaranteed to minimize DOM operations).
	 * @param {Node} node The parent node whose children need reworking.
	 * @param {Array<Node>} children The desired children.
	 */
	function replaceChildren(node, children) {
	    var oldChildren = node.childNodes;
	    for (var i = 0; true; ++i) {
	        var oldChild = oldChildren[i];
	        var newChild = children[i];
	        // check if our work is done
	        if (!oldChild && !newChild) {
	            break;
	        }
	        // check if children match
	        if (oldChild === newChild) {
	            continue;
	        }
	        // check if a new child needs to be added
	        if (!oldChild) {
	            node.appendChild(newChild);
	            continue;
	        }
	        // check if an old child needs to be removed
	        if (!newChild) {
	            node.removeChild(oldChild);
	            --i;
	            continue;
	        }
	        // reorder
	        node.insertBefore(newChild, oldChild);
	    }
	}

	/**
	 * @module ol/ImageState
	 */
	/**
	 * @enum {number}
	 */
	var ImageState = {
	    IDLE: 0,
	    LOADING: 1,
	    LOADED: 2,
	    ERROR: 3,
	    EMPTY: 4
	};

	/**
	 * @module ol/css
	 */
	/**
	 * @typedef {Object} FontParameters
	 * @property {Array<string>} families
	 * @property {string} style
	 * @property {string} weight
	 */
	/**
	 * The CSS class for hidden feature.
	 *
	 * @const
	 * @type {string}
	 */
	var CLASS_HIDDEN = 'ol-hidden';
	/**
	 * The CSS class that we'll give the DOM elements to have them selectable.
	 *
	 * @const
	 * @type {string}
	 */
	var CLASS_SELECTABLE = 'ol-selectable';
	/**
	 * The CSS class that we'll give the DOM elements to have them unselectable.
	 *
	 * @const
	 * @type {string}
	 */
	var CLASS_UNSELECTABLE = 'ol-unselectable';
	/**
	 * The CSS class for controls.
	 *
	 * @const
	 * @type {string}
	 */
	var CLASS_CONTROL = 'ol-control';
	/**
	 * The CSS class that we'll give the DOM elements that are collapsed, i.e.
	 * to those elements which usually can be expanded.
	 *
	 * @const
	 * @type {string}
	 */
	var CLASS_COLLAPSED = 'ol-collapsed';
	/**
	 * Get the list of font families from a font spec.  Note that this doesn't work
	 * for font families that have commas in them.
	 * @param {string} The CSS font property.
	 * @return {FontParameters} The font families (or null if the input spec is invalid).
	 */
	var getFontParameters = (function () {
	    /**
	     * @type {CSSStyleDeclaration}
	     */
	    var style;
	    /**
	     * @type {Object<string, FontParameters>}
	     */
	    var cache = {};
	    return function (font) {
	        if (!style) {
	            style = document.createElement('div').style;
	        }
	        if (!(font in cache)) {
	            style.font = font;
	            var family = style.fontFamily;
	            var fontWeight = style.fontWeight;
	            var fontStyle = style.fontStyle;
	            style.font = '';
	            if (!family) {
	                return null;
	            }
	            var families = family.split(/,\s?/);
	            cache[font] = {
	                families: families,
	                weight: fontWeight,
	                style: fontStyle
	            };
	        }
	        return cache[font];
	    };
	})();

	/**
	 * @module ol/structs/LRUCache
	 */
	var __extends$g = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @typedef {Object} Entry
	 * @property {string} key_
	 * @property {Object} newer
	 * @property {Object} older
	 * @property {*} value_
	 */
	/**
	 * @classdesc
	 * Implements a Least-Recently-Used cache where the keys do not conflict with
	 * Object's properties (e.g. 'hasOwnProperty' is not allowed as a key). Expiring
	 * items from the cache is the responsibility of the user.
	 *
	 * @fires import("../events/Event.js").default
	 * @template T
	 */
	var LRUCache = /** @class */ (function (_super) {
	    __extends$g(LRUCache, _super);
	    /**
	     * @param {number=} opt_highWaterMark High water mark.
	     */
	    function LRUCache(opt_highWaterMark) {
	        var _this = _super.call(this) || this;
	        /**
	         * @type {number}
	         */
	        _this.highWaterMark = opt_highWaterMark !== undefined ? opt_highWaterMark : 2048;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.count_ = 0;
	        /**
	         * @private
	         * @type {!Object<string, Entry>}
	         */
	        _this.entries_ = {};
	        /**
	         * @private
	         * @type {?Entry}
	         */
	        _this.oldest_ = null;
	        /**
	         * @private
	         * @type {?Entry}
	         */
	        _this.newest_ = null;
	        return _this;
	    }
	    /**
	     * @return {boolean} Can expire cache.
	     */
	    LRUCache.prototype.canExpireCache = function () {
	        return this.getCount() > this.highWaterMark;
	    };
	    /**
	     * FIXME empty description for jsdoc
	     */
	    LRUCache.prototype.clear = function () {
	        this.count_ = 0;
	        this.entries_ = {};
	        this.oldest_ = null;
	        this.newest_ = null;
	        this.dispatchEvent(EventType.CLEAR);
	    };
	    /**
	     * @param {string} key Key.
	     * @return {boolean} Contains key.
	     */
	    LRUCache.prototype.containsKey = function (key) {
	        return this.entries_.hasOwnProperty(key);
	    };
	    /**
	     * @param {function(T, string, LRUCache<T>): ?} f The function
	     *     to call for every entry from the oldest to the newer. This function takes
	     *     3 arguments (the entry value, the entry key and the LRUCache object).
	     *     The return value is ignored.
	     */
	    LRUCache.prototype.forEach = function (f) {
	        var entry = this.oldest_;
	        while (entry) {
	            f(entry.value_, entry.key_, this);
	            entry = entry.newer;
	        }
	    };
	    /**
	     * @param {string} key Key.
	     * @param {*=} opt_options Options (reserverd for subclasses).
	     * @return {T} Value.
	     */
	    LRUCache.prototype.get = function (key, opt_options) {
	        var entry = this.entries_[key];
	        assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache
	        if (entry === this.newest_) {
	            return entry.value_;
	        }
	        else if (entry === this.oldest_) {
	            this.oldest_ = /** @type {Entry} */ (this.oldest_.newer);
	            this.oldest_.older = null;
	        }
	        else {
	            entry.newer.older = entry.older;
	            entry.older.newer = entry.newer;
	        }
	        entry.newer = null;
	        entry.older = this.newest_;
	        this.newest_.newer = entry;
	        this.newest_ = entry;
	        return entry.value_;
	    };
	    /**
	     * Remove an entry from the cache.
	     * @param {string} key The entry key.
	     * @return {T} The removed entry.
	     */
	    LRUCache.prototype.remove = function (key) {
	        var entry = this.entries_[key];
	        assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache
	        if (entry === this.newest_) {
	            this.newest_ = /** @type {Entry} */ (entry.older);
	            if (this.newest_) {
	                this.newest_.newer = null;
	            }
	        }
	        else if (entry === this.oldest_) {
	            this.oldest_ = /** @type {Entry} */ (entry.newer);
	            if (this.oldest_) {
	                this.oldest_.older = null;
	            }
	        }
	        else {
	            entry.newer.older = entry.older;
	            entry.older.newer = entry.newer;
	        }
	        delete this.entries_[key];
	        --this.count_;
	        return entry.value_;
	    };
	    /**
	     * @return {number} Count.
	     */
	    LRUCache.prototype.getCount = function () {
	        return this.count_;
	    };
	    /**
	     * @return {Array<string>} Keys.
	     */
	    LRUCache.prototype.getKeys = function () {
	        var keys = new Array(this.count_);
	        var i = 0;
	        var entry;
	        for (entry = this.newest_; entry; entry = entry.older) {
	            keys[i++] = entry.key_;
	        }
	        return keys;
	    };
	    /**
	     * @return {Array<T>} Values.
	     */
	    LRUCache.prototype.getValues = function () {
	        var values = new Array(this.count_);
	        var i = 0;
	        var entry;
	        for (entry = this.newest_; entry; entry = entry.older) {
	            values[i++] = entry.value_;
	        }
	        return values;
	    };
	    /**
	     * @return {T} Last value.
	     */
	    LRUCache.prototype.peekLast = function () {
	        return this.oldest_.value_;
	    };
	    /**
	     * @return {string} Last key.
	     */
	    LRUCache.prototype.peekLastKey = function () {
	        return this.oldest_.key_;
	    };
	    /**
	     * Get the key of the newest item in the cache.  Throws if the cache is empty.
	     * @return {string} The newest key.
	     */
	    LRUCache.prototype.peekFirstKey = function () {
	        return this.newest_.key_;
	    };
	    /**
	     * @return {T} value Value.
	     */
	    LRUCache.prototype.pop = function () {
	        var entry = this.oldest_;
	        delete this.entries_[entry.key_];
	        if (entry.newer) {
	            entry.newer.older = null;
	        }
	        this.oldest_ = /** @type {Entry} */ (entry.newer);
	        if (!this.oldest_) {
	            this.newest_ = null;
	        }
	        --this.count_;
	        return entry.value_;
	    };
	    /**
	     * @param {string} key Key.
	     * @param {T} value Value.
	     */
	    LRUCache.prototype.replace = function (key, value) {
	        this.get(key); // update `newest_`
	        this.entries_[key].value_ = value;
	    };
	    /**
	     * @param {string} key Key.
	     * @param {T} value Value.
	     */
	    LRUCache.prototype.set = function (key, value) {
	        assert(!(key in this.entries_), 16); // Tried to set a value for a key that is used already
	        var entry = {
	            key_: key,
	            newer: null,
	            older: this.newest_,
	            value_: value
	        };
	        if (!this.newest_) {
	            this.oldest_ = entry;
	        }
	        else {
	            this.newest_.newer = entry;
	        }
	        this.newest_ = entry;
	        this.entries_[key] = entry;
	        ++this.count_;
	    };
	    /**
	     * Set a maximum number of entries for the cache.
	     * @param {number} size Cache size.
	     * @api
	     */
	    LRUCache.prototype.setSize = function (size) {
	        this.highWaterMark = size;
	    };
	    return LRUCache;
	}(Target));

	var __extends$h = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @module ol/render/canvas/LabelCache
	 */
	/**
	 * @classdesc
	 * Cache of pre-rendered labels.
	 */
	var LabelCache = /** @class */ (function (_super) {
	    __extends$h(LabelCache, _super);
	    /**
	     * @inheritDoc
	     */
	    function LabelCache(opt_highWaterMark) {
	        var _this = _super.call(this, opt_highWaterMark) || this;
	        _this.consumers = {};
	        return _this;
	    }
	    LabelCache.prototype.clear = function () {
	        this.consumers = {};
	        _super.prototype.clear.call(this);
	    };
	    /**
	     * @override
	     * @param {string} key Label key.
	     * @param {import("./Executor.js").default} consumer Label consumer.
	     * @return {HTMLCanvasElement} Label.
	     */
	    LabelCache.prototype.get = function (key, consumer) {
	        var canvas = _super.prototype.get.call(this, key);
	        var consumerId = getUid(consumer);
	        if (!(consumerId in this.consumers)) {
	            this.consumers[consumerId] = {};
	        }
	        this.consumers[consumerId][key] = true;
	        return canvas;
	    };
	    LabelCache.prototype.prune = function () {
	        outer: while (this.canExpireCache()) {
	            var key = this.peekLastKey();
	            for (var consumerId in this.consumers) {
	                if (key in this.consumers[consumerId]) {
	                    break outer;
	                }
	            }
	            var canvas = this.pop();
	            canvas.width = 0;
	            canvas.height = 0;
	            for (var consumerId in this.consumers) {
	                delete this.consumers[consumerId][key];
	            }
	        }
	    };
	    /**
	     * @param {import("./Executor.js").default} consumer Label consumer.
	     */
	    LabelCache.prototype.release = function (consumer) {
	        delete this.consumers[getUid(consumer)];
	    };
	    return LabelCache;
	}(LRUCache));

	/**
	 * @module ol/render/canvas
	 */
	/**
	 * @typedef {Object} FillState
	 * @property {import("../colorlike.js").ColorLike} fillStyle
	 */
	/**
	 * @typedef {Object} FillStrokeState
	 * @property {import("../colorlike.js").ColorLike} [currentFillStyle]
	 * @property {import("../colorlike.js").ColorLike} [currentStrokeStyle]
	 * @property {CanvasLineCap} [currentLineCap]
	 * @property {Array<number>} currentLineDash
	 * @property {number} [currentLineDashOffset]
	 * @property {CanvasLineJoin} [currentLineJoin]
	 * @property {number} [currentLineWidth]
	 * @property {number} [currentMiterLimit]
	 * @property {number} [lastStroke]
	 * @property {import("../colorlike.js").ColorLike} [fillStyle]
	 * @property {import("../colorlike.js").ColorLike} [strokeStyle]
	 * @property {CanvasLineCap} [lineCap]
	 * @property {Array<number>} lineDash
	 * @property {number} [lineDashOffset]
	 * @property {CanvasLineJoin} [lineJoin]
	 * @property {number} [lineWidth]
	 * @property {number} [miterLimit]
	 */
	/**
	 * @typedef {Object} StrokeState
	 * @property {CanvasLineCap} lineCap
	 * @property {Array<number>} lineDash
	 * @property {number} lineDashOffset
	 * @property {CanvasLineJoin} lineJoin
	 * @property {number} lineWidth
	 * @property {number} miterLimit
	 * @property {import("../colorlike.js").ColorLike} strokeStyle
	 */
	/**
	 * @typedef {Object} TextState
	 * @property {string} font
	 * @property {string} [textAlign]
	 * @property {string} textBaseline
	 * @property {string} [placement]
	 * @property {number} [maxAngle]
	 * @property {boolean} [overflow]
	 * @property {import("../style/Fill.js").default} [backgroundFill]
	 * @property {import("../style/Stroke.js").default} [backgroundStroke]
	 * @property {number} [scale]
	 * @property {Array<number>} [padding]
	 */
	/**
	 * Container for decluttered replay instructions that need to be rendered or
	 * omitted together, i.e. when styles render both an image and text, or for the
	 * characters that form text along lines. The basic elements of this array are
	 * `[minX, minY, maxX, maxY, count]`, where the first four entries are the
	 * rendered extent of the group in pixel space. `count` is the number of styles
	 * in the group, i.e. 2 when an image and a text are grouped, or 1 otherwise.
	 * In addition to these four elements, declutter instruction arrays (i.e. the
	 * arguments to {@link module:ol/render/canvas~drawImage} are appended to the array.
	 * @typedef {Array<*>} DeclutterGroup
	 */
	/**
	 * Declutter groups for support of multi geometries.
	 * @typedef {Array<DeclutterGroup>} DeclutterGroups
	 */
	/**
	 * @const
	 * @type {string}
	 */
	var defaultFont = '10px sans-serif';
	/**
	 * @const
	 * @type {import("../colorlike.js").ColorLike}
	 */
	var defaultFillStyle = '#000';
	/**
	 * @const
	 * @type {CanvasLineCap}
	 */
	var defaultLineCap = 'round';
	/**
	 * @const
	 * @type {Array<number>}
	 */
	var defaultLineDash = [];
	/**
	 * @const
	 * @type {number}
	 */
	var defaultLineDashOffset = 0;
	/**
	 * @const
	 * @type {CanvasLineJoin}
	 */
	var defaultLineJoin = 'round';
	/**
	 * @const
	 * @type {number}
	 */
	var defaultMiterLimit = 10;
	/**
	 * @const
	 * @type {import("../colorlike.js").ColorLike}
	 */
	var defaultStrokeStyle = '#000';
	/**
	 * @const
	 * @type {string}
	 */
	var defaultTextAlign = 'center';
	/**
	 * @const
	 * @type {string}
	 */
	var defaultTextBaseline = 'middle';
	/**
	 * @const
	 * @type {Array<number>}
	 */
	var defaultPadding = [0, 0, 0, 0];
	/**
	 * @const
	 * @type {number}
	 */
	var defaultLineWidth = 1;
	/**
	 * The label cache for text rendering. To change the default cache size of 2048
	 * entries, use {@link module:ol/structs/LRUCache#setSize}.
	 * @type {LabelCache}
	 * @api
	 */
	var labelCache = new LabelCache();
	/**
	 * @type {!Object<string, number>}
	 */
	var checkedFonts = {};
	/**
	 * @type {CanvasRenderingContext2D}
	 */
	var measureContext = null;
	/**
	 * @type {string}
	 */
	var measureFont;
	/**
	 * @type {!Object<string, number>}
	 */
	var textHeights = {};
	/**
	 * Clears the label cache when a font becomes available.
	 * @param {string} fontSpec CSS font spec.
	 */
	var checkFont = (function () {
	    var retries = 100;
	    var checked = checkedFonts;
	    var size = '32px ';
	    var referenceFonts = ['monospace', 'serif'];
	    var len = referenceFonts.length;
	    var text = 'wmytzilWMYTZIL@#/&?$%10\uF013';
	    var interval, referenceWidth;
	    /**
	     * @param {string} fontStyle Css font-style
	     * @param {string} fontWeight Css font-weight
	     * @param {*} fontFamily Css font-family
	     * @return {boolean} Font with style and weight is available
	     */
	    function isAvailable(fontStyle, fontWeight, fontFamily) {
	        var context = getMeasureContext();
	        var available = true;
	        for (var i = 0; i < len; ++i) {
	            var referenceFont = referenceFonts[i];
	            context.font = fontStyle + ' ' + fontWeight + ' ' + size + referenceFont;
	            referenceWidth = context.measureText(text).width;
	            if (fontFamily != referenceFont) {
	                context.font = fontStyle + ' ' + fontWeight + ' ' + size + fontFamily + ',' + referenceFont;
	                var width = context.measureText(text).width;
	                // If width and referenceWidth are the same, then the fallback was used
	                // instead of the font we wanted, so the font is not available.
	                available = available && width != referenceWidth;
	            }
	        }
	        if (available) {
	            return true;
	        }
	        return false;
	    }
	    function check() {
	        var done = true;
	        for (var font in checked) {
	            if (checked[font] < retries) {
	                if (isAvailable.apply(this, font.split('\n'))) {
	                    checked[font] = retries;
	                    clear$1(textHeights);
	                    // Make sure that loaded fonts are picked up by Safari
	                    measureContext = null;
	                    measureFont = undefined;
	                    if (labelCache.getCount()) {
	                        labelCache.clear();
	                    }
	                }
	                else {
	                    ++checked[font];
	                    done = false;
	                }
	            }
	        }
	        if (done) {
	            clearInterval(interval);
	            interval = undefined;
	        }
	    }
	    return function (fontSpec) {
	        var font = getFontParameters(fontSpec);
	        if (!font) {
	            return;
	        }
	        var families = font.families;
	        for (var i = 0, ii = families.length; i < ii; ++i) {
	            var family = families[i];
	            var key = font.style + '\n' + font.weight + '\n' + family;
	            if (!(key in checked)) {
	                checked[key] = retries;
	                if (!isAvailable(font.style, font.weight, family)) {
	                    checked[key] = 0;
	                    if (interval === undefined) {
	                        interval = setInterval(check, 32);
	                    }
	                }
	            }
	        }
	    };
	})();
	/**
	 * @return {CanvasRenderingContext2D} Measure context.
	 */
	function getMeasureContext() {
	    if (!measureContext) {
	        measureContext = createCanvasContext2D(1, 1);
	    }
	    return measureContext;
	}
	/**
	 * @param {string} font Font to use for measuring.
	 * @return {import("../size.js").Size} Measurement.
	 */
	var measureTextHeight = (function () {
	    /**
	     * @type {HTMLDivElement}
	     */
	    var div;
	    var heights = textHeights;
	    return function (font) {
	        var height = heights[font];
	        if (height == undefined) {
	            if (!div) {
	                div = document.createElement('div');
	                div.innerHTML = 'M';
	                div.style.margin = '0 !important';
	                div.style.padding = '0 !important';
	                div.style.position = 'absolute !important';
	                div.style.left = '-99999px !important';
	            }
	            div.style.font = font;
	            document.body.appendChild(div);
	            height = div.offsetHeight;
	            heights[font] = height;
	            document.body.removeChild(div);
	        }
	        return height;
	    };
	})();
	/**
	 * @param {string} font Font.
	 * @param {string} text Text.
	 * @return {number} Width.
	 */
	function measureTextWidth(font, text) {
	    var measureContext = getMeasureContext();
	    if (font != measureFont) {
	        measureContext.font = font;
	        measureFont = measureContext.font;
	    }
	    return measureContext.measureText(text).width;
	}
	/**
	 * Measure text width using a cache.
	 * @param {string} font The font.
	 * @param {string} text The text to measure.
	 * @param {Object<string, number>} cache A lookup of cached widths by text.
	 * @returns {number} The text width.
	 */
	function measureAndCacheTextWidth(font, text, cache) {
	    if (text in cache) {
	        return cache[text];
	    }
	    var width = measureTextWidth(font, text);
	    cache[text] = width;
	    return width;
	}
	/**
	 * @param {string} font Font to use for measuring.
	 * @param {Array<string>} lines Lines to measure.
	 * @param {Array<number>} widths Array will be populated with the widths of
	 * each line.
	 * @return {number} Width of the whole text.
	 */
	function measureTextWidths(font, lines, widths) {
	    var numLines = lines.length;
	    var width = 0;
	    for (var i = 0; i < numLines; ++i) {
	        var currentWidth = measureTextWidth(font, lines[i]);
	        width = Math.max(width, currentWidth);
	        widths.push(currentWidth);
	    }
	    return width;
	}
	/**
	 * @param {CanvasRenderingContext2D} context Context.
	 * @param {number} rotation Rotation.
	 * @param {number} offsetX X offset.
	 * @param {number} offsetY Y offset.
	 */
	function rotateAtOffset(context, rotation, offsetX, offsetY) {
	    if (rotation !== 0) {
	        context.translate(offsetX, offsetY);
	        context.rotate(rotation);
	        context.translate(-offsetX, -offsetY);
	    }
	}
	var resetTransform = create();
	/**
	 * @param {CanvasRenderingContext2D} context Context.
	 * @param {import("../transform.js").Transform|null} transform Transform.
	 * @param {number} opacity Opacity.
	 * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} image Image.
	 * @param {number} originX Origin X.
	 * @param {number} originY Origin Y.
	 * @param {number} w Width.
	 * @param {number} h Height.
	 * @param {number} x X.
	 * @param {number} y Y.
	 * @param {number} scale Scale.
	 */
	function drawImage(context, transform, opacity, image, originX, originY, w, h, x, y, scale) {
	    var alpha;
	    if (opacity != 1) {
	        alpha = context.globalAlpha;
	        context.globalAlpha = alpha * opacity;
	    }
	    if (transform) {
	        context.setTransform.apply(context, transform);
	    }
	    context.drawImage(image, originX, originY, w, h, x, y, w * scale, h * scale);
	    if (opacity != 1) {
	        context.globalAlpha = alpha;
	    }
	    if (transform) {
	        context.setTransform.apply(context, resetTransform);
	    }
	}

	/**
	 * @module ol/style/Image
	 */
	/**
	 * @typedef {Object} Options
	 * @property {number} opacity
	 * @property {boolean} rotateWithView
	 * @property {number} rotation
	 * @property {number} scale
	 */
	/**
	 * @classdesc
	 * A base class used for creating subclasses and not instantiated in
	 * apps. Base class for {@link module:ol/style/Icon~Icon}, {@link module:ol/style/Circle~CircleStyle} and
	 * {@link module:ol/style/RegularShape~RegularShape}.
	 * @abstract
	 * @api
	 */
	var ImageStyle = /** @class */ (function () {
	    /**
	     * @param {Options} options Options.
	     */
	    function ImageStyle(options) {
	        /**
	         * @private
	         * @type {number}
	         */
	        this.opacity_ = options.opacity;
	        /**
	         * @private
	         * @type {boolean}
	         */
	        this.rotateWithView_ = options.rotateWithView;
	        /**
	         * @private
	         * @type {number}
	         */
	        this.rotation_ = options.rotation;
	        /**
	         * @private
	         * @type {number}
	         */
	        this.scale_ = options.scale;
	    }
	    /**
	     * Clones the style.
	     * @return {ImageStyle} The cloned style.
	     * @api
	     */
	    ImageStyle.prototype.clone = function () {
	        return new ImageStyle({
	            opacity: this.getOpacity(),
	            scale: this.getScale(),
	            rotation: this.getRotation(),
	            rotateWithView: this.getRotateWithView()
	        });
	    };
	    /**
	     * Get the symbolizer opacity.
	     * @return {number} Opacity.
	     * @api
	     */
	    ImageStyle.prototype.getOpacity = function () {
	        return this.opacity_;
	    };
	    /**
	     * Determine whether the symbolizer rotates with the map.
	     * @return {boolean} Rotate with map.
	     * @api
	     */
	    ImageStyle.prototype.getRotateWithView = function () {
	        return this.rotateWithView_;
	    };
	    /**
	     * Get the symoblizer rotation.
	     * @return {number} Rotation.
	     * @api
	     */
	    ImageStyle.prototype.getRotation = function () {
	        return this.rotation_;
	    };
	    /**
	     * Get the symbolizer scale.
	     * @return {number} Scale.
	     * @api
	     */
	    ImageStyle.prototype.getScale = function () {
	        return this.scale_;
	    };
	    /**
	     * Get the anchor point in pixels. The anchor determines the center point for the
	     * symbolizer.
	     * @abstract
	     * @return {Array<number>} Anchor.
	     */
	    ImageStyle.prototype.getAnchor = function () {
	        return abstract();
	    };
	    /**
	     * Get the image element for the symbolizer.
	     * @abstract
	     * @param {number} pixelRatio Pixel ratio.
	     * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Image element.
	     */
	    ImageStyle.prototype.getImage = function (pixelRatio) {
	        return abstract();
	    };
	    /**
	     * @abstract
	     * @param {number} pixelRatio Pixel ratio.
	     * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Image element.
	     */
	    ImageStyle.prototype.getHitDetectionImage = function (pixelRatio) {
	        return abstract();
	    };
	    /**
	     * @abstract
	     * @return {import("../ImageState.js").default} Image state.
	     */
	    ImageStyle.prototype.getImageState = function () {
	        return abstract();
	    };
	    /**
	     * @abstract
	     * @return {import("../size.js").Size} Image size.
	     */
	    ImageStyle.prototype.getImageSize = function () {
	        return abstract();
	    };
	    /**
	     * @abstract
	     * @return {import("../size.js").Size} Size of the hit-detection image.
	     */
	    ImageStyle.prototype.getHitDetectionImageSize = function () {
	        return abstract();
	    };
	    /**
	     * Get the origin of the symbolizer.
	     * @abstract
	     * @return {Array<number>} Origin.
	     */
	    ImageStyle.prototype.getOrigin = function () {
	        return abstract();
	    };
	    /**
	     * Get the size of the symbolizer (in pixels).
	     * @abstract
	     * @return {import("../size.js").Size} Size.
	     */
	    ImageStyle.prototype.getSize = function () {
	        return abstract();
	    };
	    /**
	     * Set the opacity.
	     *
	     * @param {number} opacity Opacity.
	     * @api
	     */
	    ImageStyle.prototype.setOpacity = function (opacity) {
	        this.opacity_ = opacity;
	    };
	    /**
	     * Set whether to rotate the style with the view.
	     *
	     * @param {boolean} rotateWithView Rotate with map.
	     * @api
	     */
	    ImageStyle.prototype.setRotateWithView = function (rotateWithView) {
	        this.rotateWithView_ = rotateWithView;
	    };
	    /**
	     * Set the rotation.
	     *
	     * @param {number} rotation Rotation.
	     * @api
	     */
	    ImageStyle.prototype.setRotation = function (rotation) {
	        this.rotation_ = rotation;
	    };
	    /**
	     * Set the scale.
	     *
	     * @param {number} scale Scale.
	     * @api
	     */
	    ImageStyle.prototype.setScale = function (scale) {
	        this.scale_ = scale;
	    };
	    /**
	     * @abstract
	     * @param {function(import("../events/Event.js").default): void} listener Listener function.
	     * @template T
	     */
	    ImageStyle.prototype.listenImageChange = function (listener) {
	        abstract();
	    };
	    /**
	     * Load not yet loaded URI.
	     * @abstract
	     */
	    ImageStyle.prototype.load = function () {
	        abstract();
	    };
	    /**
	     * @abstract
	     * @param {function(import("../events/Event.js").default): void} listener Listener function.
	     * @template T
	     */
	    ImageStyle.prototype.unlistenImageChange = function (listener) {
	        abstract();
	    };
	    return ImageStyle;
	}());

	/**
	 * @module ol/style/RegularShape
	 */
	var __extends$i = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * Specify radius for regular polygons, or radius1 and radius2 for stars.
	 * @typedef {Object} Options
	 * @property {import("./Fill.js").default} [fill] Fill style.
	 * @property {number} points Number of points for stars and regular polygons. In case of a polygon, the number of points
	 * is the number of sides.
	 * @property {number} [radius] Radius of a regular polygon.
	 * @property {number} [radius1] Outer radius of a star.
	 * @property {number} [radius2] Inner radius of a star.
	 * @property {number} [angle=0] Shape's angle in radians. A value of 0 will have one of the shape's point facing up.
	 * @property {import("./Stroke.js").default} [stroke] Stroke style.
	 * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).
	 * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view.
	 */
	/**
	 * @typedef {Object} RenderOptions
	 * @property {import("../colorlike.js").ColorLike} [strokeStyle]
	 * @property {number} strokeWidth
	 * @property {number} size
	 * @property {CanvasLineCap} lineCap
	 * @property {Array<number>} lineDash
	 * @property {number} lineDashOffset
	 * @property {CanvasLineJoin} lineJoin
	 * @property {number} miterLimit
	 */
	/**
	 * @classdesc
	 * Set regular shape style for vector features. The resulting shape will be
	 * a regular polygon when `radius` is provided, or a star when `radius1` and
	 * `radius2` are provided.
	 * @api
	 */
	var RegularShape = /** @class */ (function (_super) {
	    __extends$i(RegularShape, _super);
	    /**
	     * @param {Options} options Options.
	     */
	    function RegularShape(options) {
	        var _this = this;
	        /**
	         * @type {boolean}
	         */
	        var rotateWithView = options.rotateWithView !== undefined ?
	            options.rotateWithView : false;
	        _this = _super.call(this, {
	            opacity: 1,
	            rotateWithView: rotateWithView,
	            rotation: options.rotation !== undefined ? options.rotation : 0,
	            scale: 1
	        }) || this;
	        /**
	         * @private
	         * @type {HTMLCanvasElement}
	         */
	        _this.canvas_ = null;
	        /**
	         * @private
	         * @type {HTMLCanvasElement}
	         */
	        _this.hitDetectionCanvas_ = null;
	        /**
	         * @private
	         * @type {import("./Fill.js").default}
	         */
	        _this.fill_ = options.fill !== undefined ? options.fill : null;
	        /**
	         * @private
	         * @type {Array<number>}
	         */
	        _this.origin_ = [0, 0];
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.points_ = options.points;
	        /**
	         * @protected
	         * @type {number}
	         */
	        _this.radius_ = options.radius !== undefined ? options.radius : options.radius1;
	        /**
	         * @private
	         * @type {number|undefined}
	         */
	        _this.radius2_ = options.radius2;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.angle_ = options.angle !== undefined ? options.angle : 0;
	        /**
	         * @private
	         * @type {import("./Stroke.js").default}
	         */
	        _this.stroke_ = options.stroke !== undefined ? options.stroke : null;
	        /**
	         * @private
	         * @type {Array<number>}
	         */
	        _this.anchor_ = null;
	        /**
	         * @private
	         * @type {import("../size.js").Size}
	         */
	        _this.size_ = null;
	        /**
	         * @private
	         * @type {import("../size.js").Size}
	         */
	        _this.imageSize_ = null;
	        /**
	         * @private
	         * @type {import("../size.js").Size}
	         */
	        _this.hitDetectionImageSize_ = null;
	        _this.render();
	        return _this;
	    }
	    /**
	     * Clones the style.
	     * @return {RegularShape} The cloned style.
	     * @api
	     */
	    RegularShape.prototype.clone = function () {
	        var style = new RegularShape({
	            fill: this.getFill() ? this.getFill().clone() : undefined,
	            points: this.getPoints(),
	            radius: this.getRadius(),
	            radius2: this.getRadius2(),
	            angle: this.getAngle(),
	            stroke: this.getStroke() ? this.getStroke().clone() : undefined,
	            rotation: this.getRotation(),
	            rotateWithView: this.getRotateWithView()
	        });
	        style.setOpacity(this.getOpacity());
	        style.setScale(this.getScale());
	        return style;
	    };
	    /**
	     * @inheritDoc
	     * @api
	     */
	    RegularShape.prototype.getAnchor = function () {
	        return this.anchor_;
	    };
	    /**
	     * Get the angle used in generating the shape.
	     * @return {number} Shape's rotation in radians.
	     * @api
	     */
	    RegularShape.prototype.getAngle = function () {
	        return this.angle_;
	    };
	    /**
	     * Get the fill style for the shape.
	     * @return {import("./Fill.js").default} Fill style.
	     * @api
	     */
	    RegularShape.prototype.getFill = function () {
	        return this.fill_;
	    };
	    /**
	     * @inheritDoc
	     */
	    RegularShape.prototype.getHitDetectionImage = function (pixelRatio) {
	        return this.hitDetectionCanvas_;
	    };
	    /**
	     * @inheritDoc
	     * @api
	     */
	    RegularShape.prototype.getImage = function (pixelRatio) {
	        return this.canvas_;
	    };
	    /**
	     * @inheritDoc
	     */
	    RegularShape.prototype.getImageSize = function () {
	        return this.imageSize_;
	    };
	    /**
	     * @inheritDoc
	     */
	    RegularShape.prototype.getHitDetectionImageSize = function () {
	        return this.hitDetectionImageSize_;
	    };
	    /**
	     * @inheritDoc
	     */
	    RegularShape.prototype.getImageState = function () {
	        return ImageState.LOADED;
	    };
	    /**
	     * @inheritDoc
	     * @api
	     */
	    RegularShape.prototype.getOrigin = function () {
	        return this.origin_;
	    };
	    /**
	     * Get the number of points for generating the shape.
	     * @return {number} Number of points for stars and regular polygons.
	     * @api
	     */
	    RegularShape.prototype.getPoints = function () {
	        return this.points_;
	    };
	    /**
	     * Get the (primary) radius for the shape.
	     * @return {number} Radius.
	     * @api
	     */
	    RegularShape.prototype.getRadius = function () {
	        return this.radius_;
	    };
	    /**
	     * Get the secondary radius for the shape.
	     * @return {number|undefined} Radius2.
	     * @api
	     */
	    RegularShape.prototype.getRadius2 = function () {
	        return this.radius2_;
	    };
	    /**
	     * @inheritDoc
	     * @api
	     */
	    RegularShape.prototype.getSize = function () {
	        return this.size_;
	    };
	    /**
	     * Get the stroke style for the shape.
	     * @return {import("./Stroke.js").default} Stroke style.
	     * @api
	     */
	    RegularShape.prototype.getStroke = function () {
	        return this.stroke_;
	    };
	    /**
	     * @inheritDoc
	     */
	    RegularShape.prototype.listenImageChange = function (listener) { };
	    /**
	     * @inheritDoc
	     */
	    RegularShape.prototype.load = function () { };
	    /**
	     * @inheritDoc
	     */
	    RegularShape.prototype.unlistenImageChange = function (listener) { };
	    /**
	     * @protected
	     */
	    RegularShape.prototype.render = function () {
	        var lineCap = defaultLineCap;
	        var lineJoin = defaultLineJoin;
	        var miterLimit = 0;
	        var lineDash = null;
	        var lineDashOffset = 0;
	        var strokeStyle;
	        var strokeWidth = 0;
	        if (this.stroke_) {
	            strokeStyle = this.stroke_.getColor();
	            if (strokeStyle === null) {
	                strokeStyle = defaultStrokeStyle;
	            }
	            strokeStyle = asColorLike(strokeStyle);
	            strokeWidth = this.stroke_.getWidth();
	            if (strokeWidth === undefined) {
	                strokeWidth = defaultLineWidth;
	            }
	            lineDash = this.stroke_.getLineDash();
	            lineDashOffset = this.stroke_.getLineDashOffset();
	            lineJoin = this.stroke_.getLineJoin();
	            if (lineJoin === undefined) {
	                lineJoin = defaultLineJoin;
	            }
	            lineCap = this.stroke_.getLineCap();
	            if (lineCap === undefined) {
	                lineCap = defaultLineCap;
	            }
	            miterLimit = this.stroke_.getMiterLimit();
	            if (miterLimit === undefined) {
	                miterLimit = defaultMiterLimit;
	            }
	        }
	        var size = 2 * (this.radius_ + strokeWidth) + 1;
	        var renderOptions = {
	            strokeStyle: strokeStyle,
	            strokeWidth: strokeWidth,
	            size: size,
	            lineCap: lineCap,
	            lineDash: lineDash,
	            lineDashOffset: lineDashOffset,
	            lineJoin: lineJoin,
	            miterLimit: miterLimit
	        };
	        var context = createCanvasContext2D(size, size);
	        this.canvas_ = context.canvas;
	        // canvas.width and height are rounded to the closest integer
	        size = this.canvas_.width;
	        var imageSize = size;
	        this.draw_(renderOptions, context, 0, 0);
	        this.createHitDetectionCanvas_(renderOptions);
	        this.anchor_ = [size / 2, size / 2];
	        this.size_ = [size, size];
	        this.imageSize_ = [imageSize, imageSize];
	    };
	    /**
	     * @private
	     * @param {RenderOptions} renderOptions Render options.
	     * @param {CanvasRenderingContext2D} context The rendering context.
	     * @param {number} x The origin for the symbol (x).
	     * @param {number} y The origin for the symbol (y).
	     */
	    RegularShape.prototype.draw_ = function (renderOptions, context, x, y) {
	        var i, angle0, radiusC;
	        // reset transform
	        context.setTransform(1, 0, 0, 1, 0, 0);
	        // then move to (x, y)
	        context.translate(x, y);
	        context.beginPath();
	        var points = this.points_;
	        if (points === Infinity) {
	            context.arc(renderOptions.size / 2, renderOptions.size / 2, this.radius_, 0, 2 * Math.PI, true);
	        }
	        else {
	            var radius2 = (this.radius2_ !== undefined) ? this.radius2_
	                : this.radius_;
	            if (radius2 !== this.radius_) {
	                points = 2 * points;
	            }
	            for (i = 0; i <= points; i++) {
	                angle0 = i * 2 * Math.PI / points - Math.PI / 2 + this.angle_;
	                radiusC = i % 2 === 0 ? this.radius_ : radius2;
	                context.lineTo(renderOptions.size / 2 + radiusC * Math.cos(angle0), renderOptions.size / 2 + radiusC * Math.sin(angle0));
	            }
	        }
	        if (this.fill_) {
	            var color = this.fill_.getColor();
	            if (color === null) {
	                color = defaultFillStyle;
	            }
	            context.fillStyle = asColorLike(color);
	            context.fill();
	        }
	        if (this.stroke_) {
	            context.strokeStyle = renderOptions.strokeStyle;
	            context.lineWidth = renderOptions.strokeWidth;
	            if (context.setLineDash && renderOptions.lineDash) {
	                context.setLineDash(renderOptions.lineDash);
	                context.lineDashOffset = renderOptions.lineDashOffset;
	            }
	            context.lineCap = renderOptions.lineCap;
	            context.lineJoin = renderOptions.lineJoin;
	            context.miterLimit = renderOptions.miterLimit;
	            context.stroke();
	        }
	        context.closePath();
	    };
	    /**
	     * @private
	     * @param {RenderOptions} renderOptions Render options.
	     */
	    RegularShape.prototype.createHitDetectionCanvas_ = function (renderOptions) {
	        this.hitDetectionImageSize_ = [renderOptions.size, renderOptions.size];
	        this.hitDetectionCanvas_ = this.canvas_;
	        if (this.fill_) {
	            var color = this.fill_.getColor();
	            // determine if fill is transparent (or pattern or gradient)
	            var opacity = 0;
	            if (typeof color === 'string') {
	                color = asArray(color);
	            }
	            if (color === null) {
	                opacity = 1;
	            }
	            else if (Array.isArray(color)) {
	                opacity = color.length === 4 ? color[3] : 1;
	            }
	            if (opacity === 0) {
	                // if a transparent fill style is set, create an extra hit-detection image
	                // with a default fill style
	                var context = createCanvasContext2D(renderOptions.size, renderOptions.size);
	                this.hitDetectionCanvas_ = context.canvas;
	                this.drawHitDetectionCanvas_(renderOptions, context, 0, 0);
	            }
	        }
	    };
	    /**
	     * @private
	     * @param {RenderOptions} renderOptions Render options.
	     * @param {CanvasRenderingContext2D} context The context.
	     * @param {number} x The origin for the symbol (x).
	     * @param {number} y The origin for the symbol (y).
	     */
	    RegularShape.prototype.drawHitDetectionCanvas_ = function (renderOptions, context, x, y) {
	        // reset transform
	        context.setTransform(1, 0, 0, 1, 0, 0);
	        // then move to (x, y)
	        context.translate(x, y);
	        context.beginPath();
	        var points = this.points_;
	        if (points === Infinity) {
	            context.arc(renderOptions.size / 2, renderOptions.size / 2, this.radius_, 0, 2 * Math.PI, true);
	        }
	        else {
	            var radius2 = (this.radius2_ !== undefined) ? this.radius2_
	                : this.radius_;
	            if (radius2 !== this.radius_) {
	                points = 2 * points;
	            }
	            var i = void 0, radiusC = void 0, angle0 = void 0;
	            for (i = 0; i <= points; i++) {
	                angle0 = i * 2 * Math.PI / points - Math.PI / 2 + this.angle_;
	                radiusC = i % 2 === 0 ? this.radius_ : radius2;
	                context.lineTo(renderOptions.size / 2 + radiusC * Math.cos(angle0), renderOptions.size / 2 + radiusC * Math.sin(angle0));
	            }
	        }
	        context.fillStyle = defaultFillStyle;
	        context.fill();
	        if (this.stroke_) {
	            context.strokeStyle = renderOptions.strokeStyle;
	            context.lineWidth = renderOptions.strokeWidth;
	            if (renderOptions.lineDash) {
	                context.setLineDash(renderOptions.lineDash);
	                context.lineDashOffset = renderOptions.lineDashOffset;
	            }
	            context.stroke();
	        }
	        context.closePath();
	    };
	    return RegularShape;
	}(ImageStyle));

	/**
	 * @module ol/style/Circle
	 */
	var __extends$j = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @typedef {Object} Options
	 * @property {import("./Fill.js").default} [fill] Fill style.
	 * @property {number} radius Circle radius.
	 * @property {import("./Stroke.js").default} [stroke] Stroke style.
	 */
	/**
	 * @classdesc
	 * Set circle style for vector features.
	 * @api
	 */
	var CircleStyle = /** @class */ (function (_super) {
	    __extends$j(CircleStyle, _super);
	    /**
	     * @param {Options=} opt_options Options.
	     */
	    function CircleStyle(opt_options) {
	        var _this = this;
	        var options = opt_options ? opt_options : {};
	        _this = _super.call(this, {
	            points: Infinity,
	            fill: options.fill,
	            radius: options.radius,
	            stroke: options.stroke
	        }) || this;
	        return _this;
	    }
	    /**
	    * Clones the style.
	    * @return {CircleStyle} The cloned style.
	    * @override
	    * @api
	    */
	    CircleStyle.prototype.clone = function () {
	        var style = new CircleStyle({
	            fill: this.getFill() ? this.getFill().clone() : undefined,
	            stroke: this.getStroke() ? this.getStroke().clone() : undefined,
	            radius: this.getRadius()
	        });
	        style.setOpacity(this.getOpacity());
	        style.setScale(this.getScale());
	        return style;
	    };
	    /**
	     * Set the circle radius.
	     *
	     * @param {number} radius Circle radius.
	     * @api
	     */
	    CircleStyle.prototype.setRadius = function (radius) {
	        this.radius_ = radius;
	        this.render();
	    };
	    return CircleStyle;
	}(RegularShape));

	/**
	 * @module ol/style/Fill
	 */
	/**
	 * @typedef {Object} Options
	 * @property {import("../color.js").Color|import("../colorlike.js").ColorLike} [color=null] A color, gradient or pattern.
	 * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.
	 * Default null; if null, the Canvas/renderer default black will be used.
	 */
	/**
	 * @classdesc
	 * Set fill style for vector features.
	 * @api
	 */
	var Fill = /** @class */ (function () {
	    /**
	     * @param {Options=} opt_options Options.
	     */
	    function Fill(opt_options) {
	        var options = opt_options || {};
	        /**
	         * @private
	         * @type {import("../color.js").Color|import("../colorlike.js").ColorLike}
	         */
	        this.color_ = options.color !== undefined ? options.color : null;
	    }
	    /**
	     * Clones the style. The color is not cloned if it is an {@link module:ol/colorlike~ColorLike}.
	     * @return {Fill} The cloned style.
	     * @api
	     */
	    Fill.prototype.clone = function () {
	        var color = this.getColor();
	        return new Fill({
	            color: Array.isArray(color) ? color.slice() : color || undefined
	        });
	    };
	    /**
	     * Get the fill color.
	     * @return {import("../color.js").Color|import("../colorlike.js").ColorLike} Color.
	     * @api
	     */
	    Fill.prototype.getColor = function () {
	        return this.color_;
	    };
	    /**
	     * Set the color.
	     *
	     * @param {import("../color.js").Color|import("../colorlike.js").ColorLike} color Color.
	     * @api
	     */
	    Fill.prototype.setColor = function (color) {
	        this.color_ = color;
	    };
	    return Fill;
	}());

	/**
	 * @module ol/style/Stroke
	 */
	/**
	 * @typedef {Object} Options
	 * @property {import("../color.js").Color|import("../colorlike.js").ColorLike} [color] A color, gradient or pattern.
	 * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.
	 * Default null; if null, the Canvas/renderer default black will be used.
	 * @property {CanvasLineCap} [lineCap='round'] Line cap style: `butt`, `round`, or `square`.
	 * @property {CanvasLineJoin} [lineJoin='round'] Line join style: `bevel`, `round`, or `miter`.
	 * @property {Array<number>} [lineDash] Line dash pattern. Default is `undefined` (no dash).
	 * Please note that Internet Explorer 10 and lower do not support the `setLineDash` method on
	 * the `CanvasRenderingContext2D` and therefore this option will have no visual effect in these browsers.
	 * @property {number} [lineDashOffset=0] Line dash offset.
	 * @property {number} [miterLimit=10] Miter limit.
	 * @property {number} [width] Width.
	 */
	/**
	 * @classdesc
	 * Set stroke style for vector features.
	 * Note that the defaults given are the Canvas defaults, which will be used if
	 * option is not defined. The `get` functions return whatever was entered in
	 * the options; they will not return the default.
	 * @api
	 */
	var Stroke = /** @class */ (function () {
	    /**
	     * @param {Options=} opt_options Options.
	     */
	    function Stroke(opt_options) {
	        var options = opt_options || {};
	        /**
	         * @private
	         * @type {import("../color.js").Color|import("../colorlike.js").ColorLike}
	         */
	        this.color_ = options.color !== undefined ? options.color : null;
	        /**
	         * @private
	         * @type {CanvasLineCap|undefined}
	         */
	        this.lineCap_ = options.lineCap;
	        /**
	         * @private
	         * @type {Array<number>}
	         */
	        this.lineDash_ = options.lineDash !== undefined ? options.lineDash : null;
	        /**
	         * @private
	         * @type {number|undefined}
	         */
	        this.lineDashOffset_ = options.lineDashOffset;
	        /**
	         * @private
	         * @type {CanvasLineJoin|undefined}
	         */
	        this.lineJoin_ = options.lineJoin;
	        /**
	         * @private
	         * @type {number|undefined}
	         */
	        this.miterLimit_ = options.miterLimit;
	        /**
	         * @private
	         * @type {number|undefined}
	         */
	        this.width_ = options.width;
	    }
	    /**
	     * Clones the style.
	     * @return {Stroke} The cloned style.
	     * @api
	     */
	    Stroke.prototype.clone = function () {
	        var color = this.getColor();
	        return new Stroke({
	            color: Array.isArray(color) ? color.slice() : color || undefined,
	            lineCap: this.getLineCap(),
	            lineDash: this.getLineDash() ? this.getLineDash().slice() : undefined,
	            lineDashOffset: this.getLineDashOffset(),
	            lineJoin: this.getLineJoin(),
	            miterLimit: this.getMiterLimit(),
	            width: this.getWidth()
	        });
	    };
	    /**
	     * Get the stroke color.
	     * @return {import("../color.js").Color|import("../colorlike.js").ColorLike} Color.
	     * @api
	     */
	    Stroke.prototype.getColor = function () {
	        return this.color_;
	    };
	    /**
	     * Get the line cap type for the stroke.
	     * @return {CanvasLineCap|undefined} Line cap.
	     * @api
	     */
	    Stroke.prototype.getLineCap = function () {
	        return this.lineCap_;
	    };
	    /**
	     * Get the line dash style for the stroke.
	     * @return {Array<number>} Line dash.
	     * @api
	     */
	    Stroke.prototype.getLineDash = function () {
	        return this.lineDash_;
	    };
	    /**
	     * Get the line dash offset for the stroke.
	     * @return {number|undefined} Line dash offset.
	     * @api
	     */
	    Stroke.prototype.getLineDashOffset = function () {
	        return this.lineDashOffset_;
	    };
	    /**
	     * Get the line join type for the stroke.
	     * @return {CanvasLineJoin|undefined} Line join.
	     * @api
	     */
	    Stroke.prototype.getLineJoin = function () {
	        return this.lineJoin_;
	    };
	    /**
	     * Get the miter limit for the stroke.
	     * @return {number|undefined} Miter limit.
	     * @api
	     */
	    Stroke.prototype.getMiterLimit = function () {
	        return this.miterLimit_;
	    };
	    /**
	     * Get the stroke width.
	     * @return {number|undefined} Width.
	     * @api
	     */
	    Stroke.prototype.getWidth = function () {
	        return this.width_;
	    };
	    /**
	     * Set the color.
	     *
	     * @param {import("../color.js").Color|import("../colorlike.js").ColorLike} color Color.
	     * @api
	     */
	    Stroke.prototype.setColor = function (color) {
	        this.color_ = color;
	    };
	    /**
	     * Set the line cap.
	     *
	     * @param {CanvasLineCap|undefined} lineCap Line cap.
	     * @api
	     */
	    Stroke.prototype.setLineCap = function (lineCap) {
	        this.lineCap_ = lineCap;
	    };
	    /**
	     * Set the line dash.
	     *
	     * Please note that Internet Explorer 10 and lower [do not support][mdn] the
	     * `setLineDash` method on the `CanvasRenderingContext2D` and therefore this
	     * property will have no visual effect in these browsers.
	     *
	     * [mdn]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash#Browser_compatibility
	     *
	     * @param {Array<number>} lineDash Line dash.
	     * @api
	     */
	    Stroke.prototype.setLineDash = function (lineDash) {
	        this.lineDash_ = lineDash;
	    };
	    /**
	     * Set the line dash offset.
	     *
	     * @param {number|undefined} lineDashOffset Line dash offset.
	     * @api
	     */
	    Stroke.prototype.setLineDashOffset = function (lineDashOffset) {
	        this.lineDashOffset_ = lineDashOffset;
	    };
	    /**
	     * Set the line join.
	     *
	     * @param {CanvasLineJoin|undefined} lineJoin Line join.
	     * @api
	     */
	    Stroke.prototype.setLineJoin = function (lineJoin) {
	        this.lineJoin_ = lineJoin;
	    };
	    /**
	     * Set the miter limit.
	     *
	     * @param {number|undefined} miterLimit Miter limit.
	     * @api
	     */
	    Stroke.prototype.setMiterLimit = function (miterLimit) {
	        this.miterLimit_ = miterLimit;
	    };
	    /**
	     * Set the width.
	     *
	     * @param {number|undefined} width Width.
	     * @api
	     */
	    Stroke.prototype.setWidth = function (width) {
	        this.width_ = width;
	    };
	    return Stroke;
	}());

	/**
	 * @module ol/style/Style
	 */
	/**
	 * A function that takes an {@link module:ol/Feature} and a `{number}`
	 * representing the view's resolution. The function should return a
	 * {@link module:ol/style/Style} or an array of them. This way e.g. a
	 * vector layer can be styled.
	 *
	 * @typedef {function(import("../Feature.js").FeatureLike, number):(Style|Array<Style>)} StyleFunction
	 */
	/**
	 * A {@link Style}, an array of {@link Style}, or a {@link StyleFunction}.
	 * @typedef {Style|Array<Style>|StyleFunction} StyleLike
	 */
	/**
	 * A function that takes an {@link module:ol/Feature} as argument and returns an
	 * {@link module:ol/geom/Geometry} that will be rendered and styled for the feature.
	 *
	 * @typedef {function(import("../Feature.js").FeatureLike):
	 *     (import("../geom/Geometry.js").default|import("../render/Feature.js").default|undefined)} GeometryFunction
	 */
	/**
	 * Custom renderer function. Takes two arguments:
	 *
	 * 1. The pixel coordinates of the geometry in GeoJSON notation.
	 * 2. The {@link module:ol/render~State} of the layer renderer.
	 *
	 * @typedef {function((import("../coordinate.js").Coordinate|Array<import("../coordinate.js").Coordinate>|Array<Array<import("../coordinate.js").Coordinate>>),import("../render.js").State): void}
	 * RenderFunction
	 */
	/**
	 * @typedef {Object} Options
	 * @property {string|import("../geom/Geometry.js").default|GeometryFunction} [geometry] Feature property or geometry
	 * or function returning a geometry to render for this style.
	 * @property {import("./Fill.js").default} [fill] Fill style.
	 * @property {import("./Image.js").default} [image] Image style.
	 * @property {RenderFunction} [renderer] Custom renderer. When configured, `fill`, `stroke` and `image` will be
	 * ignored, and the provided function will be called with each render frame for each geometry.
	 * @property {import("./Stroke.js").default} [stroke] Stroke style.
	 * @property {import("./Text.js").default} [text] Text style.
	 * @property {number} [zIndex] Z index.
	 */
	/**
	 * @classdesc
	 * Container for vector feature rendering styles. Any changes made to the style
	 * or its children through `set*()` methods will not take effect until the
	 * feature or layer that uses the style is re-rendered.
	 *
	 * ## Feature styles
	 *
	 * If no style is defined, the following default style is used:
	 * ```js
	 *  import {Fill, Stroke, Circle, Style} from 'ol/style';
	 *
	 *  var fill = new Fill({
	 *    color: 'rgba(255,255,255,0.4)'
	 *  });
	 *  var stroke = new Stroke({
	 *    color: '#3399CC',
	 *    width: 1.25
	 *  });
	 *  var styles = [
	 *    new Style({
	 *      image: new Circle({
	 *        fill: fill,
	 *        stroke: stroke,
	 *        radius: 5
	 *      }),
	 *      fill: fill,
	 *      stroke: stroke
	 *    })
	 *  ];
	 * ```
	 *
	 * A separate editing style has the following defaults:
	 * ```js
	 *  import {Fill, Stroke, Circle, Style} from 'ol/style';
	 *  import GeometryType from 'ol/geom/GeometryType';
	 *
	 *  var white = [255, 255, 255, 1];
	 *  var blue = [0, 153, 255, 1];
	 *  var width = 3;
	 *  styles[GeometryType.POLYGON] = [
	 *    new Style({
	 *      fill: new Fill({
	 *        color: [255, 255, 255, 0.5]
	 *      })
	 *    })
	 *  ];
	 *  styles[GeometryType.MULTI_POLYGON] =
	 *      styles[GeometryType.POLYGON];
	 *  styles[GeometryType.LINE_STRING] = [
	 *    new Style({
	 *      stroke: new Stroke({
	 *        color: white,
	 *        width: width + 2
	 *      })
	 *    }),
	 *    new Style({
	 *      stroke: new Stroke({
	 *        color: blue,
	 *        width: width
	 *      })
	 *    })
	 *  ];
	 *  styles[GeometryType.MULTI_LINE_STRING] =
	 *      styles[GeometryType.LINE_STRING];
	 *  styles[GeometryType.POINT] = [
	 *    new Style({
	 *      image: new Circle({
	 *        radius: width * 2,
	 *        fill: new Fill({
	 *          color: blue
	 *        }),
	 *        stroke: new Stroke({
	 *          color: white,
	 *          width: width / 2
	 *        })
	 *      }),
	 *      zIndex: Infinity
	 *    })
	 *  ];
	 *  styles[GeometryType.MULTI_POINT] =
	 *      styles[GeometryType.POINT];
	 *  styles[GeometryType.GEOMETRY_COLLECTION] =
	 *      styles[GeometryType.POLYGON].concat(
	 *          styles[GeometryType.LINE_STRING],
	 *          styles[GeometryType.POINT]
	 *      );
	 * ```
	 *
	 * @api
	 */
	var Style = /** @class */ (function () {
	    /**
	     * @param {Options=} opt_options Style options.
	     */
	    function Style(opt_options) {
	        var options = opt_options || {};
	        /**
	         * @private
	         * @type {string|import("../geom/Geometry.js").default|GeometryFunction}
	         */
	        this.geometry_ = null;
	        /**
	         * @private
	         * @type {!GeometryFunction}
	         */
	        this.geometryFunction_ = defaultGeometryFunction;
	        if (options.geometry !== undefined) {
	            this.setGeometry(options.geometry);
	        }
	        /**
	         * @private
	         * @type {import("./Fill.js").default}
	         */
	        this.fill_ = options.fill !== undefined ? options.fill : null;
	        /**
	           * @private
	           * @type {import("./Image.js").default}
	           */
	        this.image_ = options.image !== undefined ? options.image : null;
	        /**
	         * @private
	         * @type {RenderFunction|null}
	         */
	        this.renderer_ = options.renderer !== undefined ? options.renderer : null;
	        /**
	         * @private
	         * @type {import("./Stroke.js").default}
	         */
	        this.stroke_ = options.stroke !== undefined ? options.stroke : null;
	        /**
	         * @private
	         * @type {import("./Text.js").default}
	         */
	        this.text_ = options.text !== undefined ? options.text : null;
	        /**
	         * @private
	         * @type {number|undefined}
	         */
	        this.zIndex_ = options.zIndex;
	    }
	    /**
	     * Clones the style.
	     * @return {Style} The cloned style.
	     * @api
	     */
	    Style.prototype.clone = function () {
	        var geometry = this.getGeometry();
	        if (geometry && typeof geometry === 'object') {
	            geometry = /** @type {import("../geom/Geometry.js").default} */ (geometry).clone();
	        }
	        return new Style({
	            geometry: geometry,
	            fill: this.getFill() ? this.getFill().clone() : undefined,
	            image: this.getImage() ? this.getImage().clone() : undefined,
	            stroke: this.getStroke() ? this.getStroke().clone() : undefined,
	            text: this.getText() ? this.getText().clone() : undefined,
	            zIndex: this.getZIndex()
	        });
	    };
	    /**
	     * Get the custom renderer function that was configured with
	     * {@link #setRenderer} or the `renderer` constructor option.
	     * @return {RenderFunction|null} Custom renderer function.
	     * @api
	     */
	    Style.prototype.getRenderer = function () {
	        return this.renderer_;
	    };
	    /**
	     * Sets a custom renderer function for this style. When set, `fill`, `stroke`
	     * and `image` options of the style will be ignored.
	     * @param {RenderFunction|null} renderer Custom renderer function.
	     * @api
	     */
	    Style.prototype.setRenderer = function (renderer) {
	        this.renderer_ = renderer;
	    };
	    /**
	     * Get the geometry to be rendered.
	     * @return {string|import("../geom/Geometry.js").default|GeometryFunction}
	     * Feature property or geometry or function that returns the geometry that will
	     * be rendered with this style.
	     * @api
	     */
	    Style.prototype.getGeometry = function () {
	        return this.geometry_;
	    };
	    /**
	     * Get the function used to generate a geometry for rendering.
	     * @return {!GeometryFunction} Function that is called with a feature
	     * and returns the geometry to render instead of the feature's geometry.
	     * @api
	     */
	    Style.prototype.getGeometryFunction = function () {
	        return this.geometryFunction_;
	    };
	    /**
	     * Get the fill style.
	     * @return {import("./Fill.js").default} Fill style.
	     * @api
	     */
	    Style.prototype.getFill = function () {
	        return this.fill_;
	    };
	    /**
	     * Set the fill style.
	     * @param {import("./Fill.js").default} fill Fill style.
	     * @api
	     */
	    Style.prototype.setFill = function (fill) {
	        this.fill_ = fill;
	    };
	    /**
	     * Get the image style.
	     * @return {import("./Image.js").default} Image style.
	     * @api
	     */
	    Style.prototype.getImage = function () {
	        return this.image_;
	    };
	    /**
	     * Set the image style.
	     * @param {import("./Image.js").default} image Image style.
	     * @api
	     */
	    Style.prototype.setImage = function (image) {
	        this.image_ = image;
	    };
	    /**
	     * Get the stroke style.
	     * @return {import("./Stroke.js").default} Stroke style.
	     * @api
	     */
	    Style.prototype.getStroke = function () {
	        return this.stroke_;
	    };
	    /**
	     * Set the stroke style.
	     * @param {import("./Stroke.js").default} stroke Stroke style.
	     * @api
	     */
	    Style.prototype.setStroke = function (stroke) {
	        this.stroke_ = stroke;
	    };
	    /**
	     * Get the text style.
	     * @return {import("./Text.js").default} Text style.
	     * @api
	     */
	    Style.prototype.getText = function () {
	        return this.text_;
	    };
	    /**
	     * Set the text style.
	     * @param {import("./Text.js").default} text Text style.
	     * @api
	     */
	    Style.prototype.setText = function (text) {
	        this.text_ = text;
	    };
	    /**
	     * Get the z-index for the style.
	     * @return {number|undefined} ZIndex.
	     * @api
	     */
	    Style.prototype.getZIndex = function () {
	        return this.zIndex_;
	    };
	    /**
	     * Set a geometry that is rendered instead of the feature's geometry.
	     *
	     * @param {string|import("../geom/Geometry.js").default|GeometryFunction} geometry
	     *     Feature property or geometry or function returning a geometry to render
	     *     for this style.
	     * @api
	     */
	    Style.prototype.setGeometry = function (geometry) {
	        if (typeof geometry === 'function') {
	            this.geometryFunction_ = geometry;
	        }
	        else if (typeof geometry === 'string') {
	            this.geometryFunction_ = function (feature) {
	                return (
	                /** @type {import("../geom/Geometry.js").default} */ (feature.get(geometry)));
	            };
	        }
	        else if (!geometry) {
	            this.geometryFunction_ = defaultGeometryFunction;
	        }
	        else if (geometry !== undefined) {
	            this.geometryFunction_ = function () {
	                return (
	                /** @type {import("../geom/Geometry.js").default} */ (geometry));
	            };
	        }
	        this.geometry_ = geometry;
	    };
	    /**
	     * Set the z-index.
	     *
	     * @param {number|undefined} zIndex ZIndex.
	     * @api
	     */
	    Style.prototype.setZIndex = function (zIndex) {
	        this.zIndex_ = zIndex;
	    };
	    return Style;
	}());
	/**
	 * Convert the provided object into a style function.  Functions passed through
	 * unchanged.  Arrays of Style or single style objects wrapped in a
	 * new style function.
	 * @param {StyleFunction|Array<Style>|Style} obj
	 *     A style function, a single style, or an array of styles.
	 * @return {StyleFunction} A style function.
	 */
	function toFunction(obj) {
	    var styleFunction;
	    if (typeof obj === 'function') {
	        styleFunction = obj;
	    }
	    else {
	        /**
	         * @type {Array<Style>}
	         */
	        var styles_1;
	        if (Array.isArray(obj)) {
	            styles_1 = obj;
	        }
	        else {
	            assert(typeof /** @type {?} */ (obj).getZIndex === 'function', 41); // Expected an `Style` or an array of `Style`
	            var style = /** @type {Style} */ (obj);
	            styles_1 = [style];
	        }
	        styleFunction = function () {
	            return styles_1;
	        };
	    }
	    return styleFunction;
	}
	/**
	 * @type {Array<Style>}
	 */
	var defaultStyles = null;
	/**
	 * @param {import("../Feature.js").FeatureLike} feature Feature.
	 * @param {number} resolution Resolution.
	 * @return {Array<Style>} Style.
	 */
	function createDefaultStyle(feature, resolution) {
	    // We don't use an immediately-invoked function
	    // and a closure so we don't get an error at script evaluation time in
	    // browsers that do not support Canvas. (import("./Circle.js").CircleStyle does
	    // canvas.getContext('2d') at construction time, which will cause an.error
	    // in such browsers.)
	    if (!defaultStyles) {
	        var fill = new Fill({
	            color: 'rgba(255,255,255,0.4)'
	        });
	        var stroke = new Stroke({
	            color: '#3399CC',
	            width: 1.25
	        });
	        defaultStyles = [
	            new Style({
	                image: new CircleStyle({
	                    fill: fill,
	                    stroke: stroke,
	                    radius: 5
	                }),
	                fill: fill,
	                stroke: stroke
	            })
	        ];
	    }
	    return defaultStyles;
	}
	/**
	 * Function that is called with a feature and returns its default geometry.
	 * @param {import("../Feature.js").FeatureLike} feature Feature to get the geometry for.
	 * @return {import("../geom/Geometry.js").default|import("../render/Feature.js").default|undefined} Geometry to render.
	 */
	function defaultGeometryFunction(feature) {
	    return feature.getGeometry();
	}

	var __extends$k = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @typedef {Object} Options
	 * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
	 * @property {number} [opacity=1] Opacity (0, 1).
	 * @property {boolean} [visible=true] Visibility.
	 * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
	 * rendered outside of this extent.
	 * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
	 * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
	 * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
	 * method was used.
	 * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
	 * visible.
	 * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
	 * be visible.
	 * @property {import("../render.js").OrderFunction} [renderOrder] Render order. Function to be used when sorting
	 * features before rendering. By default features are drawn in the order that they are created. Use
	 * `null` to avoid the sort, but get an undefined draw order.
	 * @property {number} [renderBuffer=100] The buffer in pixels around the viewport extent used by the
	 * renderer when getting features from the vector source for the rendering or hit-detection.
	 * Recommended value: the size of the largest symbol, line width or label.
	 * @property {import("../source/Vector.js").default} [source] Source.
	 * @property {import("../PluggableMap.js").default} [map] Sets the layer as overlay on a map. The map will not manage
	 * this layer in its layers collection, and the layer will be rendered on top. This is useful for
	 * temporary layers. The standard way to add a layer to a map and have it managed by the map is to
	 * use {@link module:ol/Map#addLayer}.
	 * @property {boolean} [declutter=false] Declutter images and text. Decluttering is applied to all
	 * image and text styles of all Vector and VectorTile layers that have set this to `true`. The priority
	 * is defined by the z-index of the layer, the `zIndex` of the style and the render order of features.
	 * Higher z-index means higher priority. Within the same z-index, a feature rendered before another has
	 * higher priority.
	 * @property {import("../style/Style.js").StyleLike} [style] Layer style. See
	 * {@link module:ol/style} for default style which will be used if this is not defined.
	 * @property {boolean} [updateWhileAnimating=false] When set to `true`, feature batches will
	 * be recreated during animations. This means that no vectors will be shown clipped, but the
	 * setting will have a performance impact for large amounts of vector data. When set to `false`,
	 * batches will be recreated when no animation is active.
	 * @property {boolean} [updateWhileInteracting=false] When set to `true`, feature batches will
	 * be recreated during interactions. See also `updateWhileAnimating`.
	 */
	/**
	 * @enum {string}
	 * @private
	 */
	var Property$2 = {
	    RENDER_ORDER: 'renderOrder'
	};
	/**
	 * @classdesc
	 * Vector data that is rendered client-side.
	 * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
	 * property on the layer object; for example, setting `title: 'My Title'` in the
	 * options means that `title` is observable, and has get/set accessors.
	 *
	 * @template {import("../source/Vector.js").default|import("../source/VectorTile.js").default} VectorSourceType
	 * @extends {Layer<VectorSourceType>}
	 * @api
	 */
	var BaseVectorLayer = /** @class */ (function (_super) {
	    __extends$k(BaseVectorLayer, _super);
	    /**
	     * @param {Options=} opt_options Options.
	     */
	    function BaseVectorLayer(opt_options) {
	        var _this = this;
	        var options = opt_options ? opt_options : {};
	        var baseOptions = assign$1({}, options);
	        delete baseOptions.style;
	        delete baseOptions.renderBuffer;
	        delete baseOptions.updateWhileAnimating;
	        delete baseOptions.updateWhileInteracting;
	        _this = _super.call(this, baseOptions) || this;
	        /**
	         * @private
	         * @type {boolean}
	         */
	        _this.declutter_ = options.declutter !== undefined ? options.declutter : false;
	        /**
	         * @type {number}
	         * @private
	         */
	        _this.renderBuffer_ = options.renderBuffer !== undefined ?
	            options.renderBuffer : 100;
	        /**
	         * User provided style.
	         * @type {import("../style/Style.js").StyleLike}
	         * @private
	         */
	        _this.style_ = null;
	        /**
	         * Style function for use within the library.
	         * @type {import("../style/Style.js").StyleFunction|undefined}
	         * @private
	         */
	        _this.styleFunction_ = undefined;
	        _this.setStyle(options.style);
	        /**
	         * @type {boolean}
	         * @private
	         */
	        _this.updateWhileAnimating_ = options.updateWhileAnimating !== undefined ?
	            options.updateWhileAnimating : false;
	        /**
	         * @type {boolean}
	         * @private
	         */
	        _this.updateWhileInteracting_ = options.updateWhileInteracting !== undefined ?
	            options.updateWhileInteracting : false;
	        return _this;
	    }
	    /**
	     * @return {boolean} Declutter.
	     */
	    BaseVectorLayer.prototype.getDeclutter = function () {
	        return this.declutter_;
	    };
	    /**
	     * Get the topmost feature that intersects the given pixel on the viewport. Returns a promise
	     * that resolves with an array of features. The array will either contain the topmost feature
	     * when a hit was detected, or it will be empty.
	     *
	     * The hit detection algorithm used for this method is optimized for performance, but is less
	     * accurate than the one used in {@link import("../PluggableMap.js").default#getFeaturesAtPixel}: Text
	     * is not considered, and icons are only represented by their bounding box instead of the exact
	     * image.
	     *
	     * @param {import("../pixel.js").Pixel} pixel Pixel.
	     * @return {Promise<Array<import("../Feature").default>>} Promise that resolves with an array of features.
	     * @api
	     */
	    BaseVectorLayer.prototype.getFeatures = function (pixel) {
	        return _super.prototype.getFeatures.call(this, pixel);
	    };
	    /**
	     * @return {number|undefined} Render buffer.
	     */
	    BaseVectorLayer.prototype.getRenderBuffer = function () {
	        return this.renderBuffer_;
	    };
	    /**
	     * @return {function(import("../Feature.js").default, import("../Feature.js").default): number|null|undefined} Render
	     *     order.
	     */
	    BaseVectorLayer.prototype.getRenderOrder = function () {
	        return (
	        /** @type {import("../render.js").OrderFunction|null|undefined} */ (this.get(Property$2.RENDER_ORDER)));
	    };
	    /**
	     * Get the style for features.  This returns whatever was passed to the `style`
	     * option at construction or to the `setStyle` method.
	     * @return {import("../style/Style.js").StyleLike}
	     *     Layer style.
	     * @api
	     */
	    BaseVectorLayer.prototype.getStyle = function () {
	        return this.style_;
	    };
	    /**
	     * Get the style function.
	     * @return {import("../style/Style.js").StyleFunction|undefined} Layer style function.
	     * @api
	     */
	    BaseVectorLayer.prototype.getStyleFunction = function () {
	        return this.styleFunction_;
	    };
	    /**
	     * @return {boolean} Whether the rendered layer should be updated while
	     *     animating.
	     */
	    BaseVectorLayer.prototype.getUpdateWhileAnimating = function () {
	        return this.updateWhileAnimating_;
	    };
	    /**
	     * @return {boolean} Whether the rendered layer should be updated while
	     *     interacting.
	     */
	    BaseVectorLayer.prototype.getUpdateWhileInteracting = function () {
	        return this.updateWhileInteracting_;
	    };
	    /**
	     * @param {import("../render.js").OrderFunction|null|undefined} renderOrder
	     *     Render order.
	     */
	    BaseVectorLayer.prototype.setRenderOrder = function (renderOrder) {
	        this.set(Property$2.RENDER_ORDER, renderOrder);
	    };
	    /**
	     * Set the style for features.  This can be a single style object, an array
	     * of styles, or a function that takes a feature and resolution and returns
	     * an array of styles. If it is `undefined` the default style is used. If
	     * it is `null` the layer has no style (a `null` style), so only features
	     * that have their own styles will be rendered in the layer. See
	     * {@link module:ol/style} for information on the default style.
	     * @param {import("../style/Style.js").default|Array<import("../style/Style.js").default>|import("../style/Style.js").StyleFunction|null|undefined} style Layer style.
	     * @api
	     */
	    BaseVectorLayer.prototype.setStyle = function (style) {
	        this.style_ = style !== undefined ? style : createDefaultStyle;
	        this.styleFunction_ = style === null ?
	            undefined : toFunction(this.style_);
	        this.changed();
	    };
	    return BaseVectorLayer;
	}(Layer));

	/**
	 * @module ol/ViewHint
	 */
	/**
	 * @enum {number}
	 */
	var ViewHint = {
	    ANIMATING: 0,
	    INTERACTING: 1
	};

	/**
	 * @module ol/render/VectorContext
	 */
	/**
	 * @classdesc
	 * Context for drawing geometries.  A vector context is available on render
	 * events and does not need to be constructed directly.
	 * @api
	 */
	var VectorContext = /** @class */ (function () {
	    function VectorContext() {
	    }
	    /**
	     * Render a geometry with a custom renderer.
	     *
	     * @param {import("../geom/SimpleGeometry.js").default} geometry Geometry.
	     * @param {import("../Feature.js").FeatureLike} feature Feature.
	     * @param {Function} renderer Renderer.
	     */
	    VectorContext.prototype.drawCustom = function (geometry, feature, renderer) { };
	    /**
	     * Render a geometry.
	     *
	     * @param {import("../geom/Geometry.js").default} geometry The geometry to render.
	     */
	    VectorContext.prototype.drawGeometry = function (geometry) { };
	    /**
	     * Set the rendering style.
	     *
	     * @param {import("../style/Style.js").default} style The rendering style.
	     */
	    VectorContext.prototype.setStyle = function (style) { };
	    /**
	     * @param {import("../geom/Circle.js").default} circleGeometry Circle geometry.
	     * @param {import("../Feature.js").default} feature Feature.
	     */
	    VectorContext.prototype.drawCircle = function (circleGeometry, feature) { };
	    /**
	     * @param {import("../Feature.js").default} feature Feature.
	     * @param {import("../style/Style.js").default} style Style.
	     */
	    VectorContext.prototype.drawFeature = function (feature, style) { };
	    /**
	     * @param {import("../geom/GeometryCollection.js").default} geometryCollectionGeometry Geometry collection.
	     * @param {import("../Feature.js").default} feature Feature.
	     */
	    VectorContext.prototype.drawGeometryCollection = function (geometryCollectionGeometry, feature) { };
	    /**
	     * @param {import("../geom/LineString.js").default|import("./Feature.js").default} lineStringGeometry Line string geometry.
	     * @param {import("../Feature.js").FeatureLike} feature Feature.
	     */
	    VectorContext.prototype.drawLineString = function (lineStringGeometry, feature) { };
	    /**
	     * @param {import("../geom/MultiLineString.js").default|import("./Feature.js").default} multiLineStringGeometry MultiLineString geometry.
	     * @param {import("../Feature.js").FeatureLike} feature Feature.
	     */
	    VectorContext.prototype.drawMultiLineString = function (multiLineStringGeometry, feature) { };
	    /**
	     * @param {import("../geom/MultiPoint.js").default|import("./Feature.js").default} multiPointGeometry MultiPoint geometry.
	     * @param {import("../Feature.js").FeatureLike} feature Feature.
	     */
	    VectorContext.prototype.drawMultiPoint = function (multiPointGeometry, feature) { };
	    /**
	     * @param {import("../geom/MultiPolygon.js").default} multiPolygonGeometry MultiPolygon geometry.
	     * @param {import("../Feature.js").FeatureLike} feature Feature.
	     */
	    VectorContext.prototype.drawMultiPolygon = function (multiPolygonGeometry, feature) { };
	    /**
	     * @param {import("../geom/Point.js").default|import("./Feature.js").default} pointGeometry Point geometry.
	     * @param {import("../Feature.js").FeatureLike} feature Feature.
	     */
	    VectorContext.prototype.drawPoint = function (pointGeometry, feature) { };
	    /**
	     * @param {import("../geom/Polygon.js").default|import("./Feature.js").default} polygonGeometry Polygon geometry.
	     * @param {import("../Feature.js").FeatureLike} feature Feature.
	     */
	    VectorContext.prototype.drawPolygon = function (polygonGeometry, feature) { };
	    /**
	     * @param {import("../geom/Geometry.js").default|import("./Feature.js").default} geometry Geometry.
	     * @param {import("../Feature.js").FeatureLike} feature Feature.
	     */
	    VectorContext.prototype.drawText = function (geometry, feature) { };
	    /**
	     * @param {import("../style/Fill.js").default} fillStyle Fill style.
	     * @param {import("../style/Stroke.js").default} strokeStyle Stroke style.
	     */
	    VectorContext.prototype.setFillStrokeStyle = function (fillStyle, strokeStyle) { };
	    /**
	     * @param {import("../style/Image.js").default} imageStyle Image style.
	     * @param {import("./canvas.js").DeclutterGroup=} opt_declutterGroup Declutter.
	     */
	    VectorContext.prototype.setImageStyle = function (imageStyle, opt_declutterGroup) { };
	    /**
	     * @param {import("../style/Text.js").default} textStyle Text style.
	     * @param {import("./canvas.js").DeclutterGroups=} opt_declutterGroups Declutter.
	     */
	    VectorContext.prototype.setTextStyle = function (textStyle, opt_declutterGroups) { };
	    return VectorContext;
	}());

	/**
	 * @module ol/render/canvas/Instruction
	 */
	/**
	 * @enum {number}
	 */
	var Instruction = {
	    BEGIN_GEOMETRY: 0,
	    BEGIN_PATH: 1,
	    CIRCLE: 2,
	    CLOSE_PATH: 3,
	    CUSTOM: 4,
	    DRAW_CHARS: 5,
	    DRAW_IMAGE: 6,
	    END_GEOMETRY: 7,
	    FILL: 8,
	    MOVE_TO_LINE_TO: 9,
	    SET_FILL_STYLE: 10,
	    SET_STROKE_STYLE: 11,
	    STROKE: 12
	};
	/**
	 * @type {Array<Instruction>}
	 */
	var fillInstruction = [Instruction.FILL];
	/**
	 * @type {Array<Instruction>}
	 */
	var strokeInstruction = [Instruction.STROKE];
	/**
	 * @type {Array<Instruction>}
	 */
	var beginPathInstruction = [Instruction.BEGIN_PATH];
	/**
	 * @type {Array<Instruction>}
	 */
	var closePathInstruction = [Instruction.CLOSE_PATH];

	var __extends$l = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @typedef {Object} SerializableInstructions
	 * @property {Array<*>} instructions The rendering instructions.
	 * @property {Array<*>} hitDetectionInstructions The rendering hit detection instructions.
	 * @property {Array<number>} coordinates The array of all coordinates.
	 * @property {!Object<string, import("../canvas.js").TextState>} [textStates] The text states (decluttering).
	 * @property {!Object<string, import("../canvas.js").FillState>} [fillStates] The fill states (decluttering).
	 * @property {!Object<string, import("../canvas.js").StrokeState>} [strokeStates] The stroke states (decluttering).
	 */
	var CanvasBuilder = /** @class */ (function (_super) {
	    __extends$l(CanvasBuilder, _super);
	    /**
	     * @param {number} tolerance Tolerance.
	     * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
	     * @param {number} resolution Resolution.
	     * @param {number} pixelRatio Pixel ratio.
	     */
	    function CanvasBuilder(tolerance, maxExtent, resolution, pixelRatio) {
	        var _this = _super.call(this) || this;
	        /**
	         * @protected
	         * @type {number}
	         */
	        _this.tolerance = tolerance;
	        /**
	         * @protected
	         * @const
	         * @type {import("../../extent.js").Extent}
	         */
	        _this.maxExtent = maxExtent;
	        /**
	         * @protected
	         * @type {number}
	         */
	        _this.pixelRatio = pixelRatio;
	        /**
	         * @protected
	         * @type {number}
	         */
	        _this.maxLineWidth = 0;
	        /**
	         * @protected
	         * @const
	         * @type {number}
	         */
	        _this.resolution = resolution;
	        /**
	         * @private
	         * @type {Array<*>}
	         */
	        _this.beginGeometryInstruction1_ = null;
	        /**
	         * @private
	         * @type {Array<*>}
	         */
	        _this.beginGeometryInstruction2_ = null;
	        /**
	         * @private
	         * @type {import("../../extent.js").Extent}
	         */
	        _this.bufferedMaxExtent_ = null;
	        /**
	         * @protected
	         * @type {Array<*>}
	         */
	        _this.instructions = [];
	        /**
	         * @protected
	         * @type {Array<number>}
	         */
	        _this.coordinates = [];
	        /**
	         * @private
	         * @type {import("../../coordinate.js").Coordinate}
	         */
	        _this.tmpCoordinate_ = [];
	        /**
	         * @protected
	         * @type {Array<*>}
	         */
	        _this.hitDetectionInstructions = [];
	        /**
	         * @protected
	         * @type {import("../canvas.js").FillStrokeState}
	         */
	        _this.state = /** @type {import("../canvas.js").FillStrokeState} */ ({});
	        return _this;
	    }
	    /**
	     * @protected
	     * @param {Array<number>} dashArray Dash array.
	     * @return {Array<number>} Dash array with pixel ratio applied
	     */
	    CanvasBuilder.prototype.applyPixelRatio = function (dashArray) {
	        var pixelRatio = this.pixelRatio;
	        return pixelRatio == 1 ? dashArray : dashArray.map(function (dash) {
	            return dash * pixelRatio;
	        });
	    };
	    /**
	     * @param {Array<number>} flatCoordinates Flat coordinates.
	     * @param {number} offset Offset.
	     * @param {number} end End.
	     * @param {number} stride Stride.
	     * @param {boolean} closed Last input coordinate equals first.
	     * @param {boolean} skipFirst Skip first coordinate.
	     * @protected
	     * @return {number} My end.
	     */
	    CanvasBuilder.prototype.appendFlatCoordinates = function (flatCoordinates, offset, end, stride, closed, skipFirst) {
	        var myEnd = this.coordinates.length;
	        var extent = this.getBufferedMaxExtent();
	        if (skipFirst) {
	            offset += stride;
	        }
	        var lastXCoord = flatCoordinates[offset];
	        var lastYCoord = flatCoordinates[offset + 1];
	        var nextCoord = this.tmpCoordinate_;
	        var skipped = true;
	        var i, lastRel, nextRel;
	        for (i = offset + stride; i < end; i += stride) {
	            nextCoord[0] = flatCoordinates[i];
	            nextCoord[1] = flatCoordinates[i + 1];
	            nextRel = coordinateRelationship(extent, nextCoord);
	            if (nextRel !== lastRel) {
	                if (skipped) {
	                    this.coordinates[myEnd++] = lastXCoord;
	                    this.coordinates[myEnd++] = lastYCoord;
	                }
	                this.coordinates[myEnd++] = nextCoord[0];
	                this.coordinates[myEnd++] = nextCoord[1];
	                skipped = false;
	            }
	            else if (nextRel === Relationship.INTERSECTING) {
	                this.coordinates[myEnd++] = nextCoord[0];
	                this.coordinates[myEnd++] = nextCoord[1];
	                skipped = false;
	            }
	            else {
	                skipped = true;
	            }
	            lastXCoord = nextCoord[0];
	            lastYCoord = nextCoord[1];
	            lastRel = nextRel;
	        }
	        // Last coordinate equals first or only one point to append:
	        if ((closed && skipped) || i === offset + stride) {
	            this.coordinates[myEnd++] = lastXCoord;
	            this.coordinates[myEnd++] = lastYCoord;
	        }
	        return myEnd;
	    };
	    /**
	     * @param {Array<number>} flatCoordinates Flat coordinates.
	     * @param {number} offset Offset.
	     * @param {Array<number>} ends Ends.
	     * @param {number} stride Stride.
	     * @param {Array<number>} builderEnds Builder ends.
	     * @return {number} Offset.
	     */
	    CanvasBuilder.prototype.drawCustomCoordinates_ = function (flatCoordinates, offset, ends, stride, builderEnds) {
	        for (var i = 0, ii = ends.length; i < ii; ++i) {
	            var end = ends[i];
	            var builderEnd = this.appendFlatCoordinates(flatCoordinates, offset, end, stride, false, false);
	            builderEnds.push(builderEnd);
	            offset = end;
	        }
	        return offset;
	    };
	    /**
	     * @inheritDoc.
	     */
	    CanvasBuilder.prototype.drawCustom = function (geometry, feature, renderer) {
	        this.beginGeometry(geometry, feature);
	        var type = geometry.getType();
	        var stride = geometry.getStride();
	        var builderBegin = this.coordinates.length;
	        var flatCoordinates, builderEnd, builderEnds, builderEndss;
	        var offset;
	        if (type == GeometryType.MULTI_POLYGON) {
	            geometry = /** @type {import("../../geom/MultiPolygon.js").default} */ (geometry);
	            flatCoordinates = geometry.getOrientedFlatCoordinates();
	            builderEndss = [];
	            var endss = geometry.getEndss();
	            offset = 0;
	            for (var i = 0, ii = endss.length; i < ii; ++i) {
	                var myEnds = [];
	                offset = this.drawCustomCoordinates_(flatCoordinates, offset, endss[i], stride, myEnds);
	                builderEndss.push(myEnds);
	            }
	            this.instructions.push([Instruction.CUSTOM,
	                builderBegin, builderEndss, geometry, renderer, inflateMultiCoordinatesArray]);
	        }
	        else if (type == GeometryType.POLYGON || type == GeometryType.MULTI_LINE_STRING) {
	            builderEnds = [];
	            flatCoordinates = (type == GeometryType.POLYGON) ?
	                /** @type {import("../../geom/Polygon.js").default} */ (geometry).getOrientedFlatCoordinates() :
	                geometry.getFlatCoordinates();
	            offset = this.drawCustomCoordinates_(flatCoordinates, 0, 
	            /** @type {import("../../geom/Polygon.js").default|import("../../geom/MultiLineString.js").default} */ (geometry).getEnds(), stride, builderEnds);
	            this.instructions.push([Instruction.CUSTOM,
	                builderBegin, builderEnds, geometry, renderer, inflateCoordinatesArray]);
	        }
	        else if (type == GeometryType.LINE_STRING || type == GeometryType.MULTI_POINT) {
	            flatCoordinates = geometry.getFlatCoordinates();
	            builderEnd = this.appendFlatCoordinates(flatCoordinates, 0, flatCoordinates.length, stride, false, false);
	            this.instructions.push([Instruction.CUSTOM,
	                builderBegin, builderEnd, geometry, renderer, inflateCoordinates]);
	        }
	        else if (type == GeometryType.POINT) {
	            flatCoordinates = geometry.getFlatCoordinates();
	            this.coordinates.push(flatCoordinates[0], flatCoordinates[1]);
	            builderEnd = this.coordinates.length;
	            this.instructions.push([Instruction.CUSTOM,
	                builderBegin, builderEnd, geometry, renderer]);
	        }
	        this.endGeometry(feature);
	    };
	    /**
	     * @protected
	     * @param {import("../../geom/Geometry").default|import("../Feature.js").default} geometry The geometry.
	     * @param {import("../../Feature.js").FeatureLike} feature Feature.
	     */
	    CanvasBuilder.prototype.beginGeometry = function (geometry, feature) {
	        var extent = geometry.getExtent();
	        this.beginGeometryInstruction1_ = [Instruction.BEGIN_GEOMETRY, feature, 0, extent];
	        this.instructions.push(this.beginGeometryInstruction1_);
	        this.beginGeometryInstruction2_ = [Instruction.BEGIN_GEOMETRY, feature, 0, extent];
	        this.hitDetectionInstructions.push(this.beginGeometryInstruction2_);
	    };
	    /**
	     * @return {SerializableInstructions} the serializable instructions.
	     */
	    CanvasBuilder.prototype.finish = function () {
	        return {
	            instructions: this.instructions,
	            hitDetectionInstructions: this.hitDetectionInstructions,
	            coordinates: this.coordinates
	        };
	    };
	    /**
	     * Reverse the hit detection instructions.
	     */
	    CanvasBuilder.prototype.reverseHitDetectionInstructions = function () {
	        var hitDetectionInstructions = this.hitDetectionInstructions;
	        // step 1 - reverse array
	        hitDetectionInstructions.reverse();
	        // step 2 - reverse instructions within geometry blocks
	        var i;
	        var n = hitDetectionInstructions.length;
	        var instruction;
	        var type;
	        var begin = -1;
	        for (i = 0; i < n; ++i) {
	            instruction = hitDetectionInstructions[i];
	            type = /** @type {CanvasInstruction} */ (instruction[0]);
	            if (type == Instruction.END_GEOMETRY) {
	                begin = i;
	            }
	            else if (type == Instruction.BEGIN_GEOMETRY) {
	                instruction[2] = i;
	                reverseSubArray(this.hitDetectionInstructions, begin, i);
	                begin = -1;
	            }
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    CanvasBuilder.prototype.setFillStrokeStyle = function (fillStyle, strokeStyle) {
	        var state = this.state;
	        if (fillStyle) {
	            var fillStyleColor = fillStyle.getColor();
	            state.fillStyle = asColorLike(fillStyleColor ?
	                fillStyleColor : defaultFillStyle);
	        }
	        else {
	            state.fillStyle = undefined;
	        }
	        if (strokeStyle) {
	            var strokeStyleColor = strokeStyle.getColor();
	            state.strokeStyle = asColorLike(strokeStyleColor ?
	                strokeStyleColor : defaultStrokeStyle);
	            var strokeStyleLineCap = strokeStyle.getLineCap();
	            state.lineCap = strokeStyleLineCap !== undefined ?
	                strokeStyleLineCap : defaultLineCap;
	            var strokeStyleLineDash = strokeStyle.getLineDash();
	            state.lineDash = strokeStyleLineDash ?
	                strokeStyleLineDash.slice() : defaultLineDash;
	            var strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();
	            state.lineDashOffset = strokeStyleLineDashOffset ?
	                strokeStyleLineDashOffset : defaultLineDashOffset;
	            var strokeStyleLineJoin = strokeStyle.getLineJoin();
	            state.lineJoin = strokeStyleLineJoin !== undefined ?
	                strokeStyleLineJoin : defaultLineJoin;
	            var strokeStyleWidth = strokeStyle.getWidth();
	            state.lineWidth = strokeStyleWidth !== undefined ?
	                strokeStyleWidth : defaultLineWidth;
	            var strokeStyleMiterLimit = strokeStyle.getMiterLimit();
	            state.miterLimit = strokeStyleMiterLimit !== undefined ?
	                strokeStyleMiterLimit : defaultMiterLimit;
	            if (state.lineWidth > this.maxLineWidth) {
	                this.maxLineWidth = state.lineWidth;
	                // invalidate the buffered max extent cache
	                this.bufferedMaxExtent_ = null;
	            }
	        }
	        else {
	            state.strokeStyle = undefined;
	            state.lineCap = undefined;
	            state.lineDash = null;
	            state.lineDashOffset = undefined;
	            state.lineJoin = undefined;
	            state.lineWidth = undefined;
	            state.miterLimit = undefined;
	        }
	    };
	    /**
	     * @param {import("../canvas.js").FillStrokeState} state State.
	     * @return {Array<*>} Fill instruction.
	     */
	    CanvasBuilder.prototype.createFill = function (state) {
	        var fillStyle = state.fillStyle;
	        /** @type {Array<*>} */
	        var fillInstruction = [Instruction.SET_FILL_STYLE, fillStyle];
	        if (typeof fillStyle !== 'string') {
	            // Fill is a pattern or gradient - align it!
	            fillInstruction.push(true);
	        }
	        return fillInstruction;
	    };
	    /**
	     * @param {import("../canvas.js").FillStrokeState} state State.
	     */
	    CanvasBuilder.prototype.applyStroke = function (state) {
	        this.instructions.push(this.createStroke(state));
	    };
	    /**
	     * @param {import("../canvas.js").FillStrokeState} state State.
	     * @return {Array<*>} Stroke instruction.
	     */
	    CanvasBuilder.prototype.createStroke = function (state) {
	        return [
	            Instruction.SET_STROKE_STYLE,
	            state.strokeStyle, state.lineWidth * this.pixelRatio, state.lineCap,
	            state.lineJoin, state.miterLimit,
	            this.applyPixelRatio(state.lineDash), state.lineDashOffset * this.pixelRatio
	        ];
	    };
	    /**
	     * @param {import("../canvas.js").FillStrokeState} state State.
	     * @param {function(this:CanvasBuilder, import("../canvas.js").FillStrokeState):Array<*>} createFill Create fill.
	     */
	    CanvasBuilder.prototype.updateFillStyle = function (state, createFill) {
	        var fillStyle = state.fillStyle;
	        if (typeof fillStyle !== 'string' || state.currentFillStyle != fillStyle) {
	            if (fillStyle !== undefined) {
	                this.instructions.push(createFill.call(this, state));
	            }
	            state.currentFillStyle = fillStyle;
	        }
	    };
	    /**
	     * @param {import("../canvas.js").FillStrokeState} state State.
	     * @param {function(this:CanvasBuilder, import("../canvas.js").FillStrokeState): void} applyStroke Apply stroke.
	     */
	    CanvasBuilder.prototype.updateStrokeStyle = function (state, applyStroke) {
	        var strokeStyle = state.strokeStyle;
	        var lineCap = state.lineCap;
	        var lineDash = state.lineDash;
	        var lineDashOffset = state.lineDashOffset;
	        var lineJoin = state.lineJoin;
	        var lineWidth = state.lineWidth;
	        var miterLimit = state.miterLimit;
	        if (state.currentStrokeStyle != strokeStyle ||
	            state.currentLineCap != lineCap ||
	            (lineDash != state.currentLineDash && !equals$1(state.currentLineDash, lineDash)) ||
	            state.currentLineDashOffset != lineDashOffset ||
	            state.currentLineJoin != lineJoin ||
	            state.currentLineWidth != lineWidth ||
	            state.currentMiterLimit != miterLimit) {
	            if (strokeStyle !== undefined) {
	                applyStroke.call(this, state);
	            }
	            state.currentStrokeStyle = strokeStyle;
	            state.currentLineCap = lineCap;
	            state.currentLineDash = lineDash;
	            state.currentLineDashOffset = lineDashOffset;
	            state.currentLineJoin = lineJoin;
	            state.currentLineWidth = lineWidth;
	            state.currentMiterLimit = miterLimit;
	        }
	    };
	    /**
	     * @param {import("../../Feature.js").FeatureLike} feature Feature.
	     */
	    CanvasBuilder.prototype.endGeometry = function (feature) {
	        this.beginGeometryInstruction1_[2] = this.instructions.length;
	        this.beginGeometryInstruction1_ = null;
	        this.beginGeometryInstruction2_[2] = this.hitDetectionInstructions.length;
	        this.beginGeometryInstruction2_ = null;
	        var endGeometryInstruction = [Instruction.END_GEOMETRY, feature];
	        this.instructions.push(endGeometryInstruction);
	        this.hitDetectionInstructions.push(endGeometryInstruction);
	    };
	    /**
	     * Get the buffered rendering extent.  Rendering will be clipped to the extent
	     * provided to the constructor.  To account for symbolizers that may intersect
	     * this extent, we calculate a buffered extent (e.g. based on stroke width).
	     * @return {import("../../extent.js").Extent} The buffered rendering extent.
	     * @protected
	     */
	    CanvasBuilder.prototype.getBufferedMaxExtent = function () {
	        if (!this.bufferedMaxExtent_) {
	            this.bufferedMaxExtent_ = clone(this.maxExtent);
	            if (this.maxLineWidth > 0) {
	                var width = this.resolution * (this.maxLineWidth + 1) / 2;
	                buffer(this.bufferedMaxExtent_, width, this.bufferedMaxExtent_);
	            }
	        }
	        return this.bufferedMaxExtent_;
	    };
	    return CanvasBuilder;
	}(VectorContext));

	var __extends$m = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var CanvasImageBuilder = /** @class */ (function (_super) {
	    __extends$m(CanvasImageBuilder, _super);
	    /**
	     * @param {number} tolerance Tolerance.
	     * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
	     * @param {number} resolution Resolution.
	     * @param {number} pixelRatio Pixel ratio.
	     */
	    function CanvasImageBuilder(tolerance, maxExtent, resolution, pixelRatio) {
	        var _this = _super.call(this, tolerance, maxExtent, resolution, pixelRatio) || this;
	        /**
	         * @private
	         * @type {import("../canvas.js").DeclutterGroups}
	         */
	        _this.declutterGroups_ = null;
	        /**
	         * @private
	         * @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement}
	         */
	        _this.hitDetectionImage_ = null;
	        /**
	         * @private
	         * @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement}
	         */
	        _this.image_ = null;
	        /**
	         * @private
	         * @type {number|undefined}
	         */
	        _this.anchorX_ = undefined;
	        /**
	         * @private
	         * @type {number|undefined}
	         */
	        _this.anchorY_ = undefined;
	        /**
	         * @private
	         * @type {number|undefined}
	         */
	        _this.height_ = undefined;
	        /**
	         * @private
	         * @type {number|undefined}
	         */
	        _this.opacity_ = undefined;
	        /**
	         * @private
	         * @type {number|undefined}
	         */
	        _this.originX_ = undefined;
	        /**
	         * @private
	         * @type {number|undefined}
	         */
	        _this.originY_ = undefined;
	        /**
	         * @private
	         * @type {boolean|undefined}
	         */
	        _this.rotateWithView_ = undefined;
	        /**
	         * @private
	         * @type {number|undefined}
	         */
	        _this.rotation_ = undefined;
	        /**
	         * @private
	         * @type {number|undefined}
	         */
	        _this.scale_ = undefined;
	        /**
	         * @private
	         * @type {number|undefined}
	         */
	        _this.width_ = undefined;
	        return _this;
	    }
	    /**
	     * @param {Array<number>} flatCoordinates Flat coordinates.
	     * @param {number} offset Offset.
	     * @param {number} end End.
	     * @param {number} stride Stride.
	     * @private
	     * @return {number} My end.
	     */
	    CanvasImageBuilder.prototype.drawCoordinates_ = function (flatCoordinates, offset, end, stride) {
	        return this.appendFlatCoordinates(flatCoordinates, offset, end, stride, false, false);
	    };
	    /**
	     * @inheritDoc
	     */
	    CanvasImageBuilder.prototype.drawPoint = function (pointGeometry, feature) {
	        if (!this.image_) {
	            return;
	        }
	        this.beginGeometry(pointGeometry, feature);
	        var flatCoordinates = pointGeometry.getFlatCoordinates();
	        var stride = pointGeometry.getStride();
	        var myBegin = this.coordinates.length;
	        var myEnd = this.drawCoordinates_(flatCoordinates, 0, flatCoordinates.length, stride);
	        this.instructions.push([
	            Instruction.DRAW_IMAGE, myBegin, myEnd, this.image_,
	            // Remaining arguments to DRAW_IMAGE are in alphabetical order
	            this.anchorX_, this.anchorY_, this.declutterGroups_, this.height_, this.opacity_,
	            this.originX_, this.originY_, this.rotateWithView_, this.rotation_,
	            this.scale_ * this.pixelRatio, this.width_
	        ]);
	        this.hitDetectionInstructions.push([
	            Instruction.DRAW_IMAGE, myBegin, myEnd, this.hitDetectionImage_,
	            // Remaining arguments to DRAW_IMAGE are in alphabetical order
	            this.anchorX_, this.anchorY_, this.declutterGroups_, this.height_, this.opacity_,
	            this.originX_, this.originY_, this.rotateWithView_, this.rotation_,
	            this.scale_, this.width_
	        ]);
	        this.endGeometry(feature);
	    };
	    /**
	     * @inheritDoc
	     */
	    CanvasImageBuilder.prototype.drawMultiPoint = function (multiPointGeometry, feature) {
	        if (!this.image_) {
	            return;
	        }
	        this.beginGeometry(multiPointGeometry, feature);
	        var flatCoordinates = multiPointGeometry.getFlatCoordinates();
	        var stride = multiPointGeometry.getStride();
	        var myBegin = this.coordinates.length;
	        var myEnd = this.drawCoordinates_(flatCoordinates, 0, flatCoordinates.length, stride);
	        this.instructions.push([
	            Instruction.DRAW_IMAGE, myBegin, myEnd, this.image_,
	            // Remaining arguments to DRAW_IMAGE are in alphabetical order
	            this.anchorX_, this.anchorY_, this.declutterGroups_, this.height_, this.opacity_,
	            this.originX_, this.originY_, this.rotateWithView_, this.rotation_,
	            this.scale_ * this.pixelRatio, this.width_
	        ]);
	        this.hitDetectionInstructions.push([
	            Instruction.DRAW_IMAGE, myBegin, myEnd, this.hitDetectionImage_,
	            // Remaining arguments to DRAW_IMAGE are in alphabetical order
	            this.anchorX_, this.anchorY_, this.declutterGroups_, this.height_, this.opacity_,
	            this.originX_, this.originY_, this.rotateWithView_, this.rotation_,
	            this.scale_, this.width_
	        ]);
	        this.endGeometry(feature);
	    };
	    /**
	     * @inheritDoc
	     */
	    CanvasImageBuilder.prototype.finish = function () {
	        this.reverseHitDetectionInstructions();
	        // FIXME this doesn't really protect us against further calls to draw*Geometry
	        this.anchorX_ = undefined;
	        this.anchorY_ = undefined;
	        this.hitDetectionImage_ = null;
	        this.image_ = null;
	        this.height_ = undefined;
	        this.scale_ = undefined;
	        this.opacity_ = undefined;
	        this.originX_ = undefined;
	        this.originY_ = undefined;
	        this.rotateWithView_ = undefined;
	        this.rotation_ = undefined;
	        this.width_ = undefined;
	        return _super.prototype.finish.call(this);
	    };
	    /**
	     * @inheritDoc
	     */
	    CanvasImageBuilder.prototype.setImageStyle = function (imageStyle, declutterGroups) {
	        var anchor = imageStyle.getAnchor();
	        var size = imageStyle.getSize();
	        var hitDetectionImage = imageStyle.getHitDetectionImage(1);
	        var image = imageStyle.getImage(1);
	        var origin = imageStyle.getOrigin();
	        this.anchorX_ = anchor[0];
	        this.anchorY_ = anchor[1];
	        this.declutterGroups_ = /** @type {import("../canvas.js").DeclutterGroups} */ (declutterGroups);
	        this.hitDetectionImage_ = hitDetectionImage;
	        this.image_ = image;
	        this.height_ = size[1];
	        this.opacity_ = imageStyle.getOpacity();
	        this.originX_ = origin[0];
	        this.originY_ = origin[1];
	        this.rotateWithView_ = imageStyle.getRotateWithView();
	        this.rotation_ = imageStyle.getRotation();
	        this.scale_ = imageStyle.getScale();
	        this.width_ = size[0];
	    };
	    return CanvasImageBuilder;
	}(CanvasBuilder));

	var __extends$n = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var CanvasLineStringBuilder = /** @class */ (function (_super) {
	    __extends$n(CanvasLineStringBuilder, _super);
	    /**
	     * @param {number} tolerance Tolerance.
	     * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
	     * @param {number} resolution Resolution.
	     * @param {number} pixelRatio Pixel ratio.
	     */
	    function CanvasLineStringBuilder(tolerance, maxExtent, resolution, pixelRatio) {
	        return _super.call(this, tolerance, maxExtent, resolution, pixelRatio) || this;
	    }
	    /**
	     * @param {Array<number>} flatCoordinates Flat coordinates.
	     * @param {number} offset Offset.
	     * @param {number} end End.
	     * @param {number} stride Stride.
	     * @private
	     * @return {number} end.
	     */
	    CanvasLineStringBuilder.prototype.drawFlatCoordinates_ = function (flatCoordinates, offset, end, stride) {
	        var myBegin = this.coordinates.length;
	        var myEnd = this.appendFlatCoordinates(flatCoordinates, offset, end, stride, false, false);
	        var moveToLineToInstruction = [Instruction.MOVE_TO_LINE_TO, myBegin, myEnd];
	        this.instructions.push(moveToLineToInstruction);
	        this.hitDetectionInstructions.push(moveToLineToInstruction);
	        return end;
	    };
	    /**
	     * @inheritDoc
	     */
	    CanvasLineStringBuilder.prototype.drawLineString = function (lineStringGeometry, feature) {
	        var state = this.state;
	        var strokeStyle = state.strokeStyle;
	        var lineWidth = state.lineWidth;
	        if (strokeStyle === undefined || lineWidth === undefined) {
	            return;
	        }
	        this.updateStrokeStyle(state, this.applyStroke);
	        this.beginGeometry(lineStringGeometry, feature);
	        this.hitDetectionInstructions.push([
	            Instruction.SET_STROKE_STYLE,
	            state.strokeStyle, state.lineWidth, state.lineCap, state.lineJoin,
	            state.miterLimit, state.lineDash, state.lineDashOffset
	        ], beginPathInstruction);
	        var flatCoordinates = lineStringGeometry.getFlatCoordinates();
	        var stride = lineStringGeometry.getStride();
	        this.drawFlatCoordinates_(flatCoordinates, 0, flatCoordinates.length, stride);
	        this.hitDetectionInstructions.push(strokeInstruction);
	        this.endGeometry(feature);
	    };
	    /**
	     * @inheritDoc
	     */
	    CanvasLineStringBuilder.prototype.drawMultiLineString = function (multiLineStringGeometry, feature) {
	        var state = this.state;
	        var strokeStyle = state.strokeStyle;
	        var lineWidth = state.lineWidth;
	        if (strokeStyle === undefined || lineWidth === undefined) {
	            return;
	        }
	        this.updateStrokeStyle(state, this.applyStroke);
	        this.beginGeometry(multiLineStringGeometry, feature);
	        this.hitDetectionInstructions.push([
	            Instruction.SET_STROKE_STYLE,
	            state.strokeStyle, state.lineWidth, state.lineCap, state.lineJoin,
	            state.miterLimit, state.lineDash, state.lineDashOffset
	        ], beginPathInstruction);
	        var ends = multiLineStringGeometry.getEnds();
	        var flatCoordinates = multiLineStringGeometry.getFlatCoordinates();
	        var stride = multiLineStringGeometry.getStride();
	        var offset = 0;
	        for (var i = 0, ii = ends.length; i < ii; ++i) {
	            offset = this.drawFlatCoordinates_(flatCoordinates, offset, ends[i], stride);
	        }
	        this.hitDetectionInstructions.push(strokeInstruction);
	        this.endGeometry(feature);
	    };
	    /**
	     * @inheritDoc
	     */
	    CanvasLineStringBuilder.prototype.finish = function () {
	        var state = this.state;
	        if (state.lastStroke != undefined && state.lastStroke != this.coordinates.length) {
	            this.instructions.push(strokeInstruction);
	        }
	        this.reverseHitDetectionInstructions();
	        this.state = null;
	        return _super.prototype.finish.call(this);
	    };
	    /**
	     * @inheritDoc.
	     */
	    CanvasLineStringBuilder.prototype.applyStroke = function (state) {
	        if (state.lastStroke != undefined && state.lastStroke != this.coordinates.length) {
	            this.instructions.push(strokeInstruction);
	            state.lastStroke = this.coordinates.length;
	        }
	        state.lastStroke = 0;
	        _super.prototype.applyStroke.call(this, state);
	        this.instructions.push(beginPathInstruction);
	    };
	    return CanvasLineStringBuilder;
	}(CanvasBuilder));

	var __extends$o = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var CanvasPolygonBuilder = /** @class */ (function (_super) {
	    __extends$o(CanvasPolygonBuilder, _super);
	    /**
	     * @param {number} tolerance Tolerance.
	     * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
	     * @param {number} resolution Resolution.
	     * @param {number} pixelRatio Pixel ratio.
	     */
	    function CanvasPolygonBuilder(tolerance, maxExtent, resolution, pixelRatio) {
	        return _super.call(this, tolerance, maxExtent, resolution, pixelRatio) || this;
	    }
	    /**
	     * @param {Array<number>} flatCoordinates Flat coordinates.
	     * @param {number} offset Offset.
	     * @param {Array<number>} ends Ends.
	     * @param {number} stride Stride.
	     * @private
	     * @return {number} End.
	     */
	    CanvasPolygonBuilder.prototype.drawFlatCoordinatess_ = function (flatCoordinates, offset, ends, stride) {
	        var state = this.state;
	        var fill = state.fillStyle !== undefined;
	        var stroke = state.strokeStyle !== undefined;
	        var numEnds = ends.length;
	        this.instructions.push(beginPathInstruction);
	        this.hitDetectionInstructions.push(beginPathInstruction);
	        for (var i = 0; i < numEnds; ++i) {
	            var end = ends[i];
	            var myBegin = this.coordinates.length;
	            var myEnd = this.appendFlatCoordinates(flatCoordinates, offset, end, stride, true, !stroke);
	            var moveToLineToInstruction = [Instruction.MOVE_TO_LINE_TO, myBegin, myEnd];
	            this.instructions.push(moveToLineToInstruction);
	            this.hitDetectionInstructions.push(moveToLineToInstruction);
	            if (stroke) {
	                // Performance optimization: only call closePath() when we have a stroke.
	                // Otherwise the ring is closed already (see appendFlatCoordinates above).
	                this.instructions.push(closePathInstruction);
	                this.hitDetectionInstructions.push(closePathInstruction);
	            }
	            offset = end;
	        }
	        if (fill) {
	            this.instructions.push(fillInstruction);
	            this.hitDetectionInstructions.push(fillInstruction);
	        }
	        if (stroke) {
	            this.instructions.push(strokeInstruction);
	            this.hitDetectionInstructions.push(strokeInstruction);
	        }
	        return offset;
	    };
	    /**
	     * @inheritDoc
	     */
	    CanvasPolygonBuilder.prototype.drawCircle = function (circleGeometry, feature) {
	        var state = this.state;
	        var fillStyle = state.fillStyle;
	        var strokeStyle = state.strokeStyle;
	        if (fillStyle === undefined && strokeStyle === undefined) {
	            return;
	        }
	        this.setFillStrokeStyles_();
	        this.beginGeometry(circleGeometry, feature);
	        if (state.fillStyle !== undefined) {
	            this.hitDetectionInstructions.push([
	                Instruction.SET_FILL_STYLE,
	                defaultFillStyle
	            ]);
	        }
	        if (state.strokeStyle !== undefined) {
	            this.hitDetectionInstructions.push([
	                Instruction.SET_STROKE_STYLE,
	                state.strokeStyle, state.lineWidth, state.lineCap, state.lineJoin,
	                state.miterLimit, state.lineDash, state.lineDashOffset
	            ]);
	        }
	        var flatCoordinates = circleGeometry.getFlatCoordinates();
	        var stride = circleGeometry.getStride();
	        var myBegin = this.coordinates.length;
	        this.appendFlatCoordinates(flatCoordinates, 0, flatCoordinates.length, stride, false, false);
	        var circleInstruction = [Instruction.CIRCLE, myBegin];
	        this.instructions.push(beginPathInstruction, circleInstruction);
	        this.hitDetectionInstructions.push(beginPathInstruction, circleInstruction);
	        if (state.fillStyle !== undefined) {
	            this.instructions.push(fillInstruction);
	            this.hitDetectionInstructions.push(fillInstruction);
	        }
	        if (state.strokeStyle !== undefined) {
	            this.instructions.push(strokeInstruction);
	            this.hitDetectionInstructions.push(strokeInstruction);
	        }
	        this.endGeometry(feature);
	    };
	    /**
	     * @inheritDoc
	     */
	    CanvasPolygonBuilder.prototype.drawPolygon = function (polygonGeometry, feature) {
	        var state = this.state;
	        var fillStyle = state.fillStyle;
	        var strokeStyle = state.strokeStyle;
	        if (fillStyle === undefined && strokeStyle === undefined) {
	            return;
	        }
	        this.setFillStrokeStyles_();
	        this.beginGeometry(polygonGeometry, feature);
	        if (state.fillStyle !== undefined) {
	            this.hitDetectionInstructions.push([
	                Instruction.SET_FILL_STYLE,
	                defaultFillStyle
	            ]);
	        }
	        if (state.strokeStyle !== undefined) {
	            this.hitDetectionInstructions.push([
	                Instruction.SET_STROKE_STYLE,
	                state.strokeStyle, state.lineWidth, state.lineCap, state.lineJoin,
	                state.miterLimit, state.lineDash, state.lineDashOffset
	            ]);
	        }
	        var ends = polygonGeometry.getEnds();
	        var flatCoordinates = polygonGeometry.getOrientedFlatCoordinates();
	        var stride = polygonGeometry.getStride();
	        this.drawFlatCoordinatess_(flatCoordinates, 0, ends, stride);
	        this.endGeometry(feature);
	    };
	    /**
	     * @inheritDoc
	     */
	    CanvasPolygonBuilder.prototype.drawMultiPolygon = function (multiPolygonGeometry, feature) {
	        var state = this.state;
	        var fillStyle = state.fillStyle;
	        var strokeStyle = state.strokeStyle;
	        if (fillStyle === undefined && strokeStyle === undefined) {
	            return;
	        }
	        this.setFillStrokeStyles_();
	        this.beginGeometry(multiPolygonGeometry, feature);
	        if (state.fillStyle !== undefined) {
	            this.hitDetectionInstructions.push([
	                Instruction.SET_FILL_STYLE,
	                defaultFillStyle
	            ]);
	        }
	        if (state.strokeStyle !== undefined) {
	            this.hitDetectionInstructions.push([
	                Instruction.SET_STROKE_STYLE,
	                state.strokeStyle, state.lineWidth, state.lineCap, state.lineJoin,
	                state.miterLimit, state.lineDash, state.lineDashOffset
	            ]);
	        }
	        var endss = multiPolygonGeometry.getEndss();
	        var flatCoordinates = multiPolygonGeometry.getOrientedFlatCoordinates();
	        var stride = multiPolygonGeometry.getStride();
	        var offset = 0;
	        for (var i = 0, ii = endss.length; i < ii; ++i) {
	            offset = this.drawFlatCoordinatess_(flatCoordinates, offset, endss[i], stride);
	        }
	        this.endGeometry(feature);
	    };
	    /**
	     * @inheritDoc
	     */
	    CanvasPolygonBuilder.prototype.finish = function () {
	        this.reverseHitDetectionInstructions();
	        this.state = null;
	        // We want to preserve topology when drawing polygons.  Polygons are
	        // simplified using quantization and point elimination. However, we might
	        // have received a mix of quantized and non-quantized geometries, so ensure
	        // that all are quantized by quantizing all coordinates in the batch.
	        var tolerance = this.tolerance;
	        if (tolerance !== 0) {
	            var coordinates = this.coordinates;
	            for (var i = 0, ii = coordinates.length; i < ii; ++i) {
	                coordinates[i] = snap(coordinates[i], tolerance);
	            }
	        }
	        return _super.prototype.finish.call(this);
	    };
	    /**
	     * @private
	     */
	    CanvasPolygonBuilder.prototype.setFillStrokeStyles_ = function () {
	        var state = this.state;
	        var fillStyle = state.fillStyle;
	        if (fillStyle !== undefined) {
	            this.updateFillStyle(state, this.createFill);
	        }
	        if (state.strokeStyle !== undefined) {
	            this.updateStrokeStyle(state, this.applyStroke);
	        }
	    };
	    return CanvasPolygonBuilder;
	}(CanvasBuilder));

	/**
	 * @module ol/geom/flat/straightchunk
	 */
	/**
	 * @param {number} maxAngle Maximum acceptable angle delta between segments.
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {number} end End.
	 * @param {number} stride Stride.
	 * @return {Array<number>} Start and end of the first suitable chunk of the
	 * given `flatCoordinates`.
	 */
	function matchingChunk(maxAngle, flatCoordinates, offset, end, stride) {
	    var chunkStart = offset;
	    var chunkEnd = offset;
	    var chunkM = 0;
	    var m = 0;
	    var start = offset;
	    var acos, i, m12, m23, x1, y1, x12, y12, x23, y23;
	    for (i = offset; i < end; i += stride) {
	        var x2 = flatCoordinates[i];
	        var y2 = flatCoordinates[i + 1];
	        if (x1 !== undefined) {
	            x23 = x2 - x1;
	            y23 = y2 - y1;
	            m23 = Math.sqrt(x23 * x23 + y23 * y23);
	            if (x12 !== undefined) {
	                m += m12;
	                acos = Math.acos((x12 * x23 + y12 * y23) / (m12 * m23));
	                if (acos > maxAngle) {
	                    if (m > chunkM) {
	                        chunkM = m;
	                        chunkStart = start;
	                        chunkEnd = i;
	                    }
	                    m = 0;
	                    start = i - stride;
	                }
	            }
	            m12 = m23;
	            x12 = x23;
	            y12 = y23;
	        }
	        x1 = x2;
	        y1 = y2;
	    }
	    m += m23;
	    return m > chunkM ? [start, i] : [chunkStart, chunkEnd];
	}

	/**
	 * @module ol/style/TextPlacement
	 */
	/**
	 * Text placement. One of `'point'`, `'line'`. Default is `'point'`. Note that
	 * `'line'` requires the underlying geometry to be a {@link module:ol/geom/LineString~LineString},
	 * {@link module:ol/geom/Polygon~Polygon}, {@link module:ol/geom/MultiLineString~MultiLineString} or
	 * {@link module:ol/geom/MultiPolygon~MultiPolygon}.
	 * @enum {string}
	 */
	var TextPlacement = {
	    POINT: 'point',
	    LINE: 'line'
	};

	var __extends$p = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @const
	 * @enum {number}
	 */
	var TEXT_ALIGN = {
	    'left': 0,
	    'end': 0,
	    'center': 0.5,
	    'right': 1,
	    'start': 1,
	    'top': 0,
	    'middle': 0.5,
	    'hanging': 0.2,
	    'alphabetic': 0.8,
	    'ideographic': 0.8,
	    'bottom': 1
	};
	var CanvasTextBuilder = /** @class */ (function (_super) {
	    __extends$p(CanvasTextBuilder, _super);
	    /**
	     * @param {number} tolerance Tolerance.
	     * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
	     * @param {number} resolution Resolution.
	     * @param {number} pixelRatio Pixel ratio.
	     */
	    function CanvasTextBuilder(tolerance, maxExtent, resolution, pixelRatio) {
	        var _this = _super.call(this, tolerance, maxExtent, resolution, pixelRatio) || this;
	        /**
	         * @private
	         * @type {import("../canvas.js").DeclutterGroups}
	         */
	        _this.declutterGroups_;
	        /**
	         * @private
	         * @type {Array<HTMLCanvasElement>}
	         */
	        _this.labels_ = null;
	        /**
	         * @private
	         * @type {string}
	         */
	        _this.text_ = '';
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.textOffsetX_ = 0;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.textOffsetY_ = 0;
	        /**
	         * @private
	         * @type {boolean|undefined}
	         */
	        _this.textRotateWithView_ = undefined;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.textRotation_ = 0;
	        /**
	         * @private
	         * @type {?import("../canvas.js").FillState}
	         */
	        _this.textFillState_ = null;
	        /**
	         * @type {!Object<string, import("../canvas.js").FillState>}
	         */
	        _this.fillStates = {};
	        /**
	         * @private
	         * @type {?import("../canvas.js").StrokeState}
	         */
	        _this.textStrokeState_ = null;
	        /**
	         * @type {!Object<string, import("../canvas.js").StrokeState>}
	         */
	        _this.strokeStates = {};
	        /**
	         * @private
	         * @type {import("../canvas.js").TextState}
	         */
	        _this.textState_ = /** @type {import("../canvas.js").TextState} */ ({});
	        /**
	         * @type {!Object<string, import("../canvas.js").TextState>}
	         */
	        _this.textStates = {};
	        /**
	         * @private
	         * @type {string}
	         */
	        _this.textKey_ = '';
	        /**
	         * @private
	         * @type {string}
	         */
	        _this.fillKey_ = '';
	        /**
	         * @private
	         * @type {string}
	         */
	        _this.strokeKey_ = '';
	        labelCache.prune();
	        return _this;
	    }
	    /**
	     * @inheritDoc
	     */
	    CanvasTextBuilder.prototype.finish = function () {
	        var instructions = _super.prototype.finish.call(this);
	        instructions.textStates = this.textStates;
	        instructions.fillStates = this.fillStates;
	        instructions.strokeStates = this.strokeStates;
	        return instructions;
	    };
	    /**
	     * @inheritDoc
	     */
	    CanvasTextBuilder.prototype.drawText = function (geometry, feature) {
	        var fillState = this.textFillState_;
	        var strokeState = this.textStrokeState_;
	        var textState = this.textState_;
	        if (this.text_ === '' || !textState || (!fillState && !strokeState)) {
	            return;
	        }
	        var begin = this.coordinates.length;
	        var geometryType = geometry.getType();
	        var flatCoordinates = null;
	        var end = 2;
	        var stride = 2;
	        var i, ii;
	        if (textState.placement === TextPlacement.LINE) {
	            if (!intersects(this.getBufferedMaxExtent(), geometry.getExtent())) {
	                return;
	            }
	            var ends = void 0;
	            flatCoordinates = geometry.getFlatCoordinates();
	            stride = geometry.getStride();
	            if (geometryType == GeometryType.LINE_STRING) {
	                ends = [flatCoordinates.length];
	            }
	            else if (geometryType == GeometryType.MULTI_LINE_STRING) {
	                ends = geometry.getEnds();
	            }
	            else if (geometryType == GeometryType.POLYGON) {
	                ends = geometry.getEnds().slice(0, 1);
	            }
	            else if (geometryType == GeometryType.MULTI_POLYGON) {
	                var endss = geometry.getEndss();
	                ends = [];
	                for (i = 0, ii = endss.length; i < ii; ++i) {
	                    ends.push(endss[i][0]);
	                }
	            }
	            this.beginGeometry(geometry, feature);
	            var textAlign = textState.textAlign;
	            var flatOffset = 0;
	            var flatEnd = void 0;
	            for (var o = 0, oo = ends.length; o < oo; ++o) {
	                if (textAlign == undefined) {
	                    var range = matchingChunk(textState.maxAngle, flatCoordinates, flatOffset, ends[o], stride);
	                    flatOffset = range[0];
	                    flatEnd = range[1];
	                }
	                else {
	                    flatEnd = ends[o];
	                }
	                for (i = flatOffset; i < flatEnd; i += stride) {
	                    this.coordinates.push(flatCoordinates[i], flatCoordinates[i + 1]);
	                }
	                end = this.coordinates.length;
	                flatOffset = ends[o];
	                var declutterGroup = this.declutterGroups_ ?
	                    (o === 0 ? this.declutterGroups_[0] : [].concat(this.declutterGroups_[0])) :
	                    null;
	                this.drawChars_(begin, end, declutterGroup);
	                begin = end;
	            }
	            this.endGeometry(feature);
	        }
	        else {
	            var geometryWidths = null;
	            if (!textState.overflow) {
	                geometryWidths = [];
	            }
	            switch (geometryType) {
	                case GeometryType.POINT:
	                case GeometryType.MULTI_POINT:
	                    flatCoordinates = geometry.getFlatCoordinates();
	                    end = flatCoordinates.length;
	                    break;
	                case GeometryType.LINE_STRING:
	                    flatCoordinates = /** @type {import("../../geom/LineString.js").default} */ (geometry).getFlatMidpoint();
	                    break;
	                case GeometryType.CIRCLE:
	                    flatCoordinates = /** @type {import("../../geom/Circle.js").default} */ (geometry).getCenter();
	                    break;
	                case GeometryType.MULTI_LINE_STRING:
	                    flatCoordinates = /** @type {import("../../geom/MultiLineString.js").default} */ (geometry).getFlatMidpoints();
	                    end = flatCoordinates.length;
	                    break;
	                case GeometryType.POLYGON:
	                    flatCoordinates = /** @type {import("../../geom/Polygon.js").default} */ (geometry).getFlatInteriorPoint();
	                    if (!textState.overflow) {
	                        geometryWidths.push(flatCoordinates[2] / this.resolution);
	                    }
	                    stride = 3;
	                    break;
	                case GeometryType.MULTI_POLYGON:
	                    var interiorPoints = /** @type {import("../../geom/MultiPolygon.js").default} */ (geometry).getFlatInteriorPoints();
	                    flatCoordinates = [];
	                    for (i = 0, ii = interiorPoints.length; i < ii; i += 3) {
	                        if (!textState.overflow) {
	                            geometryWidths.push(interiorPoints[i + 2] / this.resolution);
	                        }
	                        flatCoordinates.push(interiorPoints[i], interiorPoints[i + 1]);
	                    }
	                    end = flatCoordinates.length;
	                    if (end == 0) {
	                        return;
	                    }
	                    break;
	            }
	            end = this.appendFlatCoordinates(flatCoordinates, 0, end, stride, false, false);
	            this.saveTextStates_();
	            if (textState.backgroundFill || textState.backgroundStroke) {
	                this.setFillStrokeStyle(textState.backgroundFill, textState.backgroundStroke);
	                if (textState.backgroundFill) {
	                    this.updateFillStyle(this.state, this.createFill);
	                    this.hitDetectionInstructions.push(this.createFill(this.state));
	                }
	                if (textState.backgroundStroke) {
	                    this.updateStrokeStyle(this.state, this.applyStroke);
	                    this.hitDetectionInstructions.push(this.createStroke(this.state));
	                }
	            }
	            this.beginGeometry(geometry, feature);
	            // The image is unknown at this stage so we pass null; it will be computed at render time.
	            // For clarity, we pass NaN for offsetX, offsetY, width and height, which will be computed at
	            // render time.
	            var pixelRatio_1 = this.pixelRatio;
	            this.instructions.push([Instruction.DRAW_IMAGE, begin, end,
	                null, NaN, NaN, this.declutterGroups_, NaN, 1, 0, 0,
	                this.textRotateWithView_, this.textRotation_, 1, NaN,
	                textState.padding == defaultPadding ?
	                    defaultPadding : textState.padding.map(function (p) {
	                    return p * pixelRatio_1;
	                }),
	                !!textState.backgroundFill, !!textState.backgroundStroke,
	                this.text_, this.textKey_, this.strokeKey_, this.fillKey_,
	                this.textOffsetX_, this.textOffsetY_, geometryWidths
	            ]);
	            this.hitDetectionInstructions.push([Instruction.DRAW_IMAGE, begin, end,
	                null, NaN, NaN, this.declutterGroups_, NaN, 1, 0, 0,
	                this.textRotateWithView_, this.textRotation_, 1 / this.pixelRatio, NaN,
	                textState.padding,
	                !!textState.backgroundFill, !!textState.backgroundStroke,
	                this.text_, this.textKey_, this.strokeKey_, this.fillKey_,
	                this.textOffsetX_, this.textOffsetY_, geometryWidths
	            ]);
	            this.endGeometry(feature);
	        }
	    };
	    /**
	     * @private
	     */
	    CanvasTextBuilder.prototype.saveTextStates_ = function () {
	        var strokeState = this.textStrokeState_;
	        var textState = this.textState_;
	        var fillState = this.textFillState_;
	        var strokeKey = this.strokeKey_;
	        if (strokeState) {
	            if (!(strokeKey in this.strokeStates)) {
	                this.strokeStates[strokeKey] = {
	                    strokeStyle: strokeState.strokeStyle,
	                    lineCap: strokeState.lineCap,
	                    lineDashOffset: strokeState.lineDashOffset,
	                    lineWidth: strokeState.lineWidth,
	                    lineJoin: strokeState.lineJoin,
	                    miterLimit: strokeState.miterLimit,
	                    lineDash: strokeState.lineDash
	                };
	            }
	        }
	        var textKey = this.textKey_;
	        if (!(textKey in this.textStates)) {
	            this.textStates[textKey] = {
	                font: textState.font,
	                textAlign: textState.textAlign || defaultTextAlign,
	                textBaseline: textState.textBaseline || defaultTextBaseline,
	                scale: textState.scale
	            };
	        }
	        var fillKey = this.fillKey_;
	        if (fillState) {
	            if (!(fillKey in this.fillStates)) {
	                this.fillStates[fillKey] = {
	                    fillStyle: fillState.fillStyle
	                };
	            }
	        }
	    };
	    /**
	     * @private
	     * @param {number} begin Begin.
	     * @param {number} end End.
	     * @param {import("../canvas.js").DeclutterGroup} declutterGroup Declutter group.
	     */
	    CanvasTextBuilder.prototype.drawChars_ = function (begin, end, declutterGroup) {
	        var strokeState = this.textStrokeState_;
	        var textState = this.textState_;
	        var strokeKey = this.strokeKey_;
	        var textKey = this.textKey_;
	        var fillKey = this.fillKey_;
	        this.saveTextStates_();
	        var pixelRatio = this.pixelRatio;
	        var baseline = TEXT_ALIGN[textState.textBaseline];
	        var offsetY = this.textOffsetY_ * pixelRatio;
	        var text = this.text_;
	        var textScale = textState.scale;
	        var strokeWidth = strokeState ? strokeState.lineWidth * textScale / 2 : 0;
	        this.instructions.push([Instruction.DRAW_CHARS,
	            begin, end, baseline, declutterGroup,
	            textState.overflow, fillKey, textState.maxAngle,
	            pixelRatio,
	            offsetY, strokeKey, strokeWidth * pixelRatio, text, textKey, 1
	        ]);
	        this.hitDetectionInstructions.push([Instruction.DRAW_CHARS,
	            begin, end, baseline, declutterGroup,
	            textState.overflow, fillKey, textState.maxAngle,
	            1,
	            offsetY, strokeKey, strokeWidth, text, textKey, 1 / pixelRatio
	        ]);
	    };
	    /**
	     * @inheritDoc
	     */
	    CanvasTextBuilder.prototype.setTextStyle = function (textStyle, declutterGroups) {
	        var textState, fillState, strokeState;
	        if (!textStyle) {
	            this.text_ = '';
	        }
	        else {
	            this.declutterGroups_ = /** @type {import("../canvas.js").DeclutterGroups} */ (declutterGroups);
	            var textFillStyle = textStyle.getFill();
	            if (!textFillStyle) {
	                fillState = null;
	                this.textFillState_ = fillState;
	            }
	            else {
	                fillState = this.textFillState_;
	                if (!fillState) {
	                    fillState = /** @type {import("../canvas.js").FillState} */ ({});
	                    this.textFillState_ = fillState;
	                }
	                fillState.fillStyle = asColorLike(textFillStyle.getColor() || defaultFillStyle);
	            }
	            var textStrokeStyle = textStyle.getStroke();
	            if (!textStrokeStyle) {
	                strokeState = null;
	                this.textStrokeState_ = strokeState;
	            }
	            else {
	                strokeState = this.textStrokeState_;
	                if (!strokeState) {
	                    strokeState = /** @type {import("../canvas.js").StrokeState} */ ({});
	                    this.textStrokeState_ = strokeState;
	                }
	                var lineDash = textStrokeStyle.getLineDash();
	                var lineDashOffset = textStrokeStyle.getLineDashOffset();
	                var lineWidth = textStrokeStyle.getWidth();
	                var miterLimit = textStrokeStyle.getMiterLimit();
	                strokeState.lineCap = textStrokeStyle.getLineCap() || defaultLineCap;
	                strokeState.lineDash = lineDash ? lineDash.slice() : defaultLineDash;
	                strokeState.lineDashOffset =
	                    lineDashOffset === undefined ? defaultLineDashOffset : lineDashOffset;
	                strokeState.lineJoin = textStrokeStyle.getLineJoin() || defaultLineJoin;
	                strokeState.lineWidth =
	                    lineWidth === undefined ? defaultLineWidth : lineWidth;
	                strokeState.miterLimit =
	                    miterLimit === undefined ? defaultMiterLimit : miterLimit;
	                strokeState.strokeStyle = asColorLike(textStrokeStyle.getColor() || defaultStrokeStyle);
	            }
	            textState = this.textState_;
	            var font = textStyle.getFont() || defaultFont;
	            checkFont(font);
	            var textScale = textStyle.getScale();
	            textState.overflow = textStyle.getOverflow();
	            textState.font = font;
	            textState.maxAngle = textStyle.getMaxAngle();
	            textState.placement = textStyle.getPlacement();
	            textState.textAlign = textStyle.getTextAlign();
	            textState.textBaseline = textStyle.getTextBaseline() || defaultTextBaseline;
	            textState.backgroundFill = textStyle.getBackgroundFill();
	            textState.backgroundStroke = textStyle.getBackgroundStroke();
	            textState.padding = textStyle.getPadding() || defaultPadding;
	            textState.scale = textScale === undefined ? 1 : textScale;
	            var textOffsetX = textStyle.getOffsetX();
	            var textOffsetY = textStyle.getOffsetY();
	            var textRotateWithView = textStyle.getRotateWithView();
	            var textRotation = textStyle.getRotation();
	            this.text_ = textStyle.getText() || '';
	            this.textOffsetX_ = textOffsetX === undefined ? 0 : textOffsetX;
	            this.textOffsetY_ = textOffsetY === undefined ? 0 : textOffsetY;
	            this.textRotateWithView_ = textRotateWithView === undefined ? false : textRotateWithView;
	            this.textRotation_ = textRotation === undefined ? 0 : textRotation;
	            this.strokeKey_ = strokeState ?
	                (typeof strokeState.strokeStyle == 'string' ? strokeState.strokeStyle : getUid(strokeState.strokeStyle)) +
	                    strokeState.lineCap + strokeState.lineDashOffset + '|' + strokeState.lineWidth +
	                    strokeState.lineJoin + strokeState.miterLimit + '[' + strokeState.lineDash.join() + ']' :
	                '';
	            this.textKey_ = textState.font + textState.scale + (textState.textAlign || '?');
	            this.fillKey_ = fillState ?
	                (typeof fillState.fillStyle == 'string' ? fillState.fillStyle : ('|' + getUid(fillState.fillStyle))) :
	                '';
	        }
	    };
	    return CanvasTextBuilder;
	}(CanvasBuilder));

	/**
	 * @module ol/render/canvas/BuilderGroup
	 */
	/**
	 * @type {Object<import("./BuilderType").default, typeof Builder>}
	 */
	var BATCH_CONSTRUCTORS = {
	    'Circle': CanvasPolygonBuilder,
	    'Default': CanvasBuilder,
	    'Image': CanvasImageBuilder,
	    'LineString': CanvasLineStringBuilder,
	    'Polygon': CanvasPolygonBuilder,
	    'Text': CanvasTextBuilder
	};
	var BuilderGroup = /** @class */ (function () {
	    /**
	     * @param {number} tolerance Tolerance.
	     * @param {import("../../extent.js").Extent} maxExtent Max extent.
	     * @param {number} resolution Resolution.
	     * @param {number} pixelRatio Pixel ratio.
	     * @param {boolean} declutter Decluttering enabled.
	     */
	    function BuilderGroup(tolerance, maxExtent, resolution, pixelRatio, declutter) {
	        /**
	         * @type {boolean}
	         * @private
	         */
	        this.declutter_ = declutter;
	        /**
	         * @type {import("../canvas.js").DeclutterGroups}
	         * @private
	         */
	        this.declutterGroups_ = null;
	        /**
	         * @private
	         * @type {number}
	         */
	        this.tolerance_ = tolerance;
	        /**
	         * @private
	         * @type {import("../../extent.js").Extent}
	         */
	        this.maxExtent_ = maxExtent;
	        /**
	         * @private
	         * @type {number}
	         */
	        this.pixelRatio_ = pixelRatio;
	        /**
	         * @private
	         * @type {number}
	         */
	        this.resolution_ = resolution;
	        /**
	         * @private
	         * @type {!Object<string, !Object<import("./BuilderType").default, Builder>>}
	         */
	        this.buildersByZIndex_ = {};
	    }
	    /**
	     * @param {boolean} group Group with previous builder.
	     * @return {import("../canvas").DeclutterGroups} The resulting instruction groups.
	     */
	    BuilderGroup.prototype.addDeclutter = function (group) {
	        var declutter = null;
	        if (this.declutter_) {
	            if (group) {
	                declutter = this.declutterGroups_;
	                /** @type {number} */ (declutter[0][4])++;
	            }
	            else {
	                declutter = [createEmpty()];
	                this.declutterGroups_ = declutter;
	                declutter[0].push(1);
	            }
	        }
	        return declutter;
	    };
	    /**
	     * @return {!Object<string, !Object<import("./BuilderType").default, import("./Builder.js").SerializableInstructions>>} The serializable instructions
	     */
	    BuilderGroup.prototype.finish = function () {
	        var builderInstructions = {};
	        for (var zKey in this.buildersByZIndex_) {
	            builderInstructions[zKey] = builderInstructions[zKey] || {};
	            var builders = this.buildersByZIndex_[zKey];
	            for (var builderKey in builders) {
	                var builderInstruction = builders[builderKey].finish();
	                builderInstructions[zKey][builderKey] = builderInstruction;
	            }
	        }
	        return builderInstructions;
	    };
	    /**
	     * @param {number|undefined} zIndex Z index.
	     * @param {import("./BuilderType.js").default} builderType Replay type.
	     * @return {import("../VectorContext.js").default} Replay.
	     */
	    BuilderGroup.prototype.getBuilder = function (zIndex, builderType) {
	        var zIndexKey = zIndex !== undefined ? zIndex.toString() : '0';
	        var replays = this.buildersByZIndex_[zIndexKey];
	        if (replays === undefined) {
	            replays = {};
	            this.buildersByZIndex_[zIndexKey] = replays;
	        }
	        var replay = replays[builderType];
	        if (replay === undefined) {
	            var Constructor = BATCH_CONSTRUCTORS[builderType];
	            replay = new Constructor(this.tolerance_, this.maxExtent_, this.resolution_, this.pixelRatio_);
	            replays[builderType] = replay;
	        }
	        return replay;
	    };
	    return BuilderGroup;
	}());

	/**
	 * @module ol/render/canvas/BuilderType
	 */
	/**
	 * @enum {string}
	 */
	var ReplayType = {
	    CIRCLE: 'Circle',
	    DEFAULT: 'Default',
	    IMAGE: 'Image',
	    LINE_STRING: 'LineString',
	    POLYGON: 'Polygon',
	    TEXT: 'Text'
	};

	/**
	 * @module ol/geom/flat/length
	 */
	/**
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {number} end End.
	 * @param {number} stride Stride.
	 * @return {number} Length.
	 */
	function lineStringLength(flatCoordinates, offset, end, stride) {
	    var x1 = flatCoordinates[offset];
	    var y1 = flatCoordinates[offset + 1];
	    var length = 0;
	    for (var i = offset + stride; i < end; i += stride) {
	        var x2 = flatCoordinates[i];
	        var y2 = flatCoordinates[i + 1];
	        length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
	        x1 = x2;
	        y1 = y2;
	    }
	    return length;
	}

	/**
	 * @module ol/geom/flat/textpath
	 */
	/**
	 * @param {Array<number>} flatCoordinates Path to put text on.
	 * @param {number} offset Start offset of the `flatCoordinates`.
	 * @param {number} end End offset of the `flatCoordinates`.
	 * @param {number} stride Stride.
	 * @param {string} text Text to place on the path.
	 * @param {number} startM m along the path where the text starts.
	 * @param {number} maxAngle Max angle between adjacent chars in radians.
	 * @param {number} scale The product of the text scale and the device pixel ratio.
	 * @param {function(string, string, Object<string, number>):number} measureAndCacheTextWidth Measure and cache text width.
	 * @param {string} font The font.
	 * @param {Object<string, number>} cache A cache of measured widths.
	 * @return {Array<Array<*>>} The result array (or null if `maxAngle` was
	 * exceeded). Entries of the array are x, y, anchorX, angle, chunk.
	 */
	function drawTextOnPath(flatCoordinates, offset, end, stride, text, startM, maxAngle, scale, measureAndCacheTextWidth, font, cache) {
	    var result = [];
	    // Keep text upright
	    var reverse = flatCoordinates[offset] > flatCoordinates[end - stride];
	    var numChars = text.length;
	    var x1 = flatCoordinates[offset];
	    var y1 = flatCoordinates[offset + 1];
	    offset += stride;
	    var x2 = flatCoordinates[offset];
	    var y2 = flatCoordinates[offset + 1];
	    var segmentM = 0;
	    var segmentLength = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
	    var angleChanged = false;
	    var index, previousAngle;
	    for (var i = 0; i < numChars; ++i) {
	        index = reverse ? numChars - i - 1 : i;
	        var char = text[index];
	        var charLength = scale * measureAndCacheTextWidth(font, char, cache);
	        var charM = startM + charLength / 2;
	        while (offset < end - stride && segmentM + segmentLength < charM) {
	            x1 = x2;
	            y1 = y2;
	            offset += stride;
	            x2 = flatCoordinates[offset];
	            y2 = flatCoordinates[offset + 1];
	            segmentM += segmentLength;
	            segmentLength = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
	        }
	        var segmentPos = charM - segmentM;
	        var angle = Math.atan2(y2 - y1, x2 - x1);
	        if (reverse) {
	            angle += angle > 0 ? -Math.PI : Math.PI;
	        }
	        if (previousAngle !== undefined) {
	            var delta = angle - previousAngle;
	            angleChanged = angleChanged || delta !== 0;
	            delta += (delta > Math.PI) ? -2 * Math.PI : (delta < -Math.PI) ? 2 * Math.PI : 0;
	            if (Math.abs(delta) > maxAngle) {
	                return null;
	            }
	        }
	        previousAngle = angle;
	        var interpolate = segmentPos / segmentLength;
	        var x = lerp(x1, x2, interpolate);
	        var y = lerp(y1, y2, interpolate);
	        result[index] = [x, y, charLength / 2, angle, char];
	        startM += charLength;
	    }
	    return angleChanged ? result : [[result[0][0], result[0][1], result[0][2], result[0][3], text]];
	}

	var rbush_min = createCommonjsModule(function (module, exports) {
	!function(t,i){module.exports=i();}(commonjsGlobal,function(){function t(t,r,e,a,h){!function t(n,r,e,a,h){for(;a>e;){if(a-e>600){var o=a-e+1,s=r-e+1,l=Math.log(o),f=.5*Math.exp(2*l/3),u=.5*Math.sqrt(l*f*(o-f)/o)*(s-o/2<0?-1:1),m=Math.max(e,Math.floor(r-s*f/o+u)),c=Math.min(a,Math.floor(r+(o-s)*f/o+u));t(n,r,m,c,h);}var p=n[r],d=e,x=a;for(i(n,e,r),h(n[a],p)>0&&i(n,e,a);d<x;){for(i(n,d,x),d++,x--;h(n[d],p)<0;)d++;for(;h(n[x],p)>0;)x--;}0===h(n[e],p)?i(n,e,x):i(n,++x,a),x<=r&&(e=x+1),r<=x&&(a=x-1);}}(t,r,e||0,a||t.length-1,h||n);}function i(t,i,n){var r=t[i];t[i]=t[n],t[n]=r;}function n(t,i){return t<i?-1:t>i?1:0}var r=function(t){void 0===t&&(t=9),this._maxEntries=Math.max(4,t),this._minEntries=Math.max(2,Math.ceil(.4*this._maxEntries)),this.clear();};function e(t,i,n){if(!n)return i.indexOf(t);for(var r=0;r<i.length;r++)if(n(t,i[r]))return r;return -1}function a(t,i){h(t,0,t.children.length,i,t);}function h(t,i,n,r,e){e||(e=p(null)),e.minX=1/0,e.minY=1/0,e.maxX=-1/0,e.maxY=-1/0;for(var a=i;a<n;a++){var h=t.children[a];o(e,t.leaf?r(h):h);}return e}function o(t,i){return t.minX=Math.min(t.minX,i.minX),t.minY=Math.min(t.minY,i.minY),t.maxX=Math.max(t.maxX,i.maxX),t.maxY=Math.max(t.maxY,i.maxY),t}function s(t,i){return t.minX-i.minX}function l(t,i){return t.minY-i.minY}function f(t){return (t.maxX-t.minX)*(t.maxY-t.minY)}function u(t){return t.maxX-t.minX+(t.maxY-t.minY)}function m(t,i){return t.minX<=i.minX&&t.minY<=i.minY&&i.maxX<=t.maxX&&i.maxY<=t.maxY}function c(t,i){return i.minX<=t.maxX&&i.minY<=t.maxY&&i.maxX>=t.minX&&i.maxY>=t.minY}function p(t){return {children:t,height:1,leaf:!0,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0}}function d(i,n,r,e,a){for(var h=[n,r];h.length;)if(!((r=h.pop())-(n=h.pop())<=e)){var o=n+Math.ceil((r-n)/e/2)*e;t(i,o,n,r,a),h.push(n,o,o,r);}}return r.prototype.all=function(){return this._all(this.data,[])},r.prototype.search=function(t){var i=this.data,n=[];if(!c(t,i))return n;for(var r=this.toBBox,e=[];i;){for(var a=0;a<i.children.length;a++){var h=i.children[a],o=i.leaf?r(h):h;c(t,o)&&(i.leaf?n.push(h):m(t,o)?this._all(h,n):e.push(h));}i=e.pop();}return n},r.prototype.collides=function(t){var i=this.data;if(!c(t,i))return !1;for(var n=[];i;){for(var r=0;r<i.children.length;r++){var e=i.children[r],a=i.leaf?this.toBBox(e):e;if(c(t,a)){if(i.leaf||m(t,a))return !0;n.push(e);}}i=n.pop();}return !1},r.prototype.load=function(t){if(!t||!t.length)return this;if(t.length<this._minEntries){for(var i=0;i<t.length;i++)this.insert(t[i]);return this}var n=this._build(t.slice(),0,t.length-1,0);if(this.data.children.length)if(this.data.height===n.height)this._splitRoot(this.data,n);else{if(this.data.height<n.height){var r=this.data;this.data=n,n=r;}this._insert(n,this.data.height-n.height-1,!0);}else this.data=n;return this},r.prototype.insert=function(t){return t&&this._insert(t,this.data.height-1),this},r.prototype.clear=function(){return this.data=p([]),this},r.prototype.remove=function(t,i){if(!t)return this;for(var n,r,a,h=this.data,o=this.toBBox(t),s=[],l=[];h||s.length;){if(h||(h=s.pop(),r=s[s.length-1],n=l.pop(),a=!0),h.leaf){var f=e(t,h.children,i);if(-1!==f)return h.children.splice(f,1),s.push(h),this._condense(s),this}a||h.leaf||!m(h,o)?r?(n++,h=r.children[n],a=!1):h=null:(s.push(h),l.push(n),n=0,r=h,h=h.children[0]);}return this},r.prototype.toBBox=function(t){return t},r.prototype.compareMinX=function(t,i){return t.minX-i.minX},r.prototype.compareMinY=function(t,i){return t.minY-i.minY},r.prototype.toJSON=function(){return this.data},r.prototype.fromJSON=function(t){return this.data=t,this},r.prototype._all=function(t,i){for(var n=[];t;)t.leaf?i.push.apply(i,t.children):n.push.apply(n,t.children),t=n.pop();return i},r.prototype._build=function(t,i,n,r){var e,h=n-i+1,o=this._maxEntries;if(h<=o)return a(e=p(t.slice(i,n+1)),this.toBBox),e;r||(r=Math.ceil(Math.log(h)/Math.log(o)),o=Math.ceil(h/Math.pow(o,r-1))),(e=p([])).leaf=!1,e.height=r;var s=Math.ceil(h/o),l=s*Math.ceil(Math.sqrt(o));d(t,i,n,l,this.compareMinX);for(var f=i;f<=n;f+=l){var u=Math.min(f+l-1,n);d(t,f,u,s,this.compareMinY);for(var m=f;m<=u;m+=s){var c=Math.min(m+s-1,u);e.children.push(this._build(t,m,c,r-1));}}return a(e,this.toBBox),e},r.prototype._chooseSubtree=function(t,i,n,r){for(;r.push(i),!i.leaf&&r.length-1!==n;){for(var e=1/0,a=1/0,h=void 0,o=0;o<i.children.length;o++){var s=i.children[o],l=f(s),u=(m=t,c=s,(Math.max(c.maxX,m.maxX)-Math.min(c.minX,m.minX))*(Math.max(c.maxY,m.maxY)-Math.min(c.minY,m.minY))-l);u<a?(a=u,e=l<e?l:e,h=s):u===a&&l<e&&(e=l,h=s);}i=h||i.children[0];}var m,c;return i},r.prototype._insert=function(t,i,n){var r=n?t:this.toBBox(t),e=[],a=this._chooseSubtree(r,this.data,i,e);for(a.children.push(t),o(a,r);i>=0&&e[i].children.length>this._maxEntries;)this._split(e,i),i--;this._adjustParentBBoxes(r,e,i);},r.prototype._split=function(t,i){var n=t[i],r=n.children.length,e=this._minEntries;this._chooseSplitAxis(n,e,r);var h=this._chooseSplitIndex(n,e,r),o=p(n.children.splice(h,n.children.length-h));o.height=n.height,o.leaf=n.leaf,a(n,this.toBBox),a(o,this.toBBox),i?t[i-1].children.push(o):this._splitRoot(n,o);},r.prototype._splitRoot=function(t,i){this.data=p([t,i]),this.data.height=t.height+1,this.data.leaf=!1,a(this.data,this.toBBox);},r.prototype._chooseSplitIndex=function(t,i,n){for(var r,e,a,o,s,l,u,m=1/0,c=1/0,p=i;p<=n-i;p++){var d=h(t,0,p,this.toBBox),x=h(t,p,n,this.toBBox),v=(e=d,a=x,o=void 0,s=void 0,l=void 0,u=void 0,o=Math.max(e.minX,a.minX),s=Math.max(e.minY,a.minY),l=Math.min(e.maxX,a.maxX),u=Math.min(e.maxY,a.maxY),Math.max(0,l-o)*Math.max(0,u-s)),M=f(d)+f(x);v<m?(m=v,r=p,c=M<c?M:c):v===m&&M<c&&(c=M,r=p);}return r||n-i},r.prototype._chooseSplitAxis=function(t,i,n){var r=t.leaf?this.compareMinX:s,e=t.leaf?this.compareMinY:l;this._allDistMargin(t,i,n,r)<this._allDistMargin(t,i,n,e)&&t.children.sort(r);},r.prototype._allDistMargin=function(t,i,n,r){t.children.sort(r);for(var e=this.toBBox,a=h(t,0,i,e),s=h(t,n-i,n,e),l=u(a)+u(s),f=i;f<n-i;f++){var m=t.children[f];o(a,t.leaf?e(m):m),l+=u(a);}for(var c=n-i-1;c>=i;c--){var p=t.children[c];o(s,t.leaf?e(p):p),l+=u(s);}return l},r.prototype._adjustParentBBoxes=function(t,i,n){for(var r=n;r>=0;r--)o(i[r],t);},r.prototype._condense=function(t){for(var i=t.length-1,n=void 0;i>=0;i--)0===t[i].children.length?i>0?(n=t[i-1].children).splice(n.indexOf(t[i]),1):this.clear():a(t[i],this.toBBox);},r});
	});

	var __extends$q = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @typedef {Object} SerializableInstructions
	 * @property {Array<*>} instructions The rendering instructions.
	 * @property {Array<*>} hitDetectionInstructions The rendering hit detection instructions.
	 * @property {Array<number>} coordinates The array of all coordinates.
	 * @property {!Object<string, import("../canvas.js").TextState>} textStates The text states (decluttering).
	 * @property {!Object<string, import("../canvas.js").FillState>} fillStates The fill states (decluttering).
	 * @property {!Object<string, import("../canvas.js").StrokeState>} strokeStates The stroke states (decluttering).
	 */
	/**
	 * @type {import("../../extent.js").Extent}
	 */
	var tmpExtent = createEmpty();
	/**
	 * @type {!import("../../transform.js").Transform}
	 */
	var tmpTransform$1 = create();
	/** @type {import("../../coordinate.js").Coordinate} */
	var p1 = [];
	/** @type {import("../../coordinate.js").Coordinate} */
	var p2 = [];
	/** @type {import("../../coordinate.js").Coordinate} */
	var p3 = [];
	/** @type {import("../../coordinate.js").Coordinate} */
	var p4 = [];
	var Executor = /** @class */ (function (_super) {
	    __extends$q(Executor, _super);
	    /**
	     * @param {number} resolution Resolution.
	     * @param {number} pixelRatio Pixel ratio.
	     * @param {boolean} overlaps The replay can have overlapping geometries.
	     * @param {SerializableInstructions} instructions The serializable instructions
	     */
	    function Executor(resolution, pixelRatio, overlaps, instructions) {
	        var _this = _super.call(this) || this;
	        /**
	         * @protected
	         * @type {boolean}
	         */
	        _this.overlaps = overlaps;
	        /**
	         * @protected
	         * @type {number}
	         */
	        _this.pixelRatio = pixelRatio;
	        /**
	         * @protected
	         * @const
	         * @type {number}
	         */
	        _this.resolution = resolution;
	        /**
	         * @private
	         * @type {boolean}
	         */
	        _this.alignFill_;
	        /**
	         * @type {Array<*>}
	         */
	        _this.declutterItems = [];
	        /**
	         * @protected
	         * @type {Array<*>}
	         */
	        _this.instructions = instructions.instructions;
	        /**
	         * @protected
	         * @type {Array<number>}
	         */
	        _this.coordinates = instructions.coordinates;
	        /**
	         * @private
	         * @type {!Object<number,import("../../coordinate.js").Coordinate|Array<import("../../coordinate.js").Coordinate>|Array<Array<import("../../coordinate.js").Coordinate>>>}
	         */
	        _this.coordinateCache_ = {};
	        /**
	         * @private
	         * @type {!import("../../transform.js").Transform}
	         */
	        _this.renderedTransform_ = create();
	        /**
	         * @protected
	         * @type {Array<*>}
	         */
	        _this.hitDetectionInstructions = instructions.hitDetectionInstructions;
	        /**
	         * @private
	         * @type {Array<number>}
	         */
	        _this.pixelCoordinates_ = null;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.viewRotation_ = 0;
	        /**
	         * @type {!Object<string, import("../canvas.js").FillState>}
	         */
	        _this.fillStates = instructions.fillStates || {};
	        /**
	         * @type {!Object<string, import("../canvas.js").StrokeState>}
	         */
	        _this.strokeStates = instructions.strokeStates || {};
	        /**
	         * @type {!Object<string, import("../canvas.js").TextState>}
	         */
	        _this.textStates = instructions.textStates || {};
	        /**
	         * @private
	         * @type {Object<string, Object<string, number>>}
	         */
	        _this.widths_ = {};
	        return _this;
	    }
	    /**
	     * @inheritDoc
	     */
	    Executor.prototype.disposeInternal = function () {
	        labelCache.release(this);
	        _super.prototype.disposeInternal.call(this);
	    };
	    /**
	     * @param {string} text Text.
	     * @param {string} textKey Text style key.
	     * @param {string} fillKey Fill style key.
	     * @param {string} strokeKey Stroke style key.
	     * @return {HTMLCanvasElement} Image.
	     */
	    Executor.prototype.getTextImage = function (text, textKey, fillKey, strokeKey) {
	        var label;
	        var key = strokeKey + textKey + text + fillKey + this.pixelRatio;
	        if (!labelCache.containsKey(key)) {
	            var strokeState = strokeKey ? this.strokeStates[strokeKey] : null;
	            var fillState = fillKey ? this.fillStates[fillKey] : null;
	            var textState = this.textStates[textKey];
	            var pixelRatio = this.pixelRatio;
	            var scale = textState.scale * pixelRatio;
	            var align = TEXT_ALIGN[textState.textAlign || defaultTextAlign];
	            var strokeWidth = strokeKey && strokeState.lineWidth ? strokeState.lineWidth : 0;
	            var lines = text.split('\n');
	            var numLines = lines.length;
	            var widths = [];
	            var width = measureTextWidths(textState.font, lines, widths);
	            var lineHeight = measureTextHeight(textState.font);
	            var height = lineHeight * numLines;
	            var renderWidth = width + strokeWidth;
	            var context = createCanvasContext2D(
	            // make canvas 2 pixels wider to account for italic text width measurement errors
	            Math.ceil((renderWidth + 2) * scale), Math.ceil((height + strokeWidth) * scale));
	            label = context.canvas;
	            labelCache.set(key, label);
	            if (scale != 1) {
	                context.scale(scale, scale);
	            }
	            context.font = textState.font;
	            if (strokeKey) {
	                context.strokeStyle = strokeState.strokeStyle;
	                context.lineWidth = strokeWidth;
	                context.lineCap = strokeState.lineCap;
	                context.lineJoin = strokeState.lineJoin;
	                context.miterLimit = strokeState.miterLimit;
	                if (context.setLineDash && strokeState.lineDash.length) {
	                    context.setLineDash(strokeState.lineDash);
	                    context.lineDashOffset = strokeState.lineDashOffset;
	                }
	            }
	            if (fillKey) {
	                context.fillStyle = fillState.fillStyle;
	            }
	            context.textBaseline = 'middle';
	            context.textAlign = 'center';
	            var leftRight = (0.5 - align);
	            var x = align * renderWidth + leftRight * strokeWidth;
	            var i = void 0;
	            if (strokeKey) {
	                for (i = 0; i < numLines; ++i) {
	                    context.strokeText(lines[i], x + leftRight * widths[i], 0.5 * (strokeWidth + lineHeight) + i * lineHeight);
	                }
	            }
	            if (fillKey) {
	                for (i = 0; i < numLines; ++i) {
	                    context.fillText(lines[i], x + leftRight * widths[i], 0.5 * (strokeWidth + lineHeight) + i * lineHeight);
	                }
	            }
	        }
	        return labelCache.get(key, this);
	    };
	    /**
	     * @param {CanvasRenderingContext2D} context Context.
	     * @param {import("../../coordinate.js").Coordinate} p1 1st point of the background box.
	     * @param {import("../../coordinate.js").Coordinate} p2 2nd point of the background box.
	     * @param {import("../../coordinate.js").Coordinate} p3 3rd point of the background box.
	     * @param {import("../../coordinate.js").Coordinate} p4 4th point of the background box.
	     * @param {Array<*>} fillInstruction Fill instruction.
	     * @param {Array<*>} strokeInstruction Stroke instruction.
	     */
	    Executor.prototype.replayTextBackground_ = function (context, p1, p2, p3, p4, fillInstruction, strokeInstruction) {
	        context.beginPath();
	        context.moveTo.apply(context, p1);
	        context.lineTo.apply(context, p2);
	        context.lineTo.apply(context, p3);
	        context.lineTo.apply(context, p4);
	        context.lineTo.apply(context, p1);
	        if (fillInstruction) {
	            this.alignFill_ = /** @type {boolean} */ (fillInstruction[2]);
	            this.fill_(context);
	        }
	        if (strokeInstruction) {
	            this.setStrokeStyle_(context, /** @type {Array<*>} */ (strokeInstruction));
	            context.stroke();
	        }
	    };
	    /**
	     * @param {CanvasRenderingContext2D} context Context.
	     * @param {number} x X.
	     * @param {number} y Y.
	     * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} image Image.
	     * @param {number} anchorX Anchor X.
	     * @param {number} anchorY Anchor Y.
	     * @param {import("../canvas.js").DeclutterGroup} declutterGroup Declutter group.
	     * @param {number} height Height.
	     * @param {number} opacity Opacity.
	     * @param {number} originX Origin X.
	     * @param {number} originY Origin Y.
	     * @param {number} rotation Rotation.
	     * @param {number} scale Scale.
	     * @param {boolean} snapToPixel Snap to pixel.
	     * @param {number} width Width.
	     * @param {Array<number>} padding Padding.
	     * @param {Array<*>} fillInstruction Fill instruction.
	     * @param {Array<*>} strokeInstruction Stroke instruction.
	     */
	    Executor.prototype.replayImage_ = function (context, x, y, image, anchorX, anchorY, declutterGroup, height, opacity, originX, originY, rotation, scale, snapToPixel, width, padding, fillInstruction, strokeInstruction) {
	        var fillStroke = fillInstruction || strokeInstruction;
	        anchorX *= scale;
	        anchorY *= scale;
	        x -= anchorX;
	        y -= anchorY;
	        var w = (width + originX > image.width) ? image.width - originX : width;
	        var h = (height + originY > image.height) ? image.height - originY : height;
	        var boxW = padding[3] + w * scale + padding[1];
	        var boxH = padding[0] + h * scale + padding[2];
	        var boxX = x - padding[3];
	        var boxY = y - padding[0];
	        if (fillStroke || rotation !== 0) {
	            p1[0] = boxX;
	            p4[0] = boxX;
	            p1[1] = boxY;
	            p2[1] = boxY;
	            p2[0] = boxX + boxW;
	            p3[0] = p2[0];
	            p3[1] = boxY + boxH;
	            p4[1] = p3[1];
	        }
	        var transform = null;
	        if (rotation !== 0) {
	            var centerX = x + anchorX;
	            var centerY = y + anchorY;
	            transform = compose(tmpTransform$1, centerX, centerY, 1, 1, rotation, -centerX, -centerY);
	            apply(tmpTransform$1, p1);
	            apply(tmpTransform$1, p2);
	            apply(tmpTransform$1, p3);
	            apply(tmpTransform$1, p4);
	            createOrUpdate(Math.min(p1[0], p2[0], p3[0], p4[0]), Math.min(p1[1], p2[1], p3[1], p4[1]), Math.max(p1[0], p2[0], p3[0], p4[0]), Math.max(p1[1], p2[1], p3[1], p4[1]), tmpExtent);
	        }
	        else {
	            createOrUpdate(boxX, boxY, boxX + boxW, boxY + boxH, tmpExtent);
	        }
	        var canvas = context.canvas;
	        var strokePadding = strokeInstruction ? (strokeInstruction[2] * scale / 2) : 0;
	        var intersects = tmpExtent[0] - strokePadding <= canvas.width && tmpExtent[2] + strokePadding >= 0 &&
	            tmpExtent[1] - strokePadding <= canvas.height && tmpExtent[3] + strokePadding >= 0;
	        if (snapToPixel) {
	            x = Math.round(x);
	            y = Math.round(y);
	        }
	        if (declutterGroup) {
	            if (!intersects && declutterGroup[4] == 1) {
	                return;
	            }
	            extend(declutterGroup, tmpExtent);
	            var declutterArgs = intersects ?
	                [context, transform ? transform.slice(0) : null, opacity, image, originX, originY, w, h, x, y, scale] :
	                null;
	            if (declutterArgs) {
	                if (fillStroke) {
	                    declutterArgs.push(fillInstruction, strokeInstruction, p1, p2, p3, p4);
	                }
	                declutterGroup.push(declutterArgs);
	            }
	        }
	        else if (intersects) {
	            if (fillStroke) {
	                this.replayTextBackground_(context, p1, p2, p3, p4, 
	                /** @type {Array<*>} */ (fillInstruction), 
	                /** @type {Array<*>} */ (strokeInstruction));
	            }
	            drawImage(context, transform, opacity, image, originX, originY, w, h, x, y, scale);
	        }
	    };
	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} context Context.
	     */
	    Executor.prototype.fill_ = function (context) {
	        if (this.alignFill_) {
	            var origin_1 = apply(this.renderedTransform_, [0, 0]);
	            var repeatSize = 512 * this.pixelRatio;
	            context.save();
	            context.translate(origin_1[0] % repeatSize, origin_1[1] % repeatSize);
	            context.rotate(this.viewRotation_);
	        }
	        context.fill();
	        if (this.alignFill_) {
	            context.restore();
	        }
	    };
	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} context Context.
	     * @param {Array<*>} instruction Instruction.
	     */
	    Executor.prototype.setStrokeStyle_ = function (context, instruction) {
	        context.strokeStyle = /** @type {import("../../colorlike.js").ColorLike} */ (instruction[1]);
	        context.lineWidth = /** @type {number} */ (instruction[2]);
	        context.lineCap = /** @type {CanvasLineCap} */ (instruction[3]);
	        context.lineJoin = /** @type {CanvasLineJoin} */ (instruction[4]);
	        context.miterLimit = /** @type {number} */ (instruction[5]);
	        if (context.setLineDash) {
	            context.lineDashOffset = /** @type {number} */ (instruction[7]);
	            context.setLineDash(/** @type {Array<number>} */ (instruction[6]));
	        }
	    };
	    /**
	     * @param {import("../canvas.js").DeclutterGroup} declutterGroup Declutter group.
	     * @param {import("../../Feature.js").FeatureLike} feature Feature.
	     * @param {number} opacity Layer opacity.
	     * @param {?} declutterTree Declutter tree.
	     * @return {?} Declutter tree.
	     */
	    Executor.prototype.renderDeclutter = function (declutterGroup, feature, opacity, declutterTree) {
	        if (declutterGroup && declutterGroup.length > 5) {
	            var groupCount = declutterGroup[4];
	            if (groupCount == 1 || groupCount == declutterGroup.length - 5) {
	                /** @type {import("../../structs/RBush.js").Entry} */
	                var box = {
	                    minX: /** @type {number} */ (declutterGroup[0]),
	                    minY: /** @type {number} */ (declutterGroup[1]),
	                    maxX: /** @type {number} */ (declutterGroup[2]),
	                    maxY: /** @type {number} */ (declutterGroup[3]),
	                    value: feature
	                };
	                if (!declutterTree) {
	                    declutterTree = new rbush_min(9);
	                }
	                if (!declutterTree.collides(box)) {
	                    declutterTree.insert(box);
	                    for (var j = 5, jj = declutterGroup.length; j < jj; ++j) {
	                        var declutterData = /** @type {Array} */ (declutterGroup[j]);
	                        var context = declutterData[0];
	                        var currentAlpha = context.globalAlpha;
	                        if (currentAlpha !== opacity) {
	                            context.globalAlpha = opacity;
	                        }
	                        if (declutterData.length > 11) {
	                            this.replayTextBackground_(declutterData[0], declutterData[13], declutterData[14], declutterData[15], declutterData[16], declutterData[11], declutterData[12]);
	                        }
	                        drawImage.apply(undefined, declutterData);
	                        if (currentAlpha !== opacity) {
	                            context.globalAlpha = currentAlpha;
	                        }
	                    }
	                }
	                declutterGroup.length = 5;
	                createOrUpdateEmpty(declutterGroup);
	            }
	        }
	        return declutterTree;
	    };
	    /**
	     * @private
	     * @param {string} text The text to draw.
	     * @param {string} textKey The key of the text state.
	     * @param {string} strokeKey The key for the stroke state.
	     * @param {string} fillKey The key for the fill state.
	     * @return {{label: HTMLCanvasElement, anchorX: number, anchorY: number}} The text image and its anchor.
	     */
	    Executor.prototype.drawTextImageWithPointPlacement_ = function (text, textKey, strokeKey, fillKey) {
	        var textState = this.textStates[textKey];
	        var label = this.getTextImage(text, textKey, fillKey, strokeKey);
	        var strokeState = this.strokeStates[strokeKey];
	        var pixelRatio = this.pixelRatio;
	        var align = TEXT_ALIGN[textState.textAlign || defaultTextAlign];
	        var baseline = TEXT_ALIGN[textState.textBaseline || defaultTextBaseline];
	        var strokeWidth = strokeState && strokeState.lineWidth ? strokeState.lineWidth : 0;
	        // Remove the 2 pixels we added in getTextImage() for the anchor
	        var width = label.width / pixelRatio - 2 * textState.scale;
	        var anchorX = align * width + 2 * (0.5 - align) * strokeWidth;
	        var anchorY = baseline * label.height / pixelRatio + 2 * (0.5 - baseline) * strokeWidth;
	        return {
	            label: label,
	            anchorX: anchorX,
	            anchorY: anchorY
	        };
	    };
	    /**
	     * @private
	     * @param {CanvasRenderingContext2D} context Context.
	     * @param {import("../../transform.js").Transform} transform Transform.
	     * @param {Array<*>} instructions Instructions array.
	     * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.
	     * @param {function(import("../../Feature.js").FeatureLike): T|undefined} featureCallback Feature callback.
	     * @param {import("../../extent.js").Extent=} opt_hitExtent Only check features that intersect this
	     *     extent.
	     * @return {T|undefined} Callback result.
	     * @template T
	     */
	    Executor.prototype.execute_ = function (context, transform, instructions, snapToPixel, featureCallback, opt_hitExtent) {
	        this.declutterItems.length = 0;
	        /** @type {Array<number>} */
	        var pixelCoordinates;
	        if (this.pixelCoordinates_ && equals$1(transform, this.renderedTransform_)) {
	            pixelCoordinates = this.pixelCoordinates_;
	        }
	        else {
	            if (!this.pixelCoordinates_) {
	                this.pixelCoordinates_ = [];
	            }
	            pixelCoordinates = transform2D(this.coordinates, 0, this.coordinates.length, 2, transform, this.pixelCoordinates_);
	            setFromArray(this.renderedTransform_, transform);
	        }
	        var i = 0; // instruction index
	        var ii = instructions.length; // end of instructions
	        var d = 0; // data index
	        var dd; // end of per-instruction data
	        var anchorX, anchorY, prevX, prevY, roundX, roundY, declutterGroup, declutterGroups, image, text, textKey;
	        var strokeKey, fillKey;
	        var pendingFill = 0;
	        var pendingStroke = 0;
	        var lastFillInstruction = null;
	        var lastStrokeInstruction = null;
	        var coordinateCache = this.coordinateCache_;
	        var viewRotation = this.viewRotation_;
	        var viewRotationFromTransform = Math.round(Math.atan2(-transform[1], transform[0]) * 1e12) / 1e12;
	        var state = /** @type {import("../../render.js").State} */ ({
	            context: context,
	            pixelRatio: this.pixelRatio,
	            resolution: this.resolution,
	            rotation: viewRotation
	        });
	        // When the batch size gets too big, performance decreases. 200 is a good
	        // balance between batch size and number of fill/stroke instructions.
	        var batchSize = this.instructions != instructions || this.overlaps ? 0 : 200;
	        var /** @type {import("../../Feature.js").FeatureLike} */ feature;
	        var x, y;
	        while (i < ii) {
	            var instruction = instructions[i];
	            var type = /** @type {CanvasInstruction} */ (instruction[0]);
	            switch (type) {
	                case Instruction.BEGIN_GEOMETRY:
	                    feature = /** @type {import("../../Feature.js").FeatureLike} */ (instruction[1]);
	                    if (!feature.getGeometry()) {
	                        i = /** @type {number} */ (instruction[2]);
	                    }
	                    else if (opt_hitExtent !== undefined && !intersects(opt_hitExtent, instruction[3])) {
	                        i = /** @type {number} */ (instruction[2]) + 1;
	                    }
	                    else {
	                        ++i;
	                    }
	                    break;
	                case Instruction.BEGIN_PATH:
	                    if (pendingFill > batchSize) {
	                        this.fill_(context);
	                        pendingFill = 0;
	                    }
	                    if (pendingStroke > batchSize) {
	                        context.stroke();
	                        pendingStroke = 0;
	                    }
	                    if (!pendingFill && !pendingStroke) {
	                        context.beginPath();
	                        prevX = NaN;
	                        prevY = NaN;
	                    }
	                    ++i;
	                    break;
	                case Instruction.CIRCLE:
	                    d = /** @type {number} */ (instruction[1]);
	                    var x1 = pixelCoordinates[d];
	                    var y1 = pixelCoordinates[d + 1];
	                    var x2 = pixelCoordinates[d + 2];
	                    var y2 = pixelCoordinates[d + 3];
	                    var dx = x2 - x1;
	                    var dy = y2 - y1;
	                    var r = Math.sqrt(dx * dx + dy * dy);
	                    context.moveTo(x1 + r, y1);
	                    context.arc(x1, y1, r, 0, 2 * Math.PI, true);
	                    ++i;
	                    break;
	                case Instruction.CLOSE_PATH:
	                    context.closePath();
	                    ++i;
	                    break;
	                case Instruction.CUSTOM:
	                    d = /** @type {number} */ (instruction[1]);
	                    dd = instruction[2];
	                    var geometry = /** @type {import("../../geom/SimpleGeometry.js").default} */ (instruction[3]);
	                    var renderer = instruction[4];
	                    var fn = instruction.length == 6 ? instruction[5] : undefined;
	                    state.geometry = geometry;
	                    state.feature = feature;
	                    if (!(i in coordinateCache)) {
	                        coordinateCache[i] = [];
	                    }
	                    var coords = coordinateCache[i];
	                    if (fn) {
	                        fn(pixelCoordinates, d, dd, 2, coords);
	                    }
	                    else {
	                        coords[0] = pixelCoordinates[d];
	                        coords[1] = pixelCoordinates[d + 1];
	                        coords.length = 2;
	                    }
	                    renderer(coords, state);
	                    ++i;
	                    break;
	                case Instruction.DRAW_IMAGE:
	                    d = /** @type {number} */ (instruction[1]);
	                    dd = /** @type {number} */ (instruction[2]);
	                    image = /** @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} */ (instruction[3]);
	                    // Remaining arguments in DRAW_IMAGE are in alphabetical order
	                    anchorX = /** @type {number} */ (instruction[4]);
	                    anchorY = /** @type {number} */ (instruction[5]);
	                    declutterGroups = featureCallback ? null : instruction[6];
	                    var height = /** @type {number} */ (instruction[7]);
	                    var opacity = /** @type {number} */ (instruction[8]);
	                    var originX = /** @type {number} */ (instruction[9]);
	                    var originY = /** @type {number} */ (instruction[10]);
	                    var rotateWithView = /** @type {boolean} */ (instruction[11]);
	                    var rotation = /** @type {number} */ (instruction[12]);
	                    var scale = /** @type {number} */ (instruction[13]);
	                    var width = /** @type {number} */ (instruction[14]);
	                    if (!image && instruction.length >= 19) {
	                        // create label images
	                        text = /** @type {string} */ (instruction[18]);
	                        textKey = /** @type {string} */ (instruction[19]);
	                        strokeKey = /** @type {string} */ (instruction[20]);
	                        fillKey = /** @type {string} */ (instruction[21]);
	                        var labelWithAnchor = this.drawTextImageWithPointPlacement_(text, textKey, strokeKey, fillKey);
	                        image = labelWithAnchor.label;
	                        instruction[3] = image;
	                        var textOffsetX = /** @type {number} */ (instruction[22]);
	                        anchorX = (labelWithAnchor.anchorX - textOffsetX) * this.pixelRatio;
	                        instruction[4] = anchorX;
	                        var textOffsetY = /** @type {number} */ (instruction[23]);
	                        anchorY = (labelWithAnchor.anchorY - textOffsetY) * this.pixelRatio;
	                        instruction[5] = anchorY;
	                        height = image.height;
	                        instruction[7] = height;
	                        width = image.width;
	                        instruction[14] = width;
	                    }
	                    var geometryWidths = void 0;
	                    if (instruction.length > 24) {
	                        geometryWidths = /** @type {number} */ (instruction[24]);
	                    }
	                    var padding = void 0, backgroundFill = void 0, backgroundStroke = void 0;
	                    if (instruction.length > 16) {
	                        padding = /** @type {Array<number>} */ (instruction[15]);
	                        backgroundFill = /** @type {boolean} */ (instruction[16]);
	                        backgroundStroke = /** @type {boolean} */ (instruction[17]);
	                    }
	                    else {
	                        padding = defaultPadding;
	                        backgroundFill = false;
	                        backgroundStroke = false;
	                    }
	                    if (rotateWithView && viewRotationFromTransform) {
	                        // Canvas is expected to be rotated to reverse view rotation.
	                        rotation += viewRotation;
	                    }
	                    else if (!rotateWithView && !viewRotationFromTransform) {
	                        // Canvas is not rotated, images need to be rotated back to be north-up.
	                        rotation -= viewRotation;
	                    }
	                    var widthIndex = 0;
	                    var declutterGroupIndex = 0;
	                    for (; d < dd; d += 2) {
	                        if (geometryWidths && geometryWidths[widthIndex++] < width / this.pixelRatio) {
	                            continue;
	                        }
	                        if (declutterGroups) {
	                            var index = Math.floor(declutterGroupIndex);
	                            if (declutterGroups.length < index + 1) {
	                                declutterGroup = createEmpty();
	                                declutterGroup.push(declutterGroups[0][4]);
	                                declutterGroups.push(declutterGroup);
	                            }
	                            declutterGroup = declutterGroups[index];
	                        }
	                        this.replayImage_(context, pixelCoordinates[d], pixelCoordinates[d + 1], image, anchorX, anchorY, declutterGroup, height, opacity, originX, originY, rotation, scale, snapToPixel, width, padding, backgroundFill ? /** @type {Array<*>} */ (lastFillInstruction) : null, backgroundStroke ? /** @type {Array<*>} */ (lastStrokeInstruction) : null);
	                        if (declutterGroup) {
	                            if (declutterGroupIndex === Math.floor(declutterGroupIndex)) {
	                                this.declutterItems.push(this, declutterGroup, feature);
	                            }
	                            declutterGroupIndex += 1 / declutterGroup[4];
	                        }
	                    }
	                    ++i;
	                    break;
	                case Instruction.DRAW_CHARS:
	                    var begin = /** @type {number} */ (instruction[1]);
	                    var end = /** @type {number} */ (instruction[2]);
	                    var baseline = /** @type {number} */ (instruction[3]);
	                    declutterGroup = featureCallback ? null : instruction[4];
	                    var overflow = /** @type {number} */ (instruction[5]);
	                    fillKey = /** @type {string} */ (instruction[6]);
	                    var maxAngle = /** @type {number} */ (instruction[7]);
	                    var measurePixelRatio = /** @type {number} */ (instruction[8]);
	                    var offsetY = /** @type {number} */ (instruction[9]);
	                    strokeKey = /** @type {string} */ (instruction[10]);
	                    var strokeWidth = /** @type {number} */ (instruction[11]);
	                    text = /** @type {string} */ (instruction[12]);
	                    textKey = /** @type {string} */ (instruction[13]);
	                    var pixelRatioScale = /** @type {number} */ (instruction[14]);
	                    var textState = this.textStates[textKey];
	                    var font = textState.font;
	                    var textScale = textState.scale * measurePixelRatio;
	                    var cachedWidths = void 0;
	                    if (font in this.widths_) {
	                        cachedWidths = this.widths_[font];
	                    }
	                    else {
	                        cachedWidths = {};
	                        this.widths_[font] = cachedWidths;
	                    }
	                    var pathLength = lineStringLength(pixelCoordinates, begin, end, 2);
	                    var textLength = textScale * measureAndCacheTextWidth(font, text, cachedWidths);
	                    if (overflow || textLength <= pathLength) {
	                        var textAlign = this.textStates[textKey].textAlign;
	                        var startM = (pathLength - textLength) * TEXT_ALIGN[textAlign];
	                        var parts = drawTextOnPath(pixelCoordinates, begin, end, 2, text, startM, maxAngle, textScale, measureAndCacheTextWidth, font, cachedWidths);
	                        if (parts) {
	                            var c = void 0, cc = void 0, chars = void 0, label = void 0, part = void 0;
	                            if (strokeKey) {
	                                for (c = 0, cc = parts.length; c < cc; ++c) {
	                                    part = parts[c]; // x, y, anchorX, rotation, chunk
	                                    chars = /** @type {string} */ (part[4]);
	                                    label = this.getTextImage(chars, textKey, '', strokeKey);
	                                    anchorX = /** @type {number} */ (part[2]) + strokeWidth;
	                                    anchorY = baseline * label.height + (0.5 - baseline) * 2 * strokeWidth - offsetY;
	                                    this.replayImage_(context, 
	                                    /** @type {number} */ (part[0]), /** @type {number} */ (part[1]), label, anchorX, anchorY, declutterGroup, label.height, 1, 0, 0, 
	                                    /** @type {number} */ (part[3]), pixelRatioScale, false, label.width, defaultPadding, null, null);
	                                }
	                            }
	                            if (fillKey) {
	                                for (c = 0, cc = parts.length; c < cc; ++c) {
	                                    part = parts[c]; // x, y, anchorX, rotation, chunk
	                                    chars = /** @type {string} */ (part[4]);
	                                    label = this.getTextImage(chars, textKey, fillKey, '');
	                                    anchorX = /** @type {number} */ (part[2]);
	                                    anchorY = baseline * label.height - offsetY;
	                                    this.replayImage_(context, 
	                                    /** @type {number} */ (part[0]), /** @type {number} */ (part[1]), label, anchorX, anchorY, declutterGroup, label.height, 1, 0, 0, 
	                                    /** @type {number} */ (part[3]), pixelRatioScale, false, label.width, defaultPadding, null, null);
	                                }
	                            }
	                        }
	                    }
	                    this.declutterItems.push(this, declutterGroup, feature);
	                    ++i;
	                    break;
	                case Instruction.END_GEOMETRY:
	                    if (featureCallback !== undefined) {
	                        feature = /** @type {import("../../Feature.js").FeatureLike} */ (instruction[1]);
	                        var result = featureCallback(feature);
	                        if (result) {
	                            return result;
	                        }
	                    }
	                    ++i;
	                    break;
	                case Instruction.FILL:
	                    if (batchSize) {
	                        pendingFill++;
	                    }
	                    else {
	                        this.fill_(context);
	                    }
	                    ++i;
	                    break;
	                case Instruction.MOVE_TO_LINE_TO:
	                    d = /** @type {number} */ (instruction[1]);
	                    dd = /** @type {number} */ (instruction[2]);
	                    x = pixelCoordinates[d];
	                    y = pixelCoordinates[d + 1];
	                    roundX = (x + 0.5) | 0;
	                    roundY = (y + 0.5) | 0;
	                    if (roundX !== prevX || roundY !== prevY) {
	                        context.moveTo(x, y);
	                        prevX = roundX;
	                        prevY = roundY;
	                    }
	                    for (d += 2; d < dd; d += 2) {
	                        x = pixelCoordinates[d];
	                        y = pixelCoordinates[d + 1];
	                        roundX = (x + 0.5) | 0;
	                        roundY = (y + 0.5) | 0;
	                        if (d == dd - 2 || roundX !== prevX || roundY !== prevY) {
	                            context.lineTo(x, y);
	                            prevX = roundX;
	                            prevY = roundY;
	                        }
	                    }
	                    ++i;
	                    break;
	                case Instruction.SET_FILL_STYLE:
	                    lastFillInstruction = instruction;
	                    this.alignFill_ = instruction[2];
	                    if (pendingFill) {
	                        this.fill_(context);
	                        pendingFill = 0;
	                        if (pendingStroke) {
	                            context.stroke();
	                            pendingStroke = 0;
	                        }
	                    }
	                    context.fillStyle = /** @type {import("../../colorlike.js").ColorLike} */ (instruction[1]);
	                    ++i;
	                    break;
	                case Instruction.SET_STROKE_STYLE:
	                    lastStrokeInstruction = instruction;
	                    if (pendingStroke) {
	                        context.stroke();
	                        pendingStroke = 0;
	                    }
	                    this.setStrokeStyle_(context, /** @type {Array<*>} */ (instruction));
	                    ++i;
	                    break;
	                case Instruction.STROKE:
	                    if (batchSize) {
	                        pendingStroke++;
	                    }
	                    else {
	                        context.stroke();
	                    }
	                    ++i;
	                    break;
	                default:
	                    ++i; // consume the instruction anyway, to avoid an infinite loop
	                    break;
	            }
	        }
	        if (pendingFill) {
	            this.fill_(context);
	        }
	        if (pendingStroke) {
	            context.stroke();
	        }
	        return undefined;
	    };
	    /**
	     * @param {CanvasRenderingContext2D} context Context.
	     * @param {import("../../transform.js").Transform} transform Transform.
	     * @param {number} viewRotation View rotation.
	     * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.
	     */
	    Executor.prototype.execute = function (context, transform, viewRotation, snapToPixel) {
	        this.viewRotation_ = viewRotation;
	        this.execute_(context, transform, this.instructions, snapToPixel, undefined, undefined);
	    };
	    /**
	     * @param {CanvasRenderingContext2D} context Context.
	     * @param {import("../../transform.js").Transform} transform Transform.
	     * @param {number} viewRotation View rotation.
	     * @param {function(import("../../Feature.js").FeatureLike): T=} opt_featureCallback
	     *     Feature callback.
	     * @param {import("../../extent.js").Extent=} opt_hitExtent Only check features that intersect this
	     *     extent.
	     * @return {T|undefined} Callback result.
	     * @template T
	     */
	    Executor.prototype.executeHitDetection = function (context, transform, viewRotation, opt_featureCallback, opt_hitExtent) {
	        this.viewRotation_ = viewRotation;
	        return this.execute_(context, transform, this.hitDetectionInstructions, true, opt_featureCallback, opt_hitExtent);
	    };
	    return Executor;
	}(Disposable));

	/**
	 * @module ol/render/canvas/ExecutorGroup
	 */
	var __extends$r = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @const
	 * @type {Array<BuilderType>}
	 */
	var ORDER = [
	    ReplayType.POLYGON,
	    ReplayType.CIRCLE,
	    ReplayType.LINE_STRING,
	    ReplayType.IMAGE,
	    ReplayType.TEXT,
	    ReplayType.DEFAULT
	];
	var ExecutorGroup = /** @class */ (function (_super) {
	    __extends$r(ExecutorGroup, _super);
	    /**
	     * @param {import("../../extent.js").Extent} maxExtent Max extent for clipping. When a
	     * `maxExtent` was set on the Buillder for this executor group, the same `maxExtent`
	     * should be set here, unless the target context does not exceet that extent (which
	     * can be the case when rendering to tiles).
	     * @param {number} resolution Resolution.
	     * @param {number} pixelRatio Pixel ratio.
	     * @param {boolean} overlaps The executor group can have overlapping geometries.
	     * @param {!Object<string, !Object<BuilderType, import("./Builder.js").SerializableInstructions>>} allInstructions
	     * The serializable instructions.
	     * @param {number=} opt_renderBuffer Optional rendering buffer.
	     */
	    function ExecutorGroup(maxExtent, resolution, pixelRatio, overlaps, allInstructions, opt_renderBuffer) {
	        var _this = _super.call(this) || this;
	        /**
	         * @private
	         * @type {import("../../extent.js").Extent}
	         */
	        _this.maxExtent_ = maxExtent;
	        /**
	         * @private
	         * @type {boolean}
	         */
	        _this.overlaps_ = overlaps;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.pixelRatio_ = pixelRatio;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.resolution_ = resolution;
	        /**
	         * @private
	         * @type {number|undefined}
	         */
	        _this.renderBuffer_ = opt_renderBuffer;
	        /**
	         * @private
	         * @type {!Object<string, !Object<BuilderType, import("./Executor").default>>}
	         */
	        _this.executorsByZIndex_ = {};
	        /**
	         * @private
	         * @type {CanvasRenderingContext2D}
	         */
	        _this.hitDetectionContext_ = null;
	        /**
	         * @private
	         * @type {import("../../transform.js").Transform}
	         */
	        _this.hitDetectionTransform_ = create();
	        _this.createExecutors_(allInstructions);
	        return _this;
	    }
	    /**
	     * @param {CanvasRenderingContext2D} context Context.
	     * @param {import("../../transform.js").Transform} transform Transform.
	     */
	    ExecutorGroup.prototype.clip = function (context, transform) {
	        var flatClipCoords = this.getClipCoords(transform);
	        context.beginPath();
	        context.moveTo(flatClipCoords[0], flatClipCoords[1]);
	        context.lineTo(flatClipCoords[2], flatClipCoords[3]);
	        context.lineTo(flatClipCoords[4], flatClipCoords[5]);
	        context.lineTo(flatClipCoords[6], flatClipCoords[7]);
	        context.clip();
	    };
	    /**
	     * Create executors and populate them using the provided instructions.
	     * @private
	     * @param {!Object<string, !Object<BuilderType, import("./Builder.js").SerializableInstructions>>} allInstructions The serializable instructions
	     */
	    ExecutorGroup.prototype.createExecutors_ = function (allInstructions) {
	        for (var zIndex in allInstructions) {
	            var executors = this.executorsByZIndex_[zIndex];
	            if (executors === undefined) {
	                executors = {};
	                this.executorsByZIndex_[zIndex] = executors;
	            }
	            var instructionByZindex = allInstructions[zIndex];
	            for (var builderType in instructionByZindex) {
	                var instructions = instructionByZindex[builderType];
	                executors[builderType] = new Executor(this.resolution_, this.pixelRatio_, this.overlaps_, instructions);
	            }
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    ExecutorGroup.prototype.disposeInternal = function () {
	        for (var z in this.executorsByZIndex_) {
	            var executors = this.executorsByZIndex_[z];
	            for (var key in executors) {
	                executors[key].disposeInternal();
	            }
	        }
	        if (this.hitDetectionContext_) {
	            var canvas = this.hitDetectionContext_.canvas;
	            canvas.width = 0;
	            canvas.height = 0;
	        }
	        _super.prototype.disposeInternal.call(this);
	    };
	    /**
	     * @param {Array<BuilderType>} executors Executors.
	     * @return {boolean} Has executors of the provided types.
	     */
	    ExecutorGroup.prototype.hasExecutors = function (executors) {
	        for (var zIndex in this.executorsByZIndex_) {
	            var candidates = this.executorsByZIndex_[zIndex];
	            for (var i = 0, ii = executors.length; i < ii; ++i) {
	                if (executors[i] in candidates) {
	                    return true;
	                }
	            }
	        }
	        return false;
	    };
	    /**
	     * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
	     * @param {number} resolution Resolution.
	     * @param {number} rotation Rotation.
	     * @param {number} hitTolerance Hit tolerance in pixels.
	     * @param {function(import("../../Feature.js").FeatureLike): T} callback Feature callback.
	     * @param {Array<import("../../Feature.js").FeatureLike>} declutteredFeatures Decluttered features.
	     * @return {T|undefined} Callback result.
	     * @template T
	     */
	    ExecutorGroup.prototype.forEachFeatureAtCoordinate = function (coordinate, resolution, rotation, hitTolerance, callback, declutteredFeatures) {
	        hitTolerance = Math.round(hitTolerance);
	        var contextSize = hitTolerance * 2 + 1;
	        var transform = compose(this.hitDetectionTransform_, hitTolerance + 0.5, hitTolerance + 0.5, 1 / resolution, -1 / resolution, -rotation, -coordinate[0], -coordinate[1]);
	        if (!this.hitDetectionContext_) {
	            this.hitDetectionContext_ = createCanvasContext2D(contextSize, contextSize);
	        }
	        var context = this.hitDetectionContext_;
	        if (context.canvas.width !== contextSize || context.canvas.height !== contextSize) {
	            context.canvas.width = contextSize;
	            context.canvas.height = contextSize;
	        }
	        else {
	            context.clearRect(0, 0, contextSize, contextSize);
	        }
	        /**
	         * @type {import("../../extent.js").Extent}
	         */
	        var hitExtent;
	        if (this.renderBuffer_ !== undefined) {
	            hitExtent = createEmpty();
	            extendCoordinate(hitExtent, coordinate);
	            buffer(hitExtent, resolution * (this.renderBuffer_ + hitTolerance), hitExtent);
	        }
	        var mask = getCircleArray(hitTolerance);
	        var builderType;
	        /**
	         * @param {import("../../Feature.js").FeatureLike} feature Feature.
	         * @return {?} Callback result.
	         */
	        function featureCallback(feature) {
	            var imageData = context.getImageData(0, 0, contextSize, contextSize).data;
	            for (var i_1 = 0; i_1 < contextSize; i_1++) {
	                for (var j_1 = 0; j_1 < contextSize; j_1++) {
	                    if (mask[i_1][j_1]) {
	                        if (imageData[(j_1 * contextSize + i_1) * 4 + 3] > 0) {
	                            var result_1 = void 0;
	                            if (!(declutteredFeatures && (builderType == ReplayType.IMAGE || builderType == ReplayType.TEXT)) ||
	                                declutteredFeatures.indexOf(feature) !== -1) {
	                                result_1 = callback(feature);
	                            }
	                            if (result_1) {
	                                return result_1;
	                            }
	                            else {
	                                context.clearRect(0, 0, contextSize, contextSize);
	                                return undefined;
	                            }
	                        }
	                    }
	                }
	            }
	        }
	        /** @type {Array<number>} */
	        var zs = Object.keys(this.executorsByZIndex_).map(Number);
	        zs.sort(numberSafeCompareFunction);
	        var i, j, executors, executor, result;
	        for (i = zs.length - 1; i >= 0; --i) {
	            var zIndexKey = zs[i].toString();
	            executors = this.executorsByZIndex_[zIndexKey];
	            for (j = ORDER.length - 1; j >= 0; --j) {
	                builderType = ORDER[j];
	                executor = executors[builderType];
	                if (executor !== undefined) {
	                    result = executor.executeHitDetection(context, transform, rotation, featureCallback, hitExtent);
	                    if (result) {
	                        return result;
	                    }
	                }
	            }
	        }
	        return undefined;
	    };
	    /**
	     * @param {import("../../transform.js").Transform} transform Transform.
	     * @return {Array<number>} Clip coordinates.
	     */
	    ExecutorGroup.prototype.getClipCoords = function (transform) {
	        var maxExtent = this.maxExtent_;
	        if (!maxExtent) {
	            return null;
	        }
	        var minX = maxExtent[0];
	        var minY = maxExtent[1];
	        var maxX = maxExtent[2];
	        var maxY = maxExtent[3];
	        var flatClipCoords = [minX, minY, minX, maxY, maxX, maxY, maxX, minY];
	        transform2D(flatClipCoords, 0, 8, 2, transform, flatClipCoords);
	        return flatClipCoords;
	    };
	    /**
	     * @return {boolean} Is empty.
	     */
	    ExecutorGroup.prototype.isEmpty = function () {
	        return isEmpty$1(this.executorsByZIndex_);
	    };
	    /**
	     * @param {CanvasRenderingContext2D} context Context.
	     * @param {import("../../transform.js").Transform} transform Transform.
	     * @param {number} viewRotation View rotation.
	     * @param {boolean} snapToPixel Snap point symbols and test to integer pixel.
	     * @param {Array<BuilderType>=} opt_builderTypes Ordered replay types to replay.
	     *     Default is {@link module:ol/render/replay~ORDER}
	     * @param {Object<string, import("../canvas.js").DeclutterGroup>=} opt_declutterReplays Declutter replays.
	     */
	    ExecutorGroup.prototype.execute = function (context, transform, viewRotation, snapToPixel, opt_builderTypes, opt_declutterReplays) {
	        /** @type {Array<number>} */
	        var zs = Object.keys(this.executorsByZIndex_).map(Number);
	        zs.sort(numberSafeCompareFunction);
	        // setup clipping so that the parts of over-simplified geometries are not
	        // visible outside the current extent when panning
	        if (this.maxExtent_) {
	            context.save();
	            this.clip(context, transform);
	        }
	        var builderTypes = opt_builderTypes ? opt_builderTypes : ORDER;
	        var i, ii, j, jj, replays, replay;
	        for (i = 0, ii = zs.length; i < ii; ++i) {
	            var zIndexKey = zs[i].toString();
	            replays = this.executorsByZIndex_[zIndexKey];
	            for (j = 0, jj = builderTypes.length; j < jj; ++j) {
	                var builderType = builderTypes[j];
	                replay = replays[builderType];
	                if (replay !== undefined) {
	                    if (opt_declutterReplays &&
	                        (builderType == ReplayType.IMAGE || builderType == ReplayType.TEXT)) {
	                        var declutter = opt_declutterReplays[zIndexKey];
	                        if (!declutter) {
	                            opt_declutterReplays[zIndexKey] = [replay, transform.slice(0)];
	                        }
	                        else {
	                            declutter.push(replay, transform.slice(0));
	                        }
	                    }
	                    else {
	                        replay.execute(context, transform, viewRotation, snapToPixel);
	                    }
	                }
	            }
	        }
	        if (this.maxExtent_) {
	            context.restore();
	        }
	    };
	    return ExecutorGroup;
	}(Disposable));
	/**
	 * This cache is used for storing calculated pixel circles for increasing performance.
	 * It is a static property to allow each Replaygroup to access it.
	 * @type {Object<number, Array<Array<(boolean|undefined)>>>}
	 */
	var circleArrayCache = {
	    0: [[true]]
	};
	/**
	 * This method fills a row in the array from the given coordinate to the
	 * middle with `true`.
	 * @param {Array<Array<(boolean|undefined)>>} array The array that will be altered.
	 * @param {number} x X coordinate.
	 * @param {number} y Y coordinate.
	 */
	function fillCircleArrayRowToMiddle(array, x, y) {
	    var i;
	    var radius = Math.floor(array.length / 2);
	    if (x >= radius) {
	        for (i = radius; i < x; i++) {
	            array[i][y] = true;
	        }
	    }
	    else if (x < radius) {
	        for (i = x + 1; i < radius; i++) {
	            array[i][y] = true;
	        }
	    }
	}
	/**
	 * This methods creates a circle inside a fitting array. Points inside the
	 * circle are marked by true, points on the outside are undefined.
	 * It uses the midpoint circle algorithm.
	 * A cache is used to increase performance.
	 * @param {number} radius Radius.
	 * @returns {Array<Array<(boolean|undefined)>>} An array with marked circle points.
	 */
	function getCircleArray(radius) {
	    if (circleArrayCache[radius] !== undefined) {
	        return circleArrayCache[radius];
	    }
	    var arraySize = radius * 2 + 1;
	    var arr = new Array(arraySize);
	    for (var i = 0; i < arraySize; i++) {
	        arr[i] = new Array(arraySize);
	    }
	    var x = radius;
	    var y = 0;
	    var error = 0;
	    while (x >= y) {
	        fillCircleArrayRowToMiddle(arr, radius + x, radius + y);
	        fillCircleArrayRowToMiddle(arr, radius + y, radius + x);
	        fillCircleArrayRowToMiddle(arr, radius - y, radius + x);
	        fillCircleArrayRowToMiddle(arr, radius - x, radius + y);
	        fillCircleArrayRowToMiddle(arr, radius - x, radius - y);
	        fillCircleArrayRowToMiddle(arr, radius - y, radius - x);
	        fillCircleArrayRowToMiddle(arr, radius + y, radius - x);
	        fillCircleArrayRowToMiddle(arr, radius + x, radius - y);
	        y++;
	        error += 1 + 2 * y;
	        if (2 * (error - x) + 1 > 0) {
	            x -= 1;
	            error += 1 - 2 * x;
	        }
	    }
	    circleArrayCache[radius] = arr;
	    return arr;
	}
	/**
	 * @param {!Object<string, Array<*>>} declutterReplays Declutter replays.
	 * @param {CanvasRenderingContext2D} context Context.
	 * @param {number} rotation Rotation.
	 * @param {number} opacity Opacity.
	 * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.
	 * @param {Array<import("../../PluggableMap.js").DeclutterItems>} declutterItems Declutter items.
	 */
	function replayDeclutter(declutterReplays, context, rotation, opacity, snapToPixel, declutterItems) {
	    var zs = Object.keys(declutterReplays).map(Number).sort(numberSafeCompareFunction);
	    for (var z = 0, zz = zs.length; z < zz; ++z) {
	        var executorData = declutterReplays[zs[z].toString()];
	        var currentExecutor = void 0;
	        for (var i = 0, ii = executorData.length; i < ii;) {
	            var executor = executorData[i++];
	            if (executor !== currentExecutor) {
	                currentExecutor = executor;
	                declutterItems.push({
	                    items: executor.declutterItems,
	                    opacity: opacity
	                });
	            }
	            var transform = executorData[i++];
	            executor.execute(context, transform, rotation, snapToPixel);
	        }
	    }
	}

	/**
	 * @module ol/render/Event
	 */
	var __extends$s = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var RenderEvent = /** @class */ (function (_super) {
	    __extends$s(RenderEvent, _super);
	    /**
	     * @param {import("./EventType.js").default} type Type.
	     * @param {import("../transform.js").Transform=} opt_inversePixelTransform Transform for
	     *     CSS pixels to rendered pixels.
	     * @param {import("../PluggableMap.js").FrameState=} opt_frameState Frame state.
	     * @param {?CanvasRenderingContext2D=} opt_context Context.
	     */
	    function RenderEvent(type, opt_inversePixelTransform, opt_frameState, opt_context) {
	        var _this = _super.call(this, type) || this;
	        /**
	         * Transform from CSS pixels (relative to the top-left corner of the map viewport)
	         * to rendered pixels on this event's `context`.
	         * @type {import("../transform.js").Transform|undefined}
	         * @api
	         */
	        _this.inversePixelTransform = opt_inversePixelTransform;
	        /**
	         * An object representing the current render frame state.
	         * @type {import("../PluggableMap.js").FrameState|undefined}
	         * @api
	         */
	        _this.frameState = opt_frameState;
	        /**
	         * Canvas context. Not available when the event is dispatched by the map. Only available
	         * when a Canvas renderer is used, null otherwise.
	         * @type {CanvasRenderingContext2D|null|undefined}
	         * @api
	         */
	        _this.context = opt_context;
	        return _this;
	    }
	    return RenderEvent;
	}(BaseEvent));

	var __extends$t = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @template {import("../layer/Layer.js").default} LayerType
	 */
	var LayerRenderer = /** @class */ (function (_super) {
	    __extends$t(LayerRenderer, _super);
	    /**
	     * @param {LayerType} layer Layer.
	     */
	    function LayerRenderer(layer) {
	        var _this = _super.call(this) || this;
	        /** @private */
	        _this.boundHandleImageChange_ = _this.handleImageChange_.bind(_this);
	        /**
	         * @private
	         * @type {LayerType}
	         */
	        _this.layer_ = layer;
	        return _this;
	    }
	    /**
	     * Asynchronous layer level hit detection.
	     * @param {import("../pixel.js").Pixel} pixel Pixel.
	     * @return {Promise<Array<import("../Feature").default>>} Promise that resolves with
	     * an array of features.
	     */
	    LayerRenderer.prototype.getFeatures = function (pixel) {
	        return abstract();
	    };
	    /**
	     * Determine whether render should be called.
	     * @abstract
	     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
	     * @return {boolean} Layer is ready to be rendered.
	     */
	    LayerRenderer.prototype.prepareFrame = function (frameState) {
	        return abstract();
	    };
	    /**
	     * Render the layer.
	     * @abstract
	     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
	     * @param {HTMLElement} target Target that may be used to render content to.
	     * @return {HTMLElement} The rendered element.
	     */
	    LayerRenderer.prototype.renderFrame = function (frameState, target) {
	        return abstract();
	    };
	    /**
	     * @param {Object<number, Object<string, import("../Tile.js").default>>} tiles Lookup of loaded tiles by zoom level.
	     * @param {number} zoom Zoom level.
	     * @param {import("../Tile.js").default} tile Tile.
	     */
	    LayerRenderer.prototype.loadedTileCallback = function (tiles, zoom, tile) {
	        if (!tiles[zoom]) {
	            tiles[zoom] = {};
	        }
	        tiles[zoom][tile.tileCoord.toString()] = tile;
	    };
	    /**
	     * Create a function that adds loaded tiles to the tile lookup.
	     * @param {import("../source/Tile.js").default} source Tile source.
	     * @param {import("../proj/Projection.js").default} projection Projection of the tiles.
	     * @param {Object<number, Object<string, import("../Tile.js").default>>} tiles Lookup of loaded tiles by zoom level.
	     * @return {function(number, import("../TileRange.js").default):boolean} A function that can be
	     *     called with a zoom level and a tile range to add loaded tiles to the lookup.
	     * @protected
	     */
	    LayerRenderer.prototype.createLoadedTileFinder = function (source, projection, tiles) {
	        return (
	        /**
	         * @param {number} zoom Zoom level.
	         * @param {import("../TileRange.js").default} tileRange Tile range.
	         * @return {boolean} The tile range is fully loaded.
	         * @this {LayerRenderer}
	         */
	        function (zoom, tileRange) {
	            var callback = this.loadedTileCallback.bind(this, tiles, zoom);
	            return source.forEachLoadedTile(projection, zoom, tileRange, callback);
	        }).bind(this);
	    };
	    /**
	     * @abstract
	     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
	     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
	     * @param {number} hitTolerance Hit tolerance in pixels.
	     * @param {function(import("../Feature.js").FeatureLike, import("../layer/Layer.js").default): T} callback Feature callback.
	     * @param {Array<import("../Feature.js").FeatureLike>} declutteredFeatures Decluttered features.
	     * @return {T|void} Callback result.
	     * @template T
	     */
	    LayerRenderer.prototype.forEachFeatureAtCoordinate = function (coordinate, frameState, hitTolerance, callback, declutteredFeatures) { };
	    /**
	     * @abstract
	     * @param {import("../pixel.js").Pixel} pixel Pixel.
	     * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
	     * @param {number} hitTolerance Hit tolerance in pixels.
	     * @return {Uint8ClampedArray|Uint8Array} The result.  If there is no data at the pixel
	     *    location, null will be returned.  If there is data, but pixel values cannot be
	     *    returned, and empty array will be returned.
	     */
	    LayerRenderer.prototype.getDataAtPixel = function (pixel, frameState, hitTolerance) {
	        return abstract();
	    };
	    /**
	     * @return {LayerType} Layer.
	     */
	    LayerRenderer.prototype.getLayer = function () {
	        return this.layer_;
	    };
	    /**
	     * Perform action necessary to get the layer rendered after new fonts have loaded
	     * @abstract
	     */
	    LayerRenderer.prototype.handleFontsChanged = function () { };
	    /**
	     * Handle changes in image state.
	     * @param {import("../events/Event.js").default} event Image change event.
	     * @private
	     */
	    LayerRenderer.prototype.handleImageChange_ = function (event) {
	        var image = /** @type {import("../Image.js").default} */ (event.target);
	        if (image.getState() === ImageState.LOADED) {
	            this.renderIfReadyAndVisible();
	        }
	    };
	    /**
	     * Load the image if not already loaded, and register the image change
	     * listener if needed.
	     * @param {import("../ImageBase.js").default} image Image.
	     * @return {boolean} `true` if the image is already loaded, `false` otherwise.
	     * @protected
	     */
	    LayerRenderer.prototype.loadImage = function (image) {
	        var imageState = image.getState();
	        if (imageState != ImageState.LOADED && imageState != ImageState.ERROR) {
	            image.addEventListener(EventType.CHANGE, this.boundHandleImageChange_);
	        }
	        if (imageState == ImageState.IDLE) {
	            image.load();
	            imageState = image.getState();
	        }
	        return imageState == ImageState.LOADED;
	    };
	    /**
	     * @protected
	     */
	    LayerRenderer.prototype.renderIfReadyAndVisible = function () {
	        var layer = this.getLayer();
	        if (layer.getVisible() && layer.getSourceState() == SourceState.READY) {
	            layer.changed();
	        }
	    };
	    return LayerRenderer;
	}(Observable));

	var __extends$u = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @abstract
	 * @template {import("../../layer/Layer.js").default} LayerType
	 */
	var CanvasLayerRenderer = /** @class */ (function (_super) {
	    __extends$u(CanvasLayerRenderer, _super);
	    /**
	     * @param {LayerType} layer Layer.
	     */
	    function CanvasLayerRenderer(layer) {
	        var _this = _super.call(this, layer) || this;
	        /**
	         * @protected
	         * @type {HTMLElement}
	         */
	        _this.container = null;
	        /**
	         * @protected
	         * @type {number}
	         */
	        _this.renderedResolution;
	        /**
	         * A temporary transform.  The values in this transform should only be used in a
	         * function that sets the values.
	         * @private
	         * @type {import("../../transform.js").Transform}
	         */
	        _this.tempTransform_ = create();
	        /**
	         * The transform for rendered pixels to viewport CSS pixels.  This transform must
	         * be set when rendering a frame and may be used by other functions after rendering.
	         * @protected
	         * @type {import("../../transform.js").Transform}
	         */
	        _this.pixelTransform = create();
	        /**
	         * The transform for viewport CSS pixels to rendered pixels.  This transform must
	         * be set when rendering a frame and may be used by other functions after rendering.
	         * @protected
	         * @type {import("../../transform.js").Transform}
	         */
	        _this.inversePixelTransform = create();
	        /**
	         * @protected
	         * @type {CanvasRenderingContext2D}
	         */
	        _this.context = null;
	        /**
	         * @type {boolean}
	         */
	        _this.containerReused = false;
	        /**
	         * @type {HTMLCanvasElement}
	         * @private
	         */
	        _this.createTransformStringCanvas_ = createCanvasContext2D(1, 1).canvas;
	        return _this;
	    }
	    /**
	     * Get a rendering container from an existing target, if compatible.
	     * @param {HTMLElement} target Potential render target.
	     * @param {string} transform CSS Transform.
	     * @param {number} opacity Opacity.
	     */
	    CanvasLayerRenderer.prototype.useContainer = function (target, transform, opacity) {
	        var layerClassName = this.getLayer().getClassName();
	        var container, context;
	        if (target && target.style.opacity === '' && target.className === layerClassName) {
	            var canvas = target.firstElementChild;
	            if (canvas instanceof HTMLCanvasElement) {
	                context = canvas.getContext('2d');
	            }
	        }
	        if (context && context.canvas.style.transform === transform) {
	            // Container of the previous layer renderer can be used.
	            this.container = target;
	            this.context = context;
	            this.containerReused = true;
	        }
	        else if (this.containerReused) {
	            // Previously reused container cannot be used any more.
	            this.container = null;
	            this.context = null;
	            this.containerReused = false;
	        }
	        if (!this.container) {
	            container = document.createElement('div');
	            container.className = layerClassName;
	            var style = container.style;
	            style.position = 'absolute';
	            style.width = '100%';
	            style.height = '100%';
	            context = createCanvasContext2D();
	            var canvas = context.canvas;
	            container.appendChild(canvas);
	            style = canvas.style;
	            style.position = 'absolute';
	            style.left = '0';
	            style.transformOrigin = 'top left';
	            this.container = container;
	            this.context = context;
	        }
	    };
	    /**
	     * @param {CanvasRenderingContext2D} context Context.
	     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
	     * @param {import("../../extent.js").Extent} extent Clip extent.
	     * @protected
	     */
	    CanvasLayerRenderer.prototype.clip = function (context, frameState, extent) {
	        var pixelRatio = frameState.pixelRatio;
	        var halfWidth = (frameState.size[0] * pixelRatio) / 2;
	        var halfHeight = (frameState.size[1] * pixelRatio) / 2;
	        var rotation = frameState.viewState.rotation;
	        var topLeft = getTopLeft(extent);
	        var topRight = getTopRight(extent);
	        var bottomRight = getBottomRight(extent);
	        var bottomLeft = getBottomLeft(extent);
	        apply(frameState.coordinateToPixelTransform, topLeft);
	        apply(frameState.coordinateToPixelTransform, topRight);
	        apply(frameState.coordinateToPixelTransform, bottomRight);
	        apply(frameState.coordinateToPixelTransform, bottomLeft);
	        context.save();
	        rotateAtOffset(context, -rotation, halfWidth, halfHeight);
	        context.beginPath();
	        context.moveTo(topLeft[0] * pixelRatio, topLeft[1] * pixelRatio);
	        context.lineTo(topRight[0] * pixelRatio, topRight[1] * pixelRatio);
	        context.lineTo(bottomRight[0] * pixelRatio, bottomRight[1] * pixelRatio);
	        context.lineTo(bottomLeft[0] * pixelRatio, bottomLeft[1] * pixelRatio);
	        context.clip();
	        rotateAtOffset(context, rotation, halfWidth, halfHeight);
	    };
	    /**
	     * @param {CanvasRenderingContext2D} context Context.
	     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
	     * @param {import("../../extent.js").Extent} extent Clip extent.
	     * @protected
	     */
	    CanvasLayerRenderer.prototype.clipUnrotated = function (context, frameState, extent) {
	        var topLeft = getTopLeft(extent);
	        var topRight = getTopRight(extent);
	        var bottomRight = getBottomRight(extent);
	        var bottomLeft = getBottomLeft(extent);
	        apply(frameState.coordinateToPixelTransform, topLeft);
	        apply(frameState.coordinateToPixelTransform, topRight);
	        apply(frameState.coordinateToPixelTransform, bottomRight);
	        apply(frameState.coordinateToPixelTransform, bottomLeft);
	        var inverted = this.inversePixelTransform;
	        apply(inverted, topLeft);
	        apply(inverted, topRight);
	        apply(inverted, bottomRight);
	        apply(inverted, bottomLeft);
	        context.save();
	        context.beginPath();
	        context.moveTo(Math.round(topLeft[0]), Math.round(topLeft[1]));
	        context.lineTo(Math.round(topRight[0]), Math.round(topRight[1]));
	        context.lineTo(Math.round(bottomRight[0]), Math.round(bottomRight[1]));
	        context.lineTo(Math.round(bottomLeft[0]), Math.round(bottomLeft[1]));
	        context.clip();
	    };
	    /**
	     * @param {import("../../render/EventType.js").default} type Event type.
	     * @param {CanvasRenderingContext2D} context Context.
	     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
	     * @private
	     */
	    CanvasLayerRenderer.prototype.dispatchRenderEvent_ = function (type, context, frameState) {
	        var layer = this.getLayer();
	        if (layer.hasListener(type)) {
	            var event_1 = new RenderEvent(type, this.inversePixelTransform, frameState, context);
	            layer.dispatchEvent(event_1);
	        }
	    };
	    /**
	     * @param {CanvasRenderingContext2D} context Context.
	     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
	     * @protected
	     */
	    CanvasLayerRenderer.prototype.preRender = function (context, frameState) {
	        this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);
	    };
	    /**
	     * @param {CanvasRenderingContext2D} context Context.
	     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
	     * @protected
	     */
	    CanvasLayerRenderer.prototype.postRender = function (context, frameState) {
	        this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);
	    };
	    /**
	     * Creates a transform for rendering to an element that will be rotated after rendering.
	     * @param {import("../../coordinate.js").Coordinate} center Center.
	     * @param {number} resolution Resolution.
	     * @param {number} rotation Rotation.
	     * @param {number} pixelRatio Pixel ratio.
	     * @param {number} width Width of the rendered element (in pixels).
	     * @param {number} height Height of the rendered element (in pixels).
	     * @param {number} offsetX Offset on the x-axis in view coordinates.
	     * @protected
	     * @return {!import("../../transform.js").Transform} Transform.
	     */
	    CanvasLayerRenderer.prototype.getRenderTransform = function (center, resolution, rotation, pixelRatio, width, height, offsetX) {
	        var dx1 = width / 2;
	        var dy1 = height / 2;
	        var sx = pixelRatio / resolution;
	        var sy = -sx;
	        var dx2 = -center[0] + offsetX;
	        var dy2 = -center[1];
	        return compose(this.tempTransform_, dx1, dy1, sx, sy, -rotation, dx2, dy2);
	    };
	    /**
	     * @param {import("../../pixel.js").Pixel} pixel Pixel.
	     * @param {import("../../PluggableMap.js").FrameState} frameState FrameState.
	     * @param {number} hitTolerance Hit tolerance in pixels.
	     * @return {Uint8ClampedArray|Uint8Array} The result.  If there is no data at the pixel
	     *    location, null will be returned.  If there is data, but pixel values cannot be
	     *    returned, and empty array will be returned.
	     */
	    CanvasLayerRenderer.prototype.getDataAtPixel = function (pixel, frameState, hitTolerance) {
	        var renderPixel = apply(this.inversePixelTransform, pixel.slice());
	        var context = this.context;
	        var data;
	        try {
	            data = context.getImageData(Math.round(renderPixel[0]), Math.round(renderPixel[1]), 1, 1).data;
	        }
	        catch (err) {
	            if (err.name === 'SecurityError') {
	                // tainted canvas, we assume there is data at the given pixel (although there might not be)
	                return new Uint8Array();
	            }
	            return data;
	        }
	        if (data[3] === 0) {
	            return null;
	        }
	        return data;
	    };
	    /**
	     * @param {import("../../transform.js").Transform} transform Transform.
	     * @return {string} CSS transform.
	     */
	    CanvasLayerRenderer.prototype.createTransformString = function (transform) {
	        this.createTransformStringCanvas_.style.transform = toString$2(transform);
	        return this.createTransformStringCanvas_.style.transform;
	    };
	    return CanvasLayerRenderer;
	}(LayerRenderer));

	/**
	 * @module ol/renderer/vector
	 */
	/**
	 * Tolerance for geometry simplification in device pixels.
	 * @type {number}
	 */
	var SIMPLIFY_TOLERANCE = 0.5;
	/**
	 * @const
	 * @type {Object<import("../geom/GeometryType.js").default,
	 *                function(import("../render/canvas/BuilderGroup.js").default, import("../geom/Geometry.js").default,
	 *                         import("../style/Style.js").default, Object): void>}
	 */
	var GEOMETRY_RENDERERS = {
	    'Point': renderPointGeometry,
	    'LineString': renderLineStringGeometry,
	    'Polygon': renderPolygonGeometry,
	    'MultiPoint': renderMultiPointGeometry,
	    'MultiLineString': renderMultiLineStringGeometry,
	    'MultiPolygon': renderMultiPolygonGeometry,
	    'GeometryCollection': renderGeometryCollectionGeometry,
	    'Circle': renderCircleGeometry
	};
	/**
	 * @param {import("../Feature.js").FeatureLike} feature1 Feature 1.
	 * @param {import("../Feature.js").FeatureLike} feature2 Feature 2.
	 * @return {number} Order.
	 */
	function defaultOrder(feature1, feature2) {
	    return parseInt(getUid(feature1), 10) - parseInt(getUid(feature2), 10);
	}
	/**
	 * @param {number} resolution Resolution.
	 * @param {number} pixelRatio Pixel ratio.
	 * @return {number} Squared pixel tolerance.
	 */
	function getSquaredTolerance(resolution, pixelRatio) {
	    var tolerance = getTolerance(resolution, pixelRatio);
	    return tolerance * tolerance;
	}
	/**
	 * @param {number} resolution Resolution.
	 * @param {number} pixelRatio Pixel ratio.
	 * @return {number} Pixel tolerance.
	 */
	function getTolerance(resolution, pixelRatio) {
	    return SIMPLIFY_TOLERANCE * resolution / pixelRatio;
	}
	/**
	 * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Builder group.
	 * @param {import("../geom/Circle.js").default} geometry Geometry.
	 * @param {import("../style/Style.js").default} style Style.
	 * @param {import("../Feature.js").default} feature Feature.
	 */
	function renderCircleGeometry(builderGroup, geometry, style, feature) {
	    var fillStyle = style.getFill();
	    var strokeStyle = style.getStroke();
	    if (fillStyle || strokeStyle) {
	        var circleReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.CIRCLE);
	        circleReplay.setFillStrokeStyle(fillStyle, strokeStyle);
	        circleReplay.drawCircle(geometry, feature);
	    }
	    var textStyle = style.getText();
	    if (textStyle) {
	        var textReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.TEXT);
	        textReplay.setTextStyle(textStyle, builderGroup.addDeclutter(false));
	        textReplay.drawText(geometry, feature);
	    }
	}
	/**
	 * @param {import("../render/canvas/BuilderGroup.js").default} replayGroup Replay group.
	 * @param {import("../Feature.js").FeatureLike} feature Feature.
	 * @param {import("../style/Style.js").default} style Style.
	 * @param {number} squaredTolerance Squared tolerance.
	 * @param {function(import("../events/Event.js").default): void} listener Listener function.
	 * @param {import("../proj.js").TransformFunction} [opt_transform] Transform from user to view projection.
	 * @return {boolean} `true` if style is loading.
	 * @template T
	 */
	function renderFeature(replayGroup, feature, style, squaredTolerance, listener, opt_transform) {
	    var loading = false;
	    var imageStyle = style.getImage();
	    if (imageStyle) {
	        var imageState = imageStyle.getImageState();
	        if (imageState == ImageState.LOADED || imageState == ImageState.ERROR) {
	            imageStyle.unlistenImageChange(listener);
	        }
	        else {
	            if (imageState == ImageState.IDLE) {
	                imageStyle.load();
	            }
	            imageState = imageStyle.getImageState();
	            imageStyle.listenImageChange(listener);
	            loading = true;
	        }
	    }
	    renderFeatureInternal(replayGroup, feature, style, squaredTolerance, opt_transform);
	    return loading;
	}
	/**
	 * @param {import("../render/canvas/BuilderGroup.js").default} replayGroup Replay group.
	 * @param {import("../Feature.js").FeatureLike} feature Feature.
	 * @param {import("../style/Style.js").default} style Style.
	 * @param {number} squaredTolerance Squared tolerance.
	 * @param {import("../proj.js").TransformFunction} [opt_transform] Optional transform function.
	 */
	function renderFeatureInternal(replayGroup, feature, style, squaredTolerance, opt_transform) {
	    var geometry = style.getGeometryFunction()(feature);
	    if (!geometry) {
	        return;
	    }
	    var simplifiedGeometry = geometry.simplifyTransformed(squaredTolerance, opt_transform);
	    var renderer = style.getRenderer();
	    if (renderer) {
	        renderGeometry(replayGroup, simplifiedGeometry, style, feature);
	    }
	    else {
	        var geometryRenderer = GEOMETRY_RENDERERS[simplifiedGeometry.getType()];
	        geometryRenderer(replayGroup, simplifiedGeometry, style, feature);
	    }
	}
	/**
	 * @param {import("../render/canvas/BuilderGroup.js").default} replayGroup Replay group.
	 * @param {import("../geom/Geometry.js").default|import("../render/Feature.js").default} geometry Geometry.
	 * @param {import("../style/Style.js").default} style Style.
	 * @param {import("../Feature.js").FeatureLike} feature Feature.
	 */
	function renderGeometry(replayGroup, geometry, style, feature) {
	    if (geometry.getType() == GeometryType.GEOMETRY_COLLECTION) {
	        var geometries = /** @type {import("../geom/GeometryCollection.js").default} */ (geometry).getGeometries();
	        for (var i = 0, ii = geometries.length; i < ii; ++i) {
	            renderGeometry(replayGroup, geometries[i], style, feature);
	        }
	        return;
	    }
	    var replay = replayGroup.getBuilder(style.getZIndex(), ReplayType.DEFAULT);
	    replay.drawCustom(/** @type {import("../geom/SimpleGeometry.js").default} */ (geometry), feature, style.getRenderer());
	}
	/**
	 * @param {import("../render/canvas/BuilderGroup.js").default} replayGroup Replay group.
	 * @param {import("../geom/GeometryCollection.js").default} geometry Geometry.
	 * @param {import("../style/Style.js").default} style Style.
	 * @param {import("../Feature.js").default} feature Feature.
	 */
	function renderGeometryCollectionGeometry(replayGroup, geometry, style, feature) {
	    var geometries = geometry.getGeometriesArray();
	    var i, ii;
	    for (i = 0, ii = geometries.length; i < ii; ++i) {
	        var geometryRenderer = GEOMETRY_RENDERERS[geometries[i].getType()];
	        geometryRenderer(replayGroup, geometries[i], style, feature);
	    }
	}
	/**
	 * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
	 * @param {import("../geom/LineString.js").default|import("../render/Feature.js").default} geometry Geometry.
	 * @param {import("../style/Style.js").default} style Style.
	 * @param {import("../Feature.js").FeatureLike} feature Feature.
	 */
	function renderLineStringGeometry(builderGroup, geometry, style, feature) {
	    var strokeStyle = style.getStroke();
	    if (strokeStyle) {
	        var lineStringReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.LINE_STRING);
	        lineStringReplay.setFillStrokeStyle(null, strokeStyle);
	        lineStringReplay.drawLineString(geometry, feature);
	    }
	    var textStyle = style.getText();
	    if (textStyle) {
	        var textReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.TEXT);
	        textReplay.setTextStyle(textStyle, builderGroup.addDeclutter(false));
	        textReplay.drawText(geometry, feature);
	    }
	}
	/**
	 * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
	 * @param {import("../geom/MultiLineString.js").default|import("../render/Feature.js").default} geometry Geometry.
	 * @param {import("../style/Style.js").default} style Style.
	 * @param {import("../Feature.js").FeatureLike} feature Feature.
	 */
	function renderMultiLineStringGeometry(builderGroup, geometry, style, feature) {
	    var strokeStyle = style.getStroke();
	    if (strokeStyle) {
	        var lineStringReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.LINE_STRING);
	        lineStringReplay.setFillStrokeStyle(null, strokeStyle);
	        lineStringReplay.drawMultiLineString(geometry, feature);
	    }
	    var textStyle = style.getText();
	    if (textStyle) {
	        var textReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.TEXT);
	        textReplay.setTextStyle(textStyle, builderGroup.addDeclutter(false));
	        textReplay.drawText(geometry, feature);
	    }
	}
	/**
	 * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
	 * @param {import("../geom/MultiPolygon.js").default} geometry Geometry.
	 * @param {import("../style/Style.js").default} style Style.
	 * @param {import("../Feature.js").default} feature Feature.
	 */
	function renderMultiPolygonGeometry(builderGroup, geometry, style, feature) {
	    var fillStyle = style.getFill();
	    var strokeStyle = style.getStroke();
	    if (strokeStyle || fillStyle) {
	        var polygonReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.POLYGON);
	        polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);
	        polygonReplay.drawMultiPolygon(geometry, feature);
	    }
	    var textStyle = style.getText();
	    if (textStyle) {
	        var textReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.TEXT);
	        textReplay.setTextStyle(textStyle, builderGroup.addDeclutter(false));
	        textReplay.drawText(geometry, feature);
	    }
	}
	/**
	 * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
	 * @param {import("../geom/Point.js").default|import("../render/Feature.js").default} geometry Geometry.
	 * @param {import("../style/Style.js").default} style Style.
	 * @param {import("../Feature.js").FeatureLike} feature Feature.
	 */
	function renderPointGeometry(builderGroup, geometry, style, feature) {
	    var imageStyle = style.getImage();
	    if (imageStyle) {
	        if (imageStyle.getImageState() != ImageState.LOADED) {
	            return;
	        }
	        var imageReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.IMAGE);
	        imageReplay.setImageStyle(imageStyle, builderGroup.addDeclutter(false));
	        imageReplay.drawPoint(geometry, feature);
	    }
	    var textStyle = style.getText();
	    if (textStyle) {
	        var textReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.TEXT);
	        textReplay.setTextStyle(textStyle, builderGroup.addDeclutter(!!imageStyle));
	        textReplay.drawText(geometry, feature);
	    }
	}
	/**
	 * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
	 * @param {import("../geom/MultiPoint.js").default|import("../render/Feature.js").default} geometry Geometry.
	 * @param {import("../style/Style.js").default} style Style.
	 * @param {import("../Feature.js").FeatureLike} feature Feature.
	 */
	function renderMultiPointGeometry(builderGroup, geometry, style, feature) {
	    var imageStyle = style.getImage();
	    if (imageStyle) {
	        if (imageStyle.getImageState() != ImageState.LOADED) {
	            return;
	        }
	        var imageReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.IMAGE);
	        imageReplay.setImageStyle(imageStyle, builderGroup.addDeclutter(false));
	        imageReplay.drawMultiPoint(geometry, feature);
	    }
	    var textStyle = style.getText();
	    if (textStyle) {
	        var textReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.TEXT);
	        textReplay.setTextStyle(textStyle, builderGroup.addDeclutter(!!imageStyle));
	        textReplay.drawText(geometry, feature);
	    }
	}
	/**
	 * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
	 * @param {import("../geom/Polygon.js").default|import("../render/Feature.js").default} geometry Geometry.
	 * @param {import("../style/Style.js").default} style Style.
	 * @param {import("../Feature.js").FeatureLike} feature Feature.
	 */
	function renderPolygonGeometry(builderGroup, geometry, style, feature) {
	    var fillStyle = style.getFill();
	    var strokeStyle = style.getStroke();
	    if (fillStyle || strokeStyle) {
	        var polygonReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.POLYGON);
	        polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);
	        polygonReplay.drawPolygon(geometry, feature);
	    }
	    var textStyle = style.getText();
	    if (textStyle) {
	        var textReplay = builderGroup.getBuilder(style.getZIndex(), ReplayType.TEXT);
	        textReplay.setTextStyle(textStyle, builderGroup.addDeclutter(false));
	        textReplay.drawText(geometry, feature);
	    }
	}

	/**
	 * @module ol/render/canvas/Immediate
	 */
	// FIXME test, especially polygons with holes and multipolygons
	// FIXME need to handle large thick features (where pixel size matters)
	// FIXME add offset and end to ol/geom/flat/transform~transform2D?
	var __extends$v = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @classdesc
	 * A concrete subclass of {@link module:ol/render/VectorContext} that implements
	 * direct rendering of features and geometries to an HTML5 Canvas context.
	 * Instances of this class are created internally by the library and
	 * provided to application code as vectorContext member of the
	 * {@link module:ol/render/Event~RenderEvent} object associated with postcompose, precompose and
	 * render events emitted by layers and maps.
	 */
	var CanvasImmediateRenderer = /** @class */ (function (_super) {
	    __extends$v(CanvasImmediateRenderer, _super);
	    /**
	     * @param {CanvasRenderingContext2D} context Context.
	     * @param {number} pixelRatio Pixel ratio.
	     * @param {import("../../extent.js").Extent} extent Extent.
	     * @param {import("../../transform.js").Transform} transform Transform.
	     * @param {number} viewRotation View rotation.
	     * @param {number=} opt_squaredTolerance Optional squared tolerance for simplification.
	     * @param {import("../../proj.js").TransformFunction=} opt_userTransform Transform from user to view projection.
	     */
	    function CanvasImmediateRenderer(context, pixelRatio, extent, transform, viewRotation, opt_squaredTolerance, opt_userTransform) {
	        var _this = _super.call(this) || this;
	        /**
	         * @private
	         * @type {CanvasRenderingContext2D}
	         */
	        _this.context_ = context;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.pixelRatio_ = pixelRatio;
	        /**
	         * @private
	         * @type {import("../../extent.js").Extent}
	         */
	        _this.extent_ = extent;
	        /**
	         * @private
	         * @type {import("../../transform.js").Transform}
	         */
	        _this.transform_ = transform;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.viewRotation_ = viewRotation;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.squaredTolerance_ = opt_squaredTolerance;
	        /**
	         * @private
	         * @type {import("../../proj.js").TransformFunction}
	         */
	        _this.userTransform_ = opt_userTransform;
	        /**
	         * @private
	         * @type {?import("../canvas.js").FillState}
	         */
	        _this.contextFillState_ = null;
	        /**
	         * @private
	         * @type {?import("../canvas.js").StrokeState}
	         */
	        _this.contextStrokeState_ = null;
	        /**
	         * @private
	         * @type {?import("../canvas.js").TextState}
	         */
	        _this.contextTextState_ = null;
	        /**
	         * @private
	         * @type {?import("../canvas.js").FillState}
	         */
	        _this.fillState_ = null;
	        /**
	         * @private
	         * @type {?import("../canvas.js").StrokeState}
	         */
	        _this.strokeState_ = null;
	        /**
	         * @private
	         * @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement}
	         */
	        _this.image_ = null;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.imageAnchorX_ = 0;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.imageAnchorY_ = 0;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.imageHeight_ = 0;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.imageOpacity_ = 0;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.imageOriginX_ = 0;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.imageOriginY_ = 0;
	        /**
	         * @private
	         * @type {boolean}
	         */
	        _this.imageRotateWithView_ = false;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.imageRotation_ = 0;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.imageScale_ = 0;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.imageWidth_ = 0;
	        /**
	         * @private
	         * @type {string}
	         */
	        _this.text_ = '';
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.textOffsetX_ = 0;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.textOffsetY_ = 0;
	        /**
	         * @private
	         * @type {boolean}
	         */
	        _this.textRotateWithView_ = false;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.textRotation_ = 0;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.textScale_ = 0;
	        /**
	         * @private
	         * @type {?import("../canvas.js").FillState}
	         */
	        _this.textFillState_ = null;
	        /**
	         * @private
	         * @type {?import("../canvas.js").StrokeState}
	         */
	        _this.textStrokeState_ = null;
	        /**
	         * @private
	         * @type {?import("../canvas.js").TextState}
	         */
	        _this.textState_ = null;
	        /**
	         * @private
	         * @type {Array<number>}
	         */
	        _this.pixelCoordinates_ = [];
	        /**
	         * @private
	         * @type {import("../../transform.js").Transform}
	         */
	        _this.tmpLocalTransform_ = create();
	        return _this;
	    }
	    /**
	     * @param {Array<number>} flatCoordinates Flat coordinates.
	     * @param {number} offset Offset.
	     * @param {number} end End.
	     * @param {number} stride Stride.
	     * @private
	     */
	    CanvasImmediateRenderer.prototype.drawImages_ = function (flatCoordinates, offset, end, stride) {
	        if (!this.image_) {
	            return;
	        }
	        var pixelCoordinates = transform2D(flatCoordinates, offset, end, 2, this.transform_, this.pixelCoordinates_);
	        var context = this.context_;
	        var localTransform = this.tmpLocalTransform_;
	        var alpha = context.globalAlpha;
	        if (this.imageOpacity_ != 1) {
	            context.globalAlpha = alpha * this.imageOpacity_;
	        }
	        var rotation = this.imageRotation_;
	        if (this.imageRotateWithView_) {
	            rotation += this.viewRotation_;
	        }
	        for (var i = 0, ii = pixelCoordinates.length; i < ii; i += 2) {
	            var x = pixelCoordinates[i] - this.imageAnchorX_;
	            var y = pixelCoordinates[i + 1] - this.imageAnchorY_;
	            if (rotation !== 0 || this.imageScale_ != 1) {
	                var centerX = x + this.imageAnchorX_;
	                var centerY = y + this.imageAnchorY_;
	                compose(localTransform, centerX, centerY, this.imageScale_, this.imageScale_, rotation, -centerX, -centerY);
	                context.setTransform.apply(context, localTransform);
	            }
	            context.drawImage(this.image_, this.imageOriginX_, this.imageOriginY_, this.imageWidth_, this.imageHeight_, x, y, this.imageWidth_, this.imageHeight_);
	        }
	        if (rotation !== 0 || this.imageScale_ != 1) {
	            context.setTransform(1, 0, 0, 1, 0, 0);
	        }
	        if (this.imageOpacity_ != 1) {
	            context.globalAlpha = alpha;
	        }
	    };
	    /**
	     * @param {Array<number>} flatCoordinates Flat coordinates.
	     * @param {number} offset Offset.
	     * @param {number} end End.
	     * @param {number} stride Stride.
	     * @private
	     */
	    CanvasImmediateRenderer.prototype.drawText_ = function (flatCoordinates, offset, end, stride) {
	        if (!this.textState_ || this.text_ === '') {
	            return;
	        }
	        if (this.textFillState_) {
	            this.setContextFillState_(this.textFillState_);
	        }
	        if (this.textStrokeState_) {
	            this.setContextStrokeState_(this.textStrokeState_);
	        }
	        this.setContextTextState_(this.textState_);
	        var pixelCoordinates = transform2D(flatCoordinates, offset, end, stride, this.transform_, this.pixelCoordinates_);
	        var context = this.context_;
	        var rotation = this.textRotation_;
	        if (this.textRotateWithView_) {
	            rotation += this.viewRotation_;
	        }
	        for (; offset < end; offset += stride) {
	            var x = pixelCoordinates[offset] + this.textOffsetX_;
	            var y = pixelCoordinates[offset + 1] + this.textOffsetY_;
	            if (rotation !== 0 || this.textScale_ != 1) {
	                var localTransform = compose(this.tmpLocalTransform_, x, y, this.textScale_, this.textScale_, rotation, -x, -y);
	                context.setTransform.apply(context, localTransform);
	            }
	            if (this.textStrokeState_) {
	                context.strokeText(this.text_, x, y);
	            }
	            if (this.textFillState_) {
	                context.fillText(this.text_, x, y);
	            }
	        }
	        if (rotation !== 0 || this.textScale_ != 1) {
	            context.setTransform(1, 0, 0, 1, 0, 0);
	        }
	    };
	    /**
	     * @param {Array<number>} flatCoordinates Flat coordinates.
	     * @param {number} offset Offset.
	     * @param {number} end End.
	     * @param {number} stride Stride.
	     * @param {boolean} close Close.
	     * @private
	     * @return {number} end End.
	     */
	    CanvasImmediateRenderer.prototype.moveToLineTo_ = function (flatCoordinates, offset, end, stride, close) {
	        var context = this.context_;
	        var pixelCoordinates = transform2D(flatCoordinates, offset, end, stride, this.transform_, this.pixelCoordinates_);
	        context.moveTo(pixelCoordinates[0], pixelCoordinates[1]);
	        var length = pixelCoordinates.length;
	        if (close) {
	            length -= 2;
	        }
	        for (var i = 2; i < length; i += 2) {
	            context.lineTo(pixelCoordinates[i], pixelCoordinates[i + 1]);
	        }
	        if (close) {
	            context.closePath();
	        }
	        return end;
	    };
	    /**
	     * @param {Array<number>} flatCoordinates Flat coordinates.
	     * @param {number} offset Offset.
	     * @param {Array<number>} ends Ends.
	     * @param {number} stride Stride.
	     * @private
	     * @return {number} End.
	     */
	    CanvasImmediateRenderer.prototype.drawRings_ = function (flatCoordinates, offset, ends, stride) {
	        for (var i = 0, ii = ends.length; i < ii; ++i) {
	            offset = this.moveToLineTo_(flatCoordinates, offset, ends[i], stride, true);
	        }
	        return offset;
	    };
	    /**
	     * Render a circle geometry into the canvas.  Rendering is immediate and uses
	     * the current fill and stroke styles.
	     *
	     * @param {import("../../geom/Circle.js").default} geometry Circle geometry.
	     * @override
	     * @api
	     */
	    CanvasImmediateRenderer.prototype.drawCircle = function (geometry) {
	        if (!intersects(this.extent_, geometry.getExtent())) {
	            return;
	        }
	        if (this.fillState_ || this.strokeState_) {
	            if (this.fillState_) {
	                this.setContextFillState_(this.fillState_);
	            }
	            if (this.strokeState_) {
	                this.setContextStrokeState_(this.strokeState_);
	            }
	            var pixelCoordinates = transformGeom2D(geometry, this.transform_, this.pixelCoordinates_);
	            var dx = pixelCoordinates[2] - pixelCoordinates[0];
	            var dy = pixelCoordinates[3] - pixelCoordinates[1];
	            var radius = Math.sqrt(dx * dx + dy * dy);
	            var context = this.context_;
	            context.beginPath();
	            context.arc(pixelCoordinates[0], pixelCoordinates[1], radius, 0, 2 * Math.PI);
	            if (this.fillState_) {
	                context.fill();
	            }
	            if (this.strokeState_) {
	                context.stroke();
	            }
	        }
	        if (this.text_ !== '') {
	            this.drawText_(geometry.getCenter(), 0, 2, 2);
	        }
	    };
	    /**
	     * Set the rendering style.  Note that since this is an immediate rendering API,
	     * any `zIndex` on the provided style will be ignored.
	     *
	     * @param {import("../../style/Style.js").default} style The rendering style.
	     * @override
	     * @api
	     */
	    CanvasImmediateRenderer.prototype.setStyle = function (style) {
	        this.setFillStrokeStyle(style.getFill(), style.getStroke());
	        this.setImageStyle(style.getImage());
	        this.setTextStyle(style.getText());
	    };
	    /**
	     * @param {import("../../transform.js").Transform} transform Transform.
	     */
	    CanvasImmediateRenderer.prototype.setTransform = function (transform) {
	        this.transform_ = transform;
	    };
	    /**
	     * Render a geometry into the canvas.  Call
	     * {@link module:ol/render/canvas/Immediate#setStyle} first to set the rendering style.
	     *
	     * @param {import("../../geom/Geometry.js").default|import("../Feature.js").default} geometry The geometry to render.
	     * @override
	     * @api
	     */
	    CanvasImmediateRenderer.prototype.drawGeometry = function (geometry) {
	        var type = geometry.getType();
	        switch (type) {
	            case GeometryType.POINT:
	                this.drawPoint(/** @type {import("../../geom/Point.js").default} */ (geometry));
	                break;
	            case GeometryType.LINE_STRING:
	                this.drawLineString(/** @type {import("../../geom/LineString.js").default} */ (geometry));
	                break;
	            case GeometryType.POLYGON:
	                this.drawPolygon(/** @type {import("../../geom/Polygon.js").default} */ (geometry));
	                break;
	            case GeometryType.MULTI_POINT:
	                this.drawMultiPoint(/** @type {import("../../geom/MultiPoint.js").default} */ (geometry));
	                break;
	            case GeometryType.MULTI_LINE_STRING:
	                this.drawMultiLineString(/** @type {import("../../geom/MultiLineString.js").default} */ (geometry));
	                break;
	            case GeometryType.MULTI_POLYGON:
	                this.drawMultiPolygon(/** @type {import("../../geom/MultiPolygon.js").default} */ (geometry));
	                break;
	            case GeometryType.GEOMETRY_COLLECTION:
	                this.drawGeometryCollection(/** @type {import("../../geom/GeometryCollection.js").default} */ (geometry));
	                break;
	            case GeometryType.CIRCLE:
	                this.drawCircle(/** @type {import("../../geom/Circle.js").default} */ (geometry));
	                break;
	        }
	    };
	    /**
	     * Render a feature into the canvas.  Note that any `zIndex` on the provided
	     * style will be ignored - features are rendered immediately in the order that
	     * this method is called.  If you need `zIndex` support, you should be using an
	     * {@link module:ol/layer/Vector~VectorLayer} instead.
	     *
	     * @param {import("../../Feature.js").default} feature Feature.
	     * @param {import("../../style/Style.js").default} style Style.
	     * @override
	     * @api
	     */
	    CanvasImmediateRenderer.prototype.drawFeature = function (feature, style) {
	        var geometry = style.getGeometryFunction()(feature);
	        if (!geometry || !intersects(this.extent_, geometry.getExtent())) {
	            return;
	        }
	        this.setStyle(style);
	        this.drawGeometry(geometry);
	    };
	    /**
	     * Render a GeometryCollection to the canvas.  Rendering is immediate and
	     * uses the current styles appropriate for each geometry in the collection.
	     *
	     * @param {import("../../geom/GeometryCollection.js").default} geometry Geometry collection.
	     * @override
	     */
	    CanvasImmediateRenderer.prototype.drawGeometryCollection = function (geometry) {
	        var geometries = geometry.getGeometriesArray();
	        for (var i = 0, ii = geometries.length; i < ii; ++i) {
	            this.drawGeometry(geometries[i]);
	        }
	    };
	    /**
	     * Render a Point geometry into the canvas.  Rendering is immediate and uses
	     * the current style.
	     *
	     * @param {import("../../geom/Point.js").default|import("../Feature.js").default} geometry Point geometry.
	     * @override
	     */
	    CanvasImmediateRenderer.prototype.drawPoint = function (geometry) {
	        if (this.squaredTolerance_) {
	            geometry = /** @type {import("../../geom/Point.js").default} */ (geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_));
	        }
	        var flatCoordinates = geometry.getFlatCoordinates();
	        var stride = geometry.getStride();
	        if (this.image_) {
	            this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);
	        }
	        if (this.text_ !== '') {
	            this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);
	        }
	    };
	    /**
	     * Render a MultiPoint geometry  into the canvas.  Rendering is immediate and
	     * uses the current style.
	     *
	     * @param {import("../../geom/MultiPoint.js").default|import("../Feature.js").default} geometry MultiPoint geometry.
	     * @override
	     */
	    CanvasImmediateRenderer.prototype.drawMultiPoint = function (geometry) {
	        if (this.squaredTolerance_) {
	            geometry = /** @type {import("../../geom/MultiPoint.js").default} */ (geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_));
	        }
	        var flatCoordinates = geometry.getFlatCoordinates();
	        var stride = geometry.getStride();
	        if (this.image_) {
	            this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);
	        }
	        if (this.text_ !== '') {
	            this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);
	        }
	    };
	    /**
	     * Render a LineString into the canvas.  Rendering is immediate and uses
	     * the current style.
	     *
	     * @param {import("../../geom/LineString.js").default|import("../Feature.js").default} geometry LineString geometry.
	     * @override
	     */
	    CanvasImmediateRenderer.prototype.drawLineString = function (geometry) {
	        if (this.squaredTolerance_) {
	            geometry = /** @type {import("../../geom/LineString.js").default} */ (geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_));
	        }
	        if (!intersects(this.extent_, geometry.getExtent())) {
	            return;
	        }
	        if (this.strokeState_) {
	            this.setContextStrokeState_(this.strokeState_);
	            var context = this.context_;
	            var flatCoordinates = geometry.getFlatCoordinates();
	            context.beginPath();
	            this.moveToLineTo_(flatCoordinates, 0, flatCoordinates.length, geometry.getStride(), false);
	            context.stroke();
	        }
	        if (this.text_ !== '') {
	            var flatMidpoint = geometry.getFlatMidpoint();
	            this.drawText_(flatMidpoint, 0, 2, 2);
	        }
	    };
	    /**
	     * Render a MultiLineString geometry into the canvas.  Rendering is immediate
	     * and uses the current style.
	     *
	     * @param {import("../../geom/MultiLineString.js").default|import("../Feature.js").default} geometry MultiLineString geometry.
	     * @override
	     */
	    CanvasImmediateRenderer.prototype.drawMultiLineString = function (geometry) {
	        if (this.squaredTolerance_) {
	            geometry = /** @type {import("../../geom/MultiLineString.js").default} */ (geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_));
	        }
	        var geometryExtent = geometry.getExtent();
	        if (!intersects(this.extent_, geometryExtent)) {
	            return;
	        }
	        if (this.strokeState_) {
	            this.setContextStrokeState_(this.strokeState_);
	            var context = this.context_;
	            var flatCoordinates = geometry.getFlatCoordinates();
	            var offset = 0;
	            var ends = /** @type {Array<number>} */ (geometry.getEnds());
	            var stride = geometry.getStride();
	            context.beginPath();
	            for (var i = 0, ii = ends.length; i < ii; ++i) {
	                offset = this.moveToLineTo_(flatCoordinates, offset, ends[i], stride, false);
	            }
	            context.stroke();
	        }
	        if (this.text_ !== '') {
	            var flatMidpoints = geometry.getFlatMidpoints();
	            this.drawText_(flatMidpoints, 0, flatMidpoints.length, 2);
	        }
	    };
	    /**
	     * Render a Polygon geometry into the canvas.  Rendering is immediate and uses
	     * the current style.
	     *
	     * @param {import("../../geom/Polygon.js").default|import("../Feature.js").default} geometry Polygon geometry.
	     * @override
	     */
	    CanvasImmediateRenderer.prototype.drawPolygon = function (geometry) {
	        if (this.squaredTolerance_) {
	            geometry = /** @type {import("../../geom/Polygon.js").default} */ (geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_));
	        }
	        if (!intersects(this.extent_, geometry.getExtent())) {
	            return;
	        }
	        if (this.strokeState_ || this.fillState_) {
	            if (this.fillState_) {
	                this.setContextFillState_(this.fillState_);
	            }
	            if (this.strokeState_) {
	                this.setContextStrokeState_(this.strokeState_);
	            }
	            var context = this.context_;
	            context.beginPath();
	            this.drawRings_(geometry.getOrientedFlatCoordinates(), 0, /** @type {Array<number>} */ (geometry.getEnds()), geometry.getStride());
	            if (this.fillState_) {
	                context.fill();
	            }
	            if (this.strokeState_) {
	                context.stroke();
	            }
	        }
	        if (this.text_ !== '') {
	            var flatInteriorPoint = geometry.getFlatInteriorPoint();
	            this.drawText_(flatInteriorPoint, 0, 2, 2);
	        }
	    };
	    /**
	     * Render MultiPolygon geometry into the canvas.  Rendering is immediate and
	     * uses the current style.
	     * @param {import("../../geom/MultiPolygon.js").default} geometry MultiPolygon geometry.
	     * @override
	     */
	    CanvasImmediateRenderer.prototype.drawMultiPolygon = function (geometry) {
	        if (this.squaredTolerance_) {
	            geometry = /** @type {import("../../geom/MultiPolygon.js").default} */ (geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_));
	        }
	        if (!intersects(this.extent_, geometry.getExtent())) {
	            return;
	        }
	        if (this.strokeState_ || this.fillState_) {
	            if (this.fillState_) {
	                this.setContextFillState_(this.fillState_);
	            }
	            if (this.strokeState_) {
	                this.setContextStrokeState_(this.strokeState_);
	            }
	            var context = this.context_;
	            var flatCoordinates = geometry.getOrientedFlatCoordinates();
	            var offset = 0;
	            var endss = geometry.getEndss();
	            var stride = geometry.getStride();
	            context.beginPath();
	            for (var i = 0, ii = endss.length; i < ii; ++i) {
	                var ends = endss[i];
	                offset = this.drawRings_(flatCoordinates, offset, ends, stride);
	            }
	            if (this.fillState_) {
	                context.fill();
	            }
	            if (this.strokeState_) {
	                context.stroke();
	            }
	        }
	        if (this.text_ !== '') {
	            var flatInteriorPoints = geometry.getFlatInteriorPoints();
	            this.drawText_(flatInteriorPoints, 0, flatInteriorPoints.length, 2);
	        }
	    };
	    /**
	     * @param {import("../canvas.js").FillState} fillState Fill state.
	     * @private
	     */
	    CanvasImmediateRenderer.prototype.setContextFillState_ = function (fillState) {
	        var context = this.context_;
	        var contextFillState = this.contextFillState_;
	        if (!contextFillState) {
	            context.fillStyle = fillState.fillStyle;
	            this.contextFillState_ = {
	                fillStyle: fillState.fillStyle
	            };
	        }
	        else {
	            if (contextFillState.fillStyle != fillState.fillStyle) {
	                contextFillState.fillStyle = fillState.fillStyle;
	                context.fillStyle = fillState.fillStyle;
	            }
	        }
	    };
	    /**
	     * @param {import("../canvas.js").StrokeState} strokeState Stroke state.
	     * @private
	     */
	    CanvasImmediateRenderer.prototype.setContextStrokeState_ = function (strokeState) {
	        var context = this.context_;
	        var contextStrokeState = this.contextStrokeState_;
	        if (!contextStrokeState) {
	            context.lineCap = strokeState.lineCap;
	            if (context.setLineDash) {
	                context.setLineDash(strokeState.lineDash);
	                context.lineDashOffset = strokeState.lineDashOffset;
	            }
	            context.lineJoin = strokeState.lineJoin;
	            context.lineWidth = strokeState.lineWidth;
	            context.miterLimit = strokeState.miterLimit;
	            context.strokeStyle = strokeState.strokeStyle;
	            this.contextStrokeState_ = {
	                lineCap: strokeState.lineCap,
	                lineDash: strokeState.lineDash,
	                lineDashOffset: strokeState.lineDashOffset,
	                lineJoin: strokeState.lineJoin,
	                lineWidth: strokeState.lineWidth,
	                miterLimit: strokeState.miterLimit,
	                strokeStyle: strokeState.strokeStyle
	            };
	        }
	        else {
	            if (contextStrokeState.lineCap != strokeState.lineCap) {
	                contextStrokeState.lineCap = strokeState.lineCap;
	                context.lineCap = strokeState.lineCap;
	            }
	            if (context.setLineDash) {
	                if (!equals$1(contextStrokeState.lineDash, strokeState.lineDash)) {
	                    context.setLineDash(contextStrokeState.lineDash = strokeState.lineDash);
	                }
	                if (contextStrokeState.lineDashOffset != strokeState.lineDashOffset) {
	                    contextStrokeState.lineDashOffset = strokeState.lineDashOffset;
	                    context.lineDashOffset = strokeState.lineDashOffset;
	                }
	            }
	            if (contextStrokeState.lineJoin != strokeState.lineJoin) {
	                contextStrokeState.lineJoin = strokeState.lineJoin;
	                context.lineJoin = strokeState.lineJoin;
	            }
	            if (contextStrokeState.lineWidth != strokeState.lineWidth) {
	                contextStrokeState.lineWidth = strokeState.lineWidth;
	                context.lineWidth = strokeState.lineWidth;
	            }
	            if (contextStrokeState.miterLimit != strokeState.miterLimit) {
	                contextStrokeState.miterLimit = strokeState.miterLimit;
	                context.miterLimit = strokeState.miterLimit;
	            }
	            if (contextStrokeState.strokeStyle != strokeState.strokeStyle) {
	                contextStrokeState.strokeStyle = strokeState.strokeStyle;
	                context.strokeStyle = strokeState.strokeStyle;
	            }
	        }
	    };
	    /**
	     * @param {import("../canvas.js").TextState} textState Text state.
	     * @private
	     */
	    CanvasImmediateRenderer.prototype.setContextTextState_ = function (textState) {
	        var context = this.context_;
	        var contextTextState = this.contextTextState_;
	        var textAlign = textState.textAlign ?
	            textState.textAlign : defaultTextAlign;
	        if (!contextTextState) {
	            context.font = textState.font;
	            context.textAlign = /** @type {CanvasTextAlign} */ (textAlign);
	            context.textBaseline = /** @type {CanvasTextBaseline} */ (textState.textBaseline);
	            this.contextTextState_ = {
	                font: textState.font,
	                textAlign: textAlign,
	                textBaseline: textState.textBaseline
	            };
	        }
	        else {
	            if (contextTextState.font != textState.font) {
	                contextTextState.font = textState.font;
	                context.font = textState.font;
	            }
	            if (contextTextState.textAlign != textAlign) {
	                contextTextState.textAlign = /** @type {CanvasTextAlign} */ (textAlign);
	                context.textAlign = /** @type {CanvasTextAlign} */ (textAlign);
	            }
	            if (contextTextState.textBaseline != textState.textBaseline) {
	                contextTextState.textBaseline = /** @type {CanvasTextBaseline} */ (textState.textBaseline);
	                context.textBaseline = /** @type {CanvasTextBaseline} */ (textState.textBaseline);
	            }
	        }
	    };
	    /**
	     * Set the fill and stroke style for subsequent draw operations.  To clear
	     * either fill or stroke styles, pass null for the appropriate parameter.
	     *
	     * @param {import("../../style/Fill.js").default} fillStyle Fill style.
	     * @param {import("../../style/Stroke.js").default} strokeStyle Stroke style.
	     * @override
	     */
	    CanvasImmediateRenderer.prototype.setFillStrokeStyle = function (fillStyle, strokeStyle) {
	        if (!fillStyle) {
	            this.fillState_ = null;
	        }
	        else {
	            var fillStyleColor = fillStyle.getColor();
	            this.fillState_ = {
	                fillStyle: asColorLike(fillStyleColor ?
	                    fillStyleColor : defaultFillStyle)
	            };
	        }
	        if (!strokeStyle) {
	            this.strokeState_ = null;
	        }
	        else {
	            var strokeStyleColor = strokeStyle.getColor();
	            var strokeStyleLineCap = strokeStyle.getLineCap();
	            var strokeStyleLineDash = strokeStyle.getLineDash();
	            var strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();
	            var strokeStyleLineJoin = strokeStyle.getLineJoin();
	            var strokeStyleWidth = strokeStyle.getWidth();
	            var strokeStyleMiterLimit = strokeStyle.getMiterLimit();
	            this.strokeState_ = {
	                lineCap: strokeStyleLineCap !== undefined ?
	                    strokeStyleLineCap : defaultLineCap,
	                lineDash: strokeStyleLineDash ?
	                    strokeStyleLineDash : defaultLineDash,
	                lineDashOffset: strokeStyleLineDashOffset ?
	                    strokeStyleLineDashOffset : defaultLineDashOffset,
	                lineJoin: strokeStyleLineJoin !== undefined ?
	                    strokeStyleLineJoin : defaultLineJoin,
	                lineWidth: this.pixelRatio_ * (strokeStyleWidth !== undefined ?
	                    strokeStyleWidth : defaultLineWidth),
	                miterLimit: strokeStyleMiterLimit !== undefined ?
	                    strokeStyleMiterLimit : defaultMiterLimit,
	                strokeStyle: asColorLike(strokeStyleColor ?
	                    strokeStyleColor : defaultStrokeStyle)
	            };
	        }
	    };
	    /**
	     * Set the image style for subsequent draw operations.  Pass null to remove
	     * the image style.
	     *
	     * @param {import("../../style/Image.js").default} imageStyle Image style.
	     * @override
	     */
	    CanvasImmediateRenderer.prototype.setImageStyle = function (imageStyle) {
	        if (!imageStyle) {
	            this.image_ = null;
	        }
	        else {
	            var imageAnchor = imageStyle.getAnchor();
	            // FIXME pixel ratio
	            var imageImage = imageStyle.getImage(1);
	            var imageOrigin = imageStyle.getOrigin();
	            var imageSize = imageStyle.getSize();
	            this.imageAnchorX_ = imageAnchor[0];
	            this.imageAnchorY_ = imageAnchor[1];
	            this.imageHeight_ = imageSize[1];
	            this.image_ = imageImage;
	            this.imageOpacity_ = imageStyle.getOpacity();
	            this.imageOriginX_ = imageOrigin[0];
	            this.imageOriginY_ = imageOrigin[1];
	            this.imageRotateWithView_ = imageStyle.getRotateWithView();
	            this.imageRotation_ = imageStyle.getRotation();
	            this.imageScale_ = imageStyle.getScale() * this.pixelRatio_;
	            this.imageWidth_ = imageSize[0];
	        }
	    };
	    /**
	     * Set the text style for subsequent draw operations.  Pass null to
	     * remove the text style.
	     *
	     * @param {import("../../style/Text.js").default} textStyle Text style.
	     * @override
	     */
	    CanvasImmediateRenderer.prototype.setTextStyle = function (textStyle) {
	        if (!textStyle) {
	            this.text_ = '';
	        }
	        else {
	            var textFillStyle = textStyle.getFill();
	            if (!textFillStyle) {
	                this.textFillState_ = null;
	            }
	            else {
	                var textFillStyleColor = textFillStyle.getColor();
	                this.textFillState_ = {
	                    fillStyle: asColorLike(textFillStyleColor ?
	                        textFillStyleColor : defaultFillStyle)
	                };
	            }
	            var textStrokeStyle = textStyle.getStroke();
	            if (!textStrokeStyle) {
	                this.textStrokeState_ = null;
	            }
	            else {
	                var textStrokeStyleColor = textStrokeStyle.getColor();
	                var textStrokeStyleLineCap = textStrokeStyle.getLineCap();
	                var textStrokeStyleLineDash = textStrokeStyle.getLineDash();
	                var textStrokeStyleLineDashOffset = textStrokeStyle.getLineDashOffset();
	                var textStrokeStyleLineJoin = textStrokeStyle.getLineJoin();
	                var textStrokeStyleWidth = textStrokeStyle.getWidth();
	                var textStrokeStyleMiterLimit = textStrokeStyle.getMiterLimit();
	                this.textStrokeState_ = {
	                    lineCap: textStrokeStyleLineCap !== undefined ?
	                        textStrokeStyleLineCap : defaultLineCap,
	                    lineDash: textStrokeStyleLineDash ?
	                        textStrokeStyleLineDash : defaultLineDash,
	                    lineDashOffset: textStrokeStyleLineDashOffset ?
	                        textStrokeStyleLineDashOffset : defaultLineDashOffset,
	                    lineJoin: textStrokeStyleLineJoin !== undefined ?
	                        textStrokeStyleLineJoin : defaultLineJoin,
	                    lineWidth: textStrokeStyleWidth !== undefined ?
	                        textStrokeStyleWidth : defaultLineWidth,
	                    miterLimit: textStrokeStyleMiterLimit !== undefined ?
	                        textStrokeStyleMiterLimit : defaultMiterLimit,
	                    strokeStyle: asColorLike(textStrokeStyleColor ?
	                        textStrokeStyleColor : defaultStrokeStyle)
	                };
	            }
	            var textFont = textStyle.getFont();
	            var textOffsetX = textStyle.getOffsetX();
	            var textOffsetY = textStyle.getOffsetY();
	            var textRotateWithView = textStyle.getRotateWithView();
	            var textRotation = textStyle.getRotation();
	            var textScale = textStyle.getScale();
	            var textText = textStyle.getText();
	            var textTextAlign = textStyle.getTextAlign();
	            var textTextBaseline = textStyle.getTextBaseline();
	            this.textState_ = {
	                font: textFont !== undefined ?
	                    textFont : defaultFont,
	                textAlign: textTextAlign !== undefined ?
	                    textTextAlign : defaultTextAlign,
	                textBaseline: textTextBaseline !== undefined ?
	                    textTextBaseline : defaultTextBaseline
	            };
	            this.text_ = textText !== undefined ? textText : '';
	            this.textOffsetX_ =
	                textOffsetX !== undefined ? (this.pixelRatio_ * textOffsetX) : 0;
	            this.textOffsetY_ =
	                textOffsetY !== undefined ? (this.pixelRatio_ * textOffsetY) : 0;
	            this.textRotateWithView_ = textRotateWithView !== undefined ? textRotateWithView : false;
	            this.textRotation_ = textRotation !== undefined ? textRotation : 0;
	            this.textScale_ = this.pixelRatio_ * (textScale !== undefined ?
	                textScale : 1);
	        }
	    };
	    return CanvasImmediateRenderer;
	}(VectorContext));

	/**
	 * @module ol/style/IconAnchorUnits
	 */
	/**
	 * Icon anchor units. One of 'fraction', 'pixels'.
	 * @enum {string}
	 */
	var IconAnchorUnits = {
	    FRACTION: 'fraction',
	    PIXELS: 'pixels'
	};

	/**
	 * @module ol/style/IconImageCache
	 */
	/**
	 * @classdesc
	 * Singleton class. Available through {@link module:ol/style/IconImageCache~shared}.
	 */
	var IconImageCache = /** @class */ (function () {
	    function IconImageCache() {
	        /**
	        * @type {!Object<string, import("./IconImage.js").default>}
	        * @private
	        */
	        this.cache_ = {};
	        /**
	        * @type {number}
	        * @private
	        */
	        this.cacheSize_ = 0;
	        /**
	        * @type {number}
	        * @private
	        */
	        this.maxCacheSize_ = 32;
	    }
	    /**
	    * FIXME empty description for jsdoc
	    */
	    IconImageCache.prototype.clear = function () {
	        this.cache_ = {};
	        this.cacheSize_ = 0;
	    };
	    /**
	     * @return {boolean} Can expire cache.
	     */
	    IconImageCache.prototype.canExpireCache = function () {
	        return this.cacheSize_ > this.maxCacheSize_;
	    };
	    /**
	    * FIXME empty description for jsdoc
	    */
	    IconImageCache.prototype.expire = function () {
	        if (this.canExpireCache()) {
	            var i = 0;
	            for (var key in this.cache_) {
	                var iconImage = this.cache_[key];
	                if ((i++ & 3) === 0 && !iconImage.hasListener()) {
	                    delete this.cache_[key];
	                    --this.cacheSize_;
	                }
	            }
	        }
	    };
	    /**
	    * @param {string} src Src.
	    * @param {?string} crossOrigin Cross origin.
	    * @param {import("../color.js").Color} color Color.
	    * @return {import("./IconImage.js").default} Icon image.
	    */
	    IconImageCache.prototype.get = function (src, crossOrigin, color) {
	        var key = getKey(src, crossOrigin, color);
	        return key in this.cache_ ? this.cache_[key] : null;
	    };
	    /**
	    * @param {string} src Src.
	    * @param {?string} crossOrigin Cross origin.
	    * @param {import("../color.js").Color} color Color.
	    * @param {import("./IconImage.js").default} iconImage Icon image.
	    */
	    IconImageCache.prototype.set = function (src, crossOrigin, color, iconImage) {
	        var key = getKey(src, crossOrigin, color);
	        this.cache_[key] = iconImage;
	        ++this.cacheSize_;
	    };
	    /**
	    * Set the cache size of the icon cache. Default is `32`. Change this value when
	    * your map uses more than 32 different icon images and you are not caching icon
	    * styles on the application level.
	    * @param {number} maxCacheSize Cache max size.
	    * @api
	    */
	    IconImageCache.prototype.setSize = function (maxCacheSize) {
	        this.maxCacheSize_ = maxCacheSize;
	        this.expire();
	    };
	    return IconImageCache;
	}());
	/**
	 * @param {string} src Src.
	 * @param {?string} crossOrigin Cross origin.
	 * @param {import("../color.js").Color} color Color.
	 * @return {string} Cache key.
	 */
	function getKey(src, crossOrigin, color) {
	    var colorString = color ? asString(color) : 'null';
	    return crossOrigin + ':' + src + ':' + colorString;
	}
	/**
	 * The {@link module:ol/style/IconImageCache~IconImageCache} for
	 * {@link module:ol/style/Icon~Icon} images.
	 * @api
	 */
	var shared$1 = new IconImageCache();

	var __extends$w = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @abstract
	 */
	var ImageBase = /** @class */ (function (_super) {
	    __extends$w(ImageBase, _super);
	    /**
	     * @param {import("./extent.js").Extent} extent Extent.
	     * @param {number|undefined} resolution Resolution.
	     * @param {number} pixelRatio Pixel ratio.
	     * @param {import("./ImageState.js").default} state State.
	     */
	    function ImageBase(extent, resolution, pixelRatio, state) {
	        var _this = _super.call(this) || this;
	        /**
	         * @protected
	         * @type {import("./extent.js").Extent}
	         */
	        _this.extent = extent;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.pixelRatio_ = pixelRatio;
	        /**
	         * @protected
	         * @type {number|undefined}
	         */
	        _this.resolution = resolution;
	        /**
	         * @protected
	         * @type {import("./ImageState.js").default}
	         */
	        _this.state = state;
	        return _this;
	    }
	    /**
	     * @protected
	     */
	    ImageBase.prototype.changed = function () {
	        this.dispatchEvent(EventType.CHANGE);
	    };
	    /**
	     * @return {import("./extent.js").Extent} Extent.
	     */
	    ImageBase.prototype.getExtent = function () {
	        return this.extent;
	    };
	    /**
	     * @abstract
	     * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
	     */
	    ImageBase.prototype.getImage = function () {
	        return abstract();
	    };
	    /**
	     * @return {number} PixelRatio.
	     */
	    ImageBase.prototype.getPixelRatio = function () {
	        return this.pixelRatio_;
	    };
	    /**
	     * @return {number} Resolution.
	     */
	    ImageBase.prototype.getResolution = function () {
	        return /** @type {number} */ (this.resolution);
	    };
	    /**
	     * @return {import("./ImageState.js").default} State.
	     */
	    ImageBase.prototype.getState = function () {
	        return this.state;
	    };
	    /**
	     * Load not yet loaded URI.
	     * @abstract
	     */
	    ImageBase.prototype.load = function () {
	        abstract();
	    };
	    return ImageBase;
	}(Target));

	/**
	 * @module ol/has
	 */
	var ua = typeof navigator !== 'undefined' ?
	    navigator.userAgent.toLowerCase() : '';
	/**
	 * User agent string says we are dealing with Firefox as browser.
	 * @type {boolean}
	 */
	var FIREFOX = ua.indexOf('firefox') !== -1;
	/**
	 * User agent string says we are dealing with Safari as browser.
	 * @type {boolean}
	 */
	var SAFARI = ua.indexOf('safari') !== -1 && ua.indexOf('chrom') == -1;
	/**
	 * User agent string says we are dealing with a WebKit engine.
	 * @type {boolean}
	 */
	var WEBKIT = ua.indexOf('webkit') !== -1 && ua.indexOf('edge') == -1;
	/**
	 * User agent string says we are dealing with a Mac as platform.
	 * @type {boolean}
	 */
	var MAC = ua.indexOf('macintosh') !== -1;
	/**
	 * The ratio between physical pixels and device-independent pixels
	 * (dips) on the device (`window.devicePixelRatio`).
	 * @const
	 * @type {number}
	 * @api
	 */
	var DEVICE_PIXEL_RATIO = window.devicePixelRatio || 1;
	/**
	 * Image.prototype.decode() is supported.
	 * @type {boolean}
	 */
	var IMAGE_DECODE = typeof Image !== 'undefined' && Image.prototype.decode;

	var __extends$x = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * A function that takes an {@link module:ol/Image~Image} for the image and a
	 * `{string}` for the src as arguments. It is supposed to make it so the
	 * underlying image {@link module:ol/Image~Image#getImage} is assigned the
	 * content specified by the src. If not specified, the default is
	 *
	 *     function(image, src) {
	 *       image.getImage().src = src;
	 *     }
	 *
	 * Providing a custom `imageLoadFunction` can be useful to load images with
	 * post requests or - in general - through XHR requests, where the src of the
	 * image element would be set to a data URI when the content is loaded.
	 *
	 * @typedef {function(ImageWrapper, string): void} LoadFunction
	 * @api
	 */
	var ImageWrapper = /** @class */ (function (_super) {
	    __extends$x(ImageWrapper, _super);
	    /**
	     * @param {import("./extent.js").Extent} extent Extent.
	     * @param {number|undefined} resolution Resolution.
	     * @param {number} pixelRatio Pixel ratio.
	     * @param {string} src Image source URI.
	     * @param {?string} crossOrigin Cross origin.
	     * @param {LoadFunction} imageLoadFunction Image load function.
	     */
	    function ImageWrapper(extent, resolution, pixelRatio, src, crossOrigin, imageLoadFunction) {
	        var _this = _super.call(this, extent, resolution, pixelRatio, ImageState.IDLE) || this;
	        /**
	         * @private
	         * @type {string}
	         */
	        _this.src_ = src;
	        /**
	         * @private
	         * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}
	         */
	        _this.image_ = new Image();
	        if (crossOrigin !== null) {
	            _this.image_.crossOrigin = crossOrigin;
	        }
	        /**
	         * @private
	         * @type {?function():void}
	         */
	        _this.unlisten_ = null;
	        /**
	         * @protected
	         * @type {ImageState}
	         */
	        _this.state = ImageState.IDLE;
	        /**
	         * @private
	         * @type {LoadFunction}
	         */
	        _this.imageLoadFunction_ = imageLoadFunction;
	        return _this;
	    }
	    /**
	     * @inheritDoc
	     * @api
	     */
	    ImageWrapper.prototype.getImage = function () {
	        return this.image_;
	    };
	    /**
	     * Tracks loading or read errors.
	     *
	     * @private
	     */
	    ImageWrapper.prototype.handleImageError_ = function () {
	        this.state = ImageState.ERROR;
	        this.unlistenImage_();
	        this.changed();
	    };
	    /**
	     * Tracks successful image load.
	     *
	     * @private
	     */
	    ImageWrapper.prototype.handleImageLoad_ = function () {
	        if (this.resolution === undefined) {
	            this.resolution = getHeight(this.extent) / this.image_.height;
	        }
	        this.state = ImageState.LOADED;
	        this.unlistenImage_();
	        this.changed();
	    };
	    /**
	     * Load the image or retry if loading previously failed.
	     * Loading is taken care of by the tile queue, and calling this method is
	     * only needed for preloading or for reloading in case of an error.
	     * @override
	     * @api
	     */
	    ImageWrapper.prototype.load = function () {
	        if (this.state == ImageState.IDLE || this.state == ImageState.ERROR) {
	            this.state = ImageState.LOADING;
	            this.changed();
	            this.imageLoadFunction_(this, this.src_);
	            this.unlisten_ = listenImage(this.image_, this.handleImageLoad_.bind(this), this.handleImageError_.bind(this));
	        }
	    };
	    /**
	     * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.
	     */
	    ImageWrapper.prototype.setImage = function (image) {
	        this.image_ = image;
	    };
	    /**
	     * Discards event handlers which listen for load completion or errors.
	     *
	     * @private
	     */
	    ImageWrapper.prototype.unlistenImage_ = function () {
	        if (this.unlisten_) {
	            this.unlisten_();
	            this.unlisten_ = null;
	        }
	    };
	    return ImageWrapper;
	}(ImageBase));
	/**
	 * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image element.
	 * @param {function():any} loadHandler Load callback function.
	 * @param {function():any} errorHandler Error callback function.
	 * @return {function():void} Callback to stop listening.
	 */
	function listenImage(image, loadHandler, errorHandler) {
	    var img = /** @type {HTMLImageElement} */ (image);
	    if (img.src && IMAGE_DECODE) {
	        var promise = img.decode();
	        var listening_1 = true;
	        var unlisten = function () {
	            listening_1 = false;
	        };
	        promise.then(function () {
	            if (listening_1) {
	                loadHandler();
	            }
	        }).catch(function (error) {
	            if (listening_1) {
	                // FIXME: Unconditionally call errorHandler() when this bug is fixed upstream:
	                //        https://bugs.webkit.org/show_bug.cgi?id=198527
	                if (error.name === 'EncodingError' && error.message === 'Invalid image type.') {
	                    loadHandler();
	                }
	                else {
	                    errorHandler();
	                }
	            }
	        });
	        return unlisten;
	    }
	    var listenerKeys = [
	        listenOnce(img, EventType.LOAD, loadHandler),
	        listenOnce(img, EventType.ERROR, errorHandler)
	    ];
	    return function unlisten() {
	        listenerKeys.forEach(unlistenByKey);
	    };
	}

	/**
	 * @module ol/style/IconImage
	 */
	var __extends$y = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var IconImage = /** @class */ (function (_super) {
	    __extends$y(IconImage, _super);
	    /**
	     * @param {HTMLImageElement|HTMLCanvasElement} image Image.
	     * @param {string|undefined} src Src.
	     * @param {import("../size.js").Size} size Size.
	     * @param {?string} crossOrigin Cross origin.
	     * @param {import("../ImageState.js").default} imageState Image state.
	     * @param {import("../color.js").Color} color Color.
	     */
	    function IconImage(image, src, size, crossOrigin, imageState, color) {
	        var _this = _super.call(this) || this;
	        /**
	         * @private
	         * @type {HTMLImageElement|HTMLCanvasElement}
	         */
	        _this.hitDetectionImage_ = null;
	        /**
	         * @private
	         * @type {HTMLImageElement|HTMLCanvasElement}
	         */
	        _this.image_ = !image ? new Image() : image;
	        if (crossOrigin !== null) {
	            /** @type {HTMLImageElement} */ (_this.image_).crossOrigin = crossOrigin;
	        }
	        /**
	         * @private
	         * @type {HTMLCanvasElement}
	         */
	        _this.canvas_ = color ? document.createElement('canvas') : null;
	        /**
	         * @private
	         * @type {import("../color.js").Color}
	         */
	        _this.color_ = color;
	        /**
	         * @private
	         * @type {?function():void}
	         */
	        _this.unlisten_ = null;
	        /**
	         * @private
	         * @type {import("../ImageState.js").default}
	         */
	        _this.imageState_ = imageState;
	        /**
	         * @private
	         * @type {import("../size.js").Size}
	         */
	        _this.size_ = size;
	        /**
	         * @private
	         * @type {string|undefined}
	         */
	        _this.src_ = src;
	        /**
	         * @private
	         * @type {boolean|undefined}
	         */
	        _this.tainted_;
	        return _this;
	    }
	    /**
	     * @private
	     * @return {boolean} The image canvas is tainted.
	     */
	    IconImage.prototype.isTainted_ = function () {
	        if (this.tainted_ === undefined && this.imageState_ === ImageState.LOADED) {
	            this.tainted_ = false;
	            var context = createCanvasContext2D(1, 1);
	            try {
	                context.drawImage(this.image_, 0, 0);
	                context.getImageData(0, 0, 1, 1);
	            }
	            catch (e) {
	                this.tainted_ = true;
	            }
	        }
	        return this.tainted_ === true;
	    };
	    /**
	     * @private
	     */
	    IconImage.prototype.dispatchChangeEvent_ = function () {
	        this.dispatchEvent(EventType.CHANGE);
	    };
	    /**
	     * @private
	     */
	    IconImage.prototype.handleImageError_ = function () {
	        this.imageState_ = ImageState.ERROR;
	        this.unlistenImage_();
	        this.dispatchChangeEvent_();
	    };
	    /**
	     * @private
	     */
	    IconImage.prototype.handleImageLoad_ = function () {
	        this.imageState_ = ImageState.LOADED;
	        if (this.size_) {
	            this.image_.width = this.size_[0];
	            this.image_.height = this.size_[1];
	        }
	        this.size_ = [this.image_.width, this.image_.height];
	        this.unlistenImage_();
	        this.replaceColor_();
	        this.dispatchChangeEvent_();
	    };
	    /**
	     * @param {number} pixelRatio Pixel ratio.
	     * @return {HTMLImageElement|HTMLCanvasElement} Image or Canvas element.
	     */
	    IconImage.prototype.getImage = function (pixelRatio) {
	        return this.canvas_ ? this.canvas_ : this.image_;
	    };
	    /**
	     * @return {import("../ImageState.js").default} Image state.
	     */
	    IconImage.prototype.getImageState = function () {
	        return this.imageState_;
	    };
	    /**
	     * @param {number} pixelRatio Pixel ratio.
	     * @return {HTMLImageElement|HTMLCanvasElement} Image element.
	     */
	    IconImage.prototype.getHitDetectionImage = function (pixelRatio) {
	        if (!this.hitDetectionImage_) {
	            if (this.isTainted_()) {
	                var width = this.size_[0];
	                var height = this.size_[1];
	                var context = createCanvasContext2D(width, height);
	                context.fillRect(0, 0, width, height);
	                this.hitDetectionImage_ = context.canvas;
	            }
	            else {
	                this.hitDetectionImage_ = this.image_;
	            }
	        }
	        return this.hitDetectionImage_;
	    };
	    /**
	     * @return {import("../size.js").Size} Image size.
	     */
	    IconImage.prototype.getSize = function () {
	        return this.size_;
	    };
	    /**
	     * @return {string|undefined} Image src.
	     */
	    IconImage.prototype.getSrc = function () {
	        return this.src_;
	    };
	    /**
	     * Load not yet loaded URI.
	     */
	    IconImage.prototype.load = function () {
	        if (this.imageState_ == ImageState.IDLE) {
	            this.imageState_ = ImageState.LOADING;
	            try {
	                /** @type {HTMLImageElement} */ (this.image_).src = this.src_;
	            }
	            catch (e) {
	                this.handleImageError_();
	            }
	            this.unlisten_ = listenImage(this.image_, this.handleImageLoad_.bind(this), this.handleImageError_.bind(this));
	        }
	    };
	    /**
	     * @private
	     */
	    IconImage.prototype.replaceColor_ = function () {
	        if (!this.color_ || this.isTainted_()) {
	            return;
	        }
	        this.canvas_.width = this.image_.width;
	        this.canvas_.height = this.image_.height;
	        var ctx = this.canvas_.getContext('2d');
	        ctx.drawImage(this.image_, 0, 0);
	        var imgData = ctx.getImageData(0, 0, this.image_.width, this.image_.height);
	        var data = imgData.data;
	        var r = this.color_[0] / 255.0;
	        var g = this.color_[1] / 255.0;
	        var b = this.color_[2] / 255.0;
	        for (var i = 0, ii = data.length; i < ii; i += 4) {
	            data[i] *= r;
	            data[i + 1] *= g;
	            data[i + 2] *= b;
	        }
	        ctx.putImageData(imgData, 0, 0);
	    };
	    /**
	     * Discards event handlers which listen for load completion or errors.
	     *
	     * @private
	     */
	    IconImage.prototype.unlistenImage_ = function () {
	        if (this.unlisten_) {
	            this.unlisten_();
	            this.unlisten_ = null;
	        }
	    };
	    return IconImage;
	}(Target));
	/**
	 * @param {HTMLImageElement|HTMLCanvasElement} image Image.
	 * @param {string} src Src.
	 * @param {import("../size.js").Size} size Size.
	 * @param {?string} crossOrigin Cross origin.
	 * @param {import("../ImageState.js").default} imageState Image state.
	 * @param {import("../color.js").Color} color Color.
	 * @return {IconImage} Icon image.
	 */
	function get$5(image, src, size, crossOrigin, imageState, color) {
	    var iconImage = shared$1.get(src, crossOrigin, color);
	    if (!iconImage) {
	        iconImage = new IconImage(image, src, size, crossOrigin, imageState, color);
	        shared$1.set(src, crossOrigin, color, iconImage);
	    }
	    return iconImage;
	}

	/**
	 * @module ol/style/IconOrigin
	 */
	/**
	 * Icon origin. One of 'bottom-left', 'bottom-right', 'top-left', 'top-right'.
	 * @enum {string}
	 */
	var IconOrigin = {
	    BOTTOM_LEFT: 'bottom-left',
	    BOTTOM_RIGHT: 'bottom-right',
	    TOP_LEFT: 'top-left',
	    TOP_RIGHT: 'top-right'
	};

	var __extends$z = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @typedef {Object} Options
	 * @property {Array<number>} [anchor=[0.5, 0.5]] Anchor. Default value is the icon center.
	 * @property {import("./IconOrigin.js").default} [anchorOrigin='top-left'] Origin of the anchor: `bottom-left`, `bottom-right`,
	 * `top-left` or `top-right`.
	 * @property {import("./IconAnchorUnits.js").default} [anchorXUnits='fraction'] Units in which the anchor x value is
	 * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates
	 * the x value in pixels.
	 * @property {import("./IconAnchorUnits.js").default} [anchorYUnits='fraction'] Units in which the anchor y value is
	 * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates
	 * the y value in pixels.
	 * @property {import("../color.js").Color|string} [color] Color to tint the icon. If not specified,
	 * the icon will be left as is.
	 * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images. Note that you must provide a
	 * `crossOrigin` value if you want to access pixel data with the Canvas renderer.
	 * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
	 * @property {HTMLImageElement|HTMLCanvasElement} [img] Image object for the icon. If the `src` option is not provided then the
	 * provided image must already be loaded. And in that case, it is required
	 * to provide the size of the image, with the `imgSize` option.
	 * @property {Array<number>} [offset=[0, 0]] Offset, which, together with the size and the offset origin, define the
	 * sub-rectangle to use from the original icon image.
	 * @property {import("./IconOrigin.js").default} [offsetOrigin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,
	 * `top-left` or `top-right`.
	 * @property {number} [opacity=1] Opacity of the icon.
	 * @property {number} [scale=1] Scale.
	 * @property {boolean} [rotateWithView=false] Whether to rotate the icon with the view.
	 * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).
	 * @property {import("../size.js").Size} [size] Icon size in pixel. Can be used together with `offset` to define the
	 * sub-rectangle to use from the origin (sprite) icon image.
	 * @property {import("../size.js").Size} [imgSize] Image size in pixels. Only required if `img` is set and `src` is not, and
	 * for SVG images in Internet Explorer 11. The provided `imgSize` needs to match the actual size of the image.
	 * @property {string} [src] Image source URI.
	 */
	/**
	 * @classdesc
	 * Set icon style for vector features.
	 * @api
	 */
	var Icon = /** @class */ (function (_super) {
	    __extends$z(Icon, _super);
	    /**
	     * @param {Options=} opt_options Options.
	     */
	    function Icon(opt_options) {
	        var _this = this;
	        var options = opt_options || {};
	        /**
	         * @type {number}
	         */
	        var opacity = options.opacity !== undefined ? options.opacity : 1;
	        /**
	         * @type {number}
	         */
	        var rotation = options.rotation !== undefined ? options.rotation : 0;
	        /**
	         * @type {number}
	         */
	        var scale = options.scale !== undefined ? options.scale : 1;
	        /**
	         * @type {boolean}
	         */
	        var rotateWithView = options.rotateWithView !== undefined ?
	            options.rotateWithView : false;
	        _this = _super.call(this, {
	            opacity: opacity,
	            rotation: rotation,
	            scale: scale,
	            rotateWithView: rotateWithView
	        }) || this;
	        /**
	         * @private
	         * @type {Array<number>}
	         */
	        _this.anchor_ = options.anchor !== undefined ? options.anchor : [0.5, 0.5];
	        /**
	         * @private
	         * @type {Array<number>}
	         */
	        _this.normalizedAnchor_ = null;
	        /**
	         * @private
	         * @type {import("./IconOrigin.js").default}
	         */
	        _this.anchorOrigin_ = options.anchorOrigin !== undefined ?
	            options.anchorOrigin : IconOrigin.TOP_LEFT;
	        /**
	         * @private
	         * @type {import("./IconAnchorUnits.js").default}
	         */
	        _this.anchorXUnits_ = options.anchorXUnits !== undefined ?
	            options.anchorXUnits : IconAnchorUnits.FRACTION;
	        /**
	         * @private
	         * @type {import("./IconAnchorUnits.js").default}
	         */
	        _this.anchorYUnits_ = options.anchorYUnits !== undefined ?
	            options.anchorYUnits : IconAnchorUnits.FRACTION;
	        /**
	         * @private
	         * @type {?string}
	         */
	        _this.crossOrigin_ =
	            options.crossOrigin !== undefined ? options.crossOrigin : null;
	        /**
	         * @type {HTMLImageElement|HTMLCanvasElement}
	         */
	        var image = options.img !== undefined ? options.img : null;
	        /**
	         * @type {import("../size.js").Size}
	         */
	        var imgSize = options.imgSize !== undefined ? options.imgSize : null;
	        /**
	         * @type {string|undefined}
	         */
	        var src = options.src;
	        assert(!(src !== undefined && image), 4); // `image` and `src` cannot be provided at the same time
	        assert(!image || (image && imgSize), 5); // `imgSize` must be set when `image` is provided
	        if ((src === undefined || src.length === 0) && image) {
	            src = /** @type {HTMLImageElement} */ (image).src || getUid(image);
	        }
	        assert(src !== undefined && src.length > 0, 6); // A defined and non-empty `src` or `image` must be provided
	        /**
	         * @type {import("../ImageState.js").default}
	         */
	        var imageState = options.src !== undefined ?
	            ImageState.IDLE : ImageState.LOADED;
	        /**
	         * @private
	         * @type {import("../color.js").Color}
	         */
	        _this.color_ = options.color !== undefined ? asArray(options.color) : null;
	        /**
	         * @private
	         * @type {import("./IconImage.js").default}
	         */
	        _this.iconImage_ = get$5(image, /** @type {string} */ (src), imgSize, _this.crossOrigin_, imageState, _this.color_);
	        /**
	         * @private
	         * @type {Array<number>}
	         */
	        _this.offset_ = options.offset !== undefined ? options.offset : [0, 0];
	        /**
	         * @private
	         * @type {import("./IconOrigin.js").default}
	         */
	        _this.offsetOrigin_ = options.offsetOrigin !== undefined ?
	            options.offsetOrigin : IconOrigin.TOP_LEFT;
	        /**
	         * @private
	         * @type {Array<number>}
	         */
	        _this.origin_ = null;
	        /**
	         * @private
	         * @type {import("../size.js").Size}
	         */
	        _this.size_ = options.size !== undefined ? options.size : null;
	        return _this;
	    }
	    /**
	     * Clones the style. The underlying Image/HTMLCanvasElement is not cloned.
	     * @return {Icon} The cloned style.
	     * @api
	     */
	    Icon.prototype.clone = function () {
	        return new Icon({
	            anchor: this.anchor_.slice(),
	            anchorOrigin: this.anchorOrigin_,
	            anchorXUnits: this.anchorXUnits_,
	            anchorYUnits: this.anchorYUnits_,
	            crossOrigin: this.crossOrigin_,
	            color: (this.color_ && this.color_.slice) ? this.color_.slice() : this.color_ || undefined,
	            src: this.getSrc(),
	            offset: this.offset_.slice(),
	            offsetOrigin: this.offsetOrigin_,
	            size: this.size_ !== null ? this.size_.slice() : undefined,
	            opacity: this.getOpacity(),
	            scale: this.getScale(),
	            rotation: this.getRotation(),
	            rotateWithView: this.getRotateWithView()
	        });
	    };
	    /**
	     * @inheritDoc
	     * @api
	     */
	    Icon.prototype.getAnchor = function () {
	        if (this.normalizedAnchor_) {
	            return this.normalizedAnchor_;
	        }
	        var anchor = this.anchor_;
	        var size = this.getSize();
	        if (this.anchorXUnits_ == IconAnchorUnits.FRACTION ||
	            this.anchorYUnits_ == IconAnchorUnits.FRACTION) {
	            if (!size) {
	                return null;
	            }
	            anchor = this.anchor_.slice();
	            if (this.anchorXUnits_ == IconAnchorUnits.FRACTION) {
	                anchor[0] *= size[0];
	            }
	            if (this.anchorYUnits_ == IconAnchorUnits.FRACTION) {
	                anchor[1] *= size[1];
	            }
	        }
	        if (this.anchorOrigin_ != IconOrigin.TOP_LEFT) {
	            if (!size) {
	                return null;
	            }
	            if (anchor === this.anchor_) {
	                anchor = this.anchor_.slice();
	            }
	            if (this.anchorOrigin_ == IconOrigin.TOP_RIGHT ||
	                this.anchorOrigin_ == IconOrigin.BOTTOM_RIGHT) {
	                anchor[0] = -anchor[0] + size[0];
	            }
	            if (this.anchorOrigin_ == IconOrigin.BOTTOM_LEFT ||
	                this.anchorOrigin_ == IconOrigin.BOTTOM_RIGHT) {
	                anchor[1] = -anchor[1] + size[1];
	            }
	        }
	        this.normalizedAnchor_ = anchor;
	        return this.normalizedAnchor_;
	    };
	    /**
	     * Set the anchor point. The anchor determines the center point for the
	     * symbolizer.
	     *
	     * @param {Array<number>} anchor Anchor.
	     * @api
	     */
	    Icon.prototype.setAnchor = function (anchor) {
	        this.anchor_ = anchor;
	        this.normalizedAnchor_ = null;
	    };
	    /**
	     * Get the icon color.
	     * @return {import("../color.js").Color} Color.
	     * @api
	     */
	    Icon.prototype.getColor = function () {
	        return this.color_;
	    };
	    /**
	     * Get the image icon.
	     * @param {number} pixelRatio Pixel ratio.
	     * @return {HTMLImageElement|HTMLCanvasElement} Image or Canvas element.
	     * @override
	     * @api
	     */
	    Icon.prototype.getImage = function (pixelRatio) {
	        return this.iconImage_.getImage(pixelRatio);
	    };
	    /**
	     * @override
	     */
	    Icon.prototype.getImageSize = function () {
	        return this.iconImage_.getSize();
	    };
	    /**
	     * @override
	     */
	    Icon.prototype.getHitDetectionImageSize = function () {
	        return this.getImageSize();
	    };
	    /**
	     * @override
	     */
	    Icon.prototype.getImageState = function () {
	        return this.iconImage_.getImageState();
	    };
	    /**
	     * @override
	     */
	    Icon.prototype.getHitDetectionImage = function (pixelRatio) {
	        return this.iconImage_.getHitDetectionImage(pixelRatio);
	    };
	    /**
	     * @inheritDoc
	     * @api
	     */
	    Icon.prototype.getOrigin = function () {
	        if (this.origin_) {
	            return this.origin_;
	        }
	        var offset = this.offset_;
	        if (this.offsetOrigin_ != IconOrigin.TOP_LEFT) {
	            var size = this.getSize();
	            var iconImageSize = this.iconImage_.getSize();
	            if (!size || !iconImageSize) {
	                return null;
	            }
	            offset = offset.slice();
	            if (this.offsetOrigin_ == IconOrigin.TOP_RIGHT ||
	                this.offsetOrigin_ == IconOrigin.BOTTOM_RIGHT) {
	                offset[0] = iconImageSize[0] - size[0] - offset[0];
	            }
	            if (this.offsetOrigin_ == IconOrigin.BOTTOM_LEFT ||
	                this.offsetOrigin_ == IconOrigin.BOTTOM_RIGHT) {
	                offset[1] = iconImageSize[1] - size[1] - offset[1];
	            }
	        }
	        this.origin_ = offset;
	        return this.origin_;
	    };
	    /**
	     * Get the image URL.
	     * @return {string|undefined} Image src.
	     * @api
	     */
	    Icon.prototype.getSrc = function () {
	        return this.iconImage_.getSrc();
	    };
	    /**
	     * @inheritDoc
	     * @api
	     */
	    Icon.prototype.getSize = function () {
	        return !this.size_ ? this.iconImage_.getSize() : this.size_;
	    };
	    /**
	     * @override
	     */
	    Icon.prototype.listenImageChange = function (listener) {
	        this.iconImage_.addEventListener(EventType.CHANGE, listener);
	    };
	    /**
	     * Load not yet loaded URI.
	     * When rendering a feature with an icon style, the vector renderer will
	     * automatically call this method. However, you might want to call this
	     * method yourself for preloading or other purposes.
	     * @override
	     * @api
	     */
	    Icon.prototype.load = function () {
	        this.iconImage_.load();
	    };
	    /**
	     * @override
	     */
	    Icon.prototype.unlistenImageChange = function (listener) {
	        this.iconImage_.removeEventListener(EventType.CHANGE, listener);
	    };
	    return Icon;
	}(ImageStyle));

	/**
	 * @module ol/render/canvas/hitdetet
	 */
	/**
	 * @param {import("../../size.js").Size} size Canvas size in css pixels.
	 * @param {Array<import("../../transform.js").Transform>} transforms Transforms
	 * for rendering features to all worlds of the viewport, from coordinates to css
	 * pixels.
	 * @param {Array<import("../../Feature.js").FeatureLike>} features
	 * Features to consider for hit detection.
	 * @param {import("../../style/Style.js").StyleFunction|undefined} styleFunction
	 * Layer style function.
	 * @param {import("../../extent.js").Extent} extent Extent.
	 * @param {number} resolution Resolution.
	 * @param {number} rotation Rotation.
	 * @return {ImageData} Hit detection image data.
	 */
	function createHitDetectionImageData(size, transforms, features, styleFunction, extent, resolution, rotation) {
	    var width = size[0] / 2;
	    var height = size[1] / 2;
	    var context = createCanvasContext2D(width, height);
	    context.imageSmoothingEnabled = false;
	    var canvas = context.canvas;
	    var renderer = new CanvasImmediateRenderer(context, 0.5, extent, null, rotation);
	    var featureCount = features.length;
	    // Stretch hit detection index to use the whole available color range
	    var indexFactor = Math.ceil((256 * 256 * 256) / featureCount);
	    var featuresByZIndex = {};
	    for (var i = 0; i < featureCount; ++i) {
	        var feature = features[i];
	        var featureStyleFunction = feature.getStyleFunction() || styleFunction;
	        if (!styleFunction) {
	            continue;
	        }
	        var styles = featureStyleFunction(feature, resolution);
	        if (!Array.isArray(styles)) {
	            styles = [styles];
	        }
	        var index = i * indexFactor;
	        var color = '#' + ('000000' + index.toString(16)).slice(-6);
	        for (var j = 0, jj = styles.length; j < jj; ++j) {
	            var originalStyle = styles[j];
	            var style = originalStyle.clone();
	            var fill = style.getFill();
	            if (fill) {
	                fill.setColor(color);
	            }
	            var stroke = style.getStroke();
	            if (stroke) {
	                stroke.setColor(color);
	            }
	            style.setText(undefined);
	            var image = originalStyle.getImage();
	            if (image) {
	                var imgSize = image.getImageSize();
	                var canvas_1 = document.createElement('canvas');
	                canvas_1.width = imgSize[0];
	                canvas_1.height = imgSize[1];
	                var imgContext = canvas_1.getContext('2d', { alpha: false });
	                imgContext.fillStyle = color;
	                var img = imgContext.canvas;
	                imgContext.fillRect(0, 0, img.width, img.height);
	                var width_1 = imgSize ? imgSize[0] : img.width;
	                var height_1 = imgSize ? imgSize[1] : img.height;
	                var iconContext = createCanvasContext2D(width_1, height_1);
	                iconContext.drawImage(img, 0, 0);
	                style.setImage(new Icon({
	                    img: img,
	                    imgSize: imgSize,
	                    anchor: image.getAnchor(),
	                    anchorXUnits: IconAnchorUnits.PIXELS,
	                    anchorYUnits: IconAnchorUnits.PIXELS,
	                    offset: image.getOrigin(),
	                    size: image.getSize(),
	                    opacity: image.getOpacity(),
	                    scale: image.getScale(),
	                    rotation: image.getRotation(),
	                    rotateWithView: image.getRotateWithView()
	                }));
	            }
	            var zIndex = Number(style.getZIndex());
	            var byGeometryType = featuresByZIndex[zIndex];
	            if (!byGeometryType) {
	                byGeometryType = {};
	                featuresByZIndex[zIndex] = byGeometryType;
	                byGeometryType[GeometryType.POLYGON] = [];
	                byGeometryType[GeometryType.CIRCLE] = [];
	                byGeometryType[GeometryType.LINE_STRING] = [];
	                byGeometryType[GeometryType.POINT] = [];
	            }
	            var geometry = style.getGeometryFunction()(feature);
	            if (geometry && intersects(extent, geometry.getExtent())) {
	                byGeometryType[geometry.getType().replace('Multi', '')].push(geometry, style);
	            }
	        }
	    }
	    var zIndexKeys = Object.keys(featuresByZIndex).map(Number).sort(numberSafeCompareFunction);
	    for (var i = 0, ii = zIndexKeys.length; i < ii; ++i) {
	        var byGeometryType = featuresByZIndex[zIndexKeys[i]];
	        for (var type in byGeometryType) {
	            var geomAndStyle = byGeometryType[type];
	            for (var j = 0, jj = geomAndStyle.length; j < jj; j += 2) {
	                renderer.setStyle(geomAndStyle[j + 1]);
	                for (var k = 0, kk = transforms.length; k < kk; ++k) {
	                    renderer.setTransform(transforms[k]);
	                    renderer.drawGeometry(geomAndStyle[j]);
	                }
	            }
	        }
	    }
	    return context.getImageData(0, 0, canvas.width, canvas.height);
	}
	/**
	 * @param {import("../../pixel").Pixel} pixel Pixel coordinate on the hit
	 * detection canvas in css pixels.
	 * @param {Array<import("../../Feature").FeatureLike>} features Features. Has to
	 * match the `features` array that was passed to `createHitDetectionImageData()`.
	 * @param {ImageData} imageData Hit detection image data generated by
	 * `createHitDetectionImageData()`.
	 * @return {Array<import("../../Feature").FeatureLike>} features Features.
	 */
	function hitDetect(pixel, features, imageData) {
	    var resultFeatures = [];
	    if (imageData) {
	        var index = (Math.round(pixel[0] / 2) + Math.round(pixel[1] / 2) * imageData.width) * 4;
	        var r = imageData.data[index];
	        var g = imageData.data[index + 1];
	        var b = imageData.data[index + 2];
	        var i = b + (256 * (g + (256 * r)));
	        var indexFactor = Math.ceil((256 * 256 * 256) / features.length);
	        if (i % indexFactor === 0) {
	            resultFeatures.push(features[i / indexFactor]);
	        }
	    }
	    return resultFeatures;
	}

	var __extends$A = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @classdesc
	 * Canvas renderer for vector layers.
	 * @api
	 */
	var CanvasVectorLayerRenderer = /** @class */ (function (_super) {
	    __extends$A(CanvasVectorLayerRenderer, _super);
	    /**
	     * @param {import("../../layer/Vector.js").default} vectorLayer Vector layer.
	     */
	    function CanvasVectorLayerRenderer(vectorLayer) {
	        var _this = _super.call(this, vectorLayer) || this;
	        /** @private */
	        _this.boundHandleStyleImageChange_ = _this.handleStyleImageChange_.bind(_this);
	        /**
	         * @type {boolean}
	         */
	        _this.animatingOrInteracting_;
	        /**
	         * @private
	         * @type {boolean}
	         */
	        _this.dirty_ = false;
	        /**
	         * @type {ImageData}
	         */
	        _this.hitDetectionImageData_ = null;
	        /**
	         * @type {Array<import("../../Feature.js").default>}
	         */
	        _this.renderedFeatures_ = null;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.renderedRevision_ = -1;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.renderedResolution_ = NaN;
	        /**
	         * @private
	         * @type {import("../../extent.js").Extent}
	         */
	        _this.renderedExtent_ = createEmpty();
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.renderedRotation_;
	        /**
	         * @private
	         * @type {import("../../coordinate").Coordinate}
	         */
	        _this.renderedCenter_ = null;
	        /**
	         * @private
	         * @type {import("../../proj/Projection").default}
	         */
	        _this.renderedProjection_ = null;
	        /**
	         * @private
	         * @type {function(import("../../Feature.js").default, import("../../Feature.js").default): number|null}
	         */
	        _this.renderedRenderOrder_ = null;
	        /**
	         * @private
	         * @type {import("../../render/canvas/ExecutorGroup").default}
	         */
	        _this.replayGroup_ = null;
	        /**
	         * A new replay group had to be created by `prepareFrame()`
	         * @type {boolean}
	         */
	        _this.replayGroupChanged = true;
	        return _this;
	    }
	    /**
	     * @inheritDoc
	     */
	    CanvasVectorLayerRenderer.prototype.useContainer = function (target, transform, opacity) {
	        if (opacity < 1) {
	            target = null;
	        }
	        _super.prototype.useContainer.call(this, target, transform, opacity);
	    };
	    /**
	     * @inheritDoc
	     */
	    CanvasVectorLayerRenderer.prototype.renderFrame = function (frameState, target) {
	        var pixelRatio = frameState.pixelRatio;
	        var layerState = frameState.layerStatesArray[frameState.layerIndex];
	        // set forward and inverse pixel transforms
	        makeScale(this.pixelTransform, 1 / pixelRatio, 1 / pixelRatio);
	        makeInverse(this.inversePixelTransform, this.pixelTransform);
	        var canvasTransform = toString$2(this.pixelTransform);
	        this.useContainer(target, canvasTransform, layerState.opacity);
	        var context = this.context;
	        var canvas = context.canvas;
	        var replayGroup = this.replayGroup_;
	        if (!replayGroup || replayGroup.isEmpty()) {
	            if (!this.containerReused && canvas.width > 0) {
	                canvas.width = 0;
	            }
	            return this.container;
	        }
	        // resize and clear
	        var width = Math.round(frameState.size[0] * pixelRatio);
	        var height = Math.round(frameState.size[1] * pixelRatio);
	        if (canvas.width != width || canvas.height != height) {
	            canvas.width = width;
	            canvas.height = height;
	            if (canvas.style.transform !== canvasTransform) {
	                canvas.style.transform = canvasTransform;
	            }
	        }
	        else if (!this.containerReused) {
	            context.clearRect(0, 0, width, height);
	        }
	        this.preRender(context, frameState);
	        var extent = frameState.extent;
	        var viewState = frameState.viewState;
	        var center = viewState.center;
	        var resolution = viewState.resolution;
	        var projection = viewState.projection;
	        var rotation = viewState.rotation;
	        var projectionExtent = projection.getExtent();
	        var vectorSource = this.getLayer().getSource();
	        // clipped rendering if layer extent is set
	        var clipped = false;
	        if (layerState.extent) {
	            var layerExtent = fromUserExtent(layerState.extent, projection);
	            clipped = !containsExtent(layerExtent, frameState.extent) && intersects(layerExtent, frameState.extent);
	            if (clipped) {
	                this.clip(context, frameState, layerExtent);
	            }
	        }
	        var viewHints = frameState.viewHints;
	        var snapToPixel = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);
	        var transform = this.getRenderTransform(center, resolution, rotation, pixelRatio, width, height, 0);
	        var declutterReplays = this.getLayer().getDeclutter() ? {} : null;
	        replayGroup.execute(context, transform, rotation, snapToPixel, undefined, declutterReplays);
	        if (vectorSource.getWrapX() && projection.canWrapX() && !containsExtent(projectionExtent, extent)) {
	            var startX = extent[0];
	            var worldWidth = getWidth(projectionExtent);
	            var world = 0;
	            var offsetX = void 0;
	            while (startX < projectionExtent[0]) {
	                --world;
	                offsetX = worldWidth * world;
	                var transform_1 = this.getRenderTransform(center, resolution, rotation, pixelRatio, width, height, offsetX);
	                replayGroup.execute(context, transform_1, rotation, snapToPixel, undefined, declutterReplays);
	                startX += worldWidth;
	            }
	            world = 0;
	            startX = extent[2];
	            while (startX > projectionExtent[2]) {
	                ++world;
	                offsetX = worldWidth * world;
	                var transform_2 = this.getRenderTransform(center, resolution, rotation, pixelRatio, width, height, offsetX);
	                replayGroup.execute(context, transform_2, rotation, snapToPixel, undefined, declutterReplays);
	                startX -= worldWidth;
	            }
	        }
	        if (declutterReplays) {
	            var viewHints_1 = frameState.viewHints;
	            var hifi = !(viewHints_1[ViewHint.ANIMATING] || viewHints_1[ViewHint.INTERACTING]);
	            replayDeclutter(declutterReplays, context, rotation, 1, hifi, frameState.declutterItems);
	        }
	        if (clipped) {
	            context.restore();
	        }
	        this.postRender(context, frameState);
	        var opacity = layerState.opacity;
	        var container = this.container;
	        if (opacity !== parseFloat(container.style.opacity)) {
	            container.style.opacity = opacity === 1 ? '' : opacity;
	        }
	        return this.container;
	    };
	    /**
	     * @inheritDoc
	     */
	    CanvasVectorLayerRenderer.prototype.getFeatures = function (pixel) {
	        return new Promise(function (resolve, reject) {
	            if (!this.hitDetectionImageData_ && !this.animatingOrInteracting_) {
	                requestAnimationFrame(function () {
	                    var size = [this.context.canvas.width, this.context.canvas.height];
	                    apply(this.pixelTransform, size);
	                    var center = this.renderedCenter_;
	                    var resolution = this.renderedResolution_;
	                    var rotation = this.renderedRotation_;
	                    var projection = this.renderedProjection_;
	                    var extent = this.renderedExtent_;
	                    var layer = this.getLayer();
	                    var transforms = [];
	                    var width = size[0] / 2;
	                    var height = size[1] / 2;
	                    transforms.push(this.getRenderTransform(center, resolution, rotation, 0.5, width, height, 0).slice());
	                    var source = layer.getSource();
	                    var projectionExtent = projection.getExtent();
	                    if (source.getWrapX() && projection.canWrapX() && !containsExtent(projectionExtent, extent)) {
	                        var startX = extent[0];
	                        var worldWidth = getWidth(projectionExtent);
	                        var world = 0;
	                        var offsetX = void 0;
	                        while (startX < projectionExtent[0]) {
	                            --world;
	                            offsetX = worldWidth * world;
	                            transforms.push(this.getRenderTransform(center, resolution, rotation, 0.5, width, height, offsetX).slice());
	                            startX += worldWidth;
	                        }
	                        world = 0;
	                        startX = extent[2];
	                        while (startX > projectionExtent[2]) {
	                            ++world;
	                            offsetX = worldWidth * world;
	                            transforms.push(this.getRenderTransform(center, resolution, rotation, 0.5, width, height, offsetX).slice());
	                            startX -= worldWidth;
	                        }
	                    }
	                    this.hitDetectionImageData_ = createHitDetectionImageData(size, transforms, this.renderedFeatures_, layer.getStyleFunction(), extent, resolution, rotation);
	                    resolve(hitDetect(pixel, this.renderedFeatures_, this.hitDetectionImageData_));
	                }.bind(this));
	            }
	            else {
	                resolve(hitDetect(pixel, this.renderedFeatures_, this.hitDetectionImageData_));
	            }
	        }.bind(this));
	    };
	    /**
	     * @inheritDoc
	     */
	    CanvasVectorLayerRenderer.prototype.forEachFeatureAtCoordinate = function (coordinate, frameState, hitTolerance, callback, declutteredFeatures) {
	        if (!this.replayGroup_) {
	            return undefined;
	        }
	        else {
	            var resolution = frameState.viewState.resolution;
	            var rotation = frameState.viewState.rotation;
	            var layer_1 = this.getLayer();
	            /** @type {!Object<string, boolean>} */
	            var features_1 = {};
	            var result = this.replayGroup_.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, 
	            /**
	             * @param {import("../../Feature.js").FeatureLike} feature Feature.
	             * @return {?} Callback result.
	             */
	            function (feature) {
	                var key = getUid(feature);
	                if (!(key in features_1)) {
	                    features_1[key] = true;
	                    return callback(feature, layer_1);
	                }
	            }, layer_1.getDeclutter() ? declutteredFeatures : null);
	            return result;
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    CanvasVectorLayerRenderer.prototype.handleFontsChanged = function () {
	        var layer = this.getLayer();
	        if (layer.getVisible() && this.replayGroup_) {
	            layer.changed();
	        }
	    };
	    /**
	     * Handle changes in image style state.
	     * @param {import("../../events/Event.js").default} event Image style change event.
	     * @private
	     */
	    CanvasVectorLayerRenderer.prototype.handleStyleImageChange_ = function (event) {
	        this.renderIfReadyAndVisible();
	    };
	    /**
	     * @inheritDoc
	     */
	    CanvasVectorLayerRenderer.prototype.prepareFrame = function (frameState) {
	        var vectorLayer = this.getLayer();
	        var vectorSource = vectorLayer.getSource();
	        var animating = frameState.viewHints[ViewHint.ANIMATING];
	        var interacting = frameState.viewHints[ViewHint.INTERACTING];
	        var updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();
	        var updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();
	        if (!this.dirty_ && (!updateWhileAnimating && animating) ||
	            (!updateWhileInteracting && interacting)) {
	            this.animatingOrInteracting_ = true;
	            return true;
	        }
	        this.animatingOrInteracting_ = false;
	        var frameStateExtent = frameState.extent;
	        var viewState = frameState.viewState;
	        var projection = viewState.projection;
	        var resolution = viewState.resolution;
	        var pixelRatio = frameState.pixelRatio;
	        var vectorLayerRevision = vectorLayer.getRevision();
	        var vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();
	        var vectorLayerRenderOrder = vectorLayer.getRenderOrder();
	        if (vectorLayerRenderOrder === undefined) {
	            vectorLayerRenderOrder = defaultOrder;
	        }
	        var center = viewState.center.slice();
	        var extent = buffer(frameStateExtent, vectorLayerRenderBuffer * resolution);
	        var projectionExtent = viewState.projection.getExtent();
	        if (vectorSource.getWrapX() && viewState.projection.canWrapX() &&
	            !containsExtent(projectionExtent, frameState.extent)) {
	            // For the replay group, we need an extent that intersects the real world
	            // (-180Â° to +180Â°). To support geometries in a coordinate range from -540Â°
	            // to +540Â°, we add at least 1 world width on each side of the projection
	            // extent. If the viewport is wider than the world, we need to add half of
	            // the viewport width to make sure we cover the whole viewport.
	            var worldWidth = getWidth(projectionExtent);
	            var gutter = Math.max(getWidth(extent) / 2, worldWidth);
	            extent[0] = projectionExtent[0] - gutter;
	            extent[2] = projectionExtent[2] + gutter;
	            var worldsAway = Math.floor((center[0] - projectionExtent[0]) / worldWidth);
	            center[0] -= (worldsAway * worldWidth);
	        }
	        if (!this.dirty_ &&
	            this.renderedResolution_ == resolution &&
	            this.renderedRevision_ == vectorLayerRevision &&
	            this.renderedRenderOrder_ == vectorLayerRenderOrder &&
	            containsExtent(this.renderedExtent_, extent)) {
	            this.replayGroupChanged = false;
	            return true;
	        }
	        if (this.replayGroup_) {
	            this.replayGroup_.dispose();
	        }
	        this.replayGroup_ = null;
	        this.dirty_ = false;
	        var replayGroup = new BuilderGroup(getTolerance(resolution, pixelRatio), extent, resolution, pixelRatio, vectorLayer.getDeclutter());
	        var userProjection = getUserProjection();
	        var userTransform;
	        if (userProjection) {
	            vectorSource.loadFeatures(toUserExtent(extent, projection), resolution, userProjection);
	            userTransform = getTransformFromProjections(userProjection, projection);
	        }
	        else {
	            vectorSource.loadFeatures(extent, resolution, projection);
	        }
	        var squaredTolerance = getSquaredTolerance(resolution, pixelRatio);
	        /**
	         * @param {import("../../Feature.js").default} feature Feature.
	         * @this {CanvasVectorLayerRenderer}
	         */
	        var render = function (feature) {
	            var styles;
	            var styleFunction = feature.getStyleFunction() || vectorLayer.getStyleFunction();
	            if (styleFunction) {
	                styles = styleFunction(feature, resolution);
	            }
	            if (styles) {
	                var dirty = this.renderFeature(feature, squaredTolerance, styles, replayGroup, userTransform);
	                this.dirty_ = this.dirty_ || dirty;
	            }
	        }.bind(this);
	        var userExtent = toUserExtent(extent, projection);
	        /** @type {Array<import("../../Feature.js").default>} */
	        var features = vectorSource.getFeaturesInExtent(userExtent);
	        if (vectorLayerRenderOrder) {
	            features.sort(vectorLayerRenderOrder);
	        }
	        for (var i = 0, ii = features.length; i < ii; ++i) {
	            render(features[i]);
	        }
	        this.renderedFeatures_ = features;
	        var replayGroupInstructions = replayGroup.finish();
	        var executorGroup = new ExecutorGroup(extent, resolution, pixelRatio, vectorSource.getOverlaps(), replayGroupInstructions, vectorLayer.getRenderBuffer());
	        this.renderedResolution_ = resolution;
	        this.renderedRevision_ = vectorLayerRevision;
	        this.renderedRenderOrder_ = vectorLayerRenderOrder;
	        this.renderedExtent_ = extent;
	        this.renderedRotation_ = viewState.rotation;
	        this.renderedCenter_ = center;
	        this.renderedProjection_ = projection;
	        this.replayGroup_ = executorGroup;
	        this.hitDetectionImageData_ = null;
	        this.replayGroupChanged = true;
	        return true;
	    };
	    /**
	     * @param {import("../../Feature.js").default} feature Feature.
	     * @param {number} squaredTolerance Squared render tolerance.
	     * @param {import("../../style/Style.js").default|Array<import("../../style/Style.js").default>} styles The style or array of styles.
	     * @param {import("../../render/canvas/BuilderGroup.js").default} builderGroup Builder group.
	     * @param {import("../../proj.js").TransformFunction} opt_transform Transform from user to view projection.
	     * @return {boolean} `true` if an image is loading.
	     */
	    CanvasVectorLayerRenderer.prototype.renderFeature = function (feature, squaredTolerance, styles, builderGroup, opt_transform) {
	        if (!styles) {
	            return false;
	        }
	        var loading = false;
	        if (Array.isArray(styles)) {
	            for (var i = 0, ii = styles.length; i < ii; ++i) {
	                loading = renderFeature(builderGroup, feature, styles[i], squaredTolerance, this.boundHandleStyleImageChange_, opt_transform) || loading;
	            }
	        }
	        else {
	            loading = renderFeature(builderGroup, feature, styles, squaredTolerance, this.boundHandleStyleImageChange_, opt_transform);
	        }
	        return loading;
	    };
	    return CanvasVectorLayerRenderer;
	}(CanvasLayerRenderer));

	var __extends$B = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @classdesc
	 * Vector data that is rendered client-side.
	 * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
	 * property on the layer object; for example, setting `title: 'My Title'` in the
	 * options means that `title` is observable, and has get/set accessors.
	 *
	 * @extends {BaseVectorLayer<import("../source/Vector.js").default>}
	 * @api
	 */
	var VectorLayer = /** @class */ (function (_super) {
	    __extends$B(VectorLayer, _super);
	    /**
	     * @param {import("./BaseVector.js").Options=} opt_options Options.
	     */
	    function VectorLayer(opt_options) {
	        return _super.call(this, opt_options) || this;
	    }
	    /**
	     * Create a renderer for this layer.
	     * @return {import("../renderer/Layer.js").default} A layer renderer.
	     * @protected
	     */
	    VectorLayer.prototype.createRenderer = function () {
	        return new CanvasVectorLayerRenderer(this);
	    };
	    return VectorLayer;
	}(BaseVectorLayer));

	/**
	 * @module ol/coordinate
	 */
	/**
	 * An array of numbers representing an xy coordinate. Example: `[16, 48]`.
	 * @typedef {Array<number>} Coordinate
	 * @api
	 */
	/**
	 * A function that takes a {@link module:ol/coordinate~Coordinate} and
	 * transforms it into a `{string}`.
	 *
	 * @typedef {function((Coordinate|undefined)): string} CoordinateFormat
	 * @api
	 */
	/**
	 * Add `delta` to `coordinate`. `coordinate` is modified in place and returned
	 * by the function.
	 *
	 * Example:
	 *
	 *     import {add} from 'ol/coordinate';
	 *
	 *     var coord = [7.85, 47.983333];
	 *     add(coord, [-2, 4]);
	 *     // coord is now [5.85, 51.983333]
	 *
	 * @param {Coordinate} coordinate Coordinate.
	 * @param {Coordinate} delta Delta.
	 * @return {Coordinate} The input coordinate adjusted by
	 * the given delta.
	 * @api
	 */
	function add$2(coordinate, delta) {
	    coordinate[0] += +delta[0];
	    coordinate[1] += +delta[1];
	    return coordinate;
	}
	/**
	 * @param {Coordinate} coordinate1 First coordinate.
	 * @param {Coordinate} coordinate2 Second coordinate.
	 * @return {boolean} The two coordinates are equal.
	 */
	function equals$2(coordinate1, coordinate2) {
	    var equals = true;
	    for (var i = coordinate1.length - 1; i >= 0; --i) {
	        if (coordinate1[i] != coordinate2[i]) {
	            equals = false;
	            break;
	        }
	    }
	    return equals;
	}
	/**
	 * Rotate `coordinate` by `angle`. `coordinate` is modified in place and
	 * returned by the function.
	 *
	 * Example:
	 *
	 *     import {rotate} from 'ol/coordinate';
	 *
	 *     var coord = [7.85, 47.983333];
	 *     var rotateRadians = Math.PI / 2; // 90 degrees
	 *     rotate(coord, rotateRadians);
	 *     // coord is now [-47.983333, 7.85]
	 *
	 * @param {Coordinate} coordinate Coordinate.
	 * @param {number} angle Angle in radian.
	 * @return {Coordinate} Coordinate.
	 * @api
	 */
	function rotate$1(coordinate, angle) {
	    var cosAngle = Math.cos(angle);
	    var sinAngle = Math.sin(angle);
	    var x = coordinate[0] * cosAngle - coordinate[1] * sinAngle;
	    var y = coordinate[1] * cosAngle + coordinate[0] * sinAngle;
	    coordinate[0] = x;
	    coordinate[1] = y;
	    return coordinate;
	}
	/**
	 * Scale `coordinate` by `scale`. `coordinate` is modified in place and returned
	 * by the function.
	 *
	 * Example:
	 *
	 *     import {scale as scaleCoordinate} from 'ol/coordinate';
	 *
	 *     var coord = [7.85, 47.983333];
	 *     var scale = 1.2;
	 *     scaleCoordinate(coord, scale);
	 *     // coord is now [9.42, 57.5799996]
	 *
	 * @param {Coordinate} coordinate Coordinate.
	 * @param {number} scale Scale factor.
	 * @return {Coordinate} Coordinate.
	 */
	function scale$2(coordinate, scale) {
	    coordinate[0] *= scale;
	    coordinate[1] *= scale;
	    return coordinate;
	}

	/**
	 * @module ol/geom/flat/interpolate
	 */
	/**
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {number} end End.
	 * @param {number} stride Stride.
	 * @param {number} fraction Fraction.
	 * @param {Array<number>=} opt_dest Destination.
	 * @return {Array<number>} Destination.
	 */
	function interpolatePoint(flatCoordinates, offset, end, stride, fraction, opt_dest) {
	    var pointX = NaN;
	    var pointY = NaN;
	    var n = (end - offset) / stride;
	    if (n === 1) {
	        pointX = flatCoordinates[offset];
	        pointY = flatCoordinates[offset + 1];
	    }
	    else if (n == 2) {
	        pointX = (1 - fraction) * flatCoordinates[offset] +
	            fraction * flatCoordinates[offset + stride];
	        pointY = (1 - fraction) * flatCoordinates[offset + 1] +
	            fraction * flatCoordinates[offset + stride + 1];
	    }
	    else if (n !== 0) {
	        var x1 = flatCoordinates[offset];
	        var y1 = flatCoordinates[offset + 1];
	        var length_1 = 0;
	        var cumulativeLengths = [0];
	        for (var i = offset + stride; i < end; i += stride) {
	            var x2 = flatCoordinates[i];
	            var y2 = flatCoordinates[i + 1];
	            length_1 += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
	            cumulativeLengths.push(length_1);
	            x1 = x2;
	            y1 = y2;
	        }
	        var target = fraction * length_1;
	        var index = binarySearch(cumulativeLengths, target);
	        if (index < 0) {
	            var t = (target - cumulativeLengths[-index - 2]) /
	                (cumulativeLengths[-index - 1] - cumulativeLengths[-index - 2]);
	            var o = offset + (-index - 2) * stride;
	            pointX = lerp(flatCoordinates[o], flatCoordinates[o + stride], t);
	            pointY = lerp(flatCoordinates[o + 1], flatCoordinates[o + stride + 1], t);
	        }
	        else {
	            pointX = flatCoordinates[offset + index * stride];
	            pointY = flatCoordinates[offset + index * stride + 1];
	        }
	    }
	    if (opt_dest) {
	        opt_dest[0] = pointX;
	        opt_dest[1] = pointY;
	        return opt_dest;
	    }
	    else {
	        return [pointX, pointY];
	    }
	}
	/**
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {number} end End.
	 * @param {number} stride Stride.
	 * @param {number} m M.
	 * @param {boolean} extrapolate Extrapolate.
	 * @return {import("../../coordinate.js").Coordinate} Coordinate.
	 */
	function lineStringCoordinateAtM(flatCoordinates, offset, end, stride, m, extrapolate) {
	    if (end == offset) {
	        return null;
	    }
	    var coordinate;
	    if (m < flatCoordinates[offset + stride - 1]) {
	        if (extrapolate) {
	            coordinate = flatCoordinates.slice(offset, offset + stride);
	            coordinate[stride - 1] = m;
	            return coordinate;
	        }
	        else {
	            return null;
	        }
	    }
	    else if (flatCoordinates[end - 1] < m) {
	        if (extrapolate) {
	            coordinate = flatCoordinates.slice(end - stride, end);
	            coordinate[stride - 1] = m;
	            return coordinate;
	        }
	        else {
	            return null;
	        }
	    }
	    // FIXME use O(1) search
	    if (m == flatCoordinates[offset + stride - 1]) {
	        return flatCoordinates.slice(offset, offset + stride);
	    }
	    var lo = offset / stride;
	    var hi = end / stride;
	    while (lo < hi) {
	        var mid = (lo + hi) >> 1;
	        if (m < flatCoordinates[(mid + 1) * stride - 1]) {
	            hi = mid;
	        }
	        else {
	            lo = mid + 1;
	        }
	    }
	    var m0 = flatCoordinates[lo * stride - 1];
	    if (m == m0) {
	        return flatCoordinates.slice((lo - 1) * stride, (lo - 1) * stride + stride);
	    }
	    var m1 = flatCoordinates[(lo + 1) * stride - 1];
	    var t = (m - m0) / (m1 - m0);
	    coordinate = [];
	    for (var i = 0; i < stride - 1; ++i) {
	        coordinate.push(lerp(flatCoordinates[(lo - 1) * stride + i], flatCoordinates[lo * stride + i], t));
	    }
	    coordinate.push(m);
	    return coordinate;
	}
	/**
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {Array<number>} ends Ends.
	 * @param {number} stride Stride.
	 * @param {number} m M.
	 * @param {boolean} extrapolate Extrapolate.
	 * @param {boolean} interpolate Interpolate.
	 * @return {import("../../coordinate.js").Coordinate} Coordinate.
	 */
	function lineStringsCoordinateAtM(flatCoordinates, offset, ends, stride, m, extrapolate, interpolate) {
	    if (interpolate) {
	        return lineStringCoordinateAtM(flatCoordinates, offset, ends[ends.length - 1], stride, m, extrapolate);
	    }
	    var coordinate;
	    if (m < flatCoordinates[stride - 1]) {
	        if (extrapolate) {
	            coordinate = flatCoordinates.slice(0, stride);
	            coordinate[stride - 1] = m;
	            return coordinate;
	        }
	        else {
	            return null;
	        }
	    }
	    if (flatCoordinates[flatCoordinates.length - 1] < m) {
	        if (extrapolate) {
	            coordinate = flatCoordinates.slice(flatCoordinates.length - stride);
	            coordinate[stride - 1] = m;
	            return coordinate;
	        }
	        else {
	            return null;
	        }
	    }
	    for (var i = 0, ii = ends.length; i < ii; ++i) {
	        var end = ends[i];
	        if (offset == end) {
	            continue;
	        }
	        if (m < flatCoordinates[offset + stride - 1]) {
	            return null;
	        }
	        else if (m <= flatCoordinates[end - 1]) {
	            return lineStringCoordinateAtM(flatCoordinates, offset, end, stride, m, false);
	        }
	        offset = end;
	    }
	    return null;
	}

	var __extends$C = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @classdesc
	 * Linestring geometry.
	 *
	 * @api
	 */
	var LineString = /** @class */ (function (_super) {
	    __extends$C(LineString, _super);
	    /**
	     * @param {Array<import("../coordinate.js").Coordinate>|Array<number>} coordinates Coordinates.
	     *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.
	     * @param {GeometryLayout=} opt_layout Layout.
	     */
	    function LineString(coordinates, opt_layout) {
	        var _this = _super.call(this) || this;
	        /**
	         * @private
	         * @type {import("../coordinate.js").Coordinate}
	         */
	        _this.flatMidpoint_ = null;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.flatMidpointRevision_ = -1;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.maxDelta_ = -1;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.maxDeltaRevision_ = -1;
	        if (opt_layout !== undefined && !Array.isArray(coordinates[0])) {
	            _this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */ (coordinates));
	        }
	        else {
	            _this.setCoordinates(/** @type {Array<import("../coordinate.js").Coordinate>} */ (coordinates), opt_layout);
	        }
	        return _this;
	    }
	    /**
	     * Append the passed coordinate to the coordinates of the linestring.
	     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
	     * @api
	     */
	    LineString.prototype.appendCoordinate = function (coordinate) {
	        if (!this.flatCoordinates) {
	            this.flatCoordinates = coordinate.slice();
	        }
	        else {
	            extend$1(this.flatCoordinates, coordinate);
	        }
	        this.changed();
	    };
	    /**
	     * Make a complete copy of the geometry.
	     * @return {!LineString} Clone.
	     * @override
	     * @api
	     */
	    LineString.prototype.clone = function () {
	        return new LineString(this.flatCoordinates.slice(), this.layout);
	    };
	    /**
	     * @inheritDoc
	     */
	    LineString.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {
	        if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
	            return minSquaredDistance;
	        }
	        if (this.maxDeltaRevision_ != this.getRevision()) {
	            this.maxDelta_ = Math.sqrt(maxSquaredDelta(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));
	            this.maxDeltaRevision_ = this.getRevision();
	        }
	        return assignClosestPoint(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);
	    };
	    /**
	     * Iterate over each segment, calling the provided callback.
	     * If the callback returns a truthy value the function returns that
	     * value immediately. Otherwise the function returns `false`.
	     *
	     * @param {function(this: S, import("../coordinate.js").Coordinate, import("../coordinate.js").Coordinate): T} callback Function
	     *     called for each segment. The function will receive two arguments, the start and end coordinates of the segment.
	     * @return {T|boolean} Value.
	     * @template T,S
	     * @api
	     */
	    LineString.prototype.forEachSegment = function (callback) {
	        return forEach(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, callback);
	    };
	    /**
	     * Returns the coordinate at `m` using linear interpolation, or `null` if no
	     * such coordinate exists.
	     *
	     * `opt_extrapolate` controls extrapolation beyond the range of Ms in the
	     * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first
	     * M will return the first coordinate and Ms greater than the last M will
	     * return the last coordinate.
	     *
	     * @param {number} m M.
	     * @param {boolean=} opt_extrapolate Extrapolate. Default is `false`.
	     * @return {import("../coordinate.js").Coordinate} Coordinate.
	     * @api
	     */
	    LineString.prototype.getCoordinateAtM = function (m, opt_extrapolate) {
	        if (this.layout != GeometryLayout.XYM &&
	            this.layout != GeometryLayout.XYZM) {
	            return null;
	        }
	        var extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;
	        return lineStringCoordinateAtM(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, m, extrapolate);
	    };
	    /**
	     * Return the coordinates of the linestring.
	     * @return {Array<import("../coordinate.js").Coordinate>} Coordinates.
	     * @override
	     * @api
	     */
	    LineString.prototype.getCoordinates = function () {
	        return inflateCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
	    };
	    /**
	     * Return the coordinate at the provided fraction along the linestring.
	     * The `fraction` is a number between 0 and 1, where 0 is the start of the
	     * linestring and 1 is the end.
	     * @param {number} fraction Fraction.
	     * @param {import("../coordinate.js").Coordinate=} opt_dest Optional coordinate whose values will
	     *     be modified. If not provided, a new coordinate will be returned.
	     * @return {import("../coordinate.js").Coordinate} Coordinate of the interpolated point.
	     * @api
	     */
	    LineString.prototype.getCoordinateAt = function (fraction, opt_dest) {
	        return interpolatePoint(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, fraction, opt_dest);
	    };
	    /**
	     * Return the length of the linestring on projected plane.
	     * @return {number} Length (on projected plane).
	     * @api
	     */
	    LineString.prototype.getLength = function () {
	        return lineStringLength(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
	    };
	    /**
	     * @return {Array<number>} Flat midpoint.
	     */
	    LineString.prototype.getFlatMidpoint = function () {
	        if (this.flatMidpointRevision_ != this.getRevision()) {
	            this.flatMidpoint_ = this.getCoordinateAt(0.5, this.flatMidpoint_);
	            this.flatMidpointRevision_ = this.getRevision();
	        }
	        return this.flatMidpoint_;
	    };
	    /**
	     * @inheritDoc
	     */
	    LineString.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {
	        var simplifiedFlatCoordinates = [];
	        simplifiedFlatCoordinates.length = douglasPeucker(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0);
	        return new LineString(simplifiedFlatCoordinates, GeometryLayout.XY);
	    };
	    /**
	     * @inheritDoc
	     * @api
	     */
	    LineString.prototype.getType = function () {
	        return GeometryType.LINE_STRING;
	    };
	    /**
	     * @inheritDoc
	     * @api
	     */
	    LineString.prototype.intersectsExtent = function (extent) {
	        return intersectsLineString(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, extent);
	    };
	    /**
	     * Set the coordinates of the linestring.
	     * @param {!Array<import("../coordinate.js").Coordinate>} coordinates Coordinates.
	     * @param {GeometryLayout=} opt_layout Layout.
	     * @override
	     * @api
	     */
	    LineString.prototype.setCoordinates = function (coordinates, opt_layout) {
	        this.setLayout(opt_layout, coordinates, 1);
	        if (!this.flatCoordinates) {
	            this.flatCoordinates = [];
	        }
	        this.flatCoordinates.length = deflateCoordinates(this.flatCoordinates, 0, coordinates, this.stride);
	        this.changed();
	    };
	    return LineString;
	}(SimpleGeometry));

	/**
	 * @module ol/format/FormatType
	 */
	/**
	 * @enum {string}
	 */
	var FormatType = {
	    ARRAY_BUFFER: 'arraybuffer',
	    JSON: 'json',
	    TEXT: 'text',
	    XML: 'xml'
	};

	/**
	 * @module ol/featureloader
	 */
	/**
	 *
	 * @type {boolean}
	 * @private
	 */
	var withCredentials = false;
	/**
	 * {@link module:ol/source/Vector} sources use a function of this type to
	 * load features.
	 *
	 * This function takes an {@link module:ol/extent~Extent} representing the area to be loaded,
	 * a `{number}` representing the resolution (map units per pixel) and an
	 * {@link module:ol/proj/Projection} for the projection  as
	 * arguments. `this` within the function is bound to the
	 * {@link module:ol/source/Vector} it's called from.
	 *
	 * The function is responsible for loading the features and adding them to the
	 * source.
	 * @typedef {function(this:(import("./source/Vector").default|import("./VectorTile.js").default), import("./extent.js").Extent, number,
	 *                    import("./proj/Projection.js").default): void} FeatureLoader
	 * @api
	 */
	/**
	 * {@link module:ol/source/Vector} sources use a function of this type to
	 * get the url to load features from.
	 *
	 * This function takes an {@link module:ol/extent~Extent} representing the area
	 * to be loaded, a `{number}` representing the resolution (map units per pixel)
	 * and an {@link module:ol/proj/Projection} for the projection  as
	 * arguments and returns a `{string}` representing the URL.
	 * @typedef {function(import("./extent.js").Extent, number, import("./proj/Projection.js").default): string} FeatureUrlFunction
	 * @api
	 */
	/**
	 * @param {string|FeatureUrlFunction} url Feature URL service.
	 * @param {import("./format/Feature.js").default} format Feature format.
	 * @param {function(this:import("./VectorTile.js").default, Array<import("./Feature.js").default>, import("./proj/Projection.js").default, import("./extent.js").Extent): void|function(this:import("./source/Vector").default, Array<import("./Feature.js").default>): void} success
	 *     Function called with the loaded features and optionally with the data
	 *     projection. Called with the vector tile or source as `this`.
	 * @param {function(this:import("./VectorTile.js").default): void|function(this:import("./source/Vector").default): void} failure
	 *     Function called when loading failed. Called with the vector tile or
	 *     source as `this`.
	 * @return {FeatureLoader} The feature loader.
	 */
	function loadFeaturesXhr(url, format, success, failure) {
	    return (
	    /**
	     * @param {import("./extent.js").Extent} extent Extent.
	     * @param {number} resolution Resolution.
	     * @param {import("./proj/Projection.js").default} projection Projection.
	     * @this {import("./source/Vector").default|import("./VectorTile.js").default}
	     */
	    function (extent, resolution, projection) {
	        var xhr = new XMLHttpRequest();
	        xhr.open('GET', typeof url === 'function' ? url(extent, resolution, projection) : url, true);
	        if (format.getType() == FormatType.ARRAY_BUFFER) {
	            xhr.responseType = 'arraybuffer';
	        }
	        xhr.withCredentials = withCredentials;
	        /**
	         * @param {Event} event Event.
	         * @private
	         */
	        xhr.onload = function (event) {
	            // status will be 0 for file:// urls
	            if (!xhr.status || xhr.status >= 200 && xhr.status < 300) {
	                var type = format.getType();
	                /** @type {Document|Node|Object|string|undefined} */
	                var source = void 0;
	                if (type == FormatType.JSON || type == FormatType.TEXT) {
	                    source = xhr.responseText;
	                }
	                else if (type == FormatType.XML) {
	                    source = xhr.responseXML;
	                    if (!source) {
	                        source = new DOMParser().parseFromString(xhr.responseText, 'application/xml');
	                    }
	                }
	                else if (type == FormatType.ARRAY_BUFFER) {
	                    source = /** @type {ArrayBuffer} */ (xhr.response);
	                }
	                if (source) {
	                    success.call(this, format.readFeatures(source, {
	                        extent: extent,
	                        featureProjection: projection
	                    }), format.readProjection(source));
	                }
	                else {
	                    failure.call(this);
	                }
	            }
	            else {
	                failure.call(this);
	            }
	        }.bind(this);
	        /**
	         * @private
	         */
	        xhr.onerror = function () {
	            failure.call(this);
	        }.bind(this);
	        xhr.send();
	    });
	}
	/**
	 * Create an XHR feature loader for a `url` and `format`. The feature loader
	 * loads features (with XHR), parses the features, and adds them to the
	 * vector source.
	 * @param {string|FeatureUrlFunction} url Feature URL service.
	 * @param {import("./format/Feature.js").default} format Feature format.
	 * @return {FeatureLoader} The feature loader.
	 * @api
	 */
	function xhr(url, format) {
	    return loadFeaturesXhr(url, format, 
	    /**
	     * @param {Array<import("./Feature.js").default>} features The loaded features.
	     * @param {import("./proj/Projection.js").default} dataProjection Data
	     * projection.
	     * @this {import("./source/Vector").default|import("./VectorTile.js").default}
	     */
	    function (features, dataProjection) {
	        var sourceOrTile = /** @type {?} */ (this);
	        if (typeof sourceOrTile.addFeatures === 'function') {
	            /** @type {import("./source/Vector").default} */ (sourceOrTile).addFeatures(features);
	        }
	    }, /* FIXME handle error */ VOID);
	}

	/**
	 * @module ol/loadingstrategy
	 */
	/**
	 * Strategy function for loading all features with a single request.
	 * @param {import("./extent.js").Extent} extent Extent.
	 * @param {number} resolution Resolution.
	 * @return {Array<import("./extent.js").Extent>} Extents.
	 * @api
	 */
	function all(extent, resolution) {
	    return [[-Infinity, -Infinity, Infinity, Infinity]];
	}

	var __extends$D = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * A function that returns a string or an array of strings representing source
	 * attributions.
	 *
	 * @typedef {function(import("../PluggableMap.js").FrameState): (string|Array<string>)} Attribution
	 */
	/**
	 * A type that can be used to provide attribution information for data sources.
	 *
	 * It represents either
	 * * a simple string (e.g. `'Â© Acme Inc.'`)
	 * * an array of simple strings (e.g. `['Â© Acme Inc.', 'Â© Bacme Inc.']`)
	 * * a function that returns a string or array of strings ({@link module:ol/source/Source~Attribution})
	 *
	 * @typedef {string|Array<string>|Attribution} AttributionLike
	 */
	/**
	 * @typedef {Object} Options
	 * @property {AttributionLike} [attributions]
	 * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
	 * @property {import("../proj.js").ProjectionLike} [projection] Projection. Default is the view projection.
	 * @property {SourceState} [state='ready']
	 * @property {boolean} [wrapX=false]
	 */
	/**
	 * @classdesc
	 * Abstract base class; normally only used for creating subclasses and not
	 * instantiated in apps.
	 * Base class for {@link module:ol/layer/Layer~Layer} sources.
	 *
	 * A generic `change` event is triggered when the state of the source changes.
	 * @abstract
	 * @api
	 */
	var Source = /** @class */ (function (_super) {
	    __extends$D(Source, _super);
	    /**
	     * @param {Options} options Source options.
	     */
	    function Source(options) {
	        var _this = _super.call(this) || this;
	        /**
	         * @private
	         * @type {import("../proj/Projection.js").default}
	         */
	        _this.projection_ = get$4(options.projection);
	        /**
	         * @private
	         * @type {?Attribution}
	         */
	        _this.attributions_ = adaptAttributions(options.attributions);
	        /**
	         * @private
	         * @type {boolean}
	         */
	        _this.attributionsCollapsible_ = options.attributionsCollapsible !== undefined ?
	            options.attributionsCollapsible : true;
	        /**
	         * This source is currently loading data. Sources that defer loading to the
	         * map's tile queue never set this to `true`.
	         * @type {boolean}
	         */
	        _this.loading = false;
	        /**
	         * @private
	         * @type {SourceState}
	         */
	        _this.state_ = options.state !== undefined ?
	            options.state : SourceState.READY;
	        /**
	         * @private
	         * @type {boolean}
	         */
	        _this.wrapX_ = options.wrapX !== undefined ? options.wrapX : false;
	        return _this;
	    }
	    /**
	     * Get the attribution function for the source.
	     * @return {?Attribution} Attribution function.
	     */
	    Source.prototype.getAttributions = function () {
	        return this.attributions_;
	    };
	    /**
	     * @return {boolean} Attributions are collapsible.
	     */
	    Source.prototype.getAttributionsCollapsible = function () {
	        return this.attributionsCollapsible_;
	    };
	    /**
	     * Get the projection of the source.
	     * @return {import("../proj/Projection.js").default} Projection.
	     * @api
	     */
	    Source.prototype.getProjection = function () {
	        return this.projection_;
	    };
	    /**
	     * @abstract
	     * @return {Array<number>|undefined} Resolutions.
	     */
	    Source.prototype.getResolutions = function () {
	        return abstract();
	    };
	    /**
	     * Get the state of the source, see {@link module:ol/source/State~State} for possible states.
	     * @return {SourceState} State.
	     * @api
	     */
	    Source.prototype.getState = function () {
	        return this.state_;
	    };
	    /**
	     * @return {boolean|undefined} Wrap X.
	     */
	    Source.prototype.getWrapX = function () {
	        return this.wrapX_;
	    };
	    /**
	     * Refreshes the source. The source will be cleared, and data from the server will be reloaded.
	     * @api
	     */
	    Source.prototype.refresh = function () {
	        this.changed();
	    };
	    /**
	     * Set the attributions of the source.
	     * @param {AttributionLike|undefined} attributions Attributions.
	     *     Can be passed as `string`, `Array<string>`, {@link module:ol/source/Source~Attribution},
	     *     or `undefined`.
	     * @api
	     */
	    Source.prototype.setAttributions = function (attributions) {
	        this.attributions_ = adaptAttributions(attributions);
	        this.changed();
	    };
	    /**
	     * Set the state of the source.
	     * @param {SourceState} state State.
	     * @protected
	     */
	    Source.prototype.setState = function (state) {
	        this.state_ = state;
	        this.changed();
	    };
	    return Source;
	}(BaseObject));
	/**
	 * Turns the attributions option into an attributions function.
	 * @param {AttributionLike|undefined} attributionLike The attribution option.
	 * @return {?Attribution} An attribution function (or null).
	 */
	function adaptAttributions(attributionLike) {
	    if (!attributionLike) {
	        return null;
	    }
	    if (Array.isArray(attributionLike)) {
	        return function (frameState) {
	            return attributionLike;
	        };
	    }
	    if (typeof attributionLike === 'function') {
	        return attributionLike;
	    }
	    return function (frameState) {
	        return [attributionLike];
	    };
	}

	/**
	 * @module ol/source/VectorEventType
	 */
	/**
	 * @enum {string}
	 */
	var VectorEventType = {
	    /**
	     * Triggered when a feature is added to the source.
	     * @event module:ol/source/Vector.VectorSourceEvent#addfeature
	     * @api
	     */
	    ADDFEATURE: 'addfeature',
	    /**
	     * Triggered when a feature is updated.
	     * @event module:ol/source/Vector.VectorSourceEvent#changefeature
	     * @api
	     */
	    CHANGEFEATURE: 'changefeature',
	    /**
	     * Triggered when the clear method is called on the source.
	     * @event module:ol/source/Vector.VectorSourceEvent#clear
	     * @api
	     */
	    CLEAR: 'clear',
	    /**
	     * Triggered when a feature is removed from the source.
	     * See {@link module:ol/source/Vector#clear source.clear()} for exceptions.
	     * @event module:ol/source/Vector.VectorSourceEvent#removefeature
	     * @api
	     */
	    REMOVEFEATURE: 'removefeature'
	};

	/**
	 * @module ol/structs/RBush
	 */
	/**
	 * @typedef {Object} Entry
	 * @property {number} minX
	 * @property {number} minY
	 * @property {number} maxX
	 * @property {number} maxY
	 * @property {Object} [value]
	 */
	/**
	 * @classdesc
	 * Wrapper around the RBush by Vladimir Agafonkin.
	 * See https://github.com/mourner/rbush.
	 *
	 * @template T
	 */
	var RBush = /** @class */ (function () {
	    /**
	     * @param {number=} opt_maxEntries Max entries.
	     */
	    function RBush(opt_maxEntries) {
	        /**
	         * @private
	         */
	        this.rbush_ = new rbush_min(opt_maxEntries);
	        /**
	         * A mapping between the objects added to this rbush wrapper
	         * and the objects that are actually added to the internal rbush.
	         * @private
	         * @type {Object<string, Entry>}
	         */
	        this.items_ = {};
	    }
	    /**
	     * Insert a value into the RBush.
	     * @param {import("../extent.js").Extent} extent Extent.
	     * @param {T} value Value.
	     */
	    RBush.prototype.insert = function (extent, value) {
	        /** @type {Entry} */
	        var item = {
	            minX: extent[0],
	            minY: extent[1],
	            maxX: extent[2],
	            maxY: extent[3],
	            value: value
	        };
	        this.rbush_.insert(item);
	        this.items_[getUid(value)] = item;
	    };
	    /**
	     * Bulk-insert values into the RBush.
	     * @param {Array<import("../extent.js").Extent>} extents Extents.
	     * @param {Array<T>} values Values.
	     */
	    RBush.prototype.load = function (extents, values) {
	        var items = new Array(values.length);
	        for (var i = 0, l = values.length; i < l; i++) {
	            var extent = extents[i];
	            var value = values[i];
	            /** @type {Entry} */
	            var item = {
	                minX: extent[0],
	                minY: extent[1],
	                maxX: extent[2],
	                maxY: extent[3],
	                value: value
	            };
	            items[i] = item;
	            this.items_[getUid(value)] = item;
	        }
	        this.rbush_.load(items);
	    };
	    /**
	     * Remove a value from the RBush.
	     * @param {T} value Value.
	     * @return {boolean} Removed.
	     */
	    RBush.prototype.remove = function (value) {
	        var uid = getUid(value);
	        // get the object in which the value was wrapped when adding to the
	        // internal rbush. then use that object to do the removal.
	        var item = this.items_[uid];
	        delete this.items_[uid];
	        return this.rbush_.remove(item) !== null;
	    };
	    /**
	     * Update the extent of a value in the RBush.
	     * @param {import("../extent.js").Extent} extent Extent.
	     * @param {T} value Value.
	     */
	    RBush.prototype.update = function (extent, value) {
	        var item = this.items_[getUid(value)];
	        var bbox = [item.minX, item.minY, item.maxX, item.maxY];
	        if (!equals(bbox, extent)) {
	            this.remove(value);
	            this.insert(extent, value);
	        }
	    };
	    /**
	     * Return all values in the RBush.
	     * @return {Array<T>} All.
	     */
	    RBush.prototype.getAll = function () {
	        var items = this.rbush_.all();
	        return items.map(function (item) {
	            return item.value;
	        });
	    };
	    /**
	     * Return all values in the given extent.
	     * @param {import("../extent.js").Extent} extent Extent.
	     * @return {Array<T>} All in extent.
	     */
	    RBush.prototype.getInExtent = function (extent) {
	        /** @type {Entry} */
	        var bbox = {
	            minX: extent[0],
	            minY: extent[1],
	            maxX: extent[2],
	            maxY: extent[3]
	        };
	        var items = this.rbush_.search(bbox);
	        return items.map(function (item) {
	            return item.value;
	        });
	    };
	    /**
	     * Calls a callback function with each value in the tree.
	     * If the callback returns a truthy value, this value is returned without
	     * checking the rest of the tree.
	     * @param {function(T): *} callback Callback.
	     * @return {*} Callback return value.
	     */
	    RBush.prototype.forEach = function (callback) {
	        return this.forEach_(this.getAll(), callback);
	    };
	    /**
	     * Calls a callback function with each value in the provided extent.
	     * @param {import("../extent.js").Extent} extent Extent.
	     * @param {function(T): *} callback Callback.
	     * @return {*} Callback return value.
	     */
	    RBush.prototype.forEachInExtent = function (extent, callback) {
	        return this.forEach_(this.getInExtent(extent), callback);
	    };
	    /**
	     * @param {Array<T>} values Values.
	     * @param {function(T): *} callback Callback.
	     * @private
	     * @return {*} Callback return value.
	     */
	    RBush.prototype.forEach_ = function (values, callback) {
	        var result;
	        for (var i = 0, l = values.length; i < l; i++) {
	            result = callback(values[i]);
	            if (result) {
	                return result;
	            }
	        }
	        return result;
	    };
	    /**
	     * @return {boolean} Is empty.
	     */
	    RBush.prototype.isEmpty = function () {
	        return isEmpty$1(this.items_);
	    };
	    /**
	     * Remove all values from the RBush.
	     */
	    RBush.prototype.clear = function () {
	        this.rbush_.clear();
	        this.items_ = {};
	    };
	    /**
	     * @param {import("../extent.js").Extent=} opt_extent Extent.
	     * @return {import("../extent.js").Extent} Extent.
	     */
	    RBush.prototype.getExtent = function (opt_extent) {
	        var data = this.rbush_.toJSON();
	        return createOrUpdate(data.minX, data.minY, data.maxX, data.maxY, opt_extent);
	    };
	    /**
	     * @param {RBush} rbush R-Tree.
	     */
	    RBush.prototype.concat = function (rbush) {
	        this.rbush_.load(rbush.rbush_.all());
	        for (var i in rbush.items_) {
	            this.items_[i] = rbush.items_[i];
	        }
	    };
	    return RBush;
	}());

	/**
	 * @module ol/source/Vector
	 */
	var __extends$E = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * A function that takes an {@link module:ol/extent~Extent} and a resolution as arguments, and
	 * returns an array of {@link module:ol/extent~Extent} with the extents to load. Usually this
	 * is one of the standard {@link module:ol/loadingstrategy} strategies.
	 *
	 * @typedef {function(import("../extent.js").Extent, number): Array<import("../extent.js").Extent>} LoadingStrategy
	 * @api
	 */
	/**
	 * @classdesc
	 * Events emitted by {@link module:ol/source/Vector} instances are instances of this
	 * type.
	 * @template {import("../geom/Geometry.js").default} Geometry
	 */
	var VectorSourceEvent = /** @class */ (function (_super) {
	    __extends$E(VectorSourceEvent, _super);
	    /**
	     * @param {string} type Type.
	     * @param {import("../Feature.js").default<Geometry>=} opt_feature Feature.
	     */
	    function VectorSourceEvent(type, opt_feature) {
	        var _this = _super.call(this, type) || this;
	        /**
	         * The feature being added or removed.
	         * @type {import("../Feature.js").default<Geometry>|undefined}
	         * @api
	         */
	        _this.feature = opt_feature;
	        return _this;
	    }
	    return VectorSourceEvent;
	}(BaseEvent));
	/**
	 * @typedef {Object} Options
	 * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
	 * @property {Array<import("../Feature.js").default>|Collection<import("../Feature.js").default>} [features]
	 * Features. If provided as {@link module:ol/Collection}, the features in the source
	 * and the collection will stay in sync.
	 * @property {import("../format/Feature.js").default} [format] The feature format used by the XHR
	 * feature loader when `url` is set. Required if `url` is set, otherwise ignored.
	 * @property {import("../featureloader.js").FeatureLoader} [loader]
	 * The loader function used to load features, from a remote source for example.
	 * If this is not set and `url` is set, the source will create and use an XHR
	 * feature loader.
	 *
	 * Example:
	 *
	 * ```js
	 * import {Vector} from 'ol/source';
	 * import {GeoJSON} from 'ol/format';
	 * import {bbox} from 'ol/loadingstrategy';
	 *
	 * var vectorSource = new Vector({
	 *   format: new GeoJSON(),
	 *   loader: function(extent, resolution, projection) {
	 *      var proj = projection.getCode();
	 *      var url = 'https://ahocevar.com/geoserver/wfs?service=WFS&' +
	 *          'version=1.1.0&request=GetFeature&typename=osm:water_areas&' +
	 *          'outputFormat=application/json&srsname=' + proj + '&' +
	 *          'bbox=' + extent.join(',') + ',' + proj;
	 *      var xhr = new XMLHttpRequest();
	 *      xhr.open('GET', url);
	 *      var onError = function() {
	 *        vectorSource.removeLoadedExtent(extent);
	 *      }
	 *      xhr.onerror = onError;
	 *      xhr.onload = function() {
	 *        if (xhr.status == 200) {
	 *          vectorSource.addFeatures(
	 *              vectorSource.getFormat().readFeatures(xhr.responseText));
	 *        } else {
	 *          onError();
	 *        }
	 *      }
	 *      xhr.send();
	 *    },
	 *    strategy: bbox
	 *  });
	 * ```
	 * @property {boolean} [overlaps=true] This source may have overlapping geometries.
	 * Setting this to `false` (e.g. for sources with polygons that represent administrative
	 * boundaries or TopoJSON sources) allows the renderer to optimise fill and
	 * stroke operations.
	 * @property {LoadingStrategy} [strategy] The loading strategy to use.
	 * By default an {@link module:ol/loadingstrategy~all}
	 * strategy is used, a one-off strategy which loads all features at once.
	 * @property {string|import("../featureloader.js").FeatureUrlFunction} [url]
	 * Setting this option instructs the source to load features using an XHR loader
	 * (see {@link module:ol/featureloader~xhr}). Use a `string` and an
	 * {@link module:ol/loadingstrategy~all} for a one-off download of all features from
	 * the given URL. Use a {@link module:ol/featureloader~FeatureUrlFunction} to generate the url with
	 * other loading strategies.
	 * Requires `format` to be set as well.
	 * When default XHR feature loader is provided, the features will
	 * be transformed from the data projection to the view projection
	 * during parsing. If your remote data source does not advertise its projection
	 * properly, this transformation will be incorrect. For some formats, the
	 * default projection (usually EPSG:4326) can be overridden by setting the
	 * dataProjection constructor option on the format.
	 * Note that if a source contains non-feature data, such as a GeoJSON geometry
	 * or a KML NetworkLink, these will be ignored. Use a custom loader to load these.
	 * @property {boolean} [useSpatialIndex=true]
	 * By default, an RTree is used as spatial index. When features are removed and
	 * added frequently, and the total number of features is low, setting this to
	 * `false` may improve performance.
	 *
	 * Note that
	 * {@link module:ol/source/Vector~VectorSource#getFeaturesInExtent},
	 * {@link module:ol/source/Vector~VectorSource#getClosestFeatureToCoordinate} and
	 * {@link module:ol/source/Vector~VectorSource#getExtent} cannot be used when `useSpatialIndex` is
	 * set to `false`, and {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent} will loop
	 * through all features.
	 *
	 * When set to `false`, the features will be maintained in an
	 * {@link module:ol/Collection}, which can be retrieved through
	 * {@link module:ol/source/Vector~VectorSource#getFeaturesCollection}.
	 * @property {boolean} [wrapX=true] Wrap the world horizontally. For vector editing across the
	 * -180Â° and 180Â° meridians to work properly, this should be set to `false`. The
	 * resulting geometry coordinates will then exceed the world bounds.
	 */
	/**
	 * @classdesc
	 * Provides a source of features for vector layers. Vector features provided
	 * by this source are suitable for editing. See {@link module:ol/source/VectorTile~VectorTile} for
	 * vector data that is optimized for rendering.
	 *
	 * @fires VectorSourceEvent
	 * @api
	 * @template {import("../geom/Geometry.js").default} Geometry
	 */
	var VectorSource = /** @class */ (function (_super) {
	    __extends$E(VectorSource, _super);
	    /**
	     * @param {Options=} opt_options Vector source options.
	     */
	    function VectorSource(opt_options) {
	        var _this = this;
	        var options = opt_options || {};
	        _this = _super.call(this, {
	            attributions: options.attributions,
	            projection: undefined,
	            state: SourceState.READY,
	            wrapX: options.wrapX !== undefined ? options.wrapX : true
	        }) || this;
	        /**
	         * @private
	         * @type {import("../featureloader.js").FeatureLoader}
	         */
	        _this.loader_ = VOID;
	        /**
	         * @private
	         * @type {import("../format/Feature.js").default|undefined}
	         */
	        _this.format_ = options.format;
	        /**
	         * @private
	         * @type {boolean}
	         */
	        _this.overlaps_ = options.overlaps == undefined ? true : options.overlaps;
	        /**
	         * @private
	         * @type {string|import("../featureloader.js").FeatureUrlFunction|undefined}
	         */
	        _this.url_ = options.url;
	        if (options.loader !== undefined) {
	            _this.loader_ = options.loader;
	        }
	        else if (_this.url_ !== undefined) {
	            assert(_this.format_, 7); // `format` must be set when `url` is set
	            // create a XHR feature loader for "url" and "format"
	            _this.loader_ = xhr(_this.url_, /** @type {import("../format/Feature.js").default} */ (_this.format_));
	        }
	        /**
	         * @private
	         * @type {LoadingStrategy}
	         */
	        _this.strategy_ = options.strategy !== undefined ? options.strategy : all;
	        var useSpatialIndex = options.useSpatialIndex !== undefined ? options.useSpatialIndex : true;
	        /**
	         * @private
	         * @type {RBush<import("../Feature.js").default<Geometry>>}
	         */
	        _this.featuresRtree_ = useSpatialIndex ? new RBush() : null;
	        /**
	         * @private
	         * @type {RBush<{extent: import("../extent.js").Extent}>}
	         */
	        _this.loadedExtentsRtree_ = new RBush();
	        /**
	         * @private
	         * @type {!Object<string, import("../Feature.js").default<Geometry>>}
	         */
	        _this.nullGeometryFeatures_ = {};
	        /**
	         * A lookup of features by id (the return from feature.getId()).
	         * @private
	         * @type {!Object<string, import("../Feature.js").default<Geometry>>}
	         */
	        _this.idIndex_ = {};
	        /**
	         * A lookup of features by uid (using getUid(feature)).
	         * @private
	         * @type {!Object<string, import("../Feature.js").default<Geometry>>}
	         */
	        _this.uidIndex_ = {};
	        /**
	         * @private
	         * @type {Object<string, Array<import("../events.js").EventsKey>>}
	         */
	        _this.featureChangeKeys_ = {};
	        /**
	         * @private
	         * @type {Collection<import("../Feature.js").default<Geometry>>}
	         */
	        _this.featuresCollection_ = null;
	        var collection, features;
	        if (Array.isArray(options.features)) {
	            features = options.features;
	        }
	        else if (options.features) {
	            collection = options.features;
	            features = collection.getArray();
	        }
	        if (!useSpatialIndex && collection === undefined) {
	            collection = new Collection$2(features);
	        }
	        if (features !== undefined) {
	            _this.addFeaturesInternal(features);
	        }
	        if (collection !== undefined) {
	            _this.bindFeaturesCollection_(collection);
	        }
	        return _this;
	    }
	    /**
	     * Add a single feature to the source.  If you want to add a batch of features
	     * at once, call {@link module:ol/source/Vector~VectorSource#addFeatures #addFeatures()}
	     * instead. A feature will not be added to the source if feature with
	     * the same id is already there. The reason for this behavior is to avoid
	     * feature duplication when using bbox or tile loading strategies.
	     * Note: this also applies if an {@link module:ol/Collection} is used for features,
	     * meaning that if a feature with a duplicate id is added in the collection, it will
	     * be removed from it right away.
	     * @param {import("../Feature.js").default<Geometry>} feature Feature to add.
	     * @api
	     */
	    VectorSource.prototype.addFeature = function (feature) {
	        this.addFeatureInternal(feature);
	        this.changed();
	    };
	    /**
	     * Add a feature without firing a `change` event.
	     * @param {import("../Feature.js").default<Geometry>} feature Feature.
	     * @protected
	     */
	    VectorSource.prototype.addFeatureInternal = function (feature) {
	        var featureKey = getUid(feature);
	        if (!this.addToIndex_(featureKey, feature)) {
	            if (this.featuresCollection_) {
	                this.featuresCollection_.remove(feature);
	            }
	            return;
	        }
	        this.setupChangeEvents_(featureKey, feature);
	        var geometry = feature.getGeometry();
	        if (geometry) {
	            var extent = geometry.getExtent();
	            if (this.featuresRtree_) {
	                this.featuresRtree_.insert(extent, feature);
	            }
	        }
	        else {
	            this.nullGeometryFeatures_[featureKey] = feature;
	        }
	        this.dispatchEvent(new VectorSourceEvent(VectorEventType.ADDFEATURE, feature));
	    };
	    /**
	     * @param {string} featureKey Unique identifier for the feature.
	     * @param {import("../Feature.js").default<Geometry>} feature The feature.
	     * @private
	     */
	    VectorSource.prototype.setupChangeEvents_ = function (featureKey, feature) {
	        this.featureChangeKeys_[featureKey] = [
	            listen$1(feature, EventType.CHANGE, this.handleFeatureChange_, this),
	            listen$1(feature, ObjectEventType.PROPERTYCHANGE, this.handleFeatureChange_, this)
	        ];
	    };
	    /**
	     * @param {string} featureKey Unique identifier for the feature.
	     * @param {import("../Feature.js").default<Geometry>} feature The feature.
	     * @return {boolean} The feature is "valid", in the sense that it is also a
	     *     candidate for insertion into the Rtree.
	     * @private
	     */
	    VectorSource.prototype.addToIndex_ = function (featureKey, feature) {
	        var valid = true;
	        var id = feature.getId();
	        if (id !== undefined) {
	            if (!(id.toString() in this.idIndex_)) {
	                this.idIndex_[id.toString()] = feature;
	            }
	            else {
	                valid = false;
	            }
	        }
	        if (valid) {
	            assert(!(featureKey in this.uidIndex_), 30); // The passed `feature` was already added to the source
	            this.uidIndex_[featureKey] = feature;
	        }
	        return valid;
	    };
	    /**
	     * Add a batch of features to the source.
	     * @param {Array<import("../Feature.js").default<Geometry>>} features Features to add.
	     * @api
	     */
	    VectorSource.prototype.addFeatures = function (features) {
	        this.addFeaturesInternal(features);
	        this.changed();
	    };
	    /**
	     * Add features without firing a `change` event.
	     * @param {Array<import("../Feature.js").default<Geometry>>} features Features.
	     * @protected
	     */
	    VectorSource.prototype.addFeaturesInternal = function (features) {
	        var extents = [];
	        var newFeatures = [];
	        var geometryFeatures = [];
	        for (var i = 0, length_1 = features.length; i < length_1; i++) {
	            var feature = features[i];
	            var featureKey = getUid(feature);
	            if (this.addToIndex_(featureKey, feature)) {
	                newFeatures.push(feature);
	            }
	        }
	        for (var i = 0, length_2 = newFeatures.length; i < length_2; i++) {
	            var feature = newFeatures[i];
	            var featureKey = getUid(feature);
	            this.setupChangeEvents_(featureKey, feature);
	            var geometry = feature.getGeometry();
	            if (geometry) {
	                var extent = geometry.getExtent();
	                extents.push(extent);
	                geometryFeatures.push(feature);
	            }
	            else {
	                this.nullGeometryFeatures_[featureKey] = feature;
	            }
	        }
	        if (this.featuresRtree_) {
	            this.featuresRtree_.load(extents, geometryFeatures);
	        }
	        for (var i = 0, length_3 = newFeatures.length; i < length_3; i++) {
	            this.dispatchEvent(new VectorSourceEvent(VectorEventType.ADDFEATURE, newFeatures[i]));
	        }
	    };
	    /**
	     * @param {!Collection<import("../Feature.js").default<Geometry>>} collection Collection.
	     * @private
	     */
	    VectorSource.prototype.bindFeaturesCollection_ = function (collection) {
	        var modifyingCollection = false;
	        this.addEventListener(VectorEventType.ADDFEATURE, 
	        /**
	         * @param {VectorSourceEvent<Geometry>} evt The vector source event
	         */
	        function (evt) {
	            if (!modifyingCollection) {
	                modifyingCollection = true;
	                collection.push(evt.feature);
	                modifyingCollection = false;
	            }
	        });
	        this.addEventListener(VectorEventType.REMOVEFEATURE, 
	        /**
	         * @param {VectorSourceEvent<Geometry>} evt The vector source event
	         */
	        function (evt) {
	            if (!modifyingCollection) {
	                modifyingCollection = true;
	                collection.remove(evt.feature);
	                modifyingCollection = false;
	            }
	        });
	        collection.addEventListener(CollectionEventType.ADD, 
	        /**
	         * @param {import("../Collection.js").CollectionEvent} evt The collection event
	         */
	        function (evt) {
	            if (!modifyingCollection) {
	                modifyingCollection = true;
	                this.addFeature(/** @type {import("../Feature.js").default<Geometry>} */ (evt.element));
	                modifyingCollection = false;
	            }
	        }.bind(this));
	        collection.addEventListener(CollectionEventType.REMOVE, 
	        /**
	         * @param {import("../Collection.js").CollectionEvent} evt The collection event
	         */
	        function (evt) {
	            if (!modifyingCollection) {
	                modifyingCollection = true;
	                this.removeFeature(/** @type {import("../Feature.js").default<Geometry>} */ (evt.element));
	                modifyingCollection = false;
	            }
	        }.bind(this));
	        this.featuresCollection_ = collection;
	    };
	    /**
	     * Remove all features from the source.
	     * @param {boolean=} opt_fast Skip dispatching of {@link module:ol/source/Vector.VectorSourceEvent#removefeature} events.
	     * @api
	     */
	    VectorSource.prototype.clear = function (opt_fast) {
	        if (opt_fast) {
	            for (var featureId in this.featureChangeKeys_) {
	                var keys = this.featureChangeKeys_[featureId];
	                keys.forEach(unlistenByKey);
	            }
	            if (!this.featuresCollection_) {
	                this.featureChangeKeys_ = {};
	                this.idIndex_ = {};
	                this.uidIndex_ = {};
	            }
	        }
	        else {
	            if (this.featuresRtree_) {
	                this.featuresRtree_.forEach(this.removeFeatureInternal.bind(this));
	                for (var id in this.nullGeometryFeatures_) {
	                    this.removeFeatureInternal(this.nullGeometryFeatures_[id]);
	                }
	            }
	        }
	        if (this.featuresCollection_) {
	            this.featuresCollection_.clear();
	        }
	        if (this.featuresRtree_) {
	            this.featuresRtree_.clear();
	        }
	        this.nullGeometryFeatures_ = {};
	        var clearEvent = new VectorSourceEvent(VectorEventType.CLEAR);
	        this.dispatchEvent(clearEvent);
	        this.changed();
	    };
	    /**
	     * Iterate through all features on the source, calling the provided callback
	     * with each one.  If the callback returns any "truthy" value, iteration will
	     * stop and the function will return the same value.
	     * Note: this function only iterate through the feature that have a defined geometry.
	     *
	     * @param {function(import("../Feature.js").default<Geometry>): T} callback Called with each feature
	     *     on the source.  Return a truthy value to stop iteration.
	     * @return {T|undefined} The return value from the last call to the callback.
	     * @template T
	     * @api
	     */
	    VectorSource.prototype.forEachFeature = function (callback) {
	        if (this.featuresRtree_) {
	            return this.featuresRtree_.forEach(callback);
	        }
	        else if (this.featuresCollection_) {
	            this.featuresCollection_.forEach(callback);
	        }
	    };
	    /**
	     * Iterate through all features whose geometries contain the provided
	     * coordinate, calling the callback with each feature.  If the callback returns
	     * a "truthy" value, iteration will stop and the function will return the same
	     * value.
	     *
	     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
	     * @param {function(import("../Feature.js").default<Geometry>): T} callback Called with each feature
	     *     whose goemetry contains the provided coordinate.
	     * @return {T|undefined} The return value from the last call to the callback.
	     * @template T
	     */
	    VectorSource.prototype.forEachFeatureAtCoordinateDirect = function (coordinate, callback) {
	        var extent = [coordinate[0], coordinate[1], coordinate[0], coordinate[1]];
	        return this.forEachFeatureInExtent(extent, function (feature) {
	            var geometry = feature.getGeometry();
	            if (geometry.intersectsCoordinate(coordinate)) {
	                return callback(feature);
	            }
	            else {
	                return undefined;
	            }
	        });
	    };
	    /**
	     * Iterate through all features whose bounding box intersects the provided
	     * extent (note that the feature's geometry may not intersect the extent),
	     * calling the callback with each feature.  If the callback returns a "truthy"
	     * value, iteration will stop and the function will return the same value.
	     *
	     * If you are interested in features whose geometry intersects an extent, call
	     * the {@link module:ol/source/Vector~VectorSource#forEachFeatureIntersectingExtent #forEachFeatureIntersectingExtent()} method instead.
	     *
	     * When `useSpatialIndex` is set to false, this method will loop through all
	     * features, equivalent to {@link module:ol/source/Vector~VectorSource#forEachFeature #forEachFeature()}.
	     *
	     * @param {import("../extent.js").Extent} extent Extent.
	     * @param {function(import("../Feature.js").default<Geometry>): T} callback Called with each feature
	     *     whose bounding box intersects the provided extent.
	     * @return {T|undefined} The return value from the last call to the callback.
	     * @template T
	     * @api
	     */
	    VectorSource.prototype.forEachFeatureInExtent = function (extent, callback) {
	        if (this.featuresRtree_) {
	            return this.featuresRtree_.forEachInExtent(extent, callback);
	        }
	        else if (this.featuresCollection_) {
	            this.featuresCollection_.forEach(callback);
	        }
	    };
	    /**
	     * Iterate through all features whose geometry intersects the provided extent,
	     * calling the callback with each feature.  If the callback returns a "truthy"
	     * value, iteration will stop and the function will return the same value.
	     *
	     * If you only want to test for bounding box intersection, call the
	     * {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent #forEachFeatureInExtent()} method instead.
	     *
	     * @param {import("../extent.js").Extent} extent Extent.
	     * @param {function(import("../Feature.js").default<Geometry>): T} callback Called with each feature
	     *     whose geometry intersects the provided extent.
	     * @return {T|undefined} The return value from the last call to the callback.
	     * @template T
	     * @api
	     */
	    VectorSource.prototype.forEachFeatureIntersectingExtent = function (extent, callback) {
	        return this.forEachFeatureInExtent(extent, 
	        /**
	         * @param {import("../Feature.js").default<Geometry>} feature Feature.
	         * @return {T|undefined} The return value from the last call to the callback.
	         */
	        function (feature) {
	            var geometry = feature.getGeometry();
	            if (geometry.intersectsExtent(extent)) {
	                var result = callback(feature);
	                if (result) {
	                    return result;
	                }
	            }
	        });
	    };
	    /**
	     * Get the features collection associated with this source. Will be `null`
	     * unless the source was configured with `useSpatialIndex` set to `false`, or
	     * with an {@link module:ol/Collection} as `features`.
	     * @return {Collection<import("../Feature.js").default<Geometry>>} The collection of features.
	     * @api
	     */
	    VectorSource.prototype.getFeaturesCollection = function () {
	        return this.featuresCollection_;
	    };
	    /**
	     * Get all features on the source in random order.
	     * @return {Array<import("../Feature.js").default<Geometry>>} Features.
	     * @api
	     */
	    VectorSource.prototype.getFeatures = function () {
	        var features;
	        if (this.featuresCollection_) {
	            features = this.featuresCollection_.getArray();
	        }
	        else if (this.featuresRtree_) {
	            features = this.featuresRtree_.getAll();
	            if (!isEmpty$1(this.nullGeometryFeatures_)) {
	                extend$1(features, getValues(this.nullGeometryFeatures_));
	            }
	        }
	        return (
	        /** @type {Array<import("../Feature.js").default<Geometry>>} */ (features));
	    };
	    /**
	     * Get all features whose geometry intersects the provided coordinate.
	     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
	     * @return {Array<import("../Feature.js").default<Geometry>>} Features.
	     * @api
	     */
	    VectorSource.prototype.getFeaturesAtCoordinate = function (coordinate) {
	        var features = [];
	        this.forEachFeatureAtCoordinateDirect(coordinate, function (feature) {
	            features.push(feature);
	        });
	        return features;
	    };
	    /**
	     * Get all features whose bounding box intersects the provided extent.  Note that this returns an array of
	     * all features intersecting the given extent in random order (so it may include
	     * features whose geometries do not intersect the extent).
	     *
	     * When `useSpatialIndex` is set to false, this method will return all
	     * features.
	     *
	     * @param {import("../extent.js").Extent} extent Extent.
	     * @return {Array<import("../Feature.js").default<Geometry>>} Features.
	     * @api
	     */
	    VectorSource.prototype.getFeaturesInExtent = function (extent) {
	        if (this.featuresRtree_) {
	            return this.featuresRtree_.getInExtent(extent);
	        }
	        else if (this.featuresCollection_) {
	            return this.featuresCollection_.getArray();
	        }
	        else {
	            return [];
	        }
	    };
	    /**
	     * Get the closest feature to the provided coordinate.
	     *
	     * This method is not available when the source is configured with
	     * `useSpatialIndex` set to `false`.
	     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
	     * @param {function(import("../Feature.js").default<Geometry>):boolean=} opt_filter Feature filter function.
	     *     The filter function will receive one argument, the {@link module:ol/Feature feature}
	     *     and it should return a boolean value. By default, no filtering is made.
	     * @return {import("../Feature.js").default<Geometry>} Closest feature.
	     * @api
	     */
	    VectorSource.prototype.getClosestFeatureToCoordinate = function (coordinate, opt_filter) {
	        // Find the closest feature using branch and bound.  We start searching an
	        // infinite extent, and find the distance from the first feature found.  This
	        // becomes the closest feature.  We then compute a smaller extent which any
	        // closer feature must intersect.  We continue searching with this smaller
	        // extent, trying to find a closer feature.  Every time we find a closer
	        // feature, we update the extent being searched so that any even closer
	        // feature must intersect it.  We continue until we run out of features.
	        var x = coordinate[0];
	        var y = coordinate[1];
	        var closestFeature = null;
	        var closestPoint = [NaN, NaN];
	        var minSquaredDistance = Infinity;
	        var extent = [-Infinity, -Infinity, Infinity, Infinity];
	        var filter = opt_filter ? opt_filter : TRUE;
	        this.featuresRtree_.forEachInExtent(extent, 
	        /**
	         * @param {import("../Feature.js").default<Geometry>} feature Feature.
	         */
	        function (feature) {
	            if (filter(feature)) {
	                var geometry = feature.getGeometry();
	                var previousMinSquaredDistance = minSquaredDistance;
	                minSquaredDistance = geometry.closestPointXY(x, y, closestPoint, minSquaredDistance);
	                if (minSquaredDistance < previousMinSquaredDistance) {
	                    closestFeature = feature;
	                    // This is sneaky.  Reduce the extent that it is currently being
	                    // searched while the R-Tree traversal using this same extent object
	                    // is still in progress.  This is safe because the new extent is
	                    // strictly contained by the old extent.
	                    var minDistance = Math.sqrt(minSquaredDistance);
	                    extent[0] = x - minDistance;
	                    extent[1] = y - minDistance;
	                    extent[2] = x + minDistance;
	                    extent[3] = y + minDistance;
	                }
	            }
	        });
	        return closestFeature;
	    };
	    /**
	     * Get the extent of the features currently in the source.
	     *
	     * This method is not available when the source is configured with
	     * `useSpatialIndex` set to `false`.
	     * @param {import("../extent.js").Extent=} opt_extent Destination extent. If provided, no new extent
	     *     will be created. Instead, that extent's coordinates will be overwritten.
	     * @return {import("../extent.js").Extent} Extent.
	     * @api
	     */
	    VectorSource.prototype.getExtent = function (opt_extent) {
	        return this.featuresRtree_.getExtent(opt_extent);
	    };
	    /**
	     * Get a feature by its identifier (the value returned by feature.getId()).
	     * Note that the index treats string and numeric identifiers as the same.  So
	     * `source.getFeatureById(2)` will return a feature with id `'2'` or `2`.
	     *
	     * @param {string|number} id Feature identifier.
	     * @return {import("../Feature.js").default<Geometry>} The feature (or `null` if not found).
	     * @api
	     */
	    VectorSource.prototype.getFeatureById = function (id) {
	        var feature = this.idIndex_[id.toString()];
	        return feature !== undefined ? feature : null;
	    };
	    /**
	     * Get a feature by its internal unique identifier (using `getUid`).
	     *
	     * @param {string} uid Feature identifier.
	     * @return {import("../Feature.js").default<Geometry>} The feature (or `null` if not found).
	     */
	    VectorSource.prototype.getFeatureByUid = function (uid) {
	        var feature = this.uidIndex_[uid];
	        return feature !== undefined ? feature : null;
	    };
	    /**
	     * Get the format associated with this source.
	     *
	     * @return {import("../format/Feature.js").default|undefined} The feature format.
	     * @api
	     */
	    VectorSource.prototype.getFormat = function () {
	        return this.format_;
	    };
	    /**
	     * @return {boolean} The source can have overlapping geometries.
	     */
	    VectorSource.prototype.getOverlaps = function () {
	        return this.overlaps_;
	    };
	    /**
	     * Get the url associated with this source.
	     *
	     * @return {string|import("../featureloader.js").FeatureUrlFunction|undefined} The url.
	     * @api
	     */
	    VectorSource.prototype.getUrl = function () {
	        return this.url_;
	    };
	    /**
	     * @param {Event} event Event.
	     * @private
	     */
	    VectorSource.prototype.handleFeatureChange_ = function (event) {
	        var feature = /** @type {import("../Feature.js").default<Geometry>} */ (event.target);
	        var featureKey = getUid(feature);
	        var geometry = feature.getGeometry();
	        if (!geometry) {
	            if (!(featureKey in this.nullGeometryFeatures_)) {
	                if (this.featuresRtree_) {
	                    this.featuresRtree_.remove(feature);
	                }
	                this.nullGeometryFeatures_[featureKey] = feature;
	            }
	        }
	        else {
	            var extent = geometry.getExtent();
	            if (featureKey in this.nullGeometryFeatures_) {
	                delete this.nullGeometryFeatures_[featureKey];
	                if (this.featuresRtree_) {
	                    this.featuresRtree_.insert(extent, feature);
	                }
	            }
	            else {
	                if (this.featuresRtree_) {
	                    this.featuresRtree_.update(extent, feature);
	                }
	            }
	        }
	        var id = feature.getId();
	        if (id !== undefined) {
	            var sid = id.toString();
	            if (this.idIndex_[sid] !== feature) {
	                this.removeFromIdIndex_(feature);
	                this.idIndex_[sid] = feature;
	            }
	        }
	        else {
	            this.removeFromIdIndex_(feature);
	            this.uidIndex_[featureKey] = feature;
	        }
	        this.changed();
	        this.dispatchEvent(new VectorSourceEvent(VectorEventType.CHANGEFEATURE, feature));
	    };
	    /**
	     * Returns true if the feature is contained within the source.
	     * @param {import("../Feature.js").default<Geometry>} feature Feature.
	     * @return {boolean} Has feature.
	     * @api
	     */
	    VectorSource.prototype.hasFeature = function (feature) {
	        var id = feature.getId();
	        if (id !== undefined) {
	            return id in this.idIndex_;
	        }
	        else {
	            return getUid(feature) in this.uidIndex_;
	        }
	    };
	    /**
	     * @return {boolean} Is empty.
	     */
	    VectorSource.prototype.isEmpty = function () {
	        return this.featuresRtree_.isEmpty() && isEmpty$1(this.nullGeometryFeatures_);
	    };
	    /**
	     * @param {import("../extent.js").Extent} extent Extent.
	     * @param {number} resolution Resolution.
	     * @param {import("../proj/Projection.js").default} projection Projection.
	     */
	    VectorSource.prototype.loadFeatures = function (extent, resolution, projection) {
	        var loadedExtentsRtree = this.loadedExtentsRtree_;
	        var extentsToLoad = this.strategy_(extent, resolution);
	        this.loading = false;
	        var _loop_1 = function (i, ii) {
	            var extentToLoad = extentsToLoad[i];
	            var alreadyLoaded = loadedExtentsRtree.forEachInExtent(extentToLoad, 
	            /**
	             * @param {{extent: import("../extent.js").Extent}} object Object.
	             * @return {boolean} Contains.
	             */
	            function (object) {
	                return containsExtent(object.extent, extentToLoad);
	            });
	            if (!alreadyLoaded) {
	                this_1.loader_.call(this_1, extentToLoad, resolution, projection);
	                loadedExtentsRtree.insert(extentToLoad, { extent: extentToLoad.slice() });
	                this_1.loading = this_1.loader_ !== VOID;
	            }
	        };
	        var this_1 = this;
	        for (var i = 0, ii = extentsToLoad.length; i < ii; ++i) {
	            _loop_1(i);
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    VectorSource.prototype.refresh = function () {
	        this.clear(true);
	        this.loadedExtentsRtree_.clear();
	        _super.prototype.refresh.call(this);
	    };
	    /**
	     * Remove an extent from the list of loaded extents.
	     * @param {import("../extent.js").Extent} extent Extent.
	     * @api
	     */
	    VectorSource.prototype.removeLoadedExtent = function (extent) {
	        var loadedExtentsRtree = this.loadedExtentsRtree_;
	        var obj;
	        loadedExtentsRtree.forEachInExtent(extent, function (object) {
	            if (equals(object.extent, extent)) {
	                obj = object;
	                return true;
	            }
	        });
	        if (obj) {
	            loadedExtentsRtree.remove(obj);
	        }
	    };
	    /**
	     * Remove a single feature from the source.  If you want to remove all features
	     * at once, use the {@link module:ol/source/Vector~VectorSource#clear #clear()} method
	     * instead.
	     * @param {import("../Feature.js").default<Geometry>} feature Feature to remove.
	     * @api
	     */
	    VectorSource.prototype.removeFeature = function (feature) {
	        var featureKey = getUid(feature);
	        if (featureKey in this.nullGeometryFeatures_) {
	            delete this.nullGeometryFeatures_[featureKey];
	        }
	        else {
	            if (this.featuresRtree_) {
	                this.featuresRtree_.remove(feature);
	            }
	        }
	        this.removeFeatureInternal(feature);
	        this.changed();
	    };
	    /**
	     * Remove feature without firing a `change` event.
	     * @param {import("../Feature.js").default<Geometry>} feature Feature.
	     * @protected
	     */
	    VectorSource.prototype.removeFeatureInternal = function (feature) {
	        var featureKey = getUid(feature);
	        this.featureChangeKeys_[featureKey].forEach(unlistenByKey);
	        delete this.featureChangeKeys_[featureKey];
	        var id = feature.getId();
	        if (id !== undefined) {
	            delete this.idIndex_[id.toString()];
	        }
	        delete this.uidIndex_[featureKey];
	        this.dispatchEvent(new VectorSourceEvent(VectorEventType.REMOVEFEATURE, feature));
	    };
	    /**
	     * Remove a feature from the id index.  Called internally when the feature id
	     * may have changed.
	     * @param {import("../Feature.js").default<Geometry>} feature The feature.
	     * @return {boolean} Removed the feature from the index.
	     * @private
	     */
	    VectorSource.prototype.removeFromIdIndex_ = function (feature) {
	        var removed = false;
	        for (var id in this.idIndex_) {
	            if (this.idIndex_[id] === feature) {
	                delete this.idIndex_[id];
	                removed = true;
	                break;
	            }
	        }
	        return removed;
	    };
	    /**
	     * Set the new loader of the source. The next render cycle will use the
	     * new loader.
	     * @param {import("../featureloader.js").FeatureLoader} loader The loader to set.
	     * @api
	     */
	    VectorSource.prototype.setLoader = function (loader) {
	        this.loader_ = loader;
	    };
	    /**
	     * Points the source to a new url. The next render cycle will use the new url.
	     * @param {string|import("../featureloader.js").FeatureUrlFunction} url Url.
	     * @api
	     */
	    VectorSource.prototype.setUrl = function (url) {
	        assert(this.format_, 7); // `format` must be set when `url` is set
	        this.setLoader(xhr(url, this.format_));
	    };
	    return VectorSource;
	}(Source));

	/**
	 * @module ol/TileState
	 */
	/**
	 * @enum {number}
	 */
	var TileState = {
	    IDLE: 0,
	    LOADING: 1,
	    LOADED: 2,
	    /**
	     * Indicates that tile loading failed
	     * @type {number}
	     */
	    ERROR: 3,
	    EMPTY: 4,
	    ABORT: 5
	};

	/**
	 * @module ol/easing
	 */
	/**
	 * Start slow and speed up.
	 * @param {number} t Input between 0 and 1.
	 * @return {number} Output between 0 and 1.
	 * @api
	 */
	function easeIn(t) {
	    return Math.pow(t, 3);
	}
	/**
	 * Start fast and slow down.
	 * @param {number} t Input between 0 and 1.
	 * @return {number} Output between 0 and 1.
	 * @api
	 */
	function easeOut(t) {
	    return 1 - easeIn(1 - t);
	}
	/**
	 * Start slow, speed up, and then slow down again.
	 * @param {number} t Input between 0 and 1.
	 * @return {number} Output between 0 and 1.
	 * @api
	 */
	function inAndOut(t) {
	    return 3 * t * t - 2 * t * t * t;
	}
	/**
	 * Maintain a constant speed over time.
	 * @param {number} t Input between 0 and 1.
	 * @return {number} Output between 0 and 1.
	 * @api
	 */
	function linear(t) {
	    return t;
	}

	var __extends$F = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * A function that takes an {@link module:ol/Tile} for the tile and a
	 * `{string}` for the url as arguments. The default is
	 * ```js
	 * source.setTileLoadFunction(function(tile, src) {
	 *   tile.getImage().src = src;
	 * });
	 * ```
	 * For more fine grained control, the load function can use fetch or XMLHttpRequest and involve
	 * error handling:
	 *
	 * ```js
	 * import TileState from 'ol/TileState';
	 *
	 * source.setTileLoadFunction(function(tile, src) {
	 *   var xhr = new XMLHttpRequest();
	 *   xhr.responseType = 'blob';
	 *   xhr.addEventListener('loadend', function (evt) {
	 *     var data = this.response;
	 *     if (data !== undefined) {
	 *       tile.getImage().src = URL.createObjectURL(data);
	 *     } else {
	 *       tile.setState(TileState.ERROR);
	 *     }
	 *   });
	 *   xhr.addEventListener('error', function () {
	 *     tile.setState(TileState.ERROR);
	 *   });
	 *   xhr.open('GET', src);
	 *   xhr.send();
	 * });
	 * ```
	 *
	 * @typedef {function(Tile, string): void} LoadFunction
	 * @api
	 */
	/**
	 * {@link module:ol/source/Tile~Tile} sources use a function of this type to get
	 * the url that provides a tile for a given tile coordinate.
	 *
	 * This function takes an {@link module:ol/tilecoord~TileCoord} for the tile
	 * coordinate, a `{number}` representing the pixel ratio and a
	 * {@link module:ol/proj/Projection} for the projection  as arguments
	 * and returns a `{string}` representing the tile URL, or undefined if no tile
	 * should be requested for the passed tile coordinate.
	 *
	 * @typedef {function(import("./tilecoord.js").TileCoord, number,
	 *           import("./proj/Projection.js").default): (string|undefined)} UrlFunction
	 * @api
	 */
	/**
	 * @typedef {Object} Options
	 * @property {number} [transition=250] A duration for tile opacity
	 * transitions in milliseconds. A duration of 0 disables the opacity transition.
	 * @api
	 */
	/**
	 * @classdesc
	 * Base class for tiles.
	 *
	 * @abstract
	 */
	var Tile = /** @class */ (function (_super) {
	    __extends$F(Tile, _super);
	    /**
	     * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
	     * @param {TileState} state State.
	     * @param {Options=} opt_options Tile options.
	     */
	    function Tile(tileCoord, state, opt_options) {
	        var _this = _super.call(this) || this;
	        var options = opt_options ? opt_options : {};
	        /**
	         * @type {import("./tilecoord.js").TileCoord}
	         */
	        _this.tileCoord = tileCoord;
	        /**
	         * @protected
	         * @type {TileState}
	         */
	        _this.state = state;
	        /**
	         * An "interim" tile for this tile. The interim tile may be used while this
	         * one is loading, for "smooth" transitions when changing params/dimensions
	         * on the source.
	         * @type {Tile}
	         */
	        _this.interimTile = null;
	        /**
	         * The tile is available at the highest possible resolution. Subclasses can
	         * set this to `false` initially. Tile load listeners will not be
	         * unregistered before this is set to `true` and a `#changed()` is called.
	         * @type {boolean}
	         */
	        _this.hifi = true;
	        /**
	         * A key assigned to the tile. This is used by the tile source to determine
	         * if this tile can effectively be used, or if a new tile should be created
	         * and this one be used as an interim tile for this new tile.
	         * @type {string}
	         */
	        _this.key = '';
	        /**
	         * The duration for the opacity transition.
	         * @type {number}
	         */
	        _this.transition_ = options.transition === undefined ? 250 : options.transition;
	        /**
	         * Lookup of start times for rendering transitions.  If the start time is
	         * equal to -1, the transition is complete.
	         * @type {Object<string, number>}
	         */
	        _this.transitionStarts_ = {};
	        return _this;
	    }
	    /**
	     * @protected
	     */
	    Tile.prototype.changed = function () {
	        this.dispatchEvent(EventType.CHANGE);
	    };
	    /**
	     * @inheritDoc
	     */
	    Tile.prototype.disposeInternal = function () {
	        this.setState(TileState.ABORT);
	    };
	    /**
	     * @return {string} Key.
	     */
	    Tile.prototype.getKey = function () {
	        return this.key + '/' + this.tileCoord;
	    };
	    /**
	     * Get the interim tile most suitable for rendering using the chain of interim
	     * tiles. This corresponds to the  most recent tile that has been loaded, if no
	     * such tile exists, the original tile is returned.
	     * @return {!Tile} Best tile for rendering.
	     */
	    Tile.prototype.getInterimTile = function () {
	        if (!this.interimTile) {
	            //empty chain
	            return this;
	        }
	        var tile = this.interimTile;
	        // find the first loaded tile and return it. Since the chain is sorted in
	        // decreasing order of creation time, there is no need to search the remainder
	        // of the list (all those tiles correspond to older requests and will be
	        // cleaned up by refreshInterimChain)
	        do {
	            if (tile.getState() == TileState.LOADED) {
	                // Show tile immediately instead of fading it in after loading, because
	                // the interim tile is in place already
	                this.transition_ = 0;
	                return tile;
	            }
	            tile = tile.interimTile;
	        } while (tile);
	        // we can not find a better tile
	        return this;
	    };
	    /**
	     * Goes through the chain of interim tiles and discards sections of the chain
	     * that are no longer relevant.
	     */
	    Tile.prototype.refreshInterimChain = function () {
	        if (!this.interimTile) {
	            return;
	        }
	        var tile = this.interimTile;
	        var prev = /** @type {Tile} */ (this);
	        do {
	            if (tile.getState() == TileState.LOADED) {
	                //we have a loaded tile, we can discard the rest of the list
	                //we would could abort any LOADING tile request
	                //older than this tile (i.e. any LOADING tile following this entry in the chain)
	                tile.interimTile = null;
	                break;
	            }
	            else if (tile.getState() == TileState.LOADING) {
	                //keep this LOADING tile any loaded tiles later in the chain are
	                //older than this tile, so we're still interested in the request
	                prev = tile;
	            }
	            else if (tile.getState() == TileState.IDLE) {
	                //the head of the list is the most current tile, we don't need
	                //to start any other requests for this chain
	                prev.interimTile = tile.interimTile;
	            }
	            else {
	                prev = tile;
	            }
	            tile = prev.interimTile;
	        } while (tile);
	    };
	    /**
	     * Get the tile coordinate for this tile.
	     * @return {import("./tilecoord.js").TileCoord} The tile coordinate.
	     * @api
	     */
	    Tile.prototype.getTileCoord = function () {
	        return this.tileCoord;
	    };
	    /**
	     * @return {TileState} State.
	     */
	    Tile.prototype.getState = function () {
	        return this.state;
	    };
	    /**
	     * Sets the state of this tile. If you write your own {@link module:ol/Tile~LoadFunction tileLoadFunction} ,
	     * it is important to set the state correctly to {@link module:ol/TileState~ERROR}
	     * when the tile cannot be loaded. Otherwise the tile cannot be removed from
	     * the tile queue and will block other requests.
	     * @param {TileState} state State.
	     * @api
	     */
	    Tile.prototype.setState = function (state) {
	        if (this.state !== TileState.ERROR && this.state > state) {
	            throw new Error('Tile load sequence violation');
	        }
	        this.state = state;
	        this.changed();
	    };
	    /**
	     * Load the image or retry if loading previously failed.
	     * Loading is taken care of by the tile queue, and calling this method is
	     * only needed for preloading or for reloading in case of an error.
	     * @abstract
	     * @api
	     */
	    Tile.prototype.load = function () {
	        abstract();
	    };
	    /**
	     * Get the alpha value for rendering.
	     * @param {string} id An id for the renderer.
	     * @param {number} time The render frame time.
	     * @return {number} A number between 0 and 1.
	     */
	    Tile.prototype.getAlpha = function (id, time) {
	        if (!this.transition_) {
	            return 1;
	        }
	        var start = this.transitionStarts_[id];
	        if (!start) {
	            start = time;
	            this.transitionStarts_[id] = start;
	        }
	        else if (start === -1) {
	            return 1;
	        }
	        var delta = time - start + (1000 / 60); // avoid rendering at 0
	        if (delta >= this.transition_) {
	            return 1;
	        }
	        return easeIn(delta / this.transition_);
	    };
	    /**
	     * Determine if a tile is in an alpha transition.  A tile is considered in
	     * transition if tile.getAlpha() has not yet been called or has been called
	     * and returned 1.
	     * @param {string} id An id for the renderer.
	     * @return {boolean} The tile is in transition.
	     */
	    Tile.prototype.inTransition = function (id) {
	        if (!this.transition_) {
	            return false;
	        }
	        return this.transitionStarts_[id] !== -1;
	    };
	    /**
	     * Mark a transition as complete.
	     * @param {string} id An id for the renderer.
	     */
	    Tile.prototype.endTransition = function (id) {
	        if (this.transition_) {
	            this.transitionStarts_[id] = -1;
	        }
	    };
	    return Tile;
	}(Target));

	var __extends$G = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var ImageTile = /** @class */ (function (_super) {
	    __extends$G(ImageTile, _super);
	    /**
	     * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
	     * @param {TileState} state State.
	     * @param {string} src Image source URI.
	     * @param {?string} crossOrigin Cross origin.
	     * @param {import("./Tile.js").LoadFunction} tileLoadFunction Tile load function.
	     * @param {import("./Tile.js").Options=} opt_options Tile options.
	     */
	    function ImageTile(tileCoord, state, src, crossOrigin, tileLoadFunction, opt_options) {
	        var _this = _super.call(this, tileCoord, state, opt_options) || this;
	        /**
	         * @private
	         * @type {?string}
	         */
	        _this.crossOrigin_ = crossOrigin;
	        /**
	         * Image URI
	         *
	         * @private
	         * @type {string}
	         */
	        _this.src_ = src;
	        /**
	         * @private
	         * @type {HTMLImageElement|HTMLCanvasElement}
	         */
	        _this.image_ = new Image();
	        if (crossOrigin !== null) {
	            _this.image_.crossOrigin = crossOrigin;
	        }
	        /**
	         * @private
	         * @type {?function():void}
	         */
	        _this.unlisten_ = null;
	        /**
	         * @private
	         * @type {import("./Tile.js").LoadFunction}
	         */
	        _this.tileLoadFunction_ = tileLoadFunction;
	        return _this;
	    }
	    /**
	     * @inheritDoc
	     */
	    ImageTile.prototype.disposeInternal = function () {
	        if (this.state == TileState.LOADING) {
	            this.unlistenImage_();
	            this.image_ = getBlankImage();
	        }
	        if (this.interimTile) {
	            this.interimTile.dispose();
	        }
	        _super.prototype.disposeInternal.call(this);
	    };
	    /**
	     * Get the HTML image element for this tile (may be a Canvas, Image, or Video).
	     * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
	     * @api
	     */
	    ImageTile.prototype.getImage = function () {
	        return this.image_;
	    };
	    /**
	     * @inheritDoc
	     */
	    ImageTile.prototype.getKey = function () {
	        return this.src_;
	    };
	    /**
	     * Tracks loading or read errors.
	     *
	     * @private
	     */
	    ImageTile.prototype.handleImageError_ = function () {
	        this.state = TileState.ERROR;
	        this.unlistenImage_();
	        this.image_ = getBlankImage();
	        this.changed();
	    };
	    /**
	     * Tracks successful image load.
	     *
	     * @private
	     */
	    ImageTile.prototype.handleImageLoad_ = function () {
	        var image = /** @type {HTMLImageElement} */ (this.image_);
	        if (image.naturalWidth && image.naturalHeight) {
	            this.state = TileState.LOADED;
	        }
	        else {
	            this.state = TileState.EMPTY;
	        }
	        this.unlistenImage_();
	        this.changed();
	    };
	    /**
	     * @inheritDoc
	     * @api
	     */
	    ImageTile.prototype.load = function () {
	        if (this.state == TileState.ERROR) {
	            this.state = TileState.IDLE;
	            this.image_ = new Image();
	            if (this.crossOrigin_ !== null) {
	                this.image_.crossOrigin = this.crossOrigin_;
	            }
	        }
	        if (this.state == TileState.IDLE) {
	            this.state = TileState.LOADING;
	            this.changed();
	            this.tileLoadFunction_(this, this.src_);
	            this.unlisten_ = listenImage(this.image_, this.handleImageLoad_.bind(this), this.handleImageError_.bind(this));
	        }
	    };
	    /**
	     * Discards event handlers which listen for load completion or errors.
	     *
	     * @private
	     */
	    ImageTile.prototype.unlistenImage_ = function () {
	        if (this.unlisten_) {
	            this.unlisten_();
	            this.unlisten_ = null;
	        }
	    };
	    return ImageTile;
	}(Tile));
	/**
	 * Get a 1-pixel blank image.
	 * @return {HTMLCanvasElement} Blank image.
	 */
	function getBlankImage() {
	    var ctx = createCanvasContext2D(1, 1);
	    ctx.fillStyle = 'rgba(0,0,0,0)';
	    ctx.fillRect(0, 0, 1, 1);
	    return ctx.canvas;
	}

	/**
	 * @module ol/Kinetic
	 */
	/**
	 * @classdesc
	 * Implementation of inertial deceleration for map movement.
	 *
	 * @api
	 */
	var Kinetic = /** @class */ (function () {
	    /**
	     * @param {number} decay Rate of decay (must be negative).
	     * @param {number} minVelocity Minimum velocity (pixels/millisecond).
	     * @param {number} delay Delay to consider to calculate the kinetic
	     *     initial values (milliseconds).
	     */
	    function Kinetic(decay, minVelocity, delay) {
	        /**
	         * @private
	         * @type {number}
	         */
	        this.decay_ = decay;
	        /**
	         * @private
	         * @type {number}
	         */
	        this.minVelocity_ = minVelocity;
	        /**
	         * @private
	         * @type {number}
	         */
	        this.delay_ = delay;
	        /**
	         * @private
	         * @type {Array<number>}
	         */
	        this.points_ = [];
	        /**
	         * @private
	         * @type {number}
	         */
	        this.angle_ = 0;
	        /**
	         * @private
	         * @type {number}
	         */
	        this.initialVelocity_ = 0;
	    }
	    /**
	     * FIXME empty description for jsdoc
	     */
	    Kinetic.prototype.begin = function () {
	        this.points_.length = 0;
	        this.angle_ = 0;
	        this.initialVelocity_ = 0;
	    };
	    /**
	     * @param {number} x X.
	     * @param {number} y Y.
	     */
	    Kinetic.prototype.update = function (x, y) {
	        this.points_.push(x, y, Date.now());
	    };
	    /**
	     * @return {boolean} Whether we should do kinetic animation.
	     */
	    Kinetic.prototype.end = function () {
	        if (this.points_.length < 6) {
	            // at least 2 points are required (i.e. there must be at least 6 elements
	            // in the array)
	            return false;
	        }
	        var delay = Date.now() - this.delay_;
	        var lastIndex = this.points_.length - 3;
	        if (this.points_[lastIndex + 2] < delay) {
	            // the last tracked point is too old, which means that the user stopped
	            // panning before releasing the map
	            return false;
	        }
	        // get the first point which still falls into the delay time
	        var firstIndex = lastIndex - 3;
	        while (firstIndex > 0 && this.points_[firstIndex + 2] > delay) {
	            firstIndex -= 3;
	        }
	        var duration = this.points_[lastIndex + 2] - this.points_[firstIndex + 2];
	        // we don't want a duration of 0 (divide by zero)
	        // we also make sure the user panned for a duration of at least one frame
	        // (1/60s) to compute sane displacement values
	        if (duration < 1000 / 60) {
	            return false;
	        }
	        var dx = this.points_[lastIndex] - this.points_[firstIndex];
	        var dy = this.points_[lastIndex + 1] - this.points_[firstIndex + 1];
	        this.angle_ = Math.atan2(dy, dx);
	        this.initialVelocity_ = Math.sqrt(dx * dx + dy * dy) / duration;
	        return this.initialVelocity_ > this.minVelocity_;
	    };
	    /**
	     * @return {number} Total distance travelled (pixels).
	     */
	    Kinetic.prototype.getDistance = function () {
	        return (this.minVelocity_ - this.initialVelocity_) / this.decay_;
	    };
	    /**
	     * @return {number} Angle of the kinetic panning animation (radians).
	     */
	    Kinetic.prototype.getAngle = function () {
	        return this.angle_;
	    };
	    return Kinetic;
	}());

	var __extends$H = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @classdesc
	 * Events emitted as map events are instances of this type.
	 * See {@link module:ol/PluggableMap~PluggableMap} for which events trigger a map event.
	 */
	var MapEvent = /** @class */ (function (_super) {
	    __extends$H(MapEvent, _super);
	    /**
	     * @param {string} type Event type.
	     * @param {import("./PluggableMap.js").default} map Map.
	     * @param {?import("./PluggableMap.js").FrameState=} opt_frameState Frame state.
	     */
	    function MapEvent(type, map, opt_frameState) {
	        var _this = _super.call(this, type) || this;
	        /**
	         * The map where the event occurred.
	         * @type {import("./PluggableMap.js").default}
	         * @api
	         */
	        _this.map = map;
	        /**
	         * The frame state at the time of the event.
	         * @type {?import("./PluggableMap.js").FrameState}
	         * @api
	         */
	        _this.frameState = opt_frameState !== undefined ? opt_frameState : null;
	        return _this;
	    }
	    return MapEvent;
	}(BaseEvent));

	var __extends$I = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @classdesc
	 * Events emitted as map browser events are instances of this type.
	 * See {@link module:ol/PluggableMap~PluggableMap} for which events trigger a map browser event.
	 */
	var MapBrowserEvent = /** @class */ (function (_super) {
	    __extends$I(MapBrowserEvent, _super);
	    /**
	     * @param {string} type Event type.
	     * @param {import("./PluggableMap.js").default} map Map.
	     * @param {Event} browserEvent Browser event.
	     * @param {boolean=} opt_dragging Is the map currently being dragged?
	     * @param {?import("./PluggableMap.js").FrameState=} opt_frameState Frame state.
	     */
	    function MapBrowserEvent(type, map, browserEvent, opt_dragging, opt_frameState) {
	        var _this = _super.call(this, type, map, opt_frameState) || this;
	        /**
	         * The original browser event.
	         * @const
	         * @type {Event}
	         * @api
	         */
	        _this.originalEvent = browserEvent;
	        /**
	         * The map pixel relative to the viewport corresponding to the original browser event.
	         * @type {?import("./pixel.js").Pixel}
	         */
	        _this.pixel_ = null;
	        /**
	         * The coordinate in the user projection corresponding to the original browser event.
	         * @type {?import("./coordinate.js").Coordinate}
	         */
	        _this.coordinate_ = null;
	        /**
	         * Indicates if the map is currently being dragged. Only set for
	         * `POINTERDRAG` and `POINTERMOVE` events. Default is `false`.
	         *
	         * @type {boolean}
	         * @api
	         */
	        _this.dragging = opt_dragging !== undefined ? opt_dragging : false;
	        return _this;
	    }
	    Object.defineProperty(MapBrowserEvent.prototype, "pixel", {
	        /**
	         * The map pixel relative to the viewport corresponding to the original browser event.
	         * @type {import("./pixel.js").Pixel}
	         * @api
	         */
	        get: function () {
	            if (!this.pixel_) {
	                this.pixel_ = this.map.getEventPixel(this.originalEvent);
	            }
	            return this.pixel_;
	        },
	        set: function (pixel) {
	            this.pixel_ = pixel;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(MapBrowserEvent.prototype, "coordinate", {
	        /**
	         * The coordinate corresponding to the original browser event.  This will be in the user
	         * projection if one is set.  Otherwise it will be in the view projection.
	         * @type {import("./coordinate.js").Coordinate}
	         * @api
	         */
	        get: function () {
	            if (!this.coordinate_) {
	                this.coordinate_ = this.map.getCoordinateFromPixel(this.pixel);
	            }
	            return this.coordinate_;
	        },
	        set: function (coordinate) {
	            this.coordinate_ = coordinate;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Prevents the default browser action.
	     * See https://developer.mozilla.org/en-US/docs/Web/API/event.preventDefault.
	     * @override
	     * @api
	     */
	    MapBrowserEvent.prototype.preventDefault = function () {
	        _super.prototype.preventDefault.call(this);
	        this.originalEvent.preventDefault();
	    };
	    /**
	     * Prevents further propagation of the current event.
	     * See https://developer.mozilla.org/en-US/docs/Web/API/event.stopPropagation.
	     * @override
	     * @api
	     */
	    MapBrowserEvent.prototype.stopPropagation = function () {
	        _super.prototype.stopPropagation.call(this);
	        this.originalEvent.stopPropagation();
	    };
	    return MapBrowserEvent;
	}(MapEvent));

	var pep = createCommonjsModule(function (module, exports) {
	/*!
	 * PEP v0.5.3 | https://github.com/jquery/PEP
	 * Copyright jQuery Foundation and other contributors | http://jquery.org/license
	 */

	(function (global, factory) {
	   module.exports = factory() ;
	}(commonjsGlobal, function () {
	  /**
	   * This is the constructor for new PointerEvents.
	   *
	   * New Pointer Events must be given a type, and an optional dictionary of
	   * initialization properties.
	   *
	   * Due to certain platform requirements, events returned from the constructor
	   * identify as MouseEvents.
	   *
	   * @constructor
	   * @param {String} inType The type of the event to create.
	   * @param {Object} [inDict] An optional dictionary of initial event properties.
	   * @return {Event} A new PointerEvent of type `inType`, initialized with properties from `inDict`.
	   */
	  var MOUSE_PROPS = [
	    'bubbles',
	    'cancelable',
	    'view',
	    'screenX',
	    'screenY',
	    'clientX',
	    'clientY',
	    'ctrlKey',
	    'altKey',
	    'shiftKey',
	    'metaKey',
	    'button',
	    'relatedTarget',
	    'pageX',
	    'pageY'
	  ];

	  var MOUSE_DEFAULTS = [
	    false,
	    false,
	    null,
	    0,
	    0,
	    0,
	    0,
	    false,
	    false,
	    false,
	    false,
	    0,
	    null,
	    0,
	    0
	  ];

	  function PointerEvent(inType, inDict) {
	    inDict = inDict || Object.create(null);

	    var e = document.createEvent('Event');
	    e.initEvent(inType, inDict.bubbles || false, inDict.cancelable || false);

	    // define inherited MouseEvent properties
	    // skip bubbles and cancelable since they're set above in initEvent()
	    for (var i = 2, p; i < MOUSE_PROPS.length; i++) {
	      p = MOUSE_PROPS[i];
	      e[p] = inDict[p] || MOUSE_DEFAULTS[i];
	    }
	    e.buttons = inDict.buttons || 0;

	    // Spec requires that pointers without pressure specified use 0.5 for down
	    // state and 0 for up state.
	    var pressure = 0;

	    if (inDict.pressure !== undefined && e.buttons) {
	      pressure = inDict.pressure;
	    } else {
	      pressure = e.buttons ? 0.5 : 0;
	    }

	    // add x/y properties aliased to clientX/Y
	    e.x = e.clientX;
	    e.y = e.clientY;

	    // define the properties of the PointerEvent interface
	    e.pointerId = inDict.pointerId || 0;
	    e.width = inDict.width || 1;
	    e.height = inDict.height || 1;
	    e.pressure = pressure;
	    e.tiltX = inDict.tiltX || 0;
	    e.tiltY = inDict.tiltY || 0;
	    e.twist = inDict.twist || 0;
	    e.tangentialPressure = inDict.tangentialPressure || 0;
	    e.pointerType = inDict.pointerType || '';
	    e.hwTimestamp = inDict.hwTimestamp || 0;
	    e.isPrimary = inDict.isPrimary || false;
	    e.detail = 0;
	    return e;
	  }

	  /**
	   * This module implements a map of pointer states
	   */
	  var USE_MAP = window.Map && window.Map.prototype.forEach;
	  var PointerMap = USE_MAP ? Map : SparseArrayMap;

	  function SparseArrayMap() {
	    this.array = [];
	    this.size = 0;
	  }

	  SparseArrayMap.prototype = {
	    set: function(k, v) {
	      if (v === undefined) {
	        return this.delete(k);
	      }
	      if (!this.has(k)) {
	        this.size++;
	      }
	      this.array[k] = v;
	    },
	    has: function(k) {
	      return this.array[k] !== undefined;
	    },
	    delete: function(k) {
	      if (this.has(k)) {
	        delete this.array[k];
	        this.size--;
	      }
	    },
	    get: function(k) {
	      return this.array[k];
	    },
	    clear: function() {
	      this.array.length = 0;
	      this.size = 0;
	    },

	    // return value, key, map
	    forEach: function(callback, thisArg) {
	      return this.array.forEach(function(v, k) {
	        callback.call(thisArg, v, k, this);
	      }, this);
	    }
	  };

	  var CLONE_PROPS = [

	    // MouseEvent
	    'bubbles',
	    'cancelable',
	    'view',
	    'detail',
	    'screenX',
	    'screenY',
	    'clientX',
	    'clientY',
	    'ctrlKey',
	    'altKey',
	    'shiftKey',
	    'metaKey',
	    'button',
	    'relatedTarget',

	    // DOM Level 3
	    'buttons',

	    // PointerEvent
	    'pointerId',
	    'width',
	    'height',
	    'pressure',
	    'tiltX',
	    'tiltY',
	    'pointerType',
	    'hwTimestamp',
	    'isPrimary',

	    // event instance
	    'type',
	    'target',
	    'currentTarget',
	    'which',
	    'pageX',
	    'pageY',
	    'timeStamp'
	  ];

	  var CLONE_DEFAULTS = [

	    // MouseEvent
	    false,
	    false,
	    null,
	    null,
	    0,
	    0,
	    0,
	    0,
	    false,
	    false,
	    false,
	    false,
	    0,
	    null,

	    // DOM Level 3
	    0,

	    // PointerEvent
	    0,
	    0,
	    0,
	    0,
	    0,
	    0,
	    '',
	    0,
	    false,

	    // event instance
	    '',
	    null,
	    null,
	    0,
	    0,
	    0,
	    0
	  ];

	  var BOUNDARY_EVENTS = {
	    'pointerover': 1,
	    'pointerout': 1,
	    'pointerenter': 1,
	    'pointerleave': 1
	  };

	  var HAS_SVG_INSTANCE = (typeof SVGElementInstance !== 'undefined');

	  /**
	   * This module is for normalizing events. Mouse and Touch events will be
	   * collected here, and fire PointerEvents that have the same semantics, no
	   * matter the source.
	   * Events fired:
	   *   - pointerdown: a pointing is added
	   *   - pointerup: a pointer is removed
	   *   - pointermove: a pointer is moved
	   *   - pointerover: a pointer crosses into an element
	   *   - pointerout: a pointer leaves an element
	   *   - pointercancel: a pointer will no longer generate events
	   */
	  var dispatcher = {
	    pointermap: new PointerMap(),
	    eventMap: Object.create(null),
	    captureInfo: Object.create(null),

	    // Scope objects for native events.
	    // This exists for ease of testing.
	    eventSources: Object.create(null),
	    eventSourceList: [],
	    /**
	     * Add a new event source that will generate pointer events.
	     *
	     * `inSource` must contain an array of event names named `events`, and
	     * functions with the names specified in the `events` array.
	     * @param {string} name A name for the event source
	     * @param {Object} source A new source of platform events.
	     */
	    registerSource: function(name, source) {
	      var s = source;
	      var newEvents = s.events;
	      if (newEvents) {
	        newEvents.forEach(function(e) {
	          if (s[e]) {
	            this.eventMap[e] = s[e].bind(s);
	          }
	        }, this);
	        this.eventSources[name] = s;
	        this.eventSourceList.push(s);
	      }
	    },
	    register: function(element) {
	      var l = this.eventSourceList.length;
	      for (var i = 0, es; (i < l) && (es = this.eventSourceList[i]); i++) {

	        // call eventsource register
	        es.register.call(es, element);
	      }
	    },
	    unregister: function(element) {
	      var l = this.eventSourceList.length;
	      for (var i = 0, es; (i < l) && (es = this.eventSourceList[i]); i++) {

	        // call eventsource register
	        es.unregister.call(es, element);
	      }
	    },
	    contains: /*scope.external.contains || */function(container, contained) {
	      try {
	        return container.contains(contained);
	      } catch (ex) {

	        // most likely: https://bugzilla.mozilla.org/show_bug.cgi?id=208427
	        return false;
	      }
	    },

	    // EVENTS
	    down: function(inEvent) {
	      inEvent.bubbles = true;
	      this.fireEvent('pointerdown', inEvent);
	    },
	    move: function(inEvent) {
	      inEvent.bubbles = true;
	      this.fireEvent('pointermove', inEvent);
	    },
	    up: function(inEvent) {
	      inEvent.bubbles = true;
	      this.fireEvent('pointerup', inEvent);
	    },
	    enter: function(inEvent) {
	      inEvent.bubbles = false;
	      this.fireEvent('pointerenter', inEvent);
	    },
	    leave: function(inEvent) {
	      inEvent.bubbles = false;
	      this.fireEvent('pointerleave', inEvent);
	    },
	    over: function(inEvent) {
	      inEvent.bubbles = true;
	      this.fireEvent('pointerover', inEvent);
	    },
	    out: function(inEvent) {
	      inEvent.bubbles = true;
	      this.fireEvent('pointerout', inEvent);
	    },
	    cancel: function(inEvent) {
	      inEvent.bubbles = true;
	      this.fireEvent('pointercancel', inEvent);
	    },
	    leaveOut: function(event) {
	      this.out(event);
	      this.propagate(event, this.leave, false);
	    },
	    enterOver: function(event) {
	      this.over(event);
	      this.propagate(event, this.enter, true);
	    },

	    // LISTENER LOGIC
	    eventHandler: function(inEvent) {

	      // This is used to prevent multiple dispatch of pointerevents from
	      // platform events. This can happen when two elements in different scopes
	      // are set up to create pointer events, which is relevant to Shadow DOM.
	      if (inEvent._handledByPE) {
	        return;
	      }
	      var type = inEvent.type;
	      var fn = this.eventMap && this.eventMap[type];
	      if (fn) {
	        fn(inEvent);
	      }
	      inEvent._handledByPE = true;
	    },

	    // set up event listeners
	    listen: function(target, events) {
	      events.forEach(function(e) {
	        this.addEvent(target, e);
	      }, this);
	    },

	    // remove event listeners
	    unlisten: function(target, events) {
	      events.forEach(function(e) {
	        this.removeEvent(target, e);
	      }, this);
	    },
	    addEvent: /*scope.external.addEvent || */function(target, eventName) {
	      target.addEventListener(eventName, this.boundHandler);
	    },
	    removeEvent: /*scope.external.removeEvent || */function(target, eventName) {
	      target.removeEventListener(eventName, this.boundHandler);
	    },

	    // EVENT CREATION AND TRACKING
	    /**
	     * Creates a new Event of type `inType`, based on the information in
	     * `inEvent`.
	     *
	     * @param {string} inType A string representing the type of event to create
	     * @param {Event} inEvent A platform event with a target
	     * @return {Event} A PointerEvent of type `inType`
	     */
	    makeEvent: function(inType, inEvent) {

	      // relatedTarget must be null if pointer is captured
	      if (this.captureInfo[inEvent.pointerId]) {
	        inEvent.relatedTarget = null;
	      }
	      var e = new PointerEvent(inType, inEvent);
	      if (inEvent.preventDefault) {
	        e.preventDefault = inEvent.preventDefault;
	      }
	      e._target = e._target || inEvent.target;
	      return e;
	    },

	    // make and dispatch an event in one call
	    fireEvent: function(inType, inEvent) {
	      var e = this.makeEvent(inType, inEvent);
	      return this.dispatchEvent(e);
	    },
	    /**
	     * Returns a snapshot of inEvent, with writable properties.
	     *
	     * @param {Event} inEvent An event that contains properties to copy.
	     * @return {Object} An object containing shallow copies of `inEvent`'s
	     *    properties.
	     */
	    cloneEvent: function(inEvent) {
	      var eventCopy = Object.create(null);
	      var p;
	      for (var i = 0; i < CLONE_PROPS.length; i++) {
	        p = CLONE_PROPS[i];
	        eventCopy[p] = inEvent[p] || CLONE_DEFAULTS[i];

	        // Work around SVGInstanceElement shadow tree
	        // Return the <use> element that is represented by the instance for Safari, Chrome, IE.
	        // This is the behavior implemented by Firefox.
	        if (HAS_SVG_INSTANCE && (p === 'target' || p === 'relatedTarget')) {
	          if (eventCopy[p] instanceof SVGElementInstance) {
	            eventCopy[p] = eventCopy[p].correspondingUseElement;
	          }
	        }
	      }

	      // keep the semantics of preventDefault
	      if (inEvent.preventDefault) {
	        eventCopy.preventDefault = function() {
	          inEvent.preventDefault();
	        };
	      }
	      return eventCopy;
	    },
	    getTarget: function(inEvent) {
	      var capture = this.captureInfo[inEvent.pointerId];
	      if (!capture) {
	        return inEvent._target;
	      }
	      if (inEvent._target === capture || !(inEvent.type in BOUNDARY_EVENTS)) {
	        return capture;
	      }
	    },
	    propagate: function(event, fn, propagateDown) {
	      var target = event.target;
	      var targets = [];

	      // Order of conditions due to document.contains() missing in IE.
	      while (target != null && target !== document && !target.contains(event.relatedTarget)) {
	        targets.push(target);
	        target = target.parentNode;

	        // Touch: Do not propagate if node is detached.
	        if (!target) {
	          return;
	        }
	      }
	      if (propagateDown) {
	        targets.reverse();
	      }
	      targets.forEach(function(target) {
	        event.target = target;
	        fn.call(this, event);
	      }, this);
	    },
	    setCapture: function(inPointerId, inTarget, skipDispatch) {
	      if (this.captureInfo[inPointerId]) {
	        this.releaseCapture(inPointerId, skipDispatch);
	      }

	      this.captureInfo[inPointerId] = inTarget;
	      this.implicitRelease = this.releaseCapture.bind(this, inPointerId, skipDispatch);
	      document.addEventListener('pointerup', this.implicitRelease);
	      document.addEventListener('pointercancel', this.implicitRelease);

	      var e = new PointerEvent('gotpointercapture', { bubbles: true });
	      e.pointerId = inPointerId;
	      e._target = inTarget;

	      if (!skipDispatch) {
	        this.asyncDispatchEvent(e);
	      }
	    },
	    releaseCapture: function(inPointerId, skipDispatch) {
	      var t = this.captureInfo[inPointerId];
	      if (!t) {
	        return;
	      }

	      this.captureInfo[inPointerId] = undefined;
	      document.removeEventListener('pointerup', this.implicitRelease);
	      document.removeEventListener('pointercancel', this.implicitRelease);

	      var e = new PointerEvent('lostpointercapture', { bubbles: true });
	      e.pointerId = inPointerId;
	      e._target = t;

	      if (!skipDispatch) {
	        this.asyncDispatchEvent(e);
	      }
	    },
	    /**
	     * Dispatches the event to its target.
	     *
	     * @param {Event} inEvent The event to be dispatched.
	     * @return {Boolean} True if an event handler returns true, false otherwise.
	     */
	    dispatchEvent: /*scope.external.dispatchEvent || */function(inEvent) {
	      var t = this.getTarget(inEvent);
	      if (t) {
	        return t.dispatchEvent(inEvent);
	      }
	    },
	    asyncDispatchEvent: function(inEvent) {
	      requestAnimationFrame(this.dispatchEvent.bind(this, inEvent));
	    }
	  };
	  dispatcher.boundHandler = dispatcher.eventHandler.bind(dispatcher);

	  var targeting = {
	    shadow: function(inEl) {
	      if (inEl) {
	        return inEl.shadowRoot || inEl.webkitShadowRoot;
	      }
	    },
	    canTarget: function(shadow) {
	      return shadow && Boolean(shadow.elementFromPoint);
	    },
	    targetingShadow: function(inEl) {
	      var s = this.shadow(inEl);
	      if (this.canTarget(s)) {
	        return s;
	      }
	    },
	    olderShadow: function(shadow) {
	      var os = shadow.olderShadowRoot;
	      if (!os) {
	        var se = shadow.querySelector('shadow');
	        if (se) {
	          os = se.olderShadowRoot;
	        }
	      }
	      return os;
	    },
	    allShadows: function(element) {
	      var shadows = [];
	      var s = this.shadow(element);
	      while (s) {
	        shadows.push(s);
	        s = this.olderShadow(s);
	      }
	      return shadows;
	    },
	    searchRoot: function(inRoot, x, y) {
	      if (inRoot) {
	        var t = inRoot.elementFromPoint(x, y);
	        var st, sr;

	        // is element a shadow host?
	        sr = this.targetingShadow(t);
	        while (sr) {

	          // find the the element inside the shadow root
	          st = sr.elementFromPoint(x, y);
	          if (!st) {

	            // check for older shadows
	            sr = this.olderShadow(sr);
	          } else {

	            // shadowed element may contain a shadow root
	            var ssr = this.targetingShadow(st);
	            return this.searchRoot(ssr, x, y) || st;
	          }
	        }

	        // light dom element is the target
	        return t;
	      }
	    },
	    owner: function(element) {
	      var s = element;

	      // walk up until you hit the shadow root or document
	      while (s.parentNode) {
	        s = s.parentNode;
	      }

	      // the owner element is expected to be a Document or ShadowRoot
	      if (s.nodeType !== Node.DOCUMENT_NODE && s.nodeType !== Node.DOCUMENT_FRAGMENT_NODE) {
	        s = document;
	      }
	      return s;
	    },
	    findTarget: function(inEvent) {
	      var x = inEvent.clientX;
	      var y = inEvent.clientY;

	      // if the listener is in the shadow root, it is much faster to start there
	      var s = this.owner(inEvent.target);

	      // if x, y is not in this root, fall back to document search
	      if (!s.elementFromPoint(x, y)) {
	        s = document;
	      }
	      return this.searchRoot(s, x, y);
	    }
	  };

	  var forEach = Array.prototype.forEach.call.bind(Array.prototype.forEach);
	  var map = Array.prototype.map.call.bind(Array.prototype.map);
	  var toArray = Array.prototype.slice.call.bind(Array.prototype.slice);
	  var filter = Array.prototype.filter.call.bind(Array.prototype.filter);
	  var MO = window.MutationObserver || window.WebKitMutationObserver;
	  var SELECTOR = '[touch-action]';
	  var OBSERVER_INIT = {
	    subtree: true,
	    childList: true,
	    attributes: true,
	    attributeOldValue: true,
	    attributeFilter: ['touch-action']
	  };

	  function Installer(add, remove, changed, binder) {
	    this.addCallback = add.bind(binder);
	    this.removeCallback = remove.bind(binder);
	    this.changedCallback = changed.bind(binder);
	    if (MO) {
	      this.observer = new MO(this.mutationWatcher.bind(this));
	    }
	  }

	  Installer.prototype = {
	    watchSubtree: function(target) {

	      // Only watch scopes that can target find, as these are top-level.
	      // Otherwise we can see duplicate additions and removals that add noise.
	      //
	      // TODO(dfreedman): For some instances with ShadowDOMPolyfill, we can see
	      // a removal without an insertion when a node is redistributed among
	      // shadows. Since it all ends up correct in the document, watching only
	      // the document will yield the correct mutations to watch.
	      if (this.observer && targeting.canTarget(target)) {
	        this.observer.observe(target, OBSERVER_INIT);
	      }
	    },
	    enableOnSubtree: function(target) {
	      this.watchSubtree(target);
	      if (target === document && document.readyState !== 'complete') {
	        this.installOnLoad();
	      } else {
	        this.installNewSubtree(target);
	      }
	    },
	    installNewSubtree: function(target) {
	      forEach(this.findElements(target), this.addElement, this);
	    },
	    findElements: function(target) {
	      if (target.querySelectorAll) {
	        return target.querySelectorAll(SELECTOR);
	      }
	      return [];
	    },
	    removeElement: function(el) {
	      this.removeCallback(el);
	    },
	    addElement: function(el) {
	      this.addCallback(el);
	    },
	    elementChanged: function(el, oldValue) {
	      this.changedCallback(el, oldValue);
	    },
	    concatLists: function(accum, list) {
	      return accum.concat(toArray(list));
	    },

	    // register all touch-action = none nodes on document load
	    installOnLoad: function() {
	      document.addEventListener('readystatechange', function() {
	        if (document.readyState === 'complete') {
	          this.installNewSubtree(document);
	        }
	      }.bind(this));
	    },
	    isElement: function(n) {
	      return n.nodeType === Node.ELEMENT_NODE;
	    },
	    flattenMutationTree: function(inNodes) {

	      // find children with touch-action
	      var tree = map(inNodes, this.findElements, this);

	      // make sure the added nodes are accounted for
	      tree.push(filter(inNodes, this.isElement));

	      // flatten the list
	      return tree.reduce(this.concatLists, []);
	    },
	    mutationWatcher: function(mutations) {
	      mutations.forEach(this.mutationHandler, this);
	    },
	    mutationHandler: function(m) {
	      if (m.type === 'childList') {
	        var added = this.flattenMutationTree(m.addedNodes);
	        added.forEach(this.addElement, this);
	        var removed = this.flattenMutationTree(m.removedNodes);
	        removed.forEach(this.removeElement, this);
	      } else if (m.type === 'attributes') {
	        this.elementChanged(m.target, m.oldValue);
	      }
	    }
	  };

	  function shadowSelector(s) {
	    return 'body /shadow-deep/ ' + s;
	  }
	  function rule(v) {
	    return '{ -ms-touch-action: ' + v + '; touch-action: ' + v + '; }';
	  }
	  var attrib2css = [
	    { selector: '[touch-action="none"]', value: 'none' },
	    { selector: '[touch-action="auto"]', value: 'auto' },
	    { selector: '[touch-action~="pan-x"]', value: 'pan-x' },
	    { selector: '[touch-action~="pan-y"]', value: 'pan-y' },
	    { selector: '[touch-action~="pan-up"]', value: 'pan-up' },
	    { selector: '[touch-action~="pan-down"]', value: 'pan-down' },
	    { selector: '[touch-action~="pan-left"]', value: 'pan-left' },
	    { selector: '[touch-action~="pan-right"]', value: 'pan-right' }
	  ];
	  var styles = '';

	  // only install stylesheet if the browser has touch action support
	  var hasNativePE = window.PointerEvent || window.MSPointerEvent;

	  // only add shadow selectors if shadowdom is supported
	  var hasShadowRoot = !window.ShadowDOMPolyfill && document.head.createShadowRoot;

	  function applyAttributeStyles() {
	    if (hasNativePE) {
	      attrib2css.forEach(function(r) {
	        styles += r.selector + rule(r.value) + '\n';
	        if (hasShadowRoot) {
	          styles += shadowSelector(r.selector) + rule(r.value) + '\n';
	        }
	      });

	      var el = document.createElement('style');
	      el.textContent = styles;
	      document.head.appendChild(el);
	    }
	  }

	  var pointermap = dispatcher.pointermap;

	  // radius around touchend that swallows mouse events
	  var DEDUP_DIST = 25;

	  // left, middle, right, back, forward
	  var BUTTON_TO_BUTTONS = [1, 4, 2, 8, 16];

	  var HAS_BUTTONS = false;
	  try {
	    HAS_BUTTONS = new MouseEvent('test', { buttons: 1 }).buttons === 1;
	  } catch (e) {}

	  // handler block for native mouse events
	  var mouseEvents = {
	    POINTER_ID: 1,
	    POINTER_TYPE: 'mouse',
	    events: [
	      'mousedown',
	      'webkitmouseforcechanged',
	      'mousemove',
	      'mouseup',
	      'mouseover',
	      'mouseout'
	    ],
	    register: function(target) {
	      dispatcher.listen(target, this.events);
	    },
	    unregister: function(target) {
	      dispatcher.unlisten(target, this.events);
	    },
	    lastTouches: [],

	    // collide with the global mouse listener
	    isEventSimulatedFromTouch: function(inEvent) {
	      var lts = this.lastTouches;
	      var x = inEvent.clientX;
	      var y = inEvent.clientY;
	      for (var i = 0, l = lts.length, t; i < l && (t = lts[i]); i++) {

	        // simulated mouse events will be swallowed near a primary touchend
	        var dx = Math.abs(x - t.x);
	        var dy = Math.abs(y - t.y);
	        if (dx <= DEDUP_DIST && dy <= DEDUP_DIST) {
	          return true;
	        }
	      }
	    },
	    prepareEvent: function(inEvent) {
	      var e = dispatcher.cloneEvent(inEvent);

	      // forward mouse preventDefault
	      var pd = e.preventDefault;
	      e.preventDefault = function() {
	        inEvent.preventDefault();
	        pd();
	      };
	      e.pointerId = this.POINTER_ID;
	      e.isPrimary = true;
	      e.pointerType = this.POINTER_TYPE;
	      if ('webkitForce' in inEvent) {
	        e.pressure = inEvent.webkitForce - MouseEvent.WEBKIT_FORCE_AT_MOUSE_DOWN;
	      }
	      return e;
	    },
	    prepareButtonsForMove: function(e, inEvent) {
	      var p = pointermap.get(this.POINTER_ID);

	      // Update buttons state after possible out-of-document mouseup.
	      if (inEvent.which === 0 || !p) {
	        e.buttons = 0;
	      } else {
	        e.buttons = p.buttons;
	      }
	      inEvent.buttons = e.buttons;
	    },
	    mousedown: function(inEvent) {
	      if (!this.isEventSimulatedFromTouch(inEvent)) {
	        var p = pointermap.get(this.POINTER_ID);
	        var e = this.prepareEvent(inEvent);
	        if (!HAS_BUTTONS) {
	          e.buttons = BUTTON_TO_BUTTONS[e.button];
	          if (p) { e.buttons |= p.buttons; }
	          inEvent.buttons = e.buttons;
	        }
	        pointermap.set(this.POINTER_ID, inEvent);
	        if (!p || p.buttons === 0) {
	          dispatcher.down(e);
	        } else {
	          dispatcher.move(e);
	        }
	      }
	    },

	    // This is called when the user force presses without moving x/y
	    webkitmouseforcechanged: function(inEvent) {
	      this.mousemove(inEvent);
	    },
	    mousemove: function(inEvent) {
	      if (!this.isEventSimulatedFromTouch(inEvent)) {
	        var e = this.prepareEvent(inEvent);
	        if (!HAS_BUTTONS) { this.prepareButtonsForMove(e, inEvent); }
	        e.button = -1;
	        pointermap.set(this.POINTER_ID, inEvent);
	        dispatcher.move(e);
	      }
	    },
	    mouseup: function(inEvent) {
	      if (!this.isEventSimulatedFromTouch(inEvent)) {
	        var p = pointermap.get(this.POINTER_ID);
	        var e = this.prepareEvent(inEvent);
	        if (!HAS_BUTTONS) {
	          var up = BUTTON_TO_BUTTONS[e.button];

	          // Produces wrong state of buttons in Browsers without `buttons` support
	          // when a mouse button that was pressed outside the document is released
	          // inside and other buttons are still pressed down.
	          e.buttons = p ? p.buttons & ~up : 0;
	          inEvent.buttons = e.buttons;
	        }
	        pointermap.set(this.POINTER_ID, inEvent);

	        // Support: Firefox <=44 only
	        // FF Ubuntu includes the lifted button in the `buttons` property on
	        // mouseup.
	        // https://bugzilla.mozilla.org/show_bug.cgi?id=1223366
	        e.buttons &= ~BUTTON_TO_BUTTONS[e.button];
	        if (e.buttons === 0) {
	          dispatcher.up(e);
	        } else {
	          dispatcher.move(e);
	        }
	      }
	    },
	    mouseover: function(inEvent) {
	      if (!this.isEventSimulatedFromTouch(inEvent)) {
	        var e = this.prepareEvent(inEvent);
	        if (!HAS_BUTTONS) { this.prepareButtonsForMove(e, inEvent); }
	        e.button = -1;
	        pointermap.set(this.POINTER_ID, inEvent);
	        dispatcher.enterOver(e);
	      }
	    },
	    mouseout: function(inEvent) {
	      if (!this.isEventSimulatedFromTouch(inEvent)) {
	        var e = this.prepareEvent(inEvent);
	        if (!HAS_BUTTONS) { this.prepareButtonsForMove(e, inEvent); }
	        e.button = -1;
	        dispatcher.leaveOut(e);
	      }
	    },
	    cancel: function(inEvent) {
	      var e = this.prepareEvent(inEvent);
	      dispatcher.cancel(e);
	      this.deactivateMouse();
	    },
	    deactivateMouse: function() {
	      pointermap.delete(this.POINTER_ID);
	    }
	  };

	  var captureInfo = dispatcher.captureInfo;
	  var findTarget = targeting.findTarget.bind(targeting);
	  var allShadows = targeting.allShadows.bind(targeting);
	  var pointermap$1 = dispatcher.pointermap;

	  // this should be long enough to ignore compat mouse events made by touch
	  var DEDUP_TIMEOUT = 2500;
	  var ATTRIB = 'touch-action';
	  var INSTALLER;

	  // bitmask for _scrollType
	  var UP = 1;
	  var DOWN = 2;
	  var LEFT = 4;
	  var RIGHT = 8;
	  var AUTO = UP | DOWN | LEFT | RIGHT;

	  // handler block for native touch events
	  var touchEvents = {
	    events: [
	      'touchstart',
	      'touchmove',
	      'touchforcechange',
	      'touchend',
	      'touchcancel'
	    ],
	    register: function(target) {
	      INSTALLER.enableOnSubtree(target);
	    },
	    unregister: function() {

	      // TODO(dfreedman): is it worth it to disconnect the MO?
	    },
	    elementAdded: function(el) {
	      var a = el.getAttribute(ATTRIB);
	      var st = this.touchActionToScrollType(a);
	      if (typeof st === "number") {
	        el._scrollType = st;
	        dispatcher.listen(el, this.events);

	        // set touch-action on shadows as well
	        allShadows(el).forEach(function(s) {
	          s._scrollType = st;
	          dispatcher.listen(s, this.events);
	        }, this);
	      }
	    },
	    elementRemoved: function(el) {

	      // In some cases, an element is removed before a touchend.
	      // When this is the case, we should wait for the touchend before unlistening,
	      // because we still want pointer events to bubble up after removing from DOM.
	      if (pointermap$1.size > 0) {
	        var evts = this.events;
	        el.addEventListener('touchend', function() {
	          el._scrollType = undefined;
	          dispatcher.unlisten(el, evts);
	        });
	      } else {
	        el._scrollType = undefined;
	        dispatcher.unlisten(el, this.events);
	      }

	      // remove touch-action from shadow
	      allShadows(el).forEach(function(s) {
	        s._scrollType = undefined;
	        dispatcher.unlisten(s, this.events);
	      }, this);
	    },
	    elementChanged: function(el, oldValue) {
	      var a = el.getAttribute(ATTRIB);
	      var st = this.touchActionToScrollType(a);
	      var oldSt = this.touchActionToScrollType(oldValue);

	      // simply update scrollType if listeners are already established
	      if (typeof st === "number" && typeof oldSt === "number") {
	        el._scrollType = st;
	        allShadows(el).forEach(function(s) {
	          s._scrollType = st;
	        }, this);
	      } else if (typeof oldSt === "number") {
	        this.elementRemoved(el);
	      } else if (typeof st === "number") {
	        this.elementAdded(el);
	      }
	    },
	    scrollTypes: {
	      UP: function(s) {
	        return s.includes('pan-y') || s.includes('pan-up') ? UP : 0;
	      },
	      DOWN: function(s) {
	        return s.includes('pan-y') || s.includes('pan-down') ? DOWN : 0;
	      },
	      LEFT: function(s) {
	        return s.includes('pan-x') || s.includes('pan-left') ? LEFT : 0;
	      },
	      RIGHT: function(s) {
	        return s.includes('pan-x') || s.includes('pan-right') ? RIGHT : 0;
	      }
	    },
	    touchActionToScrollType: function(touchAction) {
	      if (!touchAction) {
	        return;
	      }

	      if (touchAction === "auto") {
	        return AUTO;
	      }

	      if (touchAction === "none") {
	        return 0;
	      }

	      var s = touchAction.split(' ');
	      var st = this.scrollTypes;

	      // construct a bitmask of allowed scroll directions
	      return st.UP(s) | st.DOWN(s) | st.LEFT(s) | st.RIGHT(s);
	    },
	    POINTER_TYPE: 'touch',
	    firstTouch: null,
	    isPrimaryTouch: function(inTouch) {
	      return this.firstTouch === inTouch.identifier;
	    },
	    setPrimaryTouch: function(inTouch) {

	      // set primary touch if there no pointers, or the only pointer is the mouse
	      if (pointermap$1.size === 0 || (pointermap$1.size === 1 && pointermap$1.has(1))) {
	        this.firstTouch = inTouch.identifier;
	        this.firstXY = { X: inTouch.clientX, Y: inTouch.clientY };
	        this.scrolling = false;
	      }
	    },
	    removePrimaryPointer: function(inPointer) {
	      if (inPointer.isPrimary) {
	        this.firstTouch = null;
	        this.firstXY = null;
	      }
	    },
	    typeToButtons: function(type) {
	      var ret = 0;
	      if (type === 'touchstart' || type === 'touchmove' || type === 'touchforcechange') {
	        ret = 1;
	      }
	      return ret;
	    },
	    touchToPointer: function(inTouch) {
	      var cte = this.currentTouchEvent;
	      var e = dispatcher.cloneEvent(inTouch);

	      // We reserve pointerId 1 for Mouse.
	      // Touch identifiers can start at 0.
	      // Add 2 to the touch identifier for compatibility.
	      var id = e.pointerId = inTouch.identifier + 2;
	      e.target = captureInfo[id] || findTarget(e);
	      e.bubbles = true;
	      e.cancelable = true;
	      e.button = 0;
	      e.buttons = this.typeToButtons(cte.type);
	      e.width = (inTouch.radiusX || inTouch.webkitRadiusX || 0) * 2;
	      e.height = (inTouch.radiusY || inTouch.webkitRadiusY || 0) * 2;
	      e.pressure = inTouch.force !== undefined ?
	        inTouch.force :
	        inTouch.webkitForce !== undefined ?
	          inTouch.webkitForce : undefined;
	      e.isPrimary = this.isPrimaryTouch(inTouch);
	      if (inTouch.altitudeAngle) {
	        var tan = Math.tan(inTouch.altitudeAngle);
	        var radToDeg = 180 / Math.PI;
	        e.tiltX = Math.atan(Math.cos(inTouch.azimuthAngle) / tan) * radToDeg;
	        e.tiltY = Math.atan(Math.sin(inTouch.azimuthAngle) / tan) * radToDeg;
	      } else {
	        e.tiltX = 0;
	        e.tiltY = 0;
	      }
	      if (inTouch.touchType === 'stylus') {
	        e.pointerType = 'pen';
	      } else {
	        e.pointerType = this.POINTER_TYPE;
	      }

	      // forward modifier keys
	      e.altKey = cte.altKey;
	      e.ctrlKey = cte.ctrlKey;
	      e.metaKey = cte.metaKey;
	      e.shiftKey = cte.shiftKey;

	      // forward touch preventDefaults
	      var self = this;
	      e.preventDefault = function() {
	        self.scrolling = false;
	        self.firstXY = null;
	        cte.preventDefault();
	      };
	      return e;
	    },
	    processTouches: function(inEvent, inFunction) {
	      var tl = inEvent.changedTouches;
	      this.currentTouchEvent = inEvent;
	      for (var i = 0, t; i < tl.length; i++) {
	        t = tl[i];
	        inFunction.call(this, this.touchToPointer(t));
	      }
	    },

	    // For single axis scrollers, determines whether the element should emit
	    // pointer events or behave as a scroller
	    shouldScroll: function(inEvent) {
	      if (this.firstXY) {
	        var ret;
	        var st = inEvent.currentTarget._scrollType;
	        if (st === 0) {

	          // this element is a `touch-action: none`, should never scroll
	          ret = false;
	        } else if (st === AUTO) {

	          // this element is a `touch-action: auto`, should always scroll
	          ret = true;
	        } else {
	          var t = inEvent.changedTouches[0];

	          var dy = t.clientY - this.firstXY.Y;
	          var dya = Math.abs(dy);
	          var dx = t.clientX - this.firstXY.X;
	          var dxa = Math.abs(dx);

	          var up = st & UP;
	          var down = st & DOWN;
	          var left = st & LEFT;
	          var right = st & RIGHT;

	          if (left && right) {

	            // should scroll on the x axis
	            ret = dxa > dya;
	          } else if (left) {

	            // should scroll left
	            ret = dxa > dya && dx > 0;
	          } else if (right) {

	            // should scroll right
	            ret = dxa > dya && dx < 0;
	          }

	          if (!ret) {
	            if (up && down) {

	              // should scroll on the y axis
	              ret = dxa < dya;
	            } else if (up) {

	              // should scroll up
	              ret = dxa < dya && dy > 0;
	            } else if (down) {

	              // should scroll down
	              ret = dxa < dya && dy < 0;
	            }
	          }

	        }
	        this.firstXY = null;
	        return ret;
	      }
	    },
	    findTouch: function(inTL, inId) {
	      for (var i = 0, l = inTL.length, t; i < l && (t = inTL[i]); i++) {
	        if (t.identifier === inId) {
	          return true;
	        }
	      }
	    },

	    // In some instances, a touchstart can happen without a touchend. This
	    // leaves the pointermap in a broken state.
	    // Therefore, on every touchstart, we remove the touches that did not fire a
	    // touchend event.
	    // To keep state globally consistent, we fire a
	    // pointercancel for this "abandoned" touch
	    vacuumTouches: function(inEvent) {
	      var tl = inEvent.touches;

	      // pointermap.size should be < tl.length here, as the touchstart has not
	      // been processed yet.
	      if (pointermap$1.size >= tl.length) {
	        var d = [];
	        pointermap$1.forEach(function(value, key) {

	          // Never remove pointerId == 1, which is mouse.
	          // Touch identifiers are 2 smaller than their pointerId, which is the
	          // index in pointermap.
	          if (key !== 1 && !this.findTouch(tl, key - 2)) {
	            var p = value.out;
	            d.push(p);
	          }
	        }, this);
	        d.forEach(this.cancelOut, this);
	      }
	    },
	    touchstart: function(inEvent) {
	      this.vacuumTouches(inEvent);
	      this.setPrimaryTouch(inEvent.changedTouches[0]);
	      this.dedupSynthMouse(inEvent);
	      if (!this.scrolling) {
	        this.processTouches(inEvent, this.overDown);
	      }
	    },
	    overDown: function(inPointer) {
	      pointermap$1.set(inPointer.pointerId, {
	        target: inPointer.target,
	        out: inPointer,
	        outTarget: inPointer.target
	      });
	      dispatcher.enterOver(inPointer);
	      dispatcher.down(inPointer);
	    },

	    // Called when pressure or tilt changes without the x/y changing
	    touchforcechange: function(inEvent) {
	      this.touchmove(inEvent);
	    },
	    touchmove: function(inEvent) {
	      if (!this.scrolling) {
	        if (this.shouldScroll(inEvent)) {
	          this.scrolling = true;
	          this.touchcancel(inEvent);
	        } else {
	          if (inEvent.type !== 'touchforcechange') {
	            inEvent.preventDefault();
	          }
	          this.processTouches(inEvent, this.moveOverOut);
	        }
	      }
	    },
	    moveOverOut: function(inPointer) {
	      var event = inPointer;
	      var pointer = pointermap$1.get(event.pointerId);

	      // a finger drifted off the screen, ignore it
	      if (!pointer) {
	        return;
	      }
	      var outEvent = pointer.out;
	      var outTarget = pointer.outTarget;
	      dispatcher.move(event);
	      if (outEvent && outTarget !== event.target) {
	        outEvent.relatedTarget = event.target;
	        event.relatedTarget = outTarget;

	        // recover from retargeting by shadow
	        outEvent.target = outTarget;
	        if (event.target) {
	          dispatcher.leaveOut(outEvent);
	          dispatcher.enterOver(event);
	        } else {

	          // clean up case when finger leaves the screen
	          event.target = outTarget;
	          event.relatedTarget = null;
	          this.cancelOut(event);
	        }
	      }
	      pointer.out = event;
	      pointer.outTarget = event.target;
	    },
	    touchend: function(inEvent) {
	      this.dedupSynthMouse(inEvent);
	      this.processTouches(inEvent, this.upOut);
	    },
	    upOut: function(inPointer) {
	      if (!this.scrolling) {
	        dispatcher.up(inPointer);
	        dispatcher.leaveOut(inPointer);
	      }
	      this.cleanUpPointer(inPointer);
	    },
	    touchcancel: function(inEvent) {
	      this.processTouches(inEvent, this.cancelOut);
	    },
	    cancelOut: function(inPointer) {
	      dispatcher.cancel(inPointer);
	      dispatcher.leaveOut(inPointer);
	      this.cleanUpPointer(inPointer);
	    },
	    cleanUpPointer: function(inPointer) {
	      pointermap$1.delete(inPointer.pointerId);
	      this.removePrimaryPointer(inPointer);
	    },

	    // prevent synth mouse events from creating pointer events
	    dedupSynthMouse: function(inEvent) {
	      var lts = mouseEvents.lastTouches;
	      var t = inEvent.changedTouches[0];

	      // only the primary finger will synth mouse events
	      if (this.isPrimaryTouch(t)) {

	        // remember x/y of last touch
	        var lt = { x: t.clientX, y: t.clientY };
	        lts.push(lt);
	        var fn = (function(lts, lt) {
	          var i = lts.indexOf(lt);
	          if (i > -1) {
	            lts.splice(i, 1);
	          }
	        }).bind(null, lts, lt);
	        setTimeout(fn, DEDUP_TIMEOUT);
	      }
	    }
	  };

	  INSTALLER = new Installer(touchEvents.elementAdded, touchEvents.elementRemoved,
	    touchEvents.elementChanged, touchEvents);

	  var pointermap$2 = dispatcher.pointermap;
	  var HAS_BITMAP_TYPE = window.MSPointerEvent &&
	    typeof window.MSPointerEvent.MSPOINTER_TYPE_MOUSE === 'number';
	  var msEvents = {
	    events: [
	      'MSPointerDown',
	      'MSPointerMove',
	      'MSPointerUp',
	      'MSPointerOut',
	      'MSPointerOver',
	      'MSPointerCancel',
	      'MSGotPointerCapture',
	      'MSLostPointerCapture'
	    ],
	    register: function(target) {
	      dispatcher.listen(target, this.events);
	    },
	    unregister: function(target) {
	      dispatcher.unlisten(target, this.events);
	    },
	    POINTER_TYPES: [
	      '',
	      'unavailable',
	      'touch',
	      'pen',
	      'mouse'
	    ],
	    prepareEvent: function(inEvent) {
	      var e = inEvent;
	      if (HAS_BITMAP_TYPE) {
	        e = dispatcher.cloneEvent(inEvent);
	        e.pointerType = this.POINTER_TYPES[inEvent.pointerType];
	      }
	      return e;
	    },
	    cleanup: function(id) {
	      pointermap$2.delete(id);
	    },
	    MSPointerDown: function(inEvent) {
	      pointermap$2.set(inEvent.pointerId, inEvent);
	      var e = this.prepareEvent(inEvent);
	      dispatcher.down(e);
	    },
	    MSPointerMove: function(inEvent) {
	      var e = this.prepareEvent(inEvent);
	      dispatcher.move(e);
	    },
	    MSPointerUp: function(inEvent) {
	      var e = this.prepareEvent(inEvent);
	      dispatcher.up(e);
	      this.cleanup(inEvent.pointerId);
	    },
	    MSPointerOut: function(inEvent) {
	      var e = this.prepareEvent(inEvent);
	      dispatcher.leaveOut(e);
	    },
	    MSPointerOver: function(inEvent) {
	      var e = this.prepareEvent(inEvent);
	      dispatcher.enterOver(e);
	    },
	    MSPointerCancel: function(inEvent) {
	      var e = this.prepareEvent(inEvent);
	      dispatcher.cancel(e);
	      this.cleanup(inEvent.pointerId);
	    },
	    MSLostPointerCapture: function(inEvent) {
	      var e = dispatcher.makeEvent('lostpointercapture', inEvent);
	      dispatcher.dispatchEvent(e);
	    },
	    MSGotPointerCapture: function(inEvent) {
	      var e = dispatcher.makeEvent('gotpointercapture', inEvent);
	      dispatcher.dispatchEvent(e);
	    }
	  };

	  function applyPolyfill() {

	    // only activate if this platform does not have pointer events
	    if (!window.PointerEvent) {
	      window.PointerEvent = PointerEvent;

	      if (window.navigator.msPointerEnabled) {
	        var tp = window.navigator.msMaxTouchPoints;
	        Object.defineProperty(window.navigator, 'maxTouchPoints', {
	          value: tp,
	          enumerable: true
	        });
	        dispatcher.registerSource('ms', msEvents);
	      } else {
	        Object.defineProperty(window.navigator, 'maxTouchPoints', {
	          value: 0,
	          enumerable: true
	        });
	        dispatcher.registerSource('mouse', mouseEvents);
	        if (window.ontouchstart !== undefined) {
	          dispatcher.registerSource('touch', touchEvents);
	        }
	      }

	      dispatcher.register(document);
	    }
	  }

	  var n = window.navigator;
	  var s;
	  var r;
	  var h;
	  function assertActive(id) {
	    if (!dispatcher.pointermap.has(id)) {
	      var error = new Error('NotFoundError');
	      error.name = 'NotFoundError';
	      throw error;
	    }
	  }
	  function assertConnected(elem) {
	    var parent = elem.parentNode;
	    while (parent && parent !== elem.ownerDocument) {
	      parent = parent.parentNode;
	    }
	    if (!parent) {
	      var error = new Error('InvalidStateError');
	      error.name = 'InvalidStateError';
	      throw error;
	    }
	  }
	  function inActiveButtonState(id) {
	    var p = dispatcher.pointermap.get(id);
	    return p.buttons !== 0;
	  }
	  if (n.msPointerEnabled) {
	    s = function(pointerId) {
	      assertActive(pointerId);
	      assertConnected(this);
	      if (inActiveButtonState(pointerId)) {
	        dispatcher.setCapture(pointerId, this, true);
	        this.msSetPointerCapture(pointerId);
	      }
	    };
	    r = function(pointerId) {
	      assertActive(pointerId);
	      dispatcher.releaseCapture(pointerId, true);
	      this.msReleasePointerCapture(pointerId);
	    };
	  } else {
	    s = function setPointerCapture(pointerId) {
	      assertActive(pointerId);
	      assertConnected(this);
	      if (inActiveButtonState(pointerId)) {
	        dispatcher.setCapture(pointerId, this);
	      }
	    };
	    r = function releasePointerCapture(pointerId) {
	      assertActive(pointerId);
	      dispatcher.releaseCapture(pointerId);
	    };
	  }
	  h = function hasPointerCapture(pointerId) {
	    return !!dispatcher.captureInfo[pointerId];
	  };

	  function applyPolyfill$1() {
	    if (window.Element && !Element.prototype.setPointerCapture) {
	      Object.defineProperties(Element.prototype, {
	        'setPointerCapture': {
	          value: s
	        },
	        'releasePointerCapture': {
	          value: r
	        },
	        'hasPointerCapture': {
	          value: h
	        }
	      });
	    }
	  }

	  applyAttributeStyles();
	  applyPolyfill();
	  applyPolyfill$1();

	  var pointerevents = {
	    dispatcher: dispatcher,
	    Installer: Installer,
	    PointerEvent: PointerEvent,
	    PointerMap: PointerMap,
	    targetFinding: targeting
	  };

	  return pointerevents;

	}));
	});

	/**
	 * @module ol/MapBrowserEventType
	 */
	/**
	 * Constants for event names.
	 * @enum {string}
	 */
	var MapBrowserEventType = {
	    /**
	     * A true single click with no dragging and no double click. Note that this
	     * event is delayed by 250 ms to ensure that it is not a double click.
	     * @event module:ol/MapBrowserEvent~MapBrowserEvent#singleclick
	     * @api
	     */
	    SINGLECLICK: 'singleclick',
	    /**
	     * A click with no dragging. A double click will fire two of this.
	     * @event module:ol/MapBrowserEvent~MapBrowserEvent#click
	     * @api
	     */
	    CLICK: EventType.CLICK,
	    /**
	     * A true double click, with no dragging.
	     * @event module:ol/MapBrowserEvent~MapBrowserEvent#dblclick
	     * @api
	     */
	    DBLCLICK: EventType.DBLCLICK,
	    /**
	     * Triggered when a pointer is dragged.
	     * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointerdrag
	     * @api
	     */
	    POINTERDRAG: 'pointerdrag',
	    /**
	     * Triggered when a pointer is moved. Note that on touch devices this is
	     * triggered when the map is panned, so is not the same as mousemove.
	     * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointermove
	     * @api
	     */
	    POINTERMOVE: 'pointermove',
	    POINTERDOWN: 'pointerdown',
	    POINTERUP: 'pointerup',
	    POINTEROVER: 'pointerover',
	    POINTEROUT: 'pointerout',
	    POINTERENTER: 'pointerenter',
	    POINTERLEAVE: 'pointerleave',
	    POINTERCANCEL: 'pointercancel'
	};

	var __extends$J = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var MapBrowserPointerEvent = /** @class */ (function (_super) {
	    __extends$J(MapBrowserPointerEvent, _super);
	    /**
	     * @param {string} type Event type.
	     * @param {import("./PluggableMap.js").default} map Map.
	     * @param {PointerEvent} pointerEvent Pointer event.
	     * @param {boolean=} opt_dragging Is the map currently being dragged?
	     * @param {?import("./PluggableMap.js").FrameState=} opt_frameState Frame state.
	     */
	    function MapBrowserPointerEvent(type, map, pointerEvent, opt_dragging, opt_frameState) {
	        var _this = _super.call(this, type, map, pointerEvent, opt_dragging, opt_frameState) || this;
	        /**
	         * @const
	         * @type {PointerEvent}
	         */
	        _this.pointerEvent = pointerEvent;
	        return _this;
	    }
	    return MapBrowserPointerEvent;
	}(MapBrowserEvent));

	/**
	 * @module ol/pointer/EventType
	 */
	/**
	 * Constants for event names.
	 * @enum {string}
	 */
	var PointerEventType = {
	    POINTERMOVE: 'pointermove',
	    POINTERDOWN: 'pointerdown',
	    POINTERUP: 'pointerup',
	    POINTEROVER: 'pointerover',
	    POINTEROUT: 'pointerout',
	    POINTERENTER: 'pointerenter',
	    POINTERLEAVE: 'pointerleave',
	    POINTERCANCEL: 'pointercancel'
	};

	/**
	 * @module ol/MapBrowserEventHandler
	 */
	var __extends$K = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var MapBrowserEventHandler = /** @class */ (function (_super) {
	    __extends$K(MapBrowserEventHandler, _super);
	    /**
	     * @param {import("./PluggableMap.js").default} map The map with the viewport to listen to events on.
	     * @param {number=} moveTolerance The minimal distance the pointer must travel to trigger a move.
	     */
	    function MapBrowserEventHandler(map, moveTolerance) {
	        var _this = _super.call(this, map) || this;
	        /**
	         * This is the element that we will listen to the real events on.
	         * @type {import("./PluggableMap.js").default}
	         * @private
	         */
	        _this.map_ = map;
	        /**
	         * @type {any}
	         * @private
	         */
	        _this.clickTimeoutId_;
	        /**
	         * @type {boolean}
	         * @private
	         */
	        _this.dragging_ = false;
	        /**
	         * @type {!Array<import("./events.js").EventsKey>}
	         * @private
	         */
	        _this.dragListenerKeys_ = [];
	        /**
	         * @type {number}
	         * @private
	         */
	        _this.moveTolerance_ = moveTolerance ?
	            moveTolerance * DEVICE_PIXEL_RATIO : DEVICE_PIXEL_RATIO;
	        /**
	         * The most recent "down" type event (or null if none have occurred).
	         * Set on pointerdown.
	         * @type {PointerEvent}
	         * @private
	         */
	        _this.down_ = null;
	        var element = _this.map_.getViewport();
	        /**
	         * @type {number}
	         * @private
	         */
	        _this.activePointers_ = 0;
	        /**
	         * @type {!Object<number, boolean>}
	         * @private
	         */
	        _this.trackedTouches_ = {};
	        _this.element_ = element;
	        /**
	         * @type {?import("./events.js").EventsKey}
	         * @private
	         */
	        _this.pointerdownListenerKey_ = listen$1(element, PointerEventType.POINTERDOWN, _this.handlePointerDown_, _this);
	        /**
	         * @type {?import("./events.js").EventsKey}
	         * @private
	         */
	        _this.relayedListenerKey_ = listen$1(element, PointerEventType.POINTERMOVE, _this.relayEvent_, _this);
	        return _this;
	    }
	    /**
	     * @param {PointerEvent} pointerEvent Pointer
	     * event.
	     * @private
	     */
	    MapBrowserEventHandler.prototype.emulateClick_ = function (pointerEvent) {
	        var newEvent = new MapBrowserPointerEvent(MapBrowserEventType.CLICK, this.map_, pointerEvent);
	        this.dispatchEvent(newEvent);
	        if (this.clickTimeoutId_ !== undefined) {
	            // double-click
	            clearTimeout(this.clickTimeoutId_);
	            this.clickTimeoutId_ = undefined;
	            newEvent = new MapBrowserPointerEvent(MapBrowserEventType.DBLCLICK, this.map_, pointerEvent);
	            this.dispatchEvent(newEvent);
	        }
	        else {
	            // click
	            this.clickTimeoutId_ = setTimeout(function () {
	                this.clickTimeoutId_ = undefined;
	                var newEvent = new MapBrowserPointerEvent(MapBrowserEventType.SINGLECLICK, this.map_, pointerEvent);
	                this.dispatchEvent(newEvent);
	            }.bind(this), 250);
	        }
	    };
	    /**
	     * Keeps track on how many pointers are currently active.
	     *
	     * @param {PointerEvent} pointerEvent Pointer
	     * event.
	     * @private
	     */
	    MapBrowserEventHandler.prototype.updateActivePointers_ = function (pointerEvent) {
	        var event = pointerEvent;
	        if (event.type == MapBrowserEventType.POINTERUP ||
	            event.type == MapBrowserEventType.POINTERCANCEL) {
	            delete this.trackedTouches_[event.pointerId];
	        }
	        else if (event.type == MapBrowserEventType.POINTERDOWN) {
	            this.trackedTouches_[event.pointerId] = true;
	        }
	        this.activePointers_ = Object.keys(this.trackedTouches_).length;
	    };
	    /**
	     * @param {PointerEvent} pointerEvent Pointer
	     * event.
	     * @private
	     */
	    MapBrowserEventHandler.prototype.handlePointerUp_ = function (pointerEvent) {
	        this.updateActivePointers_(pointerEvent);
	        var newEvent = new MapBrowserPointerEvent(MapBrowserEventType.POINTERUP, this.map_, pointerEvent);
	        this.dispatchEvent(newEvent);
	        // We emulate click events on left mouse button click, touch contact, and pen
	        // contact. isMouseActionButton returns true in these cases (evt.button is set
	        // to 0).
	        // See http://www.w3.org/TR/pointerevents/#button-states
	        // We only fire click, singleclick, and doubleclick if nobody has called
	        // event.stopPropagation() or event.preventDefault().
	        if (!newEvent.propagationStopped && !this.dragging_ && this.isMouseActionButton_(pointerEvent)) {
	            this.emulateClick_(this.down_);
	        }
	        if (this.activePointers_ === 0) {
	            this.dragListenerKeys_.forEach(unlistenByKey);
	            this.dragListenerKeys_.length = 0;
	            this.dragging_ = false;
	            this.down_ = null;
	        }
	    };
	    /**
	     * @param {PointerEvent} pointerEvent Pointer
	     * event.
	     * @return {boolean} If the left mouse button was pressed.
	     * @private
	     */
	    MapBrowserEventHandler.prototype.isMouseActionButton_ = function (pointerEvent) {
	        return pointerEvent.button === 0;
	    };
	    /**
	     * @param {PointerEvent} pointerEvent Pointer
	     * event.
	     * @private
	     */
	    MapBrowserEventHandler.prototype.handlePointerDown_ = function (pointerEvent) {
	        this.updateActivePointers_(pointerEvent);
	        var newEvent = new MapBrowserPointerEvent(MapBrowserEventType.POINTERDOWN, this.map_, pointerEvent);
	        this.dispatchEvent(newEvent);
	        this.down_ = pointerEvent;
	        if (this.dragListenerKeys_.length === 0) {
	            this.dragListenerKeys_.push(listen$1(document, MapBrowserEventType.POINTERMOVE, this.handlePointerMove_, this), listen$1(document, MapBrowserEventType.POINTERUP, this.handlePointerUp_, this), 
	            /* Note that the listener for `pointercancel is set up on
	             * `pointerEventHandler_` and not `documentPointerEventHandler_` like
	             * the `pointerup` and `pointermove` listeners.
	             *
	             * The reason for this is the following: `TouchSource.vacuumTouches_()`
	             * issues `pointercancel` events, when there was no `touchend` for a
	             * `touchstart`. Now, let's say a first `touchstart` is registered on
	             * `pointerEventHandler_`. The `documentPointerEventHandler_` is set up.
	             * But `documentPointerEventHandler_` doesn't know about the first
	             * `touchstart`. If there is no `touchend` for the `touchstart`, we can
	             * only receive a `touchcancel` from `pointerEventHandler_`, because it is
	             * only registered there.
	             */
	            listen$1(this.element_, MapBrowserEventType.POINTERCANCEL, this.handlePointerUp_, this));
	        }
	    };
	    /**
	     * @param {PointerEvent} pointerEvent Pointer
	     * event.
	     * @private
	     */
	    MapBrowserEventHandler.prototype.handlePointerMove_ = function (pointerEvent) {
	        // Between pointerdown and pointerup, pointermove events are triggered.
	        // To avoid a 'false' touchmove event to be dispatched, we test if the pointer
	        // moved a significant distance.
	        if (this.isMoving_(pointerEvent)) {
	            this.dragging_ = true;
	            var newEvent = new MapBrowserPointerEvent(MapBrowserEventType.POINTERDRAG, this.map_, pointerEvent, this.dragging_);
	            this.dispatchEvent(newEvent);
	        }
	    };
	    /**
	     * Wrap and relay a pointer event.  Note that this requires that the type
	     * string for the MapBrowserPointerEvent matches the PointerEvent type.
	     * @param {PointerEvent} pointerEvent Pointer
	     * event.
	     * @private
	     */
	    MapBrowserEventHandler.prototype.relayEvent_ = function (pointerEvent) {
	        var dragging = !!(this.down_ && this.isMoving_(pointerEvent));
	        this.dispatchEvent(new MapBrowserPointerEvent(pointerEvent.type, this.map_, pointerEvent, dragging));
	    };
	    /**
	     * @param {PointerEvent} pointerEvent Pointer
	     * event.
	     * @return {boolean} Is moving.
	     * @private
	     */
	    MapBrowserEventHandler.prototype.isMoving_ = function (pointerEvent) {
	        return this.dragging_ ||
	            Math.abs(pointerEvent.clientX - this.down_.clientX) > this.moveTolerance_ ||
	            Math.abs(pointerEvent.clientY - this.down_.clientY) > this.moveTolerance_;
	    };
	    /**
	     * @inheritDoc
	     */
	    MapBrowserEventHandler.prototype.disposeInternal = function () {
	        if (this.relayedListenerKey_) {
	            unlistenByKey(this.relayedListenerKey_);
	            this.relayedListenerKey_ = null;
	        }
	        if (this.pointerdownListenerKey_) {
	            unlistenByKey(this.pointerdownListenerKey_);
	            this.pointerdownListenerKey_ = null;
	        }
	        this.dragListenerKeys_.forEach(unlistenByKey);
	        this.dragListenerKeys_.length = 0;
	        this.element_ = null;
	        _super.prototype.disposeInternal.call(this);
	    };
	    return MapBrowserEventHandler;
	}(Target));

	/**
	 * @module ol/MapEventType
	 */
	/**
	 * @enum {string}
	 */
	var MapEventType = {
	    /**
	     * Triggered after a map frame is rendered.
	     * @event module:ol/MapEvent~MapEvent#postrender
	     * @api
	     */
	    POSTRENDER: 'postrender',
	    /**
	     * Triggered when the map starts moving.
	     * @event module:ol/MapEvent~MapEvent#movestart
	     * @api
	     */
	    MOVESTART: 'movestart',
	    /**
	     * Triggered after the map is moved.
	     * @event module:ol/MapEvent~MapEvent#moveend
	     * @api
	     */
	    MOVEEND: 'moveend'
	};

	/**
	 * @module ol/MapProperty
	 */
	/**
	 * @enum {string}
	 */
	var MapProperty = {
	    LAYERGROUP: 'layergroup',
	    SIZE: 'size',
	    TARGET: 'target',
	    VIEW: 'view'
	};

	/**
	 * @module ol/structs/PriorityQueue
	 */
	/**
	 * @type {number}
	 */
	var DROP = Infinity;
	/**
	 * @classdesc
	 * Priority queue.
	 *
	 * The implementation is inspired from the Closure Library's Heap class and
	 * Python's heapq module.
	 *
	 * See http://closure-library.googlecode.com/svn/docs/closure_goog_structs_heap.js.source.html
	 * and http://hg.python.org/cpython/file/2.7/Lib/heapq.py.
	 *
	 * @template T
	 */
	var PriorityQueue = /** @class */ (function () {
	    /**
	     * @param {function(T): number} priorityFunction Priority function.
	     * @param {function(T): string} keyFunction Key function.
	     */
	    function PriorityQueue(priorityFunction, keyFunction) {
	        /**
	         * @type {function(T): number}
	         * @private
	         */
	        this.priorityFunction_ = priorityFunction;
	        /**
	         * @type {function(T): string}
	         * @private
	         */
	        this.keyFunction_ = keyFunction;
	        /**
	         * @type {Array<T>}
	         * @private
	         */
	        this.elements_ = [];
	        /**
	         * @type {Array<number>}
	         * @private
	         */
	        this.priorities_ = [];
	        /**
	         * @type {!Object<string, boolean>}
	         * @private
	         */
	        this.queuedElements_ = {};
	    }
	    /**
	     * FIXME empty description for jsdoc
	     */
	    PriorityQueue.prototype.clear = function () {
	        this.elements_.length = 0;
	        this.priorities_.length = 0;
	        clear$1(this.queuedElements_);
	    };
	    /**
	     * Remove and return the highest-priority element. O(log N).
	     * @return {T} Element.
	     */
	    PriorityQueue.prototype.dequeue = function () {
	        var elements = this.elements_;
	        var priorities = this.priorities_;
	        var element = elements[0];
	        if (elements.length == 1) {
	            elements.length = 0;
	            priorities.length = 0;
	        }
	        else {
	            elements[0] = elements.pop();
	            priorities[0] = priorities.pop();
	            this.siftUp_(0);
	        }
	        var elementKey = this.keyFunction_(element);
	        delete this.queuedElements_[elementKey];
	        return element;
	    };
	    /**
	     * Enqueue an element. O(log N).
	     * @param {T} element Element.
	     * @return {boolean} The element was added to the queue.
	     */
	    PriorityQueue.prototype.enqueue = function (element) {
	        assert(!(this.keyFunction_(element) in this.queuedElements_), 31); // Tried to enqueue an `element` that was already added to the queue
	        var priority = this.priorityFunction_(element);
	        if (priority != DROP) {
	            this.elements_.push(element);
	            this.priorities_.push(priority);
	            this.queuedElements_[this.keyFunction_(element)] = true;
	            this.siftDown_(0, this.elements_.length - 1);
	            return true;
	        }
	        return false;
	    };
	    /**
	     * @return {number} Count.
	     */
	    PriorityQueue.prototype.getCount = function () {
	        return this.elements_.length;
	    };
	    /**
	     * Gets the index of the left child of the node at the given index.
	     * @param {number} index The index of the node to get the left child for.
	     * @return {number} The index of the left child.
	     * @private
	     */
	    PriorityQueue.prototype.getLeftChildIndex_ = function (index) {
	        return index * 2 + 1;
	    };
	    /**
	     * Gets the index of the right child of the node at the given index.
	     * @param {number} index The index of the node to get the right child for.
	     * @return {number} The index of the right child.
	     * @private
	     */
	    PriorityQueue.prototype.getRightChildIndex_ = function (index) {
	        return index * 2 + 2;
	    };
	    /**
	     * Gets the index of the parent of the node at the given index.
	     * @param {number} index The index of the node to get the parent for.
	     * @return {number} The index of the parent.
	     * @private
	     */
	    PriorityQueue.prototype.getParentIndex_ = function (index) {
	        return (index - 1) >> 1;
	    };
	    /**
	     * Make this a heap. O(N).
	     * @private
	     */
	    PriorityQueue.prototype.heapify_ = function () {
	        var i;
	        for (i = (this.elements_.length >> 1) - 1; i >= 0; i--) {
	            this.siftUp_(i);
	        }
	    };
	    /**
	     * @return {boolean} Is empty.
	     */
	    PriorityQueue.prototype.isEmpty = function () {
	        return this.elements_.length === 0;
	    };
	    /**
	     * @param {string} key Key.
	     * @return {boolean} Is key queued.
	     */
	    PriorityQueue.prototype.isKeyQueued = function (key) {
	        return key in this.queuedElements_;
	    };
	    /**
	     * @param {T} element Element.
	     * @return {boolean} Is queued.
	     */
	    PriorityQueue.prototype.isQueued = function (element) {
	        return this.isKeyQueued(this.keyFunction_(element));
	    };
	    /**
	     * @param {number} index The index of the node to move down.
	     * @private
	     */
	    PriorityQueue.prototype.siftUp_ = function (index) {
	        var elements = this.elements_;
	        var priorities = this.priorities_;
	        var count = elements.length;
	        var element = elements[index];
	        var priority = priorities[index];
	        var startIndex = index;
	        while (index < (count >> 1)) {
	            var lIndex = this.getLeftChildIndex_(index);
	            var rIndex = this.getRightChildIndex_(index);
	            var smallerChildIndex = rIndex < count &&
	                priorities[rIndex] < priorities[lIndex] ?
	                rIndex : lIndex;
	            elements[index] = elements[smallerChildIndex];
	            priorities[index] = priorities[smallerChildIndex];
	            index = smallerChildIndex;
	        }
	        elements[index] = element;
	        priorities[index] = priority;
	        this.siftDown_(startIndex, index);
	    };
	    /**
	     * @param {number} startIndex The index of the root.
	     * @param {number} index The index of the node to move up.
	     * @private
	     */
	    PriorityQueue.prototype.siftDown_ = function (startIndex, index) {
	        var elements = this.elements_;
	        var priorities = this.priorities_;
	        var element = elements[index];
	        var priority = priorities[index];
	        while (index > startIndex) {
	            var parentIndex = this.getParentIndex_(index);
	            if (priorities[parentIndex] > priority) {
	                elements[index] = elements[parentIndex];
	                priorities[index] = priorities[parentIndex];
	                index = parentIndex;
	            }
	            else {
	                break;
	            }
	        }
	        elements[index] = element;
	        priorities[index] = priority;
	    };
	    /**
	     * FIXME empty description for jsdoc
	     */
	    PriorityQueue.prototype.reprioritize = function () {
	        var priorityFunction = this.priorityFunction_;
	        var elements = this.elements_;
	        var priorities = this.priorities_;
	        var index = 0;
	        var n = elements.length;
	        var element, i, priority;
	        for (i = 0; i < n; ++i) {
	            element = elements[i];
	            priority = priorityFunction(element);
	            if (priority == DROP) {
	                delete this.queuedElements_[this.keyFunction_(element)];
	            }
	            else {
	                priorities[index] = priority;
	                elements[index++] = element;
	            }
	        }
	        elements.length = index;
	        priorities.length = index;
	        this.heapify_();
	    };
	    return PriorityQueue;
	}());

	var __extends$L = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @typedef {function(import("./Tile.js").default, string, import("./coordinate.js").Coordinate, number): number} PriorityFunction
	 */
	var TileQueue = /** @class */ (function (_super) {
	    __extends$L(TileQueue, _super);
	    /**
	     * @param {PriorityFunction} tilePriorityFunction Tile priority function.
	     * @param {function(): ?} tileChangeCallback Function called on each tile change event.
	     */
	    function TileQueue(tilePriorityFunction, tileChangeCallback) {
	        var _this = _super.call(this, 
	        /**
	         * @param {Array} element Element.
	         * @return {number} Priority.
	         */
	        function (element) {
	            return tilePriorityFunction.apply(null, element);
	        }, 
	        /**
	         * @param {Array} element Element.
	         * @return {string} Key.
	         */
	        function (element) {
	            return ( /** @type {import("./Tile.js").default} */(element[0]).getKey());
	        }) || this;
	        /** @private */
	        _this.boundHandleTileChange_ = _this.handleTileChange.bind(_this);
	        /**
	         * @private
	         * @type {function(): ?}
	         */
	        _this.tileChangeCallback_ = tileChangeCallback;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.tilesLoading_ = 0;
	        /**
	         * @private
	         * @type {!Object<string,boolean>}
	         */
	        _this.tilesLoadingKeys_ = {};
	        return _this;
	    }
	    /**
	     * @inheritDoc
	     */
	    TileQueue.prototype.enqueue = function (element) {
	        var added = _super.prototype.enqueue.call(this, element);
	        if (added) {
	            var tile = element[0];
	            tile.addEventListener(EventType.CHANGE, this.boundHandleTileChange_);
	        }
	        return added;
	    };
	    /**
	     * @return {number} Number of tiles loading.
	     */
	    TileQueue.prototype.getTilesLoading = function () {
	        return this.tilesLoading_;
	    };
	    /**
	     * @param {import("./events/Event.js").default} event Event.
	     * @protected
	     */
	    TileQueue.prototype.handleTileChange = function (event) {
	        var tile = /** @type {import("./Tile.js").default} */ (event.target);
	        var state = tile.getState();
	        if (tile.hifi && state === TileState.LOADED || state === TileState.ERROR ||
	            state === TileState.EMPTY || state === TileState.ABORT) {
	            tile.removeEventListener(EventType.CHANGE, this.boundHandleTileChange_);
	            var tileKey = tile.getKey();
	            if (tileKey in this.tilesLoadingKeys_) {
	                delete this.tilesLoadingKeys_[tileKey];
	                --this.tilesLoading_;
	            }
	            this.tileChangeCallback_();
	        }
	    };
	    /**
	     * @param {number} maxTotalLoading Maximum number tiles to load simultaneously.
	     * @param {number} maxNewLoads Maximum number of new tiles to load.
	     */
	    TileQueue.prototype.loadMoreTiles = function (maxTotalLoading, maxNewLoads) {
	        var newLoads = 0;
	        var abortedTiles = false;
	        var state, tile, tileKey;
	        while (this.tilesLoading_ < maxTotalLoading && newLoads < maxNewLoads &&
	            this.getCount() > 0) {
	            tile = /** @type {import("./Tile.js").default} */ (this.dequeue()[0]);
	            tileKey = tile.getKey();
	            state = tile.getState();
	            if (state === TileState.ABORT) {
	                abortedTiles = true;
	            }
	            else if (state === TileState.IDLE && !(tileKey in this.tilesLoadingKeys_)) {
	                this.tilesLoadingKeys_[tileKey] = true;
	                ++this.tilesLoading_;
	                ++newLoads;
	                tile.load();
	            }
	        }
	        if (newLoads === 0 && abortedTiles) {
	            // Do not stop the render loop when all wanted tiles were aborted due to
	            // a small, saturated tile cache.
	            this.tileChangeCallback_();
	        }
	    };
	    return TileQueue;
	}(PriorityQueue));

	/**
	 * @module ol/tilegrid/common
	 */
	/**
	 * Default maximum zoom for default tile grids.
	 * @type {number}
	 */
	var DEFAULT_MAX_ZOOM = 42;
	/**
	 * Default tile size.
	 * @type {number}
	 */
	var DEFAULT_TILE_SIZE = 256;

	/**
	 * @module ol/centerconstraint
	 */
	/**
	 * @typedef {function((import("./coordinate.js").Coordinate|undefined), number, import("./size.js").Size, boolean=): (import("./coordinate.js").Coordinate|undefined)} Type
	 */
	/**
	 * @param {import("./extent.js").Extent} extent Extent.
	 * @param {boolean} onlyCenter If true, the constraint will only apply to the view center.
	 * @param {boolean} smooth If true, the view will be able to go slightly out of the given extent
	 * (only during interaction and animation).
	 * @return {Type} The constraint.
	 */
	function createExtent(extent, onlyCenter, smooth) {
	    return (
	    /**
	     * @param {import("./coordinate.js").Coordinate|undefined} center Center.
	     * @param {number} resolution Resolution.
	     * @param {import("./size.js").Size} size Viewport size; unused if `onlyCenter` was specified.
	     * @param {boolean=} opt_isMoving True if an interaction or animation is in progress.
	     * @return {import("./coordinate.js").Coordinate|undefined} Center.
	     */
	    function (center, resolution, size, opt_isMoving) {
	        if (center) {
	            var viewWidth = onlyCenter ? 0 : size[0] * resolution;
	            var viewHeight = onlyCenter ? 0 : size[1] * resolution;
	            var minX = extent[0] + viewWidth / 2;
	            var maxX = extent[2] - viewWidth / 2;
	            var minY = extent[1] + viewHeight / 2;
	            var maxY = extent[3] - viewHeight / 2;
	            // note: when zooming out of bounds, min and max values for x and y may
	            // end up inverted (min > max); this has to be accounted for
	            if (minX > maxX) {
	                minX = (maxX + minX) / 2;
	                maxX = minX;
	            }
	            if (minY > maxY) {
	                minY = (maxY + minY) / 2;
	                maxY = minY;
	            }
	            var x = clamp(center[0], minX, maxX);
	            var y = clamp(center[1], minY, maxY);
	            var ratio = 30 * resolution;
	            // during an interaction, allow some overscroll
	            if (opt_isMoving && smooth) {
	                x += -ratio * Math.log(1 + Math.max(0, minX - center[0]) / ratio) +
	                    ratio * Math.log(1 + Math.max(0, center[0] - maxX) / ratio);
	                y += -ratio * Math.log(1 + Math.max(0, minY - center[1]) / ratio) +
	                    ratio * Math.log(1 + Math.max(0, center[1] - maxY) / ratio);
	            }
	            return [x, y];
	        }
	        else {
	            return undefined;
	        }
	    });
	}
	/**
	 * @param {import("./coordinate.js").Coordinate=} center Center.
	 * @return {import("./coordinate.js").Coordinate|undefined} Center.
	 */
	function none(center) {
	    return center;
	}

	/**
	 * @module ol/resolutionconstraint
	 */
	/**
	 * @typedef {function((number|undefined), number, import("./size.js").Size, boolean=): (number|undefined)} Type
	 */
	/**
	 * Returns a modified resolution taking into acocunt the viewport size and maximum
	 * allowed extent.
	 * @param {number} resolution Resolution
	 * @param {import("./extent.js").Extent=} maxExtent Maximum allowed extent.
	 * @param {import("./size.js").Size} viewportSize Viewport size.
	 * @return {number} Capped resolution.
	 */
	function getViewportClampedResolution(resolution, maxExtent, viewportSize) {
	    var xResolution = getWidth(maxExtent) / viewportSize[0];
	    var yResolution = getHeight(maxExtent) / viewportSize[1];
	    return Math.min(resolution, Math.min(xResolution, yResolution));
	}
	/**
	 * Returns a modified resolution to be between maxResolution and minResolution while
	 * still allowing the value to be slightly out of bounds.
	 * Note: the computation is based on the logarithm function (ln):
	 *  - at 1, ln(x) is 0
	 *  - above 1, ln(x) keeps increasing but at a much slower pace than x
	 * The final result is clamped to prevent getting too far away from bounds.
	 * @param {number} resolution Resolution.
	 * @param {number} maxResolution Max resolution.
	 * @param {number} minResolution Min resolution.
	 * @return {number} Smoothed resolution.
	 */
	function getSmoothClampedResolution(resolution, maxResolution, minResolution) {
	    var result = Math.min(resolution, maxResolution);
	    var ratio = 50;
	    result *= Math.log(1 + ratio * Math.max(0, resolution / maxResolution - 1)) / ratio + 1;
	    if (minResolution) {
	        result = Math.max(result, minResolution);
	        result /= Math.log(1 + ratio * Math.max(0, minResolution / resolution - 1)) / ratio + 1;
	    }
	    return clamp(result, minResolution / 2, maxResolution * 2);
	}
	/**
	 * @param {Array<number>} resolutions Resolutions.
	 * @param {boolean=} opt_smooth If true, the view will be able to slightly exceed resolution limits. Default: true.
	 * @param {import("./extent.js").Extent=} opt_maxExtent Maximum allowed extent.
	 * @return {Type} Zoom function.
	 */
	function createSnapToResolutions(resolutions, opt_smooth, opt_maxExtent) {
	    return (
	    /**
	     * @param {number|undefined} resolution Resolution.
	     * @param {number} direction Direction.
	     * @param {import("./size.js").Size} size Viewport size.
	     * @param {boolean=} opt_isMoving True if an interaction or animation is in progress.
	     * @return {number|undefined} Resolution.
	     */
	    function (resolution, direction, size, opt_isMoving) {
	        if (resolution !== undefined) {
	            var maxResolution = resolutions[0];
	            var minResolution = resolutions[resolutions.length - 1];
	            var cappedMaxRes = opt_maxExtent ?
	                getViewportClampedResolution(maxResolution, opt_maxExtent, size) :
	                maxResolution;
	            // during interacting or animating, allow intermediary values
	            if (opt_isMoving) {
	                var smooth = opt_smooth !== undefined ? opt_smooth : true;
	                if (!smooth) {
	                    return clamp(resolution, minResolution, cappedMaxRes);
	                }
	                return getSmoothClampedResolution(resolution, cappedMaxRes, minResolution);
	            }
	            var capped = Math.min(cappedMaxRes, resolution);
	            var z = Math.floor(linearFindNearest(resolutions, capped, direction));
	            if (resolutions[z] > cappedMaxRes && z < resolutions.length - 1) {
	                return resolutions[z + 1];
	            }
	            return resolutions[z];
	        }
	        else {
	            return undefined;
	        }
	    });
	}
	/**
	 * @param {number} power Power.
	 * @param {number} maxResolution Maximum resolution.
	 * @param {number=} opt_minResolution Minimum resolution.
	 * @param {boolean=} opt_smooth If true, the view will be able to slightly exceed resolution limits. Default: true.
	 * @param {import("./extent.js").Extent=} opt_maxExtent Maximum allowed extent.
	 * @return {Type} Zoom function.
	 */
	function createSnapToPower(power, maxResolution, opt_minResolution, opt_smooth, opt_maxExtent) {
	    return (
	    /**
	     * @param {number|undefined} resolution Resolution.
	     * @param {number} direction Direction.
	     * @param {import("./size.js").Size} size Viewport size.
	     * @param {boolean=} opt_isMoving True if an interaction or animation is in progress.
	     * @return {number|undefined} Resolution.
	     */
	    function (resolution, direction, size, opt_isMoving) {
	        if (resolution !== undefined) {
	            var cappedMaxRes = opt_maxExtent ?
	                getViewportClampedResolution(maxResolution, opt_maxExtent, size) :
	                maxResolution;
	            var minResolution = opt_minResolution !== undefined ? opt_minResolution : 0;
	            // during interacting or animating, allow intermediary values
	            if (opt_isMoving) {
	                var smooth = opt_smooth !== undefined ? opt_smooth : true;
	                if (!smooth) {
	                    return clamp(resolution, minResolution, cappedMaxRes);
	                }
	                return getSmoothClampedResolution(resolution, cappedMaxRes, minResolution);
	            }
	            var tolerance = 1e-9;
	            var minZoomLevel = Math.ceil(Math.log(maxResolution / cappedMaxRes) / Math.log(power) - tolerance);
	            var offset = -direction * (0.5 - tolerance) + 0.5;
	            var capped = Math.min(cappedMaxRes, resolution);
	            var cappedZoomLevel = Math.floor(Math.log(maxResolution / capped) / Math.log(power) + offset);
	            var zoomLevel = Math.max(minZoomLevel, cappedZoomLevel);
	            var newResolution = maxResolution / Math.pow(power, zoomLevel);
	            return clamp(newResolution, minResolution, cappedMaxRes);
	        }
	        else {
	            return undefined;
	        }
	    });
	}
	/**
	 * @param {number} maxResolution Max resolution.
	 * @param {number} minResolution Min resolution.
	 * @param {boolean=} opt_smooth If true, the view will be able to slightly exceed resolution limits. Default: true.
	 * @param {import("./extent.js").Extent=} opt_maxExtent Maximum allowed extent.
	 * @return {Type} Zoom function.
	 */
	function createMinMaxResolution(maxResolution, minResolution, opt_smooth, opt_maxExtent) {
	    return (
	    /**
	     * @param {number|undefined} resolution Resolution.
	     * @param {number} direction Direction.
	     * @param {import("./size.js").Size} size Viewport size.
	     * @param {boolean=} opt_isMoving True if an interaction or animation is in progress.
	     * @return {number|undefined} Resolution.
	     */
	    function (resolution, direction, size, opt_isMoving) {
	        if (resolution !== undefined) {
	            var cappedMaxRes = opt_maxExtent ?
	                getViewportClampedResolution(maxResolution, opt_maxExtent, size) :
	                maxResolution;
	            var smooth = opt_smooth !== undefined ? opt_smooth : true;
	            if (!smooth || !opt_isMoving) {
	                return clamp(resolution, minResolution, cappedMaxRes);
	            }
	            return getSmoothClampedResolution(resolution, cappedMaxRes, minResolution);
	        }
	        else {
	            return undefined;
	        }
	    });
	}

	/**
	 * @module ol/rotationconstraint
	 */
	/**
	 * @typedef {function((number|undefined), boolean=): (number|undefined)} Type
	 */
	/**
	 * @param {number|undefined} rotation Rotation.
	 * @return {number|undefined} Rotation.
	 */
	function disable(rotation) {
	    if (rotation !== undefined) {
	        return 0;
	    }
	    else {
	        return undefined;
	    }
	}
	/**
	 * @param {number|undefined} rotation Rotation.
	 * @return {number|undefined} Rotation.
	 */
	function none$1(rotation) {
	    if (rotation !== undefined) {
	        return rotation;
	    }
	    else {
	        return undefined;
	    }
	}
	/**
	 * @param {number} n N.
	 * @return {Type} Rotation constraint.
	 */
	function createSnapToN(n) {
	    var theta = 2 * Math.PI / n;
	    return (
	    /**
	     * @param {number|undefined} rotation Rotation.
	     * @param {boolean=} opt_isMoving True if an interaction or animation is in progress.
	     * @return {number|undefined} Rotation.
	     */
	    function (rotation, opt_isMoving) {
	        if (opt_isMoving) {
	            return rotation;
	        }
	        if (rotation !== undefined) {
	            rotation = Math.floor(rotation / theta + 0.5) * theta;
	            return rotation;
	        }
	        else {
	            return undefined;
	        }
	    });
	}
	/**
	 * @param {number=} opt_tolerance Tolerance.
	 * @return {Type} Rotation constraint.
	 */
	function createSnapToZero(opt_tolerance) {
	    var tolerance = opt_tolerance || toRadians(5);
	    return (
	    /**
	     * @param {number|undefined} rotation Rotation.
	     * @param {boolean} opt_isMoving True if an interaction or animation is in progress.
	     * @return {number|undefined} Rotation.
	     */
	    function (rotation, opt_isMoving) {
	        if (opt_isMoving) {
	            return rotation;
	        }
	        if (rotation !== undefined) {
	            if (Math.abs(rotation) <= tolerance) {
	                return 0;
	            }
	            else {
	                return rotation;
	            }
	        }
	        else {
	            return undefined;
	        }
	    });
	}

	/**
	 * @module ol/ViewProperty
	 */
	/**
	 * @enum {string}
	 */
	var ViewProperty = {
	    CENTER: 'center',
	    RESOLUTION: 'resolution',
	    ROTATION: 'rotation'
	};

	var __extends$M = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * An animation configuration
	 *
	 * @typedef {Object} Animation
	 * @property {import("./coordinate.js").Coordinate} [sourceCenter]
	 * @property {import("./coordinate.js").Coordinate} [targetCenter]
	 * @property {number} [sourceResolution]
	 * @property {number} [targetResolution]
	 * @property {number} [sourceRotation]
	 * @property {number} [targetRotation]
	 * @property {import("./coordinate.js").Coordinate} [anchor]
	 * @property {number} start
	 * @property {number} duration
	 * @property {boolean} complete
	 * @property {function(number):number} easing
	 * @property {function(boolean)} callback
	 */
	/**
	 * @typedef {Object} Constraints
	 * @property {import("./centerconstraint.js").Type} center
	 * @property {import("./resolutionconstraint.js").Type} resolution
	 * @property {import("./rotationconstraint.js").Type} rotation
	 */
	/**
	 * @typedef {Object} FitOptions
	 * @property {import("./size.js").Size} [size] The size in pixels of the box to fit
	 * the extent into. Default is the current size of the first map in the DOM that
	 * uses this view, or `[100, 100]` if no such map is found.
	 * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in pixels) to be
	 * cleared inside the view. Values in the array are top, right, bottom and left
	 * padding.
	 * @property {boolean} [nearest=false] If the view `constrainResolution` option is `true`,
	 * get the nearest extent instead of the closest that actually fits the view.
	 * @property {number} [minResolution=0] Minimum resolution that we zoom to.
	 * @property {number} [maxZoom] Maximum zoom level that we zoom to. If
	 * `minResolution` is given, this property is ignored.
	 * @property {number} [duration] The duration of the animation in milliseconds.
	 * By default, there is no animation to the target extent.
	 * @property {function(number):number} [easing] The easing function used during
	 * the animation (defaults to {@link module:ol/easing~inAndOut}).
	 * The function will be called for each frame with a number representing a
	 * fraction of the animation's duration.  The function should return a number
	 * between 0 and 1 representing the progress toward the destination state.
	 * @property {function(boolean)} [callback] Function called when the view is in
	 * its final position. The callback will be called with `true` if the animation
	 * series completed on its own or `false` if it was cancelled.
	 */
	/**
	 * @typedef {Object} ViewOptions
	 * @property {import("./coordinate.js").Coordinate} [center] The initial center for
	 * the view. If a user projection is not set, the coordinate system for the center is
	 * specified with the `projection` option. Layer sources will not be fetched if this
	 * is not set, but the center can be set later with {@link #setCenter}.
	 * @property {boolean|number} [constrainRotation=true] Rotation constraint.
	 * `false` means no constraint. `true` means no constraint, but snap to zero
	 * near zero. A number constrains the rotation to that number of values. For
	 * example, `4` will constrain the rotation to 0, 90, 180, and 270 degrees.
	 * @property {boolean} [enableRotation=true] Enable rotation.
	 * If `false`, a rotation constraint that always sets the rotation to zero is
	 * used. The `constrainRotation` option has no effect if `enableRotation` is
	 * `false`.
	 * @property {import("./extent.js").Extent} [extent] The extent that constrains the
	 * view, in other words, nothing outside of this extent can be visible on the map.
	 * @property {boolean} [constrainOnlyCenter=false] If true, the extent
	 * constraint will only apply to the view center and not the whole extent.
	 * @property {boolean} [smoothExtentConstraint=true] If true, the extent
	 * constraint will be applied smoothly, i.e. allow the view to go slightly outside
	 * of the given `extent`.
	 * @property {number} [maxResolution] The maximum resolution used to determine
	 * the resolution constraint. It is used together with `minResolution` (or
	 * `maxZoom`) and `zoomFactor`. If unspecified it is calculated in such a way
	 * that the projection's validity extent fits in a 256x256 px tile. If the
	 * projection is Spherical Mercator (the default) then `maxResolution` defaults
	 * to `40075016.68557849 / 256 = 156543.03392804097`.
	 * @property {number} [minResolution] The minimum resolution used to determine
	 * the resolution constraint.  It is used together with `maxResolution` (or
	 * `minZoom`) and `zoomFactor`.  If unspecified it is calculated assuming 29
	 * zoom levels (with a factor of 2). If the projection is Spherical Mercator
	 * (the default) then `minResolution` defaults to
	 * `40075016.68557849 / 256 / Math.pow(2, 28) = 0.0005831682455839253`.
	 * @property {number} [maxZoom=28] The maximum zoom level used to determine the
	 * resolution constraint. It is used together with `minZoom` (or
	 * `maxResolution`) and `zoomFactor`.  Note that if `minResolution` is also
	 * provided, it is given precedence over `maxZoom`.
	 * @property {number} [minZoom=0] The minimum zoom level used to determine the
	 * resolution constraint. It is used together with `maxZoom` (or
	 * `minResolution`) and `zoomFactor`.  Note that if `maxResolution` is also
	 * provided, it is given precedence over `minZoom`.
	 * @property {boolean} [multiWorld=false] If `false` the view is constrained so
	 * only one world is visible, and you cannot pan off the edge.  If `true` the map
	 * may show multiple worlds at low zoom levels.  Only used if the `projection` is
	 * global.  Note that if `extent` is also provided it is given precedence.
	 * @property {boolean} [constrainResolution=false] If true, the view will always
	 * animate to the closest zoom level after an interaction; false means
	 * intermediary zoom levels are allowed.
	 * @property {boolean} [smoothResolutionConstraint=true] If true, the resolution
	 * min/max values will be applied smoothly, i. e. allow the view to exceed slightly
	 * the given resolution or zoom bounds.
	 * @property {import("./proj.js").ProjectionLike} [projection='EPSG:3857'] The
	 * projection. The default is Spherical Mercator.
	 * @property {number} [resolution] The initial resolution for the view. The
	 * units are `projection` units per pixel (e.g. meters per pixel). An
	 * alternative to setting this is to set `zoom`. Layer sources will not be
	 * fetched if neither this nor `zoom` are defined, but they can be set later
	 * with {@link #setZoom} or {@link #setResolution}.
	 * @property {Array<number>} [resolutions] Resolutions to determine the
	 * resolution constraint. If set the `maxResolution`, `minResolution`,
	 * `minZoom`, `maxZoom`, and `zoomFactor` options are ignored.
	 * @property {number} [rotation=0] The initial rotation for the view in radians
	 * (positive rotation clockwise, 0 means North).
	 * @property {number} [zoom] Only used if `resolution` is not defined. Zoom
	 * level used to calculate the initial resolution for the view.
	 * @property {number} [zoomFactor=2] The zoom factor used to compute the
	 * corresponding resolution.
	 */
	/**
	 * @typedef {Object} AnimationOptions
	 * @property {import("./coordinate.js").Coordinate} [center] The center of the view at the end of
	 * the animation.
	 * @property {number} [zoom] The zoom level of the view at the end of the
	 * animation. This takes precedence over `resolution`.
	 * @property {number} [resolution] The resolution of the view at the end
	 * of the animation.  If `zoom` is also provided, this option will be ignored.
	 * @property {number} [rotation] The rotation of the view at the end of
	 * the animation.
	 * @property {import("./coordinate.js").Coordinate} [anchor] Optional anchor to remain fixed
	 * during a rotation or resolution animation.
	 * @property {number} [duration=1000] The duration of the animation in milliseconds.
	 * @property {function(number):number} [easing] The easing function used
	 * during the animation (defaults to {@link module:ol/easing~inAndOut}).
	 * The function will be called for each frame with a number representing a
	 * fraction of the animation's duration.  The function should return a number
	 * between 0 and 1 representing the progress toward the destination state.
	 */
	/**
	 * @typedef {Object} State
	 * @property {import("./coordinate.js").Coordinate} center
	 * @property {import("./proj/Projection.js").default} projection
	 * @property {number} resolution
	 * @property {number} rotation
	 * @property {number} zoom
	 */
	/**
	 * Default min zoom level for the map view.
	 * @type {number}
	 */
	var DEFAULT_MIN_ZOOM = 0;
	/**
	 * @classdesc
	 * A View object represents a simple 2D view of the map.
	 *
	 * This is the object to act upon to change the center, resolution,
	 * and rotation of the map.
	 *
	 * A View has a `projection`. The projection determines the
	 * coordinate system of the center, and its units determine the units of the
	 * resolution (projection units per pixel). The default projection is
	 * Spherical Mercator (EPSG:3857).
	 *
	 * ### The view states
	 *
	 * A View is determined by three states: `center`, `resolution`,
	 * and `rotation`. Each state has a corresponding getter and setter, e.g.
	 * `getCenter` and `setCenter` for the `center` state.
	 *
	 * The `zoom` state is actually not saved on the view: all computations
	 * internally use the `resolution` state. Still, the `setZoom` and `getZoom`
	 * methods are available, as well as `getResolutionForZoom` and
	 * `getZoomForResolution` to switch from one system to the other.
	 *
	 * ### The constraints
	 *
	 * `setCenter`, `setResolution` and `setRotation` can be used to change the
	 * states of the view, but any constraint defined in the constructor will
	 * be applied along the way.
	 *
	 * A View object can have a *resolution constraint*, a *rotation constraint*
	 * and a *center constraint*.
	 *
	 * The *resolution constraint* typically restricts min/max values and
	 * snaps to specific resolutions. It is determined by the following
	 * options: `resolutions`, `maxResolution`, `maxZoom` and `zoomFactor`.
	 * If `resolutions` is set, the other three options are ignored. See
	 * documentation for each option for more information. By default, the view
	 * only has a min/max restriction and allow intermediary zoom levels when
	 * pinch-zooming for example.
	 *
	 * The *rotation constraint* snaps to specific angles. It is determined
	 * by the following options: `enableRotation` and `constrainRotation`.
	 * By default rotation is allowed and its value is snapped to zero when approaching the
	 * horizontal.
	 *
	 * The *center constraint* is determined by the `extent` option. By
	 * default the view center is not constrained at all.
	 *
	 * ### Changing the view state
	 *
	 * It is important to note that `setZoom`, `setResolution`, `setCenter` and
	 * `setRotation` are subject to the above mentioned constraints. As such, it
	 * may sometimes not be possible to know in advance the resulting state of the
	 * View. For example, calling `setResolution(10)` does not guarantee that
	 * `getResolution()` will return `10`.
	 *
	 * A consequence of this is that, when applying a delta on the view state, one
	 * should use `adjustCenter`, `adjustRotation`, `adjustZoom` and `adjustResolution`
	 * rather than the corresponding setters. This will let view do its internal
	 * computations. Besides, the `adjust*` methods also take an `opt_anchor`
	 * argument which allows specifying an origin for the transformation.
	 *
	 * ### Interacting with the view
	 *
	 * View constraints are usually only applied when the view is *at rest*, meaning that
	 * no interaction or animation is ongoing. As such, if the user puts the view in a
	 * state that is not equivalent to a constrained one (e.g. rotating the view when
	 * the snap angle is 0), an animation will be triggered at the interaction end to
	 * put back the view to a stable state;
	 *
	 * @api
	 */
	var View = /** @class */ (function (_super) {
	    __extends$M(View, _super);
	    /**
	     * @param {ViewOptions=} opt_options View options.
	     */
	    function View(opt_options) {
	        var _this = _super.call(this) || this;
	        var options = assign$1({}, opt_options);
	        /**
	         * @private
	         * @type {Array<number>}
	         */
	        _this.hints_ = [0, 0];
	        /**
	         * @private
	         * @type {Array<Array<Animation>>}
	         */
	        _this.animations_ = [];
	        /**
	         * @private
	         * @type {number|undefined}
	         */
	        _this.updateAnimationKey_;
	        /**
	         * @private
	         * @const
	         * @type {import("./proj/Projection.js").default}
	         */
	        _this.projection_ = createProjection(options.projection, 'EPSG:3857');
	        /**
	         * @private
	         * @type {import("./coordinate.js").Coordinate|undefined}
	         */
	        _this.targetCenter_ = null;
	        /**
	         * @private
	         * @type {number|undefined}
	         */
	        _this.targetResolution_;
	        /**
	         * @private
	         * @type {number|undefined}
	         */
	        _this.targetRotation_;
	        if (options.center) {
	            options.center = fromUserCoordinate(options.center, _this.projection_);
	        }
	        if (options.extent) {
	            options.extent = fromUserExtent(options.extent, _this.projection_);
	        }
	        _this.applyOptions_(options);
	        return _this;
	    }
	    /**
	     * Set up the view with the given options.
	     * @param {ViewOptions} options View options.
	     */
	    View.prototype.applyOptions_ = function (options) {
	        /**
	         * @type {Object<string, *>}
	         */
	        var properties = {};
	        var resolutionConstraintInfo = createResolutionConstraint(options);
	        /**
	         * @private
	         * @type {number}
	         */
	        this.maxResolution_ = resolutionConstraintInfo.maxResolution;
	        /**
	         * @private
	         * @type {number}
	         */
	        this.minResolution_ = resolutionConstraintInfo.minResolution;
	        /**
	         * @private
	         * @type {number}
	         */
	        this.zoomFactor_ = resolutionConstraintInfo.zoomFactor;
	        /**
	         * @private
	         * @type {Array<number>|undefined}
	         */
	        this.resolutions_ = options.resolutions;
	        /**
	         * @private
	         * @type {number}
	         */
	        this.minZoom_ = resolutionConstraintInfo.minZoom;
	        var centerConstraint = createCenterConstraint(options);
	        var resolutionConstraint = resolutionConstraintInfo.constraint;
	        var rotationConstraint = createRotationConstraint(options);
	        /**
	         * @private
	         * @type {Constraints}
	         */
	        this.constraints_ = {
	            center: centerConstraint,
	            resolution: resolutionConstraint,
	            rotation: rotationConstraint
	        };
	        this.setRotation(options.rotation !== undefined ? options.rotation : 0);
	        this.setCenterInternal(options.center !== undefined ? options.center : null);
	        if (options.resolution !== undefined) {
	            this.setResolution(options.resolution);
	        }
	        else if (options.zoom !== undefined) {
	            this.setZoom(options.zoom);
	        }
	        this.resolveConstraints(0);
	        this.setProperties(properties);
	        /**
	         * @private
	         * @type {ViewOptions}
	         */
	        this.options_ = options;
	    };
	    /**
	     * Get an updated version of the view options used to construct the view.  The
	     * current resolution (or zoom), center, and rotation are applied to any stored
	     * options.  The provided options can be used to apply new min/max zoom or
	     * resolution limits.
	     * @param {ViewOptions} newOptions New options to be applied.
	     * @return {ViewOptions} New options updated with the current view state.
	     */
	    View.prototype.getUpdatedOptions_ = function (newOptions) {
	        var options = assign$1({}, this.options_);
	        // preserve resolution (or zoom)
	        if (options.resolution !== undefined) {
	            options.resolution = this.getResolution();
	        }
	        else {
	            options.zoom = this.getZoom();
	        }
	        // preserve center
	        options.center = this.getCenterInternal();
	        // preserve rotation
	        options.rotation = this.getRotation();
	        return assign$1({}, options, newOptions);
	    };
	    /**
	     * Animate the view.  The view's center, zoom (or resolution), and rotation
	     * can be animated for smooth transitions between view states.  For example,
	     * to animate the view to a new zoom level:
	     *
	     *     view.animate({zoom: view.getZoom() + 1});
	     *
	     * By default, the animation lasts one second and uses in-and-out easing.  You
	     * can customize this behavior by including `duration` (in milliseconds) and
	     * `easing` options (see {@link module:ol/easing}).
	     *
	     * To chain together multiple animations, call the method with multiple
	     * animation objects.  For example, to first zoom and then pan:
	     *
	     *     view.animate({zoom: 10}, {center: [0, 0]});
	     *
	     * If you provide a function as the last argument to the animate method, it
	     * will get called at the end of an animation series.  The callback will be
	     * called with `true` if the animation series completed on its own or `false`
	     * if it was cancelled.
	     *
	     * Animations are cancelled by user interactions (e.g. dragging the map) or by
	     * calling `view.setCenter()`, `view.setResolution()`, or `view.setRotation()`
	     * (or another method that calls one of these).
	     *
	     * @param {...(AnimationOptions|function(boolean): void)} var_args Animation
	     *     options.  Multiple animations can be run in series by passing multiple
	     *     options objects.  To run multiple animations in parallel, call the method
	     *     multiple times.  An optional callback can be provided as a final
	     *     argument.  The callback will be called with a boolean indicating whether
	     *     the animation completed without being cancelled.
	     * @api
	     */
	    View.prototype.animate = function (var_args) {
	        if (this.isDef() && !this.getAnimating()) {
	            this.resolveConstraints(0);
	        }
	        var args = new Array(arguments.length);
	        for (var i = 0; i < args.length; ++i) {
	            var options = arguments[i];
	            if (options.center) {
	                options = assign$1({}, options);
	                options.center = fromUserCoordinate(options.center, this.getProjection());
	            }
	            if (options.anchor) {
	                options = assign$1({}, options);
	                options.anchor = fromUserCoordinate(options.anchor, this.getProjection());
	            }
	            args[i] = options;
	        }
	        this.animateInternal.apply(this, args);
	    };
	    /**
	     * @param {...(AnimationOptions|function(boolean): void)} var_args Animation options.
	     */
	    View.prototype.animateInternal = function (var_args) {
	        var animationCount = arguments.length;
	        var callback;
	        if (animationCount > 1 && typeof arguments[animationCount - 1] === 'function') {
	            callback = arguments[animationCount - 1];
	            --animationCount;
	        }
	        if (!this.isDef()) {
	            // if view properties are not yet set, shortcut to the final state
	            var state = arguments[animationCount - 1];
	            if (state.center) {
	                this.setCenterInternal(state.center);
	            }
	            if (state.zoom !== undefined) {
	                this.setZoom(state.zoom);
	            }
	            if (state.rotation !== undefined) {
	                this.setRotation(state.rotation);
	            }
	            if (callback) {
	                animationCallback(callback, true);
	            }
	            return;
	        }
	        var start = Date.now();
	        var center = this.targetCenter_.slice();
	        var resolution = this.targetResolution_;
	        var rotation = this.targetRotation_;
	        var series = [];
	        for (var i = 0; i < animationCount; ++i) {
	            var options = /** @type {AnimationOptions} */ (arguments[i]);
	            var animation = {
	                start: start,
	                complete: false,
	                anchor: options.anchor,
	                duration: options.duration !== undefined ? options.duration : 1000,
	                easing: options.easing || inAndOut,
	                callback: callback
	            };
	            if (options.center) {
	                animation.sourceCenter = center;
	                animation.targetCenter = options.center.slice();
	                center = animation.targetCenter;
	            }
	            if (options.zoom !== undefined) {
	                animation.sourceResolution = resolution;
	                animation.targetResolution = this.getResolutionForZoom(options.zoom);
	                resolution = animation.targetResolution;
	            }
	            else if (options.resolution) {
	                animation.sourceResolution = resolution;
	                animation.targetResolution = options.resolution;
	                resolution = animation.targetResolution;
	            }
	            if (options.rotation !== undefined) {
	                animation.sourceRotation = rotation;
	                var delta = modulo(options.rotation - rotation + Math.PI, 2 * Math.PI) - Math.PI;
	                animation.targetRotation = rotation + delta;
	                rotation = animation.targetRotation;
	            }
	            // check if animation is a no-op
	            if (isNoopAnimation(animation)) {
	                animation.complete = true;
	                // we still push it onto the series for callback handling
	            }
	            else {
	                start += animation.duration;
	            }
	            series.push(animation);
	        }
	        this.animations_.push(series);
	        this.setHint(ViewHint.ANIMATING, 1);
	        this.updateAnimations_();
	    };
	    /**
	     * Determine if the view is being animated.
	     * @return {boolean} The view is being animated.
	     * @api
	     */
	    View.prototype.getAnimating = function () {
	        return this.hints_[ViewHint.ANIMATING] > 0;
	    };
	    /**
	     * Determine if the user is interacting with the view, such as panning or zooming.
	     * @return {boolean} The view is being interacted with.
	     * @api
	     */
	    View.prototype.getInteracting = function () {
	        return this.hints_[ViewHint.INTERACTING] > 0;
	    };
	    /**
	     * Cancel any ongoing animations.
	     * @api
	     */
	    View.prototype.cancelAnimations = function () {
	        this.setHint(ViewHint.ANIMATING, -this.hints_[ViewHint.ANIMATING]);
	        for (var i = 0, ii = this.animations_.length; i < ii; ++i) {
	            var series = this.animations_[i];
	            if (series[0].callback) {
	                animationCallback(series[0].callback, false);
	            }
	        }
	        this.animations_.length = 0;
	    };
	    /**
	     * Update all animations.
	     */
	    View.prototype.updateAnimations_ = function () {
	        if (this.updateAnimationKey_ !== undefined) {
	            cancelAnimationFrame(this.updateAnimationKey_);
	            this.updateAnimationKey_ = undefined;
	        }
	        if (!this.getAnimating()) {
	            return;
	        }
	        var now = Date.now();
	        var more = false;
	        for (var i = this.animations_.length - 1; i >= 0; --i) {
	            var series = this.animations_[i];
	            var seriesComplete = true;
	            for (var j = 0, jj = series.length; j < jj; ++j) {
	                var animation = series[j];
	                if (animation.complete) {
	                    continue;
	                }
	                var elapsed = now - animation.start;
	                var fraction = animation.duration > 0 ? elapsed / animation.duration : 1;
	                if (fraction >= 1) {
	                    animation.complete = true;
	                    fraction = 1;
	                }
	                else {
	                    seriesComplete = false;
	                }
	                var progress = animation.easing(fraction);
	                if (animation.sourceCenter) {
	                    var x0 = animation.sourceCenter[0];
	                    var y0 = animation.sourceCenter[1];
	                    var x1 = animation.targetCenter[0];
	                    var y1 = animation.targetCenter[1];
	                    var x = x0 + progress * (x1 - x0);
	                    var y = y0 + progress * (y1 - y0);
	                    this.targetCenter_ = [x, y];
	                }
	                if (animation.sourceResolution && animation.targetResolution) {
	                    var resolution = progress === 1 ?
	                        animation.targetResolution :
	                        animation.sourceResolution + progress * (animation.targetResolution - animation.sourceResolution);
	                    if (animation.anchor) {
	                        var size = this.getSizeFromViewport_(this.getRotation());
	                        var constrainedResolution = this.constraints_.resolution(resolution, 0, size, true);
	                        this.targetCenter_ = this.calculateCenterZoom(constrainedResolution, animation.anchor);
	                    }
	                    this.targetResolution_ = resolution;
	                    this.applyTargetState_(true);
	                }
	                if (animation.sourceRotation !== undefined && animation.targetRotation !== undefined) {
	                    var rotation = progress === 1 ?
	                        modulo(animation.targetRotation + Math.PI, 2 * Math.PI) - Math.PI :
	                        animation.sourceRotation + progress * (animation.targetRotation - animation.sourceRotation);
	                    if (animation.anchor) {
	                        var constrainedRotation = this.constraints_.rotation(rotation, true);
	                        this.targetCenter_ = this.calculateCenterRotate(constrainedRotation, animation.anchor);
	                    }
	                    this.targetRotation_ = rotation;
	                }
	                this.applyTargetState_(true);
	                more = true;
	                if (!animation.complete) {
	                    break;
	                }
	            }
	            if (seriesComplete) {
	                this.animations_[i] = null;
	                this.setHint(ViewHint.ANIMATING, -1);
	                var callback = series[0].callback;
	                if (callback) {
	                    animationCallback(callback, true);
	                }
	            }
	        }
	        // prune completed series
	        this.animations_ = this.animations_.filter(Boolean);
	        if (more && this.updateAnimationKey_ === undefined) {
	            this.updateAnimationKey_ = requestAnimationFrame(this.updateAnimations_.bind(this));
	        }
	    };
	    /**
	     * @param {number} rotation Target rotation.
	     * @param {import("./coordinate.js").Coordinate} anchor Rotation anchor.
	     * @return {import("./coordinate.js").Coordinate|undefined} Center for rotation and anchor.
	     */
	    View.prototype.calculateCenterRotate = function (rotation, anchor) {
	        var center;
	        var currentCenter = this.getCenterInternal();
	        if (currentCenter !== undefined) {
	            center = [currentCenter[0] - anchor[0], currentCenter[1] - anchor[1]];
	            rotate$1(center, rotation - this.getRotation());
	            add$2(center, anchor);
	        }
	        return center;
	    };
	    /**
	     * @param {number} resolution Target resolution.
	     * @param {import("./coordinate.js").Coordinate} anchor Zoom anchor.
	     * @return {import("./coordinate.js").Coordinate|undefined} Center for resolution and anchor.
	     */
	    View.prototype.calculateCenterZoom = function (resolution, anchor) {
	        var center;
	        var currentCenter = this.getCenterInternal();
	        var currentResolution = this.getResolution();
	        if (currentCenter !== undefined && currentResolution !== undefined) {
	            var x = anchor[0] - resolution * (anchor[0] - currentCenter[0]) / currentResolution;
	            var y = anchor[1] - resolution * (anchor[1] - currentCenter[1]) / currentResolution;
	            center = [x, y];
	        }
	        return center;
	    };
	    /**
	     * @private
	     * @param {number=} opt_rotation Take into account the rotation of the viewport when giving the size
	     * @return {import("./size.js").Size} Viewport size or `[100, 100]` when no viewport is found.
	     */
	    View.prototype.getSizeFromViewport_ = function (opt_rotation) {
	        var size = [100, 100];
	        var selector = '.ol-viewport[data-view="' + getUid(this) + '"]';
	        var element = document.querySelector(selector);
	        if (element) {
	            var metrics = getComputedStyle(element);
	            size[0] = parseInt(metrics.width, 10);
	            size[1] = parseInt(metrics.height, 10);
	        }
	        if (opt_rotation) {
	            var w = size[0];
	            var h = size[1];
	            size[0] = Math.abs(w * Math.cos(opt_rotation)) + Math.abs(h * Math.sin(opt_rotation));
	            size[1] = Math.abs(w * Math.sin(opt_rotation)) + Math.abs(h * Math.cos(opt_rotation));
	        }
	        return size;
	    };
	    /**
	     * Get the view center.
	     * @return {import("./coordinate.js").Coordinate|undefined} The center of the view.
	     * @observable
	     * @api
	     */
	    View.prototype.getCenter = function () {
	        var center = this.getCenterInternal();
	        if (!center) {
	            return center;
	        }
	        return toUserCoordinate(center, this.getProjection());
	    };
	    /**
	     * Get the view center without transforming to user projection.
	     * @return {import("./coordinate.js").Coordinate|undefined} The center of the view.
	     */
	    View.prototype.getCenterInternal = function () {
	        return /** @type {import("./coordinate.js").Coordinate|undefined} */ (this.get(ViewProperty.CENTER));
	    };
	    /**
	     * @return {Constraints} Constraints.
	     */
	    View.prototype.getConstraints = function () {
	        return this.constraints_;
	    };
	    /**
	     * @param {Array<number>=} opt_hints Destination array.
	     * @return {Array<number>} Hint.
	     */
	    View.prototype.getHints = function (opt_hints) {
	        if (opt_hints !== undefined) {
	            opt_hints[0] = this.hints_[0];
	            opt_hints[1] = this.hints_[1];
	            return opt_hints;
	        }
	        else {
	            return this.hints_.slice();
	        }
	    };
	    /**
	     * Calculate the extent for the current view state and the passed size.
	     * The size is the pixel dimensions of the box into which the calculated extent
	     * should fit. In most cases you want to get the extent of the entire map,
	     * that is `map.getSize()`.
	     * @param {import("./size.js").Size=} opt_size Box pixel size. If not provided, the size of the
	     * first map that uses this view will be used.
	     * @return {import("./extent.js").Extent} Extent.
	     * @api
	     */
	    View.prototype.calculateExtent = function (opt_size) {
	        var extent = this.calculateExtentInternal(opt_size);
	        return toUserExtent(extent, this.getProjection());
	    };
	    /**
	     * @param {import("./size.js").Size=} opt_size Box pixel size. If not provided, the size of the
	     * first map that uses this view will be used.
	     * @return {import("./extent.js").Extent} Extent.
	     */
	    View.prototype.calculateExtentInternal = function (opt_size) {
	        var size = opt_size || this.getSizeFromViewport_();
	        var center = /** @type {!import("./coordinate.js").Coordinate} */ (this.getCenterInternal());
	        assert(center, 1); // The view center is not defined
	        var resolution = /** @type {!number} */ (this.getResolution());
	        assert(resolution !== undefined, 2); // The view resolution is not defined
	        var rotation = /** @type {!number} */ (this.getRotation());
	        assert(rotation !== undefined, 3); // The view rotation is not defined
	        return getForViewAndSize(center, resolution, rotation, size);
	    };
	    /**
	     * Get the maximum resolution of the view.
	     * @return {number} The maximum resolution of the view.
	     * @api
	     */
	    View.prototype.getMaxResolution = function () {
	        return this.maxResolution_;
	    };
	    /**
	     * Get the minimum resolution of the view.
	     * @return {number} The minimum resolution of the view.
	     * @api
	     */
	    View.prototype.getMinResolution = function () {
	        return this.minResolution_;
	    };
	    /**
	     * Get the maximum zoom level for the view.
	     * @return {number} The maximum zoom level.
	     * @api
	     */
	    View.prototype.getMaxZoom = function () {
	        return /** @type {number} */ (this.getZoomForResolution(this.minResolution_));
	    };
	    /**
	     * Set a new maximum zoom level for the view.
	     * @param {number} zoom The maximum zoom level.
	     * @api
	     */
	    View.prototype.setMaxZoom = function (zoom) {
	        this.applyOptions_(this.getUpdatedOptions_({ maxZoom: zoom }));
	    };
	    /**
	     * Get the minimum zoom level for the view.
	     * @return {number} The minimum zoom level.
	     * @api
	     */
	    View.prototype.getMinZoom = function () {
	        return /** @type {number} */ (this.getZoomForResolution(this.maxResolution_));
	    };
	    /**
	     * Set a new minimum zoom level for the view.
	     * @param {number} zoom The minimum zoom level.
	     * @api
	     */
	    View.prototype.setMinZoom = function (zoom) {
	        this.applyOptions_(this.getUpdatedOptions_({ minZoom: zoom }));
	    };
	    /**
	     * Set whether the view shoud allow intermediary zoom levels.
	     * @param {boolean} enabled Whether the resolution is constrained.
	     * @api
	     */
	    View.prototype.setConstrainResolution = function (enabled) {
	        this.applyOptions_(this.getUpdatedOptions_({ constrainResolution: enabled }));
	    };
	    /**
	     * Get the view projection.
	     * @return {import("./proj/Projection.js").default} The projection of the view.
	     * @api
	     */
	    View.prototype.getProjection = function () {
	        return this.projection_;
	    };
	    /**
	     * Get the view resolution.
	     * @return {number|undefined} The resolution of the view.
	     * @observable
	     * @api
	     */
	    View.prototype.getResolution = function () {
	        return /** @type {number|undefined} */ (this.get(ViewProperty.RESOLUTION));
	    };
	    /**
	     * Get the resolutions for the view. This returns the array of resolutions
	     * passed to the constructor of the View, or undefined if none were given.
	     * @return {Array<number>|undefined} The resolutions of the view.
	     * @api
	     */
	    View.prototype.getResolutions = function () {
	        return this.resolutions_;
	    };
	    /**
	     * Get the resolution for a provided extent (in map units) and size (in pixels).
	     * @param {import("./extent.js").Extent} extent Extent.
	     * @param {import("./size.js").Size=} opt_size Box pixel size.
	     * @return {number} The resolution at which the provided extent will render at
	     *     the given size.
	     * @api
	     */
	    View.prototype.getResolutionForExtent = function (extent, opt_size) {
	        return this.getResolutionForExtentInternal(fromUserExtent(extent, this.getProjection()), opt_size);
	    };
	    /**
	     * Get the resolution for a provided extent (in map units) and size (in pixels).
	     * @param {import("./extent.js").Extent} extent Extent.
	     * @param {import("./size.js").Size=} opt_size Box pixel size.
	     * @return {number} The resolution at which the provided extent will render at
	     *     the given size.
	     */
	    View.prototype.getResolutionForExtentInternal = function (extent, opt_size) {
	        var size = opt_size || this.getSizeFromViewport_();
	        var xResolution = getWidth(extent) / size[0];
	        var yResolution = getHeight(extent) / size[1];
	        return Math.max(xResolution, yResolution);
	    };
	    /**
	     * Return a function that returns a value between 0 and 1 for a
	     * resolution. Exponential scaling is assumed.
	     * @param {number=} opt_power Power.
	     * @return {function(number): number} Resolution for value function.
	     */
	    View.prototype.getResolutionForValueFunction = function (opt_power) {
	        var power = opt_power || 2;
	        var maxResolution = this.maxResolution_;
	        var minResolution = this.minResolution_;
	        var max = Math.log(maxResolution / minResolution) / Math.log(power);
	        return (
	        /**
	         * @param {number} value Value.
	         * @return {number} Resolution.
	         */
	        function (value) {
	            var resolution = maxResolution / Math.pow(power, value * max);
	            return resolution;
	        });
	    };
	    /**
	     * Get the view rotation.
	     * @return {number} The rotation of the view in radians.
	     * @observable
	     * @api
	     */
	    View.prototype.getRotation = function () {
	        return /** @type {number} */ (this.get(ViewProperty.ROTATION));
	    };
	    /**
	     * Return a function that returns a resolution for a value between
	     * 0 and 1. Exponential scaling is assumed.
	     * @param {number=} opt_power Power.
	     * @return {function(number): number} Value for resolution function.
	     */
	    View.prototype.getValueForResolutionFunction = function (opt_power) {
	        var power = opt_power || 2;
	        var maxResolution = this.maxResolution_;
	        var minResolution = this.minResolution_;
	        var max = Math.log(maxResolution / minResolution) / Math.log(power);
	        return (
	        /**
	         * @param {number} resolution Resolution.
	         * @return {number} Value.
	         */
	        function (resolution) {
	            var value = (Math.log(maxResolution / resolution) / Math.log(power)) / max;
	            return value;
	        });
	    };
	    /**
	     * @return {State} View state.
	     */
	    View.prototype.getState = function () {
	        var center = /** @type {import("./coordinate.js").Coordinate} */ (this.getCenterInternal());
	        var projection = this.getProjection();
	        var resolution = /** @type {number} */ (this.getResolution());
	        var rotation = this.getRotation();
	        return {
	            center: center.slice(0),
	            projection: projection !== undefined ? projection : null,
	            resolution: resolution,
	            rotation: rotation,
	            zoom: this.getZoom()
	        };
	    };
	    /**
	     * Get the current zoom level. This method may return non-integer zoom levels
	     * if the view does not constrain the resolution, or if an interaction or
	     * animation is underway.
	     * @return {number|undefined} Zoom.
	     * @api
	     */
	    View.prototype.getZoom = function () {
	        var zoom;
	        var resolution = this.getResolution();
	        if (resolution !== undefined) {
	            zoom = this.getZoomForResolution(resolution);
	        }
	        return zoom;
	    };
	    /**
	     * Get the zoom level for a resolution.
	     * @param {number} resolution The resolution.
	     * @return {number|undefined} The zoom level for the provided resolution.
	     * @api
	     */
	    View.prototype.getZoomForResolution = function (resolution) {
	        var offset = this.minZoom_ || 0;
	        var max, zoomFactor;
	        if (this.resolutions_) {
	            var nearest = linearFindNearest(this.resolutions_, resolution, 1);
	            offset = nearest;
	            max = this.resolutions_[nearest];
	            if (nearest == this.resolutions_.length - 1) {
	                zoomFactor = 2;
	            }
	            else {
	                zoomFactor = max / this.resolutions_[nearest + 1];
	            }
	        }
	        else {
	            max = this.maxResolution_;
	            zoomFactor = this.zoomFactor_;
	        }
	        return offset + Math.log(max / resolution) / Math.log(zoomFactor);
	    };
	    /**
	     * Get the resolution for a zoom level.
	     * @param {number} zoom Zoom level.
	     * @return {number} The view resolution for the provided zoom level.
	     * @api
	     */
	    View.prototype.getResolutionForZoom = function (zoom) {
	        if (this.resolutions_) {
	            if (this.resolutions_.length <= 1) {
	                return 0;
	            }
	            var baseLevel = clamp(Math.floor(zoom), 0, this.resolutions_.length - 2);
	            var zoomFactor = this.resolutions_[baseLevel] / this.resolutions_[baseLevel + 1];
	            return this.resolutions_[baseLevel] / Math.pow(zoomFactor, clamp(zoom - baseLevel, 0, 1));
	        }
	        else {
	            return this.maxResolution_ / Math.pow(this.zoomFactor_, zoom - this.minZoom_);
	        }
	    };
	    /**
	     * Fit the given geometry or extent based on the given map size and border.
	     * The size is pixel dimensions of the box to fit the extent into.
	     * In most cases you will want to use the map size, that is `map.getSize()`.
	     * Takes care of the map angle.
	     * @param {import("./geom/SimpleGeometry.js").default|import("./extent.js").Extent} geometryOrExtent The geometry or
	     *     extent to fit the view to.
	     * @param {FitOptions=} opt_options Options.
	     * @api
	     */
	    View.prototype.fit = function (geometryOrExtent, opt_options) {
	        var options = assign$1({ size: this.getSizeFromViewport_() }, opt_options || {});
	        /** @type {import("./geom/SimpleGeometry.js").default} */
	        var geometry;
	        assert(Array.isArray(geometryOrExtent) || typeof /** @type {?} */ (geometryOrExtent).getSimplifiedGeometry === 'function', 24); // Invalid extent or geometry provided as `geometry`
	        if (Array.isArray(geometryOrExtent)) {
	            assert(!isEmpty(geometryOrExtent), 25); // Cannot fit empty extent provided as `geometry`
	            var extent = fromUserExtent(geometryOrExtent, this.getProjection());
	            geometry = fromExtent(extent);
	        }
	        else if (geometryOrExtent.getType() === GeometryType.CIRCLE) {
	            var extent = fromUserExtent(geometryOrExtent.getExtent(), this.getProjection());
	            geometry = fromExtent(extent);
	            geometry.rotate(this.getRotation(), getCenter(extent));
	        }
	        else {
	            var userProjection = getUserProjection();
	            if (userProjection) {
	                geometry = /** @type {import("./geom/SimpleGeometry.js").default} */ (geometry.clone().transform(userProjection, this.getProjection()));
	            }
	            else {
	                geometry = geometryOrExtent;
	            }
	        }
	        this.fitInternal(geometry, options);
	    };
	    /**
	     * @param {import("./geom/SimpleGeometry.js").default} geometry The geometry.
	     * @param {FitOptions=} opt_options Options.
	     */
	    View.prototype.fitInternal = function (geometry, opt_options) {
	        var options = opt_options || {};
	        var size = options.size;
	        if (!size) {
	            size = this.getSizeFromViewport_();
	        }
	        var padding = options.padding !== undefined ? options.padding : [0, 0, 0, 0];
	        var nearest = options.nearest !== undefined ? options.nearest : false;
	        var minResolution;
	        if (options.minResolution !== undefined) {
	            minResolution = options.minResolution;
	        }
	        else if (options.maxZoom !== undefined) {
	            minResolution = this.getResolutionForZoom(options.maxZoom);
	        }
	        else {
	            minResolution = 0;
	        }
	        var coords = geometry.getFlatCoordinates();
	        // calculate rotated extent
	        var rotation = this.getRotation();
	        var cosAngle = Math.cos(-rotation);
	        var sinAngle = Math.sin(-rotation);
	        var minRotX = +Infinity;
	        var minRotY = +Infinity;
	        var maxRotX = -Infinity;
	        var maxRotY = -Infinity;
	        var stride = geometry.getStride();
	        for (var i = 0, ii = coords.length; i < ii; i += stride) {
	            var rotX = coords[i] * cosAngle - coords[i + 1] * sinAngle;
	            var rotY = coords[i] * sinAngle + coords[i + 1] * cosAngle;
	            minRotX = Math.min(minRotX, rotX);
	            minRotY = Math.min(minRotY, rotY);
	            maxRotX = Math.max(maxRotX, rotX);
	            maxRotY = Math.max(maxRotY, rotY);
	        }
	        // calculate resolution
	        var resolution = this.getResolutionForExtentInternal([minRotX, minRotY, maxRotX, maxRotY], [size[0] - padding[1] - padding[3], size[1] - padding[0] - padding[2]]);
	        resolution = isNaN(resolution) ? minResolution :
	            Math.max(resolution, minResolution);
	        resolution = this.getConstrainedResolution(resolution, nearest ? 0 : 1);
	        // calculate center
	        sinAngle = -sinAngle; // go back to original rotation
	        var centerRotX = (minRotX + maxRotX) / 2;
	        var centerRotY = (minRotY + maxRotY) / 2;
	        centerRotX += (padding[1] - padding[3]) / 2 * resolution;
	        centerRotY += (padding[0] - padding[2]) / 2 * resolution;
	        var centerX = centerRotX * cosAngle - centerRotY * sinAngle;
	        var centerY = centerRotY * cosAngle + centerRotX * sinAngle;
	        var center = [centerX, centerY];
	        var callback = options.callback ? options.callback : VOID;
	        if (options.duration !== undefined) {
	            this.animateInternal({
	                resolution: resolution,
	                center: this.getConstrainedCenter(center, resolution),
	                duration: options.duration,
	                easing: options.easing
	            }, callback);
	        }
	        else {
	            this.targetResolution_ = resolution;
	            this.targetCenter_ = center;
	            this.applyTargetState_(false, true);
	            animationCallback(callback, true);
	        }
	    };
	    /**
	     * Center on coordinate and view position.
	     * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
	     * @param {import("./size.js").Size} size Box pixel size.
	     * @param {import("./pixel.js").Pixel} position Position on the view to center on.
	     * @api
	     */
	    View.prototype.centerOn = function (coordinate, size, position) {
	        this.centerOnInternal(fromUserCoordinate(coordinate, this.getProjection()), size, position);
	    };
	    /**
	     * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
	     * @param {import("./size.js").Size} size Box pixel size.
	     * @param {import("./pixel.js").Pixel} position Position on the view to center on.
	     */
	    View.prototype.centerOnInternal = function (coordinate, size, position) {
	        // calculate rotated position
	        var rotation = this.getRotation();
	        var cosAngle = Math.cos(-rotation);
	        var sinAngle = Math.sin(-rotation);
	        var rotX = coordinate[0] * cosAngle - coordinate[1] * sinAngle;
	        var rotY = coordinate[1] * cosAngle + coordinate[0] * sinAngle;
	        var resolution = this.getResolution();
	        rotX += (size[0] / 2 - position[0]) * resolution;
	        rotY += (position[1] - size[1] / 2) * resolution;
	        // go back to original angle
	        sinAngle = -sinAngle; // go back to original rotation
	        var centerX = rotX * cosAngle - rotY * sinAngle;
	        var centerY = rotY * cosAngle + rotX * sinAngle;
	        this.setCenterInternal([centerX, centerY]);
	    };
	    /**
	     * @return {boolean} Is defined.
	     */
	    View.prototype.isDef = function () {
	        return !!this.getCenterInternal() && this.getResolution() !== undefined;
	    };
	    /**
	     * Adds relative coordinates to the center of the view. Any extent constraint will apply.
	     * @param {import("./coordinate.js").Coordinate} deltaCoordinates Relative value to add.
	     * @api
	     */
	    View.prototype.adjustCenter = function (deltaCoordinates) {
	        var center = toUserCoordinate(this.targetCenter_, this.getProjection());
	        this.setCenter([center[0] + deltaCoordinates[0], center[1] + deltaCoordinates[1]]);
	    };
	    /**
	     * Adds relative coordinates to the center of the view. Any extent constraint will apply.
	     * @param {import("./coordinate.js").Coordinate} deltaCoordinates Relative value to add.
	     */
	    View.prototype.adjustCenterInternal = function (deltaCoordinates) {
	        var center = this.targetCenter_;
	        this.setCenterInternal([center[0] + deltaCoordinates[0], center[1] + deltaCoordinates[1]]);
	    };
	    /**
	     * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution
	     * constraint will apply.
	     * @param {number} ratio The ratio to apply on the view resolution.
	     * @param {import("./coordinate.js").Coordinate=} opt_anchor The origin of the transformation.
	     * @api
	     */
	    View.prototype.adjustResolution = function (ratio, opt_anchor) {
	        var anchor = opt_anchor && fromUserCoordinate(opt_anchor, this.getProjection());
	        this.adjustResolutionInternal(ratio, anchor);
	    };
	    /**
	     * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution
	     * constraint will apply.
	     * @param {number} ratio The ratio to apply on the view resolution.
	     * @param {import("./coordinate.js").Coordinate=} opt_anchor The origin of the transformation.
	     */
	    View.prototype.adjustResolutionInternal = function (ratio, opt_anchor) {
	        var isMoving = this.getAnimating() || this.getInteracting();
	        var size = this.getSizeFromViewport_(this.getRotation());
	        var newResolution = this.constraints_.resolution(this.targetResolution_ * ratio, 0, size, isMoving);
	        if (opt_anchor !== undefined) {
	            this.targetCenter_ = this.calculateCenterZoom(newResolution, opt_anchor);
	        }
	        this.targetResolution_ *= ratio;
	        this.applyTargetState_();
	    };
	    /**
	     * Adds a value to the view zoom level, optionally using an anchor. Any resolution
	     * constraint will apply.
	     * @param {number} delta Relative value to add to the zoom level.
	     * @param {import("./coordinate.js").Coordinate=} opt_anchor The origin of the transformation.
	     * @api
	     */
	    View.prototype.adjustZoom = function (delta, opt_anchor) {
	        this.adjustResolution(Math.pow(this.zoomFactor_, -delta), opt_anchor);
	    };
	    /**
	     * Adds a value to the view rotation, optionally using an anchor. Any rotation
	     * constraint will apply.
	     * @param {number} delta Relative value to add to the zoom rotation, in radians.
	     * @param {import("./coordinate.js").Coordinate=} opt_anchor The rotation center.
	     * @api
	     */
	    View.prototype.adjustRotation = function (delta, opt_anchor) {
	        if (opt_anchor) {
	            opt_anchor = fromUserCoordinate(opt_anchor, this.getProjection());
	        }
	        this.adjustRotationInternal(delta, opt_anchor);
	    };
	    /**
	     * @param {number} delta Relative value to add to the zoom rotation, in radians.
	     * @param {import("./coordinate.js").Coordinate=} opt_anchor The rotation center.
	     */
	    View.prototype.adjustRotationInternal = function (delta, opt_anchor) {
	        var isMoving = this.getAnimating() || this.getInteracting();
	        var newRotation = this.constraints_.rotation(this.targetRotation_ + delta, isMoving);
	        if (opt_anchor !== undefined) {
	            this.targetCenter_ = this.calculateCenterRotate(newRotation, opt_anchor);
	        }
	        this.targetRotation_ += delta;
	        this.applyTargetState_();
	    };
	    /**
	     * Set the center of the current view. Any extent constraint will apply.
	     * @param {import("./coordinate.js").Coordinate|undefined} center The center of the view.
	     * @observable
	     * @api
	     */
	    View.prototype.setCenter = function (center) {
	        this.setCenterInternal(fromUserCoordinate(center, this.getProjection()));
	    };
	    /**
	     * Set the center using the view projection (not the user projection).
	     * @param {import("./coordinate.js").Coordinate|undefined} center The center of the view.
	     */
	    View.prototype.setCenterInternal = function (center) {
	        this.targetCenter_ = center;
	        this.applyTargetState_();
	    };
	    /**
	     * @param {ViewHint} hint Hint.
	     * @param {number} delta Delta.
	     * @return {number} New value.
	     */
	    View.prototype.setHint = function (hint, delta) {
	        this.hints_[hint] += delta;
	        this.changed();
	        return this.hints_[hint];
	    };
	    /**
	     * Set the resolution for this view. Any resolution constraint will apply.
	     * @param {number|undefined} resolution The resolution of the view.
	     * @observable
	     * @api
	     */
	    View.prototype.setResolution = function (resolution) {
	        this.targetResolution_ = resolution;
	        this.applyTargetState_();
	    };
	    /**
	     * Set the rotation for this view. Any rotation constraint will apply.
	     * @param {number} rotation The rotation of the view in radians.
	     * @observable
	     * @api
	     */
	    View.prototype.setRotation = function (rotation) {
	        this.targetRotation_ = rotation;
	        this.applyTargetState_();
	    };
	    /**
	     * Zoom to a specific zoom level. Any resolution constrain will apply.
	     * @param {number} zoom Zoom level.
	     * @api
	     */
	    View.prototype.setZoom = function (zoom) {
	        this.setResolution(this.getResolutionForZoom(zoom));
	    };
	    /**
	     * Recompute rotation/resolution/center based on target values.
	     * Note: we have to compute rotation first, then resolution and center considering that
	     * parameters can influence one another in case a view extent constraint is present.
	     * @param {boolean=} opt_doNotCancelAnims Do not cancel animations.
	     * @param {boolean=} opt_forceMoving Apply constraints as if the view is moving.
	     * @private
	     */
	    View.prototype.applyTargetState_ = function (opt_doNotCancelAnims, opt_forceMoving) {
	        var isMoving = this.getAnimating() || this.getInteracting() || opt_forceMoving;
	        // compute rotation
	        var newRotation = this.constraints_.rotation(this.targetRotation_, isMoving);
	        var size = this.getSizeFromViewport_(newRotation);
	        var newResolution = this.constraints_.resolution(this.targetResolution_, 0, size, isMoving);
	        var newCenter = this.constraints_.center(this.targetCenter_, newResolution, size, isMoving);
	        if (this.get(ViewProperty.ROTATION) !== newRotation) {
	            this.set(ViewProperty.ROTATION, newRotation);
	        }
	        if (this.get(ViewProperty.RESOLUTION) !== newResolution) {
	            this.set(ViewProperty.RESOLUTION, newResolution);
	        }
	        if (!this.get(ViewProperty.CENTER) || !equals$2(this.get(ViewProperty.CENTER), newCenter)) {
	            this.set(ViewProperty.CENTER, newCenter);
	        }
	        if (this.getAnimating() && !opt_doNotCancelAnims) {
	            this.cancelAnimations();
	        }
	    };
	    /**
	     * If any constraints need to be applied, an animation will be triggered.
	     * This is typically done on interaction end.
	     * Note: calling this with a duration of 0 will apply the constrained values straight away,
	     * without animation.
	     * @param {number=} opt_duration The animation duration in ms.
	     * @param {number=} opt_resolutionDirection Which direction to zoom.
	     * @param {import("./coordinate.js").Coordinate=} opt_anchor The origin of the transformation.
	     */
	    View.prototype.resolveConstraints = function (opt_duration, opt_resolutionDirection, opt_anchor) {
	        var duration = opt_duration !== undefined ? opt_duration : 200;
	        var direction = opt_resolutionDirection || 0;
	        var newRotation = this.constraints_.rotation(this.targetRotation_);
	        var size = this.getSizeFromViewport_(newRotation);
	        var newResolution = this.constraints_.resolution(this.targetResolution_, direction, size);
	        var newCenter = this.constraints_.center(this.targetCenter_, newResolution, size);
	        if (duration === 0) {
	            this.targetResolution_ = newResolution;
	            this.targetRotation_ = newRotation;
	            this.targetCenter_ = newCenter;
	            this.applyTargetState_();
	            return;
	        }
	        if (this.getResolution() !== newResolution ||
	            this.getRotation() !== newRotation ||
	            !this.getCenterInternal() ||
	            !equals$2(this.getCenterInternal(), newCenter)) {
	            if (this.getAnimating()) {
	                this.cancelAnimations();
	            }
	            this.animateInternal({
	                rotation: newRotation,
	                center: newCenter,
	                resolution: newResolution,
	                duration: duration,
	                easing: easeOut,
	                anchor: opt_anchor
	            });
	        }
	    };
	    /**
	     * Notify the View that an interaction has started.
	     * The view state will be resolved to a stable one if needed
	     * (depending on its constraints).
	     * @api
	     */
	    View.prototype.beginInteraction = function () {
	        this.resolveConstraints(0);
	        this.setHint(ViewHint.INTERACTING, 1);
	    };
	    /**
	     * Notify the View that an interaction has ended. The view state will be resolved
	     * to a stable one if needed (depending on its constraints).
	     * @param {number=} opt_duration Animation duration in ms.
	     * @param {number=} opt_resolutionDirection Which direction to zoom.
	     * @param {import("./coordinate.js").Coordinate=} opt_anchor The origin of the transformation.
	     * @api
	     */
	    View.prototype.endInteraction = function (opt_duration, opt_resolutionDirection, opt_anchor) {
	        var anchor = opt_anchor && fromUserCoordinate(opt_anchor, this.getProjection());
	        this.endInteractionInternal(opt_duration, opt_resolutionDirection, anchor);
	    };
	    /**
	     * Notify the View that an interaction has ended. The view state will be resolved
	     * to a stable one if needed (depending on its constraints).
	     * @param {number=} opt_duration Animation duration in ms.
	     * @param {number=} opt_resolutionDirection Which direction to zoom.
	     * @param {import("./coordinate.js").Coordinate=} opt_anchor The origin of the transformation.
	     */
	    View.prototype.endInteractionInternal = function (opt_duration, opt_resolutionDirection, opt_anchor) {
	        this.setHint(ViewHint.INTERACTING, -1);
	        this.resolveConstraints(opt_duration, opt_resolutionDirection, opt_anchor);
	    };
	    /**
	     * Get a valid position for the view center according to the current constraints.
	     * @param {import("./coordinate.js").Coordinate|undefined} targetCenter Target center position.
	     * @param {number=} opt_targetResolution Target resolution. If not supplied, the current one will be used.
	     * This is useful to guess a valid center position at a different zoom level.
	     * @return {import("./coordinate.js").Coordinate|undefined} Valid center position.
	     */
	    View.prototype.getConstrainedCenter = function (targetCenter, opt_targetResolution) {
	        var size = this.getSizeFromViewport_(this.getRotation());
	        return this.constraints_.center(targetCenter, opt_targetResolution || this.getResolution(), size);
	    };
	    /**
	     * Get a valid zoom level according to the current view constraints.
	     * @param {number|undefined} targetZoom Target zoom.
	     * @param {number=} [opt_direction=0] Indicate which resolution should be used
	     * by a renderer if the view resolution does not match any resolution of the tile source.
	     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
	     * will be used. If -1, the nearest higher resolution will be used.
	     * @return {number|undefined} Valid zoom level.
	     */
	    View.prototype.getConstrainedZoom = function (targetZoom, opt_direction) {
	        var targetRes = this.getResolutionForZoom(targetZoom);
	        return this.getZoomForResolution(this.getConstrainedResolution(targetRes, opt_direction));
	    };
	    /**
	     * Get a valid resolution according to the current view constraints.
	     * @param {number|undefined} targetResolution Target resolution.
	     * @param {number=} [opt_direction=0] Indicate which resolution should be used
	     * by a renderer if the view resolution does not match any resolution of the tile source.
	     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
	     * will be used. If -1, the nearest higher resolution will be used.
	     * @return {number|undefined} Valid resolution.
	     */
	    View.prototype.getConstrainedResolution = function (targetResolution, opt_direction) {
	        var direction = opt_direction || 0;
	        var size = this.getSizeFromViewport_(this.getRotation());
	        return this.constraints_.resolution(targetResolution, direction, size);
	    };
	    return View;
	}(BaseObject));
	/**
	 * @param {Function} callback Callback.
	 * @param {*} returnValue Return value.
	 */
	function animationCallback(callback, returnValue) {
	    setTimeout(function () {
	        callback(returnValue);
	    }, 0);
	}
	/**
	 * @param {ViewOptions} options View options.
	 * @return {import("./centerconstraint.js").Type} The constraint.
	 */
	function createCenterConstraint(options) {
	    if (options.extent !== undefined) {
	        var smooth = options.smoothExtentConstraint !== undefined ? options.smoothExtentConstraint : true;
	        return createExtent(options.extent, options.constrainOnlyCenter, smooth);
	    }
	    var projection = createProjection(options.projection, 'EPSG:3857');
	    if (options.multiWorld !== true && projection.isGlobal()) {
	        var extent = projection.getExtent().slice();
	        extent[0] = -Infinity;
	        extent[2] = Infinity;
	        return createExtent(extent, false, false);
	    }
	    return none;
	}
	/**
	 * @param {ViewOptions} options View options.
	 * @return {{constraint: import("./resolutionconstraint.js").Type, maxResolution: number,
	 *     minResolution: number, minZoom: number, zoomFactor: number}} The constraint.
	 */
	function createResolutionConstraint(options) {
	    var resolutionConstraint;
	    var maxResolution;
	    var minResolution;
	    // TODO: move these to be ol constants
	    // see https://github.com/openlayers/openlayers/issues/2076
	    var defaultMaxZoom = 28;
	    var defaultZoomFactor = 2;
	    var minZoom = options.minZoom !== undefined ?
	        options.minZoom : DEFAULT_MIN_ZOOM;
	    var maxZoom = options.maxZoom !== undefined ?
	        options.maxZoom : defaultMaxZoom;
	    var zoomFactor = options.zoomFactor !== undefined ?
	        options.zoomFactor : defaultZoomFactor;
	    var multiWorld = options.multiWorld !== undefined ?
	        options.multiWorld : false;
	    var smooth = options.smoothResolutionConstraint !== undefined ? options.smoothResolutionConstraint : true;
	    var projection = createProjection(options.projection, 'EPSG:3857');
	    var projExtent = projection.getExtent();
	    var constrainOnlyCenter = options.constrainOnlyCenter;
	    var extent = options.extent;
	    if (!multiWorld && !extent && projection.isGlobal()) {
	        constrainOnlyCenter = false;
	        extent = projExtent;
	    }
	    if (options.resolutions !== undefined) {
	        var resolutions = options.resolutions;
	        maxResolution = resolutions[minZoom];
	        minResolution = resolutions[maxZoom] !== undefined ?
	            resolutions[maxZoom] : resolutions[resolutions.length - 1];
	        if (options.constrainResolution) {
	            resolutionConstraint = createSnapToResolutions(resolutions, smooth, !constrainOnlyCenter && extent);
	        }
	        else {
	            resolutionConstraint = createMinMaxResolution(maxResolution, minResolution, smooth, !constrainOnlyCenter && extent);
	        }
	    }
	    else {
	        // calculate the default min and max resolution
	        var size = !projExtent ?
	            // use an extent that can fit the whole world if need be
	            360 * METERS_PER_UNIT[Units.DEGREES] /
	                projection.getMetersPerUnit() :
	            Math.max(getWidth(projExtent), getHeight(projExtent));
	        var defaultMaxResolution = size / DEFAULT_TILE_SIZE / Math.pow(defaultZoomFactor, DEFAULT_MIN_ZOOM);
	        var defaultMinResolution = defaultMaxResolution / Math.pow(defaultZoomFactor, defaultMaxZoom - DEFAULT_MIN_ZOOM);
	        // user provided maxResolution takes precedence
	        maxResolution = options.maxResolution;
	        if (maxResolution !== undefined) {
	            minZoom = 0;
	        }
	        else {
	            maxResolution = defaultMaxResolution / Math.pow(zoomFactor, minZoom);
	        }
	        // user provided minResolution takes precedence
	        minResolution = options.minResolution;
	        if (minResolution === undefined) {
	            if (options.maxZoom !== undefined) {
	                if (options.maxResolution !== undefined) {
	                    minResolution = maxResolution / Math.pow(zoomFactor, maxZoom);
	                }
	                else {
	                    minResolution = defaultMaxResolution / Math.pow(zoomFactor, maxZoom);
	                }
	            }
	            else {
	                minResolution = defaultMinResolution;
	            }
	        }
	        // given discrete zoom levels, minResolution may be different than provided
	        maxZoom = minZoom + Math.floor(Math.log(maxResolution / minResolution) / Math.log(zoomFactor));
	        minResolution = maxResolution / Math.pow(zoomFactor, maxZoom - minZoom);
	        if (options.constrainResolution) {
	            resolutionConstraint = createSnapToPower(zoomFactor, maxResolution, minResolution, smooth, !constrainOnlyCenter && extent);
	        }
	        else {
	            resolutionConstraint = createMinMaxResolution(maxResolution, minResolution, smooth, !constrainOnlyCenter && extent);
	        }
	    }
	    return { constraint: resolutionConstraint, maxResolution: maxResolution,
	        minResolution: minResolution, minZoom: minZoom, zoomFactor: zoomFactor };
	}
	/**
	 * @param {ViewOptions} options View options.
	 * @return {import("./rotationconstraint.js").Type} Rotation constraint.
	 */
	function createRotationConstraint(options) {
	    var enableRotation = options.enableRotation !== undefined ?
	        options.enableRotation : true;
	    if (enableRotation) {
	        var constrainRotation = options.constrainRotation;
	        if (constrainRotation === undefined || constrainRotation === true) {
	            return createSnapToZero();
	        }
	        else if (constrainRotation === false) {
	            return none$1;
	        }
	        else if (typeof constrainRotation === 'number') {
	            return createSnapToN(constrainRotation);
	        }
	        else {
	            return none$1;
	        }
	    }
	    else {
	        return disable;
	    }
	}
	/**
	 * Determine if an animation involves no view change.
	 * @param {Animation} animation The animation.
	 * @return {boolean} The animation involves no view change.
	 */
	function isNoopAnimation(animation) {
	    if (animation.sourceCenter && animation.targetCenter) {
	        if (!equals$2(animation.sourceCenter, animation.targetCenter)) {
	            return false;
	        }
	    }
	    if (animation.sourceResolution !== animation.targetResolution) {
	        return false;
	    }
	    if (animation.sourceRotation !== animation.targetRotation) {
	        return false;
	    }
	    return true;
	}

	var __extends$N = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @typedef {Object} Options
	 * @property {number} [opacity=1] Opacity (0, 1).
	 * @property {boolean} [visible=true] Visibility.
	 * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
	 * rendered outside of this extent.
	 * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
	 * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
	 * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
	 * method was used.
	 * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
	 * visible.
	 * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
	 * be visible.
	 * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
	 * visible.
	 * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
	 * be visible.
	 * @property {Array<import("./Base.js").default>|import("../Collection.js").default<import("./Base.js").default>} [layers] Child layers.
	 */
	/**
	 * @enum {string}
	 * @private
	 */
	var Property$3 = {
	    LAYERS: 'layers'
	};
	/**
	 * @classdesc
	 * A {@link module:ol/Collection~Collection} of layers that are handled together.
	 *
	 * A generic `change` event is triggered when the group/Collection changes.
	 *
	 * @api
	 */
	var LayerGroup = /** @class */ (function (_super) {
	    __extends$N(LayerGroup, _super);
	    /**
	     * @param {Options=} opt_options Layer options.
	     */
	    function LayerGroup(opt_options) {
	        var _this = this;
	        var options = opt_options || {};
	        var baseOptions = /** @type {Options} */ (assign$1({}, options));
	        delete baseOptions.layers;
	        var layers = options.layers;
	        _this = _super.call(this, baseOptions) || this;
	        /**
	         * @private
	         * @type {Array<import("../events.js").EventsKey>}
	         */
	        _this.layersListenerKeys_ = [];
	        /**
	         * @private
	         * @type {Object<string, Array<import("../events.js").EventsKey>>}
	         */
	        _this.listenerKeys_ = {};
	        _this.addEventListener(getChangeEventType(Property$3.LAYERS), _this.handleLayersChanged_);
	        if (layers) {
	            if (Array.isArray(layers)) {
	                layers = new Collection$2(layers.slice(), { unique: true });
	            }
	            else {
	                assert(typeof /** @type {?} */ (layers).getArray === 'function', 43); // Expected `layers` to be an array or a `Collection`
	            }
	        }
	        else {
	            layers = new Collection$2(undefined, { unique: true });
	        }
	        _this.setLayers(layers);
	        return _this;
	    }
	    /**
	     * @private
	     */
	    LayerGroup.prototype.handleLayerChange_ = function () {
	        this.changed();
	    };
	    /**
	     * @private
	     */
	    LayerGroup.prototype.handleLayersChanged_ = function () {
	        this.layersListenerKeys_.forEach(unlistenByKey);
	        this.layersListenerKeys_.length = 0;
	        var layers = this.getLayers();
	        this.layersListenerKeys_.push(listen$1(layers, CollectionEventType.ADD, this.handleLayersAdd_, this), listen$1(layers, CollectionEventType.REMOVE, this.handleLayersRemove_, this));
	        for (var id in this.listenerKeys_) {
	            this.listenerKeys_[id].forEach(unlistenByKey);
	        }
	        clear$1(this.listenerKeys_);
	        var layersArray = layers.getArray();
	        for (var i = 0, ii = layersArray.length; i < ii; i++) {
	            var layer = layersArray[i];
	            this.listenerKeys_[getUid(layer)] = [
	                listen$1(layer, ObjectEventType.PROPERTYCHANGE, this.handleLayerChange_, this),
	                listen$1(layer, EventType.CHANGE, this.handleLayerChange_, this)
	            ];
	        }
	        this.changed();
	    };
	    /**
	     * @param {import("../Collection.js").CollectionEvent} collectionEvent CollectionEvent.
	     * @private
	     */
	    LayerGroup.prototype.handleLayersAdd_ = function (collectionEvent) {
	        var layer = /** @type {import("./Base.js").default} */ (collectionEvent.element);
	        this.listenerKeys_[getUid(layer)] = [
	            listen$1(layer, ObjectEventType.PROPERTYCHANGE, this.handleLayerChange_, this),
	            listen$1(layer, EventType.CHANGE, this.handleLayerChange_, this)
	        ];
	        this.changed();
	    };
	    /**
	     * @param {import("../Collection.js").CollectionEvent} collectionEvent CollectionEvent.
	     * @private
	     */
	    LayerGroup.prototype.handleLayersRemove_ = function (collectionEvent) {
	        var layer = /** @type {import("./Base.js").default} */ (collectionEvent.element);
	        var key = getUid(layer);
	        this.listenerKeys_[key].forEach(unlistenByKey);
	        delete this.listenerKeys_[key];
	        this.changed();
	    };
	    /**
	     * Returns the {@link module:ol/Collection collection} of {@link module:ol/layer/Layer~Layer layers}
	     * in this group.
	     * @return {!import("../Collection.js").default<import("./Base.js").default>} Collection of
	     *   {@link module:ol/layer/Base layers} that are part of this group.
	     * @observable
	     * @api
	     */
	    LayerGroup.prototype.getLayers = function () {
	        return (
	        /** @type {!import("../Collection.js").default<import("./Base.js").default>} */ (this.get(Property$3.LAYERS)));
	    };
	    /**
	     * Set the {@link module:ol/Collection collection} of {@link module:ol/layer/Layer~Layer layers}
	     * in this group.
	     * @param {!import("../Collection.js").default<import("./Base.js").default>} layers Collection of
	     *   {@link module:ol/layer/Base layers} that are part of this group.
	     * @observable
	     * @api
	     */
	    LayerGroup.prototype.setLayers = function (layers) {
	        this.set(Property$3.LAYERS, layers);
	    };
	    /**
	     * @inheritDoc
	     */
	    LayerGroup.prototype.getLayersArray = function (opt_array) {
	        var array = opt_array !== undefined ? opt_array : [];
	        this.getLayers().forEach(function (layer) {
	            layer.getLayersArray(array);
	        });
	        return array;
	    };
	    /**
	     * @inheritDoc
	     */
	    LayerGroup.prototype.getLayerStatesArray = function (opt_states) {
	        var states = opt_states !== undefined ? opt_states : [];
	        var pos = states.length;
	        this.getLayers().forEach(function (layer) {
	            layer.getLayerStatesArray(states);
	        });
	        var ownLayerState = this.getLayerState();
	        for (var i = pos, ii = states.length; i < ii; i++) {
	            var layerState = states[i];
	            layerState.opacity *= ownLayerState.opacity;
	            layerState.visible = layerState.visible && ownLayerState.visible;
	            layerState.maxResolution = Math.min(layerState.maxResolution, ownLayerState.maxResolution);
	            layerState.minResolution = Math.max(layerState.minResolution, ownLayerState.minResolution);
	            layerState.minZoom = Math.max(layerState.minZoom, ownLayerState.minZoom);
	            layerState.maxZoom = Math.min(layerState.maxZoom, ownLayerState.maxZoom);
	            if (ownLayerState.extent !== undefined) {
	                if (layerState.extent !== undefined) {
	                    layerState.extent = getIntersection(layerState.extent, ownLayerState.extent);
	                }
	                else {
	                    layerState.extent = ownLayerState.extent;
	                }
	            }
	        }
	        return states;
	    };
	    /**
	     * @inheritDoc
	     */
	    LayerGroup.prototype.getSourceState = function () {
	        return SourceState.READY;
	    };
	    return LayerGroup;
	}(BaseLayer));

	/**
	 * @module ol/size
	 */
	/**
	 * Determines if a size has a positive area.
	 * @param {Size} size The size to test.
	 * @return {boolean} The size has a positive area.
	 */
	function hasArea(size) {
	    return size[0] > 0 && size[1] > 0;
	}
	/**
	 * Returns a size scaled by a ratio. The result will be an array of integers.
	 * @param {Size} size Size.
	 * @param {number} ratio Ratio.
	 * @param {Size=} opt_size Optional reusable size array.
	 * @return {Size} The scaled size.
	 */
	function scale$3(size, ratio, opt_size) {
	    if (opt_size === undefined) {
	        opt_size = [0, 0];
	    }
	    opt_size[0] = (size[0] * ratio + 0.5) | 0;
	    opt_size[1] = (size[1] * ratio + 0.5) | 0;
	    return opt_size;
	}
	/**
	 * Returns an `Size` array for the passed in number (meaning: square) or
	 * `Size` array.
	 * (meaning: non-square),
	 * @param {number|Size} size Width and height.
	 * @param {Size=} opt_size Optional reusable size array.
	 * @return {Size} Size.
	 * @api
	 */
	function toSize(size, opt_size) {
	    if (Array.isArray(size)) {
	        return size;
	    }
	    else {
	        if (opt_size === undefined) {
	            opt_size = [size, size];
	        }
	        else {
	            opt_size[0] = size;
	            opt_size[1] = size;
	        }
	        return opt_size;
	    }
	}

	var __extends$O = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * State of the current frame. Only `pixelRatio`, `time` and `viewState` should
	 * be used in applications.
	 * @typedef {Object} FrameState
	 * @property {number} pixelRatio The pixel ratio of the frame.
	 * @property {number} time The time when rendering of the frame was requested.
	 * @property {import("./View.js").State} viewState The state of the current view.
	 * @property {boolean} animate
	 * @property {import("./transform.js").Transform} coordinateToPixelTransform
	 * @property {null|import("./extent.js").Extent} extent
	 * @property {Array<DeclutterItems>} declutterItems
	 * @property {number} index
	 * @property {Array<import("./layer/Layer.js").State>} layerStatesArray
	 * @property {number} layerIndex
	 * @property {import("./transform.js").Transform} pixelToCoordinateTransform
	 * @property {Array<PostRenderFunction>} postRenderFunctions
	 * @property {import("./size.js").Size} size
	 * @property {TileQueue} tileQueue
	 * @property {!Object<string, Object<string, boolean>>} usedTiles
	 * @property {Array<number>} viewHints
	 * @property {!Object<string, Object<string, boolean>>} wantedTiles
	 */
	/**
	 * @typedef {Object} DeclutterItems
	 * @property {Array<*>} items Declutter items of an executor.
	 * @property {number} opacity Layer opacity.
	 */
	/**
	 * @typedef {function(PluggableMap, ?FrameState): any} PostRenderFunction
	 */
	/**
	 * @typedef {Object} AtPixelOptions
	 * @property {undefined|function(import("./layer/Layer.js").default): boolean} [layerFilter] Layer filter
	 * function. The filter function will receive one argument, the
	 * {@link module:ol/layer/Layer layer-candidate} and it should return a boolean value.
	 * Only layers which are visible and for which this function returns `true`
	 * will be tested for features. By default, all visible layers will be tested.
	 * @property {number} [hitTolerance=0] Hit-detection tolerance in pixels. Pixels
	 * inside the radius around the given position will be checked for features.
	 * @property {boolean} [checkWrapped=true] Check-Wrapped Will check for for wrapped geometries inside the range of
	 *   +/- 1 world width. Works only if a projection is used that can be wrapped.
	 */
	/**
	 * @typedef {Object} MapOptionsInternal
	 * @property {Collection<import("./control/Control.js").default>} [controls]
	 * @property {Collection<import("./interaction/Interaction.js").default>} [interactions]
	 * @property {HTMLElement|Document} keyboardEventTarget
	 * @property {Collection<import("./Overlay.js").default>} overlays
	 * @property {Object<string, *>} values
	 */
	/**
	 * Object literal with config options for the map.
	 * @typedef {Object} MapOptions
	 * @property {Collection<import("./control/Control.js").default>|Array<import("./control/Control.js").default>} [controls]
	 * Controls initially added to the map. If not specified,
	 * {@link module:ol/control~defaults} is used.
	 * @property {number} [pixelRatio=window.devicePixelRatio] The ratio between
	 * physical pixels and device-independent pixels (dips) on the device.
	 * @property {Collection<import("./interaction/Interaction.js").default>|Array<import("./interaction/Interaction.js").default>} [interactions]
	 * Interactions that are initially added to the map. If not specified,
	 * {@link module:ol/interaction~defaults} is used.
	 * @property {HTMLElement|Document|string} [keyboardEventTarget] The element to
	 * listen to keyboard events on. This determines when the `KeyboardPan` and
	 * `KeyboardZoom` interactions trigger. For example, if this option is set to
	 * `document` the keyboard interactions will always trigger. If this option is
	 * not specified, the element the library listens to keyboard events on is the
	 * map target (i.e. the user-provided div for the map). If this is not
	 * `document`, the target element needs to be focused for key events to be
	 * emitted, requiring that the target element has a `tabindex` attribute.
	 * @property {Array<import("./layer/Base.js").default>|Collection<import("./layer/Base.js").default>|LayerGroup} [layers]
	 * Layers. If this is not defined, a map with no layers will be rendered. Note
	 * that layers are rendered in the order supplied, so if you want, for example,
	 * a vector layer to appear on top of a tile layer, it must come after the tile
	 * layer.
	 * @property {number} [maxTilesLoading=16] Maximum number tiles to load
	 * simultaneously.
	 * @property {number} [moveTolerance=1] The minimum distance in pixels the
	 * cursor must move to be detected as a map move event instead of a click.
	 * Increasing this value can make it easier to click on the map.
	 * @property {Collection<import("./Overlay.js").default>|Array<import("./Overlay.js").default>} [overlays]
	 * Overlays initially added to the map. By default, no overlays are added.
	 * @property {HTMLElement|string} [target] The container for the map, either the
	 * element itself or the `id` of the element. If not specified at construction
	 * time, {@link module:ol/Map~Map#setTarget} must be called for the map to be
	 * rendered.
	 * @property {View} [view] The map's view.  No layer sources will be
	 * fetched unless this is specified at construction time or through
	 * {@link module:ol/Map~Map#setView}.
	 */
	/**
	 * @param {HTMLElement} element Element.
	 * @param {string} touchAction Value for `touch-action'.
	 */
	function setTouchAction(element, touchAction) {
	    element.style.msTouchAction = touchAction;
	    element.style.touchAction = touchAction;
	    element.setAttribute('touch-action', touchAction);
	}
	/**
	 * @fires import("./MapBrowserEvent.js").MapBrowserEvent
	 * @fires import("./MapEvent.js").MapEvent
	 * @fires import("./render/Event.js").default#precompose
	 * @fires import("./render/Event.js").default#postcompose
	 * @fires import("./render/Event.js").default#rendercomplete
	 * @api
	 */
	var PluggableMap = /** @class */ (function (_super) {
	    __extends$O(PluggableMap, _super);
	    /**
	     * @param {MapOptions} options Map options.
	     */
	    function PluggableMap(options) {
	        var _this = _super.call(this) || this;
	        var optionsInternal = createOptionsInternal(options);
	        /** @private */
	        _this.boundHandleBrowserEvent_ = _this.handleBrowserEvent.bind(_this);
	        /**
	         * @type {number}
	         * @private
	         */
	        _this.maxTilesLoading_ = options.maxTilesLoading !== undefined ? options.maxTilesLoading : 16;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.pixelRatio_ = options.pixelRatio !== undefined ?
	            options.pixelRatio : DEVICE_PIXEL_RATIO;
	        /**
	         * @private
	         * @type {*}
	         */
	        _this.postRenderTimeoutHandle_;
	        /**
	         * @private
	         * @type {number|undefined}
	         */
	        _this.animationDelayKey_;
	        /**
	         * @private
	         */
	        _this.animationDelay_ = function () {
	            this.animationDelayKey_ = undefined;
	            this.renderFrame_(Date.now());
	        }.bind(_this);
	        /**
	         * @private
	         * @type {import("./transform.js").Transform}
	         */
	        _this.coordinateToPixelTransform_ = create();
	        /**
	         * @private
	         * @type {import("./transform.js").Transform}
	         */
	        _this.pixelToCoordinateTransform_ = create();
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.frameIndex_ = 0;
	        /**
	         * @private
	         * @type {?FrameState}
	         */
	        _this.frameState_ = null;
	        /**
	         * The extent at the previous 'moveend' event.
	         * @private
	         * @type {import("./extent.js").Extent}
	         */
	        _this.previousExtent_ = null;
	        /**
	         * @private
	         * @type {?import("./events.js").EventsKey}
	         */
	        _this.viewPropertyListenerKey_ = null;
	        /**
	         * @private
	         * @type {?import("./events.js").EventsKey}
	         */
	        _this.viewChangeListenerKey_ = null;
	        /**
	         * @private
	         * @type {?Array<import("./events.js").EventsKey>}
	         */
	        _this.layerGroupPropertyListenerKeys_ = null;
	        /**
	         * @private
	         * @type {!HTMLElement}
	         */
	        _this.viewport_ = document.createElement('div');
	        _this.viewport_.className = 'ol-viewport' + ('ontouchstart' in window ? ' ol-touch' : '');
	        _this.viewport_.style.position = 'relative';
	        _this.viewport_.style.overflow = 'hidden';
	        _this.viewport_.style.width = '100%';
	        _this.viewport_.style.height = '100%';
	        /**
	         * @private
	         * @type {!HTMLElement}
	         */
	        _this.overlayContainer_ = document.createElement('div');
	        _this.overlayContainer_.style.position = 'absolute';
	        _this.overlayContainer_.style.zIndex = '0';
	        _this.overlayContainer_.style.width = '100%';
	        _this.overlayContainer_.style.height = '100%';
	        _this.overlayContainer_.className = 'ol-overlaycontainer';
	        _this.viewport_.appendChild(_this.overlayContainer_);
	        /**
	         * @private
	         * @type {!HTMLElement}
	         */
	        _this.overlayContainerStopEvent_ = document.createElement('div');
	        _this.overlayContainerStopEvent_.style.position = 'absolute';
	        _this.overlayContainerStopEvent_.style.zIndex = '0';
	        _this.overlayContainerStopEvent_.style.width = '100%';
	        _this.overlayContainerStopEvent_.style.height = '100%';
	        _this.overlayContainerStopEvent_.className = 'ol-overlaycontainer-stopevent';
	        _this.viewport_.appendChild(_this.overlayContainerStopEvent_);
	        /**
	         * @private
	         * @type {MapBrowserEventHandler}
	         */
	        _this.mapBrowserEventHandler_ = new MapBrowserEventHandler(_this, options.moveTolerance);
	        var handleMapBrowserEvent = _this.handleMapBrowserEvent.bind(_this);
	        for (var key in MapBrowserEventType) {
	            _this.mapBrowserEventHandler_.addEventListener(MapBrowserEventType[key], handleMapBrowserEvent);
	        }
	        /**
	         * @private
	         * @type {HTMLElement|Document}
	         */
	        _this.keyboardEventTarget_ = optionsInternal.keyboardEventTarget;
	        /**
	         * @private
	         * @type {?Array<import("./events.js").EventsKey>}
	         */
	        _this.keyHandlerKeys_ = null;
	        /**
	         * @private
	         * @type {?Array<import("./events.js").EventsKey>}
	         */
	        _this.focusHandlerKeys_ = null;
	        var handleBrowserEvent = _this.handleBrowserEvent.bind(_this);
	        _this.viewport_.addEventListener(EventType.CONTEXTMENU, handleBrowserEvent, false);
	        _this.viewport_.addEventListener(EventType.WHEEL, handleBrowserEvent, false);
	        /**
	         * @type {Collection<import("./control/Control.js").default>}
	         * @protected
	         */
	        _this.controls = optionsInternal.controls || new Collection$2();
	        /**
	         * @type {Collection<import("./interaction/Interaction.js").default>}
	         * @protected
	         */
	        _this.interactions = optionsInternal.interactions || new Collection$2();
	        /**
	         * @type {Collection<import("./Overlay.js").default>}
	         * @private
	         */
	        _this.overlays_ = optionsInternal.overlays;
	        /**
	         * A lookup of overlays by id.
	         * @private
	         * @type {Object<string, import("./Overlay.js").default>}
	         */
	        _this.overlayIdIndex_ = {};
	        /**
	         * @type {import("./renderer/Map.js").default}
	         * @private
	         */
	        _this.renderer_ = null;
	        /**
	         * @type {undefined|function(Event): void}
	         * @private
	         */
	        _this.handleResize_;
	        /**
	         * @private
	         * @type {!Array<PostRenderFunction>}
	         */
	        _this.postRenderFunctions_ = [];
	        /**
	         * @private
	         * @type {TileQueue}
	         */
	        _this.tileQueue_ = new TileQueue(_this.getTilePriority.bind(_this), _this.handleTileChange_.bind(_this));
	        _this.addEventListener(getChangeEventType(MapProperty.LAYERGROUP), _this.handleLayerGroupChanged_);
	        _this.addEventListener(getChangeEventType(MapProperty.VIEW), _this.handleViewChanged_);
	        _this.addEventListener(getChangeEventType(MapProperty.SIZE), _this.handleSizeChanged_);
	        _this.addEventListener(getChangeEventType(MapProperty.TARGET), _this.handleTargetChanged_);
	        // setProperties will trigger the rendering of the map if the map
	        // is "defined" already.
	        _this.setProperties(optionsInternal.values);
	        _this.controls.forEach(
	        /**
	         * @param {import("./control/Control.js").default} control Control.
	         * @this {PluggableMap}
	         */
	        function (control) {
	            control.setMap(this);
	        }.bind(_this));
	        _this.controls.addEventListener(CollectionEventType.ADD, 
	        /**
	         * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
	         */
	        function (event) {
	            event.element.setMap(this);
	        }.bind(_this));
	        _this.controls.addEventListener(CollectionEventType.REMOVE, 
	        /**
	         * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
	         */
	        function (event) {
	            event.element.setMap(null);
	        }.bind(_this));
	        _this.interactions.forEach(
	        /**
	         * @param {import("./interaction/Interaction.js").default} interaction Interaction.
	         * @this {PluggableMap}
	         */
	        function (interaction) {
	            interaction.setMap(this);
	        }.bind(_this));
	        _this.interactions.addEventListener(CollectionEventType.ADD, 
	        /**
	         * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
	         */
	        function (event) {
	            event.element.setMap(this);
	        }.bind(_this));
	        _this.interactions.addEventListener(CollectionEventType.REMOVE, 
	        /**
	         * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
	         */
	        function (event) {
	            event.element.setMap(null);
	        }.bind(_this));
	        _this.overlays_.forEach(_this.addOverlayInternal_.bind(_this));
	        _this.overlays_.addEventListener(CollectionEventType.ADD, 
	        /**
	         * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
	         */
	        function (event) {
	            this.addOverlayInternal_(/** @type {import("./Overlay.js").default} */ (event.element));
	        }.bind(_this));
	        _this.overlays_.addEventListener(CollectionEventType.REMOVE, 
	        /**
	         * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
	         */
	        function (event) {
	            var overlay = /** @type {import("./Overlay.js").default} */ (event.element);
	            var id = overlay.getId();
	            if (id !== undefined) {
	                delete this.overlayIdIndex_[id.toString()];
	            }
	            event.element.setMap(null);
	        }.bind(_this));
	        return _this;
	    }
	    /**
	     * @abstract
	     * @return {import("./renderer/Map.js").default} The map renderer
	     */
	    PluggableMap.prototype.createRenderer = function () {
	        throw new Error('Use a map type that has a createRenderer method');
	    };
	    /**
	     * Add the given control to the map.
	     * @param {import("./control/Control.js").default} control Control.
	     * @api
	     */
	    PluggableMap.prototype.addControl = function (control) {
	        this.getControls().push(control);
	    };
	    /**
	     * Add the given interaction to the map. If you want to add an interaction
	     * at another point of the collection use `getInteraction()` and the methods
	     * available on {@link module:ol/Collection~Collection}. This can be used to
	     * stop the event propagation from the handleEvent function. The interactions
	     * get to handle the events in the reverse order of this collection.
	     * @param {import("./interaction/Interaction.js").default} interaction Interaction to add.
	     * @api
	     */
	    PluggableMap.prototype.addInteraction = function (interaction) {
	        this.getInteractions().push(interaction);
	    };
	    /**
	     * Adds the given layer to the top of this map. If you want to add a layer
	     * elsewhere in the stack, use `getLayers()` and the methods available on
	     * {@link module:ol/Collection~Collection}.
	     * @param {import("./layer/Base.js").default} layer Layer.
	     * @api
	     */
	    PluggableMap.prototype.addLayer = function (layer) {
	        var layers = this.getLayerGroup().getLayers();
	        layers.push(layer);
	    };
	    /**
	     * Add the given overlay to the map.
	     * @param {import("./Overlay.js").default} overlay Overlay.
	     * @api
	     */
	    PluggableMap.prototype.addOverlay = function (overlay) {
	        this.getOverlays().push(overlay);
	    };
	    /**
	     * This deals with map's overlay collection changes.
	     * @param {import("./Overlay.js").default} overlay Overlay.
	     * @private
	     */
	    PluggableMap.prototype.addOverlayInternal_ = function (overlay) {
	        var id = overlay.getId();
	        if (id !== undefined) {
	            this.overlayIdIndex_[id.toString()] = overlay;
	        }
	        overlay.setMap(this);
	    };
	    /**
	     *
	     * @inheritDoc
	     */
	    PluggableMap.prototype.disposeInternal = function () {
	        this.mapBrowserEventHandler_.dispose();
	        this.viewport_.removeEventListener(EventType.CONTEXTMENU, this.boundHandleBrowserEvent_);
	        this.viewport_.removeEventListener(EventType.WHEEL, this.boundHandleBrowserEvent_);
	        if (this.handleResize_ !== undefined) {
	            removeEventListener(EventType.RESIZE, this.handleResize_, false);
	            this.handleResize_ = undefined;
	        }
	        this.setTarget(null);
	        _super.prototype.disposeInternal.call(this);
	    };
	    /**
	     * Detect features that intersect a pixel on the viewport, and execute a
	     * callback with each intersecting feature. Layers included in the detection can
	     * be configured through the `layerFilter` option in `opt_options`.
	     * @param {import("./pixel.js").Pixel} pixel Pixel.
	     * @param {function(this: S, import("./Feature.js").FeatureLike,
	     *     import("./layer/Layer.js").default): T} callback Feature callback. The callback will be
	     *     called with two arguments. The first argument is one
	     *     {@link module:ol/Feature feature} or
	     *     {@link module:ol/render/Feature render feature} at the pixel, the second is
	     *     the {@link module:ol/layer/Layer layer} of the feature and will be null for
	     *     unmanaged layers. To stop detection, callback functions can return a
	     *     truthy value.
	     * @param {AtPixelOptions=} opt_options Optional options.
	     * @return {T|undefined} Callback result, i.e. the return value of last
	     * callback execution, or the first truthy callback return value.
	     * @template S,T
	     * @api
	     */
	    PluggableMap.prototype.forEachFeatureAtPixel = function (pixel, callback, opt_options) {
	        if (!this.frameState_) {
	            return;
	        }
	        var coordinate = this.getCoordinateFromPixelInternal(pixel);
	        opt_options = opt_options !== undefined ? opt_options : {};
	        var hitTolerance = opt_options.hitTolerance !== undefined ?
	            opt_options.hitTolerance * this.frameState_.pixelRatio : 0;
	        var layerFilter = opt_options.layerFilter !== undefined ?
	            opt_options.layerFilter : TRUE;
	        var checkWrapped = opt_options.checkWrapped !== false;
	        return this.renderer_.forEachFeatureAtCoordinate(coordinate, this.frameState_, hitTolerance, checkWrapped, callback, null, layerFilter, null);
	    };
	    /**
	     * Get all features that intersect a pixel on the viewport.
	     * @param {import("./pixel.js").Pixel} pixel Pixel.
	     * @param {AtPixelOptions=} opt_options Optional options.
	     * @return {Array<import("./Feature.js").FeatureLike>} The detected features or
	     * an empty array if none were found.
	     * @api
	     */
	    PluggableMap.prototype.getFeaturesAtPixel = function (pixel, opt_options) {
	        var features = [];
	        this.forEachFeatureAtPixel(pixel, function (feature) {
	            features.push(feature);
	        }, opt_options);
	        return features;
	    };
	    /**
	     * Detect layers that have a color value at a pixel on the viewport, and
	     * execute a callback with each matching layer. Layers included in the
	     * detection can be configured through `opt_layerFilter`.
	     *
	     * Note: this may give false positives unless the map layers have had different `className`
	     * properties assigned to them.
	     *
	     * @param {import("./pixel.js").Pixel} pixel Pixel.
	     * @param {function(this: S, import("./layer/Layer.js").default, (Uint8ClampedArray|Uint8Array)): T} callback
	     *     Layer callback. This callback will receive two arguments: first is the
	     *     {@link module:ol/layer/Layer layer}, second argument is an array representing
	     *     [R, G, B, A] pixel values (0 - 255) and will be `null` for layer types
	     *     that do not currently support this argument. To stop detection, callback
	     *     functions can return a truthy value.
	     * @param {AtPixelOptions=} opt_options Configuration options.
	     * @return {T|undefined} Callback result, i.e. the return value of last
	     * callback execution, or the first truthy callback return value.
	     * @template S,T
	     * @api
	     */
	    PluggableMap.prototype.forEachLayerAtPixel = function (pixel, callback, opt_options) {
	        if (!this.frameState_) {
	            return;
	        }
	        var options = opt_options || {};
	        var hitTolerance = options.hitTolerance !== undefined ?
	            options.hitTolerance * this.frameState_.pixelRatio : 0;
	        var layerFilter = options.layerFilter || TRUE;
	        return this.renderer_.forEachLayerAtPixel(pixel, this.frameState_, hitTolerance, callback, layerFilter);
	    };
	    /**
	     * Detect if features intersect a pixel on the viewport. Layers included in the
	     * detection can be configured through `opt_layerFilter`.
	     * @param {import("./pixel.js").Pixel} pixel Pixel.
	     * @param {AtPixelOptions=} opt_options Optional options.
	     * @return {boolean} Is there a feature at the given pixel?
	     * @api
	     */
	    PluggableMap.prototype.hasFeatureAtPixel = function (pixel, opt_options) {
	        if (!this.frameState_) {
	            return false;
	        }
	        var coordinate = this.getCoordinateFromPixelInternal(pixel);
	        opt_options = opt_options !== undefined ? opt_options : {};
	        var layerFilter = opt_options.layerFilter !== undefined ? opt_options.layerFilter : TRUE;
	        var hitTolerance = opt_options.hitTolerance !== undefined ?
	            opt_options.hitTolerance * this.frameState_.pixelRatio : 0;
	        var checkWrapped = opt_options.checkWrapped !== false;
	        return this.renderer_.hasFeatureAtCoordinate(coordinate, this.frameState_, hitTolerance, checkWrapped, layerFilter, null);
	    };
	    /**
	     * Returns the coordinate in user projection for a browser event.
	     * @param {Event} event Event.
	     * @return {import("./coordinate.js").Coordinate} Coordinate.
	     * @api
	     */
	    PluggableMap.prototype.getEventCoordinate = function (event) {
	        return this.getCoordinateFromPixel(this.getEventPixel(event));
	    };
	    /**
	     * Returns the coordinate in view projection for a browser event.
	     * @param {Event} event Event.
	     * @return {import("./coordinate.js").Coordinate} Coordinate.
	     */
	    PluggableMap.prototype.getEventCoordinateInternal = function (event) {
	        return this.getCoordinateFromPixelInternal(this.getEventPixel(event));
	    };
	    /**
	     * Returns the map pixel position for a browser event relative to the viewport.
	     * @param {Event|TouchEvent} event Event.
	     * @return {import("./pixel.js").Pixel} Pixel.
	     * @api
	     */
	    PluggableMap.prototype.getEventPixel = function (event) {
	        var viewportPosition = this.viewport_.getBoundingClientRect();
	        var eventPosition = 'changedTouches' in event ?
	            /** @type {TouchEvent} */ (event).changedTouches[0] :
	            /** @type {MouseEvent} */ (event);
	        return [
	            eventPosition.clientX - viewportPosition.left,
	            eventPosition.clientY - viewportPosition.top
	        ];
	    };
	    /**
	     * Get the target in which this map is rendered.
	     * Note that this returns what is entered as an option or in setTarget:
	     * if that was an element, it returns an element; if a string, it returns that.
	     * @return {HTMLElement|string|undefined} The Element or id of the Element that the
	     *     map is rendered in.
	     * @observable
	     * @api
	     */
	    PluggableMap.prototype.getTarget = function () {
	        return /** @type {HTMLElement|string|undefined} */ (this.get(MapProperty.TARGET));
	    };
	    /**
	     * Get the DOM element into which this map is rendered. In contrast to
	     * `getTarget` this method always return an `Element`, or `null` if the
	     * map has no target.
	     * @return {HTMLElement} The element that the map is rendered in.
	     * @api
	     */
	    PluggableMap.prototype.getTargetElement = function () {
	        var target = this.getTarget();
	        if (target !== undefined) {
	            return typeof target === 'string' ? document.getElementById(target) : target;
	        }
	        else {
	            return null;
	        }
	    };
	    /**
	     * Get the coordinate for a given pixel.  This returns a coordinate in the
	     * user projection.
	     * @param {import("./pixel.js").Pixel} pixel Pixel position in the map viewport.
	     * @return {import("./coordinate.js").Coordinate} The coordinate for the pixel position.
	     * @api
	     */
	    PluggableMap.prototype.getCoordinateFromPixel = function (pixel) {
	        return toUserCoordinate(this.getCoordinateFromPixelInternal(pixel), this.getView().getProjection());
	    };
	    /**
	     * Get the coordinate for a given pixel.  This returns a coordinate in the
	     * map view projection.
	     * @param {import("./pixel.js").Pixel} pixel Pixel position in the map viewport.
	     * @return {import("./coordinate.js").Coordinate} The coordinate for the pixel position.
	     */
	    PluggableMap.prototype.getCoordinateFromPixelInternal = function (pixel) {
	        var frameState = this.frameState_;
	        if (!frameState) {
	            return null;
	        }
	        else {
	            return apply(frameState.pixelToCoordinateTransform, pixel.slice());
	        }
	    };
	    /**
	     * Get the map controls. Modifying this collection changes the controls
	     * associated with the map.
	     * @return {Collection<import("./control/Control.js").default>} Controls.
	     * @api
	     */
	    PluggableMap.prototype.getControls = function () {
	        return this.controls;
	    };
	    /**
	     * Get the map overlays. Modifying this collection changes the overlays
	     * associated with the map.
	     * @return {Collection<import("./Overlay.js").default>} Overlays.
	     * @api
	     */
	    PluggableMap.prototype.getOverlays = function () {
	        return this.overlays_;
	    };
	    /**
	     * Get an overlay by its identifier (the value returned by overlay.getId()).
	     * Note that the index treats string and numeric identifiers as the same. So
	     * `map.getOverlayById(2)` will return an overlay with id `'2'` or `2`.
	     * @param {string|number} id Overlay identifier.
	     * @return {import("./Overlay.js").default} Overlay.
	     * @api
	     */
	    PluggableMap.prototype.getOverlayById = function (id) {
	        var overlay = this.overlayIdIndex_[id.toString()];
	        return overlay !== undefined ? overlay : null;
	    };
	    /**
	     * Get the map interactions. Modifying this collection changes the interactions
	     * associated with the map.
	     *
	     * Interactions are used for e.g. pan, zoom and rotate.
	     * @return {Collection<import("./interaction/Interaction.js").default>} Interactions.
	     * @api
	     */
	    PluggableMap.prototype.getInteractions = function () {
	        return this.interactions;
	    };
	    /**
	     * Get the layergroup associated with this map.
	     * @return {LayerGroup} A layer group containing the layers in this map.
	     * @observable
	     * @api
	     */
	    PluggableMap.prototype.getLayerGroup = function () {
	        return (
	        /** @type {LayerGroup} */ (this.get(MapProperty.LAYERGROUP)));
	    };
	    /**
	     * Get the collection of layers associated with this map.
	     * @return {!Collection<import("./layer/Base.js").default>} Layers.
	     * @api
	     */
	    PluggableMap.prototype.getLayers = function () {
	        var layers = this.getLayerGroup().getLayers();
	        return layers;
	    };
	    /**
	     * @return {boolean} Layers have sources that are still loading.
	     */
	    PluggableMap.prototype.getLoading = function () {
	        var layerStatesArray = this.getLayerGroup().getLayerStatesArray();
	        for (var i = 0, ii = layerStatesArray.length; i < ii; ++i) {
	            var layer = layerStatesArray[i].layer;
	            var source = /** @type {import("./layer/Layer.js").default} */ (layer).getSource();
	            if (source && source.loading) {
	                return true;
	            }
	        }
	        return false;
	    };
	    /**
	     * Get the pixel for a coordinate.  This takes a coordinate in the user
	     * projection and returns the corresponding pixel.
	     * @param {import("./coordinate.js").Coordinate} coordinate A map coordinate.
	     * @return {import("./pixel.js").Pixel} A pixel position in the map viewport.
	     * @api
	     */
	    PluggableMap.prototype.getPixelFromCoordinate = function (coordinate) {
	        var viewCoordinate = fromUserCoordinate(coordinate, this.getView().getProjection());
	        return this.getPixelFromCoordinateInternal(viewCoordinate);
	    };
	    /**
	     * Get the pixel for a coordinate.  This takes a coordinate in the map view
	     * projection and returns the corresponding pixel.
	     * @param {import("./coordinate.js").Coordinate} coordinate A map coordinate.
	     * @return {import("./pixel.js").Pixel} A pixel position in the map viewport.
	     */
	    PluggableMap.prototype.getPixelFromCoordinateInternal = function (coordinate) {
	        var frameState = this.frameState_;
	        if (!frameState) {
	            return null;
	        }
	        else {
	            return apply(frameState.coordinateToPixelTransform, coordinate.slice(0, 2));
	        }
	    };
	    /**
	     * Get the map renderer.
	     * @return {import("./renderer/Map.js").default} Renderer
	     */
	    PluggableMap.prototype.getRenderer = function () {
	        return this.renderer_;
	    };
	    /**
	     * Get the size of this map.
	     * @return {import("./size.js").Size|undefined} The size in pixels of the map in the DOM.
	     * @observable
	     * @api
	     */
	    PluggableMap.prototype.getSize = function () {
	        return (
	        /** @type {import("./size.js").Size|undefined} */ (this.get(MapProperty.SIZE)));
	    };
	    /**
	     * Get the view associated with this map. A view manages properties such as
	     * center and resolution.
	     * @return {View} The view that controls this map.
	     * @observable
	     * @api
	     */
	    PluggableMap.prototype.getView = function () {
	        return (
	        /** @type {View} */ (this.get(MapProperty.VIEW)));
	    };
	    /**
	     * Get the element that serves as the map viewport.
	     * @return {HTMLElement} Viewport.
	     * @api
	     */
	    PluggableMap.prototype.getViewport = function () {
	        return this.viewport_;
	    };
	    /**
	     * Get the element that serves as the container for overlays.  Elements added to
	     * this container will let mousedown and touchstart events through to the map,
	     * so clicks and gestures on an overlay will trigger {@link module:ol/MapBrowserEvent~MapBrowserEvent}
	     * events.
	     * @return {!HTMLElement} The map's overlay container.
	     */
	    PluggableMap.prototype.getOverlayContainer = function () {
	        return this.overlayContainer_;
	    };
	    /**
	     * Get the element that serves as a container for overlays that don't allow
	     * event propagation. Elements added to this container won't let mousedown and
	     * touchstart events through to the map, so clicks and gestures on an overlay
	     * don't trigger any {@link module:ol/MapBrowserEvent~MapBrowserEvent}.
	     * @return {!HTMLElement} The map's overlay container that stops events.
	     */
	    PluggableMap.prototype.getOverlayContainerStopEvent = function () {
	        return this.overlayContainerStopEvent_;
	    };
	    /**
	     * @param {import("./Tile.js").default} tile Tile.
	     * @param {string} tileSourceKey Tile source key.
	     * @param {import("./coordinate.js").Coordinate} tileCenter Tile center.
	     * @param {number} tileResolution Tile resolution.
	     * @return {number} Tile priority.
	     */
	    PluggableMap.prototype.getTilePriority = function (tile, tileSourceKey, tileCenter, tileResolution) {
	        // Filter out tiles at higher zoom levels than the current zoom level, or that
	        // are outside the visible extent.
	        var frameState = this.frameState_;
	        if (!frameState || !(tileSourceKey in frameState.wantedTiles)) {
	            return DROP;
	        }
	        if (!frameState.wantedTiles[tileSourceKey][tile.getKey()]) {
	            return DROP;
	        }
	        // Prioritize the highest zoom level tiles closest to the focus.
	        // Tiles at higher zoom levels are prioritized using Math.log(tileResolution).
	        // Within a zoom level, tiles are prioritized by the distance in pixels between
	        // the center of the tile and the center of the viewport.  The factor of 65536
	        // means that the prioritization should behave as desired for tiles up to
	        // 65536 * Math.log(2) = 45426 pixels from the focus.
	        var center = frameState.viewState.center;
	        var deltaX = tileCenter[0] - center[0];
	        var deltaY = tileCenter[1] - center[1];
	        return 65536 * Math.log(tileResolution) +
	            Math.sqrt(deltaX * deltaX + deltaY * deltaY) / tileResolution;
	    };
	    /**
	     * @param {Event} browserEvent Browser event.
	     * @param {string=} opt_type Type.
	     */
	    PluggableMap.prototype.handleBrowserEvent = function (browserEvent, opt_type) {
	        var type = opt_type || browserEvent.type;
	        var mapBrowserEvent = new MapBrowserEvent(type, this, browserEvent);
	        this.handleMapBrowserEvent(mapBrowserEvent);
	    };
	    /**
	     * @param {MapBrowserEvent} mapBrowserEvent The event to handle.
	     */
	    PluggableMap.prototype.handleMapBrowserEvent = function (mapBrowserEvent) {
	        if (!this.frameState_) {
	            // With no view defined, we cannot translate pixels into geographical
	            // coordinates so interactions cannot be used.
	            return;
	        }
	        var target = mapBrowserEvent.originalEvent.target;
	        while (target instanceof HTMLElement) {
	            if (target.parentElement === this.overlayContainerStopEvent_) {
	                return;
	            }
	            target = target.parentElement;
	        }
	        mapBrowserEvent.frameState = this.frameState_;
	        var interactionsArray = this.getInteractions().getArray();
	        if (this.dispatchEvent(mapBrowserEvent) !== false) {
	            for (var i = interactionsArray.length - 1; i >= 0; i--) {
	                var interaction = interactionsArray[i];
	                if (!interaction.getActive()) {
	                    continue;
	                }
	                var cont = interaction.handleEvent(mapBrowserEvent);
	                if (!cont) {
	                    break;
	                }
	            }
	        }
	    };
	    /**
	     * @protected
	     */
	    PluggableMap.prototype.handlePostRender = function () {
	        var frameState = this.frameState_;
	        // Manage the tile queue
	        // Image loads are expensive and a limited resource, so try to use them
	        // efficiently:
	        // * When the view is static we allow a large number of parallel tile loads
	        //   to complete the frame as quickly as possible.
	        // * When animating or interacting, image loads can cause janks, so we reduce
	        //   the maximum number of loads per frame and limit the number of parallel
	        //   tile loads to remain reactive to view changes and to reduce the chance of
	        //   loading tiles that will quickly disappear from view.
	        var tileQueue = this.tileQueue_;
	        if (!tileQueue.isEmpty()) {
	            var maxTotalLoading = this.maxTilesLoading_;
	            var maxNewLoads = maxTotalLoading;
	            if (frameState) {
	                var hints = frameState.viewHints;
	                if (hints[ViewHint.ANIMATING] || hints[ViewHint.INTERACTING]) {
	                    var lowOnFrameBudget = !IMAGE_DECODE && Date.now() - frameState.time > 8;
	                    maxTotalLoading = lowOnFrameBudget ? 0 : 8;
	                    maxNewLoads = lowOnFrameBudget ? 0 : 2;
	                }
	            }
	            if (tileQueue.getTilesLoading() < maxTotalLoading) {
	                tileQueue.reprioritize(); // FIXME only call if view has changed
	                tileQueue.loadMoreTiles(maxTotalLoading, maxNewLoads);
	            }
	        }
	        if (frameState && this.hasListener(RenderEventType.RENDERCOMPLETE) && !frameState.animate &&
	            !this.tileQueue_.getTilesLoading() && !this.getLoading()) {
	            this.renderer_.dispatchRenderEvent(RenderEventType.RENDERCOMPLETE, frameState);
	        }
	        var postRenderFunctions = this.postRenderFunctions_;
	        for (var i = 0, ii = postRenderFunctions.length; i < ii; ++i) {
	            postRenderFunctions[i](this, frameState);
	        }
	        postRenderFunctions.length = 0;
	    };
	    /**
	     * @private
	     */
	    PluggableMap.prototype.handleSizeChanged_ = function () {
	        if (this.getView()) {
	            this.getView().resolveConstraints(0);
	        }
	        this.render();
	    };
	    /**
	     * @private
	     */
	    PluggableMap.prototype.handleTargetChanged_ = function () {
	        // target may be undefined, null, a string or an Element.
	        // If it's a string we convert it to an Element before proceeding.
	        // If it's not now an Element we remove the viewport from the DOM.
	        // If it's an Element we append the viewport element to it.
	        var targetElement;
	        if (this.getTarget()) {
	            targetElement = this.getTargetElement();
	        }
	        if (this.focusHandlerKeys_) {
	            for (var i = 0, ii = this.focusHandlerKeys_.length; i < ii; ++i) {
	                unlistenByKey(this.focusHandlerKeys_[i]);
	            }
	            this.focusHandlerKeys_ = null;
	        }
	        if (this.keyHandlerKeys_) {
	            for (var i = 0, ii = this.keyHandlerKeys_.length; i < ii; ++i) {
	                unlistenByKey(this.keyHandlerKeys_[i]);
	            }
	            this.keyHandlerKeys_ = null;
	        }
	        if (!targetElement) {
	            if (this.renderer_) {
	                clearTimeout(this.postRenderTimeoutHandle_);
	                this.postRenderFunctions_.length = 0;
	                this.renderer_.dispose();
	                this.renderer_ = null;
	            }
	            if (this.animationDelayKey_) {
	                cancelAnimationFrame(this.animationDelayKey_);
	                this.animationDelayKey_ = undefined;
	            }
	            removeNode(this.viewport_);
	            if (this.handleResize_ !== undefined) {
	                removeEventListener(EventType.RESIZE, this.handleResize_, false);
	                this.handleResize_ = undefined;
	            }
	        }
	        else {
	            targetElement.appendChild(this.viewport_);
	            if (!this.renderer_) {
	                this.renderer_ = this.createRenderer();
	            }
	            var hasFocus = true;
	            if (targetElement.hasAttribute('tabindex')) {
	                hasFocus = document.activeElement === targetElement;
	                this.focusHandlerKeys_ = [
	                    listen$1(targetElement, EventType.FOCUS, setTouchAction.bind(this, this.viewport_, 'none')),
	                    listen$1(targetElement, EventType.BLUR, setTouchAction.bind(this, this.viewport_, 'auto'))
	                ];
	            }
	            setTouchAction(this.viewport_, hasFocus ? 'none' : 'auto');
	            var keyboardEventTarget = !this.keyboardEventTarget_ ?
	                targetElement : this.keyboardEventTarget_;
	            this.keyHandlerKeys_ = [
	                listen$1(keyboardEventTarget, EventType.KEYDOWN, this.handleBrowserEvent, this),
	                listen$1(keyboardEventTarget, EventType.KEYPRESS, this.handleBrowserEvent, this)
	            ];
	            if (!this.handleResize_) {
	                this.handleResize_ = this.updateSize.bind(this);
	                window.addEventListener(EventType.RESIZE, this.handleResize_, false);
	            }
	        }
	        this.updateSize();
	        // updateSize calls setSize, so no need to call this.render
	        // ourselves here.
	    };
	    /**
	     * @private
	     */
	    PluggableMap.prototype.handleTileChange_ = function () {
	        this.render();
	    };
	    /**
	     * @private
	     */
	    PluggableMap.prototype.handleViewPropertyChanged_ = function () {
	        this.render();
	    };
	    /**
	     * @private
	     */
	    PluggableMap.prototype.handleViewChanged_ = function () {
	        if (this.viewPropertyListenerKey_) {
	            unlistenByKey(this.viewPropertyListenerKey_);
	            this.viewPropertyListenerKey_ = null;
	        }
	        if (this.viewChangeListenerKey_) {
	            unlistenByKey(this.viewChangeListenerKey_);
	            this.viewChangeListenerKey_ = null;
	        }
	        var view = this.getView();
	        if (view) {
	            this.viewport_.setAttribute('data-view', getUid(view));
	            this.viewPropertyListenerKey_ = listen$1(view, ObjectEventType.PROPERTYCHANGE, this.handleViewPropertyChanged_, this);
	            this.viewChangeListenerKey_ = listen$1(view, EventType.CHANGE, this.handleViewPropertyChanged_, this);
	            view.resolveConstraints(0);
	        }
	        this.render();
	    };
	    /**
	     * @private
	     */
	    PluggableMap.prototype.handleLayerGroupChanged_ = function () {
	        if (this.layerGroupPropertyListenerKeys_) {
	            this.layerGroupPropertyListenerKeys_.forEach(unlistenByKey);
	            this.layerGroupPropertyListenerKeys_ = null;
	        }
	        var layerGroup = this.getLayerGroup();
	        if (layerGroup) {
	            this.layerGroupPropertyListenerKeys_ = [
	                listen$1(layerGroup, ObjectEventType.PROPERTYCHANGE, this.render, this),
	                listen$1(layerGroup, EventType.CHANGE, this.render, this)
	            ];
	        }
	        this.render();
	    };
	    /**
	     * @return {boolean} Is rendered.
	     */
	    PluggableMap.prototype.isRendered = function () {
	        return !!this.frameState_;
	    };
	    /**
	     * Requests an immediate render in a synchronous manner.
	     * @api
	     */
	    PluggableMap.prototype.renderSync = function () {
	        if (this.animationDelayKey_) {
	            cancelAnimationFrame(this.animationDelayKey_);
	        }
	        this.animationDelay_();
	    };
	    /**
	     * Redraws all text after new fonts have loaded
	     */
	    PluggableMap.prototype.redrawText = function () {
	        var layerStates = this.getLayerGroup().getLayerStatesArray();
	        for (var i = 0, ii = layerStates.length; i < ii; ++i) {
	            var layer = layerStates[i].layer;
	            if (layer.hasRenderer()) {
	                layer.getRenderer().handleFontsChanged();
	            }
	        }
	    };
	    /**
	     * Request a map rendering (at the next animation frame).
	     * @api
	     */
	    PluggableMap.prototype.render = function () {
	        if (this.renderer_ && this.animationDelayKey_ === undefined) {
	            this.animationDelayKey_ = requestAnimationFrame(this.animationDelay_);
	        }
	    };
	    /**
	     * Remove the given control from the map.
	     * @param {import("./control/Control.js").default} control Control.
	     * @return {import("./control/Control.js").default|undefined} The removed control (or undefined
	     *     if the control was not found).
	     * @api
	     */
	    PluggableMap.prototype.removeControl = function (control) {
	        return this.getControls().remove(control);
	    };
	    /**
	     * Remove the given interaction from the map.
	     * @param {import("./interaction/Interaction.js").default} interaction Interaction to remove.
	     * @return {import("./interaction/Interaction.js").default|undefined} The removed interaction (or
	     *     undefined if the interaction was not found).
	     * @api
	     */
	    PluggableMap.prototype.removeInteraction = function (interaction) {
	        return this.getInteractions().remove(interaction);
	    };
	    /**
	     * Removes the given layer from the map.
	     * @param {import("./layer/Base.js").default} layer Layer.
	     * @return {import("./layer/Base.js").default|undefined} The removed layer (or undefined if the
	     *     layer was not found).
	     * @api
	     */
	    PluggableMap.prototype.removeLayer = function (layer) {
	        var layers = this.getLayerGroup().getLayers();
	        return layers.remove(layer);
	    };
	    /**
	     * Remove the given overlay from the map.
	     * @param {import("./Overlay.js").default} overlay Overlay.
	     * @return {import("./Overlay.js").default|undefined} The removed overlay (or undefined
	     *     if the overlay was not found).
	     * @api
	     */
	    PluggableMap.prototype.removeOverlay = function (overlay) {
	        return this.getOverlays().remove(overlay);
	    };
	    /**
	     * @param {number} time Time.
	     * @private
	     */
	    PluggableMap.prototype.renderFrame_ = function (time) {
	        var size = this.getSize();
	        var view = this.getView();
	        var previousFrameState = this.frameState_;
	        /** @type {?FrameState} */
	        var frameState = null;
	        if (size !== undefined && hasArea(size) && view && view.isDef()) {
	            var viewHints = view.getHints(this.frameState_ ? this.frameState_.viewHints : undefined);
	            var viewState = view.getState();
	            frameState = {
	                animate: false,
	                coordinateToPixelTransform: this.coordinateToPixelTransform_,
	                declutterItems: previousFrameState ? previousFrameState.declutterItems : [],
	                extent: getForViewAndSize(viewState.center, viewState.resolution, viewState.rotation, size),
	                index: this.frameIndex_++,
	                layerIndex: 0,
	                layerStatesArray: this.getLayerGroup().getLayerStatesArray(),
	                pixelRatio: this.pixelRatio_,
	                pixelToCoordinateTransform: this.pixelToCoordinateTransform_,
	                postRenderFunctions: [],
	                size: size,
	                tileQueue: this.tileQueue_,
	                time: time,
	                usedTiles: {},
	                viewState: viewState,
	                viewHints: viewHints,
	                wantedTiles: {}
	            };
	        }
	        this.frameState_ = frameState;
	        this.renderer_.renderFrame(frameState);
	        if (frameState) {
	            if (frameState.animate) {
	                this.render();
	            }
	            Array.prototype.push.apply(this.postRenderFunctions_, frameState.postRenderFunctions);
	            if (previousFrameState) {
	                var moveStart = !this.previousExtent_ ||
	                    (!isEmpty(this.previousExtent_) &&
	                        !equals(frameState.extent, this.previousExtent_));
	                if (moveStart) {
	                    this.dispatchEvent(new MapEvent(MapEventType.MOVESTART, this, previousFrameState));
	                    this.previousExtent_ = createOrUpdateEmpty(this.previousExtent_);
	                }
	            }
	            var idle = this.previousExtent_ &&
	                !frameState.viewHints[ViewHint.ANIMATING] &&
	                !frameState.viewHints[ViewHint.INTERACTING] &&
	                !equals(frameState.extent, this.previousExtent_);
	            if (idle) {
	                this.dispatchEvent(new MapEvent(MapEventType.MOVEEND, this, frameState));
	                clone(frameState.extent, this.previousExtent_);
	            }
	        }
	        this.dispatchEvent(new MapEvent(MapEventType.POSTRENDER, this, frameState));
	        this.postRenderTimeoutHandle_ = setTimeout(this.handlePostRender.bind(this), 0);
	    };
	    /**
	     * Sets the layergroup of this map.
	     * @param {LayerGroup} layerGroup A layer group containing the layers in this map.
	     * @observable
	     * @api
	     */
	    PluggableMap.prototype.setLayerGroup = function (layerGroup) {
	        this.set(MapProperty.LAYERGROUP, layerGroup);
	    };
	    /**
	     * Set the size of this map.
	     * @param {import("./size.js").Size|undefined} size The size in pixels of the map in the DOM.
	     * @observable
	     * @api
	     */
	    PluggableMap.prototype.setSize = function (size) {
	        this.set(MapProperty.SIZE, size);
	    };
	    /**
	     * Set the target element to render this map into.
	     * @param {HTMLElement|string|undefined} target The Element or id of the Element
	     *     that the map is rendered in.
	     * @observable
	     * @api
	     */
	    PluggableMap.prototype.setTarget = function (target) {
	        this.set(MapProperty.TARGET, target);
	    };
	    /**
	     * Set the view for this map.
	     * @param {View} view The view that controls this map.
	     * @observable
	     * @api
	     */
	    PluggableMap.prototype.setView = function (view) {
	        this.set(MapProperty.VIEW, view);
	    };
	    /**
	     * Force a recalculation of the map viewport size.  This should be called when
	     * third-party code changes the size of the map viewport.
	     * @api
	     */
	    PluggableMap.prototype.updateSize = function () {
	        var targetElement = this.getTargetElement();
	        if (!targetElement) {
	            this.setSize(undefined);
	        }
	        else {
	            var computedStyle = getComputedStyle(targetElement);
	            this.setSize([
	                targetElement.offsetWidth -
	                    parseFloat(computedStyle['borderLeftWidth']) -
	                    parseFloat(computedStyle['paddingLeft']) -
	                    parseFloat(computedStyle['paddingRight']) -
	                    parseFloat(computedStyle['borderRightWidth']),
	                targetElement.offsetHeight -
	                    parseFloat(computedStyle['borderTopWidth']) -
	                    parseFloat(computedStyle['paddingTop']) -
	                    parseFloat(computedStyle['paddingBottom']) -
	                    parseFloat(computedStyle['borderBottomWidth'])
	            ]);
	        }
	    };
	    return PluggableMap;
	}(BaseObject));
	/**
	 * @param {MapOptions} options Map options.
	 * @return {MapOptionsInternal} Internal map options.
	 */
	function createOptionsInternal(options) {
	    /**
	     * @type {HTMLElement|Document}
	     */
	    var keyboardEventTarget = null;
	    if (options.keyboardEventTarget !== undefined) {
	        keyboardEventTarget = typeof options.keyboardEventTarget === 'string' ?
	            document.getElementById(options.keyboardEventTarget) :
	            options.keyboardEventTarget;
	    }
	    /**
	     * @type {Object<string, *>}
	     */
	    var values = {};
	    var layerGroup = options.layers && typeof /** @type {?} */ (options.layers).getLayers === 'function' ?
	        /** @type {LayerGroup} */ (options.layers) : new LayerGroup({ layers: /** @type {Collection} */ (options.layers) });
	    values[MapProperty.LAYERGROUP] = layerGroup;
	    values[MapProperty.TARGET] = options.target;
	    values[MapProperty.VIEW] = options.view !== undefined ?
	        options.view : new View();
	    var controls;
	    if (options.controls !== undefined) {
	        if (Array.isArray(options.controls)) {
	            controls = new Collection$2(options.controls.slice());
	        }
	        else {
	            assert(typeof /** @type {?} */ (options.controls).getArray === 'function', 47); // Expected `controls` to be an array or an `import("./Collection.js").Collection`
	            controls = /** @type {Collection} */ (options.controls);
	        }
	    }
	    var interactions;
	    if (options.interactions !== undefined) {
	        if (Array.isArray(options.interactions)) {
	            interactions = new Collection$2(options.interactions.slice());
	        }
	        else {
	            assert(typeof /** @type {?} */ (options.interactions).getArray === 'function', 48); // Expected `interactions` to be an array or an `import("./Collection.js").Collection`
	            interactions = /** @type {Collection} */ (options.interactions);
	        }
	    }
	    var overlays;
	    if (options.overlays !== undefined) {
	        if (Array.isArray(options.overlays)) {
	            overlays = new Collection$2(options.overlays.slice());
	        }
	        else {
	            assert(typeof /** @type {?} */ (options.overlays).getArray === 'function', 49); // Expected `overlays` to be an array or an `import("./Collection.js").Collection`
	            overlays = options.overlays;
	        }
	    }
	    else {
	        overlays = new Collection$2();
	    }
	    return {
	        controls: controls,
	        interactions: interactions,
	        keyboardEventTarget: keyboardEventTarget,
	        overlays: overlays,
	        values: values
	    };
	}

	var __extends$P = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @typedef {Object} Options
	 * @property {HTMLElement} [element] The element is the control's
	 * container element. This only needs to be specified if you're developing
	 * a custom control.
	 * @property {function(import("../MapEvent.js").default)} [render] Function called when
	 * the control should be re-rendered. This is called in a `requestAnimationFrame`
	 * callback.
	 * @property {HTMLElement|string} [target] Specify a target if you want
	 * the control to be rendered outside of the map's viewport.
	 */
	/**
	 * @classdesc
	 * A control is a visible widget with a DOM element in a fixed position on the
	 * screen. They can involve user input (buttons), or be informational only;
	 * the position is determined using CSS. By default these are placed in the
	 * container with CSS class name `ol-overlaycontainer-stopevent`, but can use
	 * any outside DOM element.
	 *
	 * This is the base class for controls. You can use it for simple custom
	 * controls by creating the element with listeners, creating an instance:
	 * ```js
	 * var myControl = new Control({element: myElement});
	 * ```
	 * and then adding this to the map.
	 *
	 * The main advantage of having this as a control rather than a simple separate
	 * DOM element is that preventing propagation is handled for you. Controls
	 * will also be objects in a {@link module:ol/Collection~Collection}, so you can use their methods.
	 *
	 * You can also extend this base for your own control class. See
	 * examples/custom-controls for an example of how to do this.
	 *
	 * @api
	 */
	var Control = /** @class */ (function (_super) {
	    __extends$P(Control, _super);
	    /**
	     * @param {Options} options Control options.
	     */
	    function Control(options) {
	        var _this = _super.call(this) || this;
	        /**
	         * @protected
	         * @type {HTMLElement}
	         */
	        _this.element = options.element ? options.element : null;
	        /**
	         * @private
	         * @type {HTMLElement}
	         */
	        _this.target_ = null;
	        /**
	         * @private
	         * @type {import("../PluggableMap.js").default}
	         */
	        _this.map_ = null;
	        /**
	         * @protected
	         * @type {!Array<import("../events.js").EventsKey>}
	         */
	        _this.listenerKeys = [];
	        /**
	         * @type {function(import("../MapEvent.js").default): void}
	         */
	        _this.render = options.render ? options.render : VOID;
	        if (options.target) {
	            _this.setTarget(options.target);
	        }
	        return _this;
	    }
	    /**
	     * @inheritDoc
	     */
	    Control.prototype.disposeInternal = function () {
	        removeNode(this.element);
	        _super.prototype.disposeInternal.call(this);
	    };
	    /**
	     * Get the map associated with this control.
	     * @return {import("../PluggableMap.js").default} Map.
	     * @api
	     */
	    Control.prototype.getMap = function () {
	        return this.map_;
	    };
	    /**
	     * Remove the control from its current map and attach it to the new map.
	     * Subclasses may set up event handlers to get notified about changes to
	     * the map here.
	     * @param {import("../PluggableMap.js").default} map Map.
	     * @api
	     */
	    Control.prototype.setMap = function (map) {
	        if (this.map_) {
	            removeNode(this.element);
	        }
	        for (var i = 0, ii = this.listenerKeys.length; i < ii; ++i) {
	            unlistenByKey(this.listenerKeys[i]);
	        }
	        this.listenerKeys.length = 0;
	        this.map_ = map;
	        if (this.map_) {
	            var target = this.target_ ?
	                this.target_ : map.getOverlayContainerStopEvent();
	            target.appendChild(this.element);
	            if (this.render !== VOID) {
	                this.listenerKeys.push(listen$1(map, MapEventType.POSTRENDER, this.render, this));
	            }
	            map.render();
	        }
	    };
	    /**
	     * This function is used to set a target element for the control. It has no
	     * effect if it is called after the control has been added to the map (i.e.
	     * after `setMap` is called on the control). If no `target` is set in the
	     * options passed to the control constructor and if `setTarget` is not called
	     * then the control is added to the map's overlay container.
	     * @param {HTMLElement|string} target Target.
	     * @api
	     */
	    Control.prototype.setTarget = function (target) {
	        this.target_ = typeof target === 'string' ?
	            document.getElementById(target) :
	            target;
	    };
	    return Control;
	}(BaseObject));

	var __extends$Q = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @typedef {Object} Options
	 * @property {string} [className='ol-attribution'] CSS class name.
	 * @property {HTMLElement|string} [target] Specify a target if you
	 * want the control to be rendered outside of the map's
	 * viewport.
	 * @property {boolean} [collapsible] Specify if attributions can
	 * be collapsed. If not specified, sources control this behavior with their
	 * `attributionsCollapsible` setting.
	 * @property {boolean} [collapsed=true] Specify if attributions should
	 * be collapsed at startup.
	 * @property {string} [tipLabel='Attributions'] Text label to use for the button tip.
	 * @property {string} [label='i'] Text label to use for the
	 * collapsed attributions button.
	 * Instead of text, also an element (e.g. a `span` element) can be used.
	 * @property {string|HTMLElement} [collapseLabel='Â»'] Text label to use
	 * for the expanded attributions button.
	 * Instead of text, also an element (e.g. a `span` element) can be used.
	 * @property {function(import("../MapEvent.js").default)} [render] Function called when
	 * the control should be re-rendered. This is called in a `requestAnimationFrame`
	 * callback.
	 */
	/**
	 * @classdesc
	 * Control to show all the attributions associated with the layer sources
	 * in the map. This control is one of the default controls included in maps.
	 * By default it will show in the bottom right portion of the map, but this can
	 * be changed by using a css selector for `.ol-attribution`.
	 *
	 * @api
	 */
	var Attribution = /** @class */ (function (_super) {
	    __extends$Q(Attribution, _super);
	    /**
	     * @param {Options=} opt_options Attribution options.
	     */
	    function Attribution(opt_options) {
	        var _this = this;
	        var options = opt_options ? opt_options : {};
	        _this = _super.call(this, {
	            element: document.createElement('div'),
	            render: options.render || render,
	            target: options.target
	        }) || this;
	        /**
	         * @private
	         * @type {HTMLElement}
	         */
	        _this.ulElement_ = document.createElement('ul');
	        /**
	         * @private
	         * @type {boolean}
	         */
	        _this.collapsed_ = options.collapsed !== undefined ? options.collapsed : true;
	        /**
	         * @private
	         * @type {boolean}
	         */
	        _this.overrideCollapsible_ = options.collapsible !== undefined;
	        /**
	         * @private
	         * @type {boolean}
	         */
	        _this.collapsible_ = options.collapsible !== undefined ?
	            options.collapsible : true;
	        if (!_this.collapsible_) {
	            _this.collapsed_ = false;
	        }
	        var className = options.className !== undefined ? options.className : 'ol-attribution';
	        var tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Attributions';
	        var collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : '\u00BB';
	        if (typeof collapseLabel === 'string') {
	            /**
	             * @private
	             * @type {HTMLElement}
	             */
	            _this.collapseLabel_ = document.createElement('span');
	            _this.collapseLabel_.textContent = collapseLabel;
	        }
	        else {
	            _this.collapseLabel_ = collapseLabel;
	        }
	        var label = options.label !== undefined ? options.label : 'i';
	        if (typeof label === 'string') {
	            /**
	             * @private
	             * @type {HTMLElement}
	             */
	            _this.label_ = document.createElement('span');
	            _this.label_.textContent = label;
	        }
	        else {
	            _this.label_ = label;
	        }
	        var activeLabel = (_this.collapsible_ && !_this.collapsed_) ?
	            _this.collapseLabel_ : _this.label_;
	        var button = document.createElement('button');
	        button.setAttribute('type', 'button');
	        button.title = tipLabel;
	        button.appendChild(activeLabel);
	        button.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this), false);
	        var cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL +
	            (_this.collapsed_ && _this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') +
	            (_this.collapsible_ ? '' : ' ol-uncollapsible');
	        var element = _this.element;
	        element.className = cssClasses;
	        element.appendChild(_this.ulElement_);
	        element.appendChild(button);
	        /**
	         * A list of currently rendered resolutions.
	         * @type {Array<string>}
	         * @private
	         */
	        _this.renderedAttributions_ = [];
	        /**
	         * @private
	         * @type {boolean}
	         */
	        _this.renderedVisible_ = true;
	        return _this;
	    }
	    /**
	     * Collect a list of visible attributions and set the collapsible state.
	     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
	     * @return {Array<string>} Attributions.
	     * @private
	     */
	    Attribution.prototype.collectSourceAttributions_ = function (frameState) {
	        /**
	         * Used to determine if an attribution already exists.
	         * @type {!Object<string, boolean>}
	         */
	        var lookup = {};
	        /**
	         * A list of visible attributions.
	         * @type {Array<string>}
	         */
	        var visibleAttributions = [];
	        var layerStatesArray = frameState.layerStatesArray;
	        for (var i = 0, ii = layerStatesArray.length; i < ii; ++i) {
	            var layerState = layerStatesArray[i];
	            if (!inView(layerState, frameState.viewState)) {
	                continue;
	            }
	            var source = /** @type {import("../layer/Layer.js").default} */ (layerState.layer).getSource();
	            if (!source) {
	                continue;
	            }
	            var attributionGetter = source.getAttributions();
	            if (!attributionGetter) {
	                continue;
	            }
	            var attributions = attributionGetter(frameState);
	            if (!attributions) {
	                continue;
	            }
	            if (!this.overrideCollapsible_ && source.getAttributionsCollapsible() === false) {
	                this.setCollapsible(false);
	            }
	            if (Array.isArray(attributions)) {
	                for (var j = 0, jj = attributions.length; j < jj; ++j) {
	                    if (!(attributions[j] in lookup)) {
	                        visibleAttributions.push(attributions[j]);
	                        lookup[attributions[j]] = true;
	                    }
	                }
	            }
	            else {
	                if (!(attributions in lookup)) {
	                    visibleAttributions.push(attributions);
	                    lookup[attributions] = true;
	                }
	            }
	        }
	        return visibleAttributions;
	    };
	    /**
	     * @private
	     * @param {?import("../PluggableMap.js").FrameState} frameState Frame state.
	     */
	    Attribution.prototype.updateElement_ = function (frameState) {
	        if (!frameState) {
	            if (this.renderedVisible_) {
	                this.element.style.display = 'none';
	                this.renderedVisible_ = false;
	            }
	            return;
	        }
	        var attributions = this.collectSourceAttributions_(frameState);
	        var visible = attributions.length > 0;
	        if (this.renderedVisible_ != visible) {
	            this.element.style.display = visible ? '' : 'none';
	            this.renderedVisible_ = visible;
	        }
	        if (equals$1(attributions, this.renderedAttributions_)) {
	            return;
	        }
	        removeChildren(this.ulElement_);
	        // append the attributions
	        for (var i = 0, ii = attributions.length; i < ii; ++i) {
	            var element = document.createElement('li');
	            element.innerHTML = attributions[i];
	            this.ulElement_.appendChild(element);
	        }
	        this.renderedAttributions_ = attributions;
	    };
	    /**
	     * @param {MouseEvent} event The event to handle
	     * @private
	     */
	    Attribution.prototype.handleClick_ = function (event) {
	        event.preventDefault();
	        this.handleToggle_();
	    };
	    /**
	     * @private
	     */
	    Attribution.prototype.handleToggle_ = function () {
	        this.element.classList.toggle(CLASS_COLLAPSED);
	        if (this.collapsed_) {
	            replaceNode(this.collapseLabel_, this.label_);
	        }
	        else {
	            replaceNode(this.label_, this.collapseLabel_);
	        }
	        this.collapsed_ = !this.collapsed_;
	    };
	    /**
	     * Return `true` if the attribution is collapsible, `false` otherwise.
	     * @return {boolean} True if the widget is collapsible.
	     * @api
	     */
	    Attribution.prototype.getCollapsible = function () {
	        return this.collapsible_;
	    };
	    /**
	     * Set whether the attribution should be collapsible.
	     * @param {boolean} collapsible True if the widget is collapsible.
	     * @api
	     */
	    Attribution.prototype.setCollapsible = function (collapsible) {
	        if (this.collapsible_ === collapsible) {
	            return;
	        }
	        this.collapsible_ = collapsible;
	        this.element.classList.toggle('ol-uncollapsible');
	        if (!collapsible && this.collapsed_) {
	            this.handleToggle_();
	        }
	    };
	    /**
	     * Collapse or expand the attribution according to the passed parameter. Will
	     * not do anything if the attribution isn't collapsible or if the current
	     * collapsed state is already the one requested.
	     * @param {boolean} collapsed True if the widget is collapsed.
	     * @api
	     */
	    Attribution.prototype.setCollapsed = function (collapsed) {
	        if (!this.collapsible_ || this.collapsed_ === collapsed) {
	            return;
	        }
	        this.handleToggle_();
	    };
	    /**
	     * Return `true` when the attribution is currently collapsed or `false`
	     * otherwise.
	     * @return {boolean} True if the widget is collapsed.
	     * @api
	     */
	    Attribution.prototype.getCollapsed = function () {
	        return this.collapsed_;
	    };
	    return Attribution;
	}(Control));
	/**
	 * Update the attribution element.
	 * @param {import("../MapEvent.js").default} mapEvent Map event.
	 * @this {Attribution}
	 * @api
	 */
	function render(mapEvent) {
	    this.updateElement_(mapEvent.frameState);
	}

	var __extends$R = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @typedef {Object} Options
	 * @property {string} [className='ol-rotate'] CSS class name.
	 * @property {string|HTMLElement} [label='â§'] Text label to use for the rotate button.
	 * Instead of text, also an element (e.g. a `span` element) can be used.
	 * @property {string} [tipLabel='Reset rotation'] Text label to use for the rotate tip.
	 * @property {number} [duration=250] Animation duration in milliseconds.
	 * @property {boolean} [autoHide=true] Hide the control when rotation is 0.
	 * @property {function(import("../MapEvent.js").default)} [render] Function called when the control should
	 * be re-rendered. This is called in a `requestAnimationFrame` callback.
	 * @property {function()} [resetNorth] Function called when the control is clicked.
	 * This will override the default `resetNorth`.
	 * @property {HTMLElement|string} [target] Specify a target if you want the control to be
	 * rendered outside of the map's viewport.
	 */
	/**
	 * @classdesc
	 * A button control to reset rotation to 0.
	 * To style this control use css selector `.ol-rotate`. A `.ol-hidden` css
	 * selector is added to the button when the rotation is 0.
	 *
	 * @api
	 */
	var Rotate = /** @class */ (function (_super) {
	    __extends$R(Rotate, _super);
	    /**
	     * @param {Options=} opt_options Rotate options.
	     */
	    function Rotate(opt_options) {
	        var _this = this;
	        var options = opt_options ? opt_options : {};
	        _this = _super.call(this, {
	            element: document.createElement('div'),
	            render: options.render || render$1,
	            target: options.target
	        }) || this;
	        var className = options.className !== undefined ? options.className : 'ol-rotate';
	        var label = options.label !== undefined ? options.label : '\u21E7';
	        /**
	         * @type {HTMLElement}
	         * @private
	         */
	        _this.label_ = null;
	        if (typeof label === 'string') {
	            _this.label_ = document.createElement('span');
	            _this.label_.className = 'ol-compass';
	            _this.label_.textContent = label;
	        }
	        else {
	            _this.label_ = label;
	            _this.label_.classList.add('ol-compass');
	        }
	        var tipLabel = options.tipLabel ? options.tipLabel : 'Reset rotation';
	        var button = document.createElement('button');
	        button.className = className + '-reset';
	        button.setAttribute('type', 'button');
	        button.title = tipLabel;
	        button.appendChild(_this.label_);
	        button.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this), false);
	        var cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;
	        var element = _this.element;
	        element.className = cssClasses;
	        element.appendChild(button);
	        _this.callResetNorth_ = options.resetNorth ? options.resetNorth : undefined;
	        /**
	         * @type {number}
	         * @private
	         */
	        _this.duration_ = options.duration !== undefined ? options.duration : 250;
	        /**
	         * @type {boolean}
	         * @private
	         */
	        _this.autoHide_ = options.autoHide !== undefined ? options.autoHide : true;
	        /**
	         * @private
	         * @type {number|undefined}
	         */
	        _this.rotation_ = undefined;
	        if (_this.autoHide_) {
	            _this.element.classList.add(CLASS_HIDDEN);
	        }
	        return _this;
	    }
	    /**
	     * @param {MouseEvent} event The event to handle
	     * @private
	     */
	    Rotate.prototype.handleClick_ = function (event) {
	        event.preventDefault();
	        if (this.callResetNorth_ !== undefined) {
	            this.callResetNorth_();
	        }
	        else {
	            this.resetNorth_();
	        }
	    };
	    /**
	     * @private
	     */
	    Rotate.prototype.resetNorth_ = function () {
	        var map = this.getMap();
	        var view = map.getView();
	        if (!view) {
	            // the map does not have a view, so we can't act
	            // upon it
	            return;
	        }
	        if (view.getRotation() !== undefined) {
	            if (this.duration_ > 0) {
	                view.animate({
	                    rotation: 0,
	                    duration: this.duration_,
	                    easing: easeOut
	                });
	            }
	            else {
	                view.setRotation(0);
	            }
	        }
	    };
	    return Rotate;
	}(Control));
	/**
	 * Update the rotate control element.
	 * @param {import("../MapEvent.js").default} mapEvent Map event.
	 * @this {Rotate}
	 * @api
	 */
	function render$1(mapEvent) {
	    var frameState = mapEvent.frameState;
	    if (!frameState) {
	        return;
	    }
	    var rotation = frameState.viewState.rotation;
	    if (rotation != this.rotation_) {
	        var transform = 'rotate(' + rotation + 'rad)';
	        if (this.autoHide_) {
	            var contains = this.element.classList.contains(CLASS_HIDDEN);
	            if (!contains && rotation === 0) {
	                this.element.classList.add(CLASS_HIDDEN);
	            }
	            else if (contains && rotation !== 0) {
	                this.element.classList.remove(CLASS_HIDDEN);
	            }
	        }
	        this.label_.style.transform = transform;
	    }
	    this.rotation_ = rotation;
	}

	var __extends$S = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @typedef {Object} Options
	 * @property {number} [duration=250] Animation duration in milliseconds.
	 * @property {string} [className='ol-zoom'] CSS class name.
	 * @property {string|HTMLElement} [zoomInLabel='+'] Text label to use for the zoom-in
	 * button. Instead of text, also an element (e.g. a `span` element) can be used.
	 * @property {string|HTMLElement} [zoomOutLabel='-'] Text label to use for the zoom-out button.
	 * Instead of text, also an element (e.g. a `span` element) can be used.
	 * @property {string} [zoomInTipLabel='Zoom in'] Text label to use for the button tip.
	 * @property {string} [zoomOutTipLabel='Zoom out'] Text label to use for the button tip.
	 * @property {number} [delta=1] The zoom delta applied on each click.
	 * @property {HTMLElement|string} [target] Specify a target if you want the control to be
	 * rendered outside of the map's viewport.
	 */
	/**
	 * @classdesc
	 * A control with 2 buttons, one for zoom in and one for zoom out.
	 * This control is one of the default controls of a map. To style this control
	 * use css selectors `.ol-zoom-in` and `.ol-zoom-out`.
	 *
	 * @api
	 */
	var Zoom = /** @class */ (function (_super) {
	    __extends$S(Zoom, _super);
	    /**
	     * @param {Options=} opt_options Zoom options.
	     */
	    function Zoom(opt_options) {
	        var _this = this;
	        var options = opt_options ? opt_options : {};
	        _this = _super.call(this, {
	            element: document.createElement('div'),
	            target: options.target
	        }) || this;
	        var className = options.className !== undefined ? options.className : 'ol-zoom';
	        var delta = options.delta !== undefined ? options.delta : 1;
	        var zoomInLabel = options.zoomInLabel !== undefined ? options.zoomInLabel : '+';
	        var zoomOutLabel = options.zoomOutLabel !== undefined ? options.zoomOutLabel : '\u2212';
	        var zoomInTipLabel = options.zoomInTipLabel !== undefined ?
	            options.zoomInTipLabel : 'Zoom in';
	        var zoomOutTipLabel = options.zoomOutTipLabel !== undefined ?
	            options.zoomOutTipLabel : 'Zoom out';
	        var inElement = document.createElement('button');
	        inElement.className = className + '-in';
	        inElement.setAttribute('type', 'button');
	        inElement.title = zoomInTipLabel;
	        inElement.appendChild(typeof zoomInLabel === 'string' ? document.createTextNode(zoomInLabel) : zoomInLabel);
	        inElement.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this, delta), false);
	        var outElement = document.createElement('button');
	        outElement.className = className + '-out';
	        outElement.setAttribute('type', 'button');
	        outElement.title = zoomOutTipLabel;
	        outElement.appendChild(typeof zoomOutLabel === 'string' ? document.createTextNode(zoomOutLabel) : zoomOutLabel);
	        outElement.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this, -delta), false);
	        var cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;
	        var element = _this.element;
	        element.className = cssClasses;
	        element.appendChild(inElement);
	        element.appendChild(outElement);
	        /**
	         * @type {number}
	         * @private
	         */
	        _this.duration_ = options.duration !== undefined ? options.duration : 250;
	        return _this;
	    }
	    /**
	     * @param {number} delta Zoom delta.
	     * @param {MouseEvent} event The event to handle
	     * @private
	     */
	    Zoom.prototype.handleClick_ = function (delta, event) {
	        event.preventDefault();
	        this.zoomByDelta_(delta);
	    };
	    /**
	     * @param {number} delta Zoom delta.
	     * @private
	     */
	    Zoom.prototype.zoomByDelta_ = function (delta) {
	        var map = this.getMap();
	        var view = map.getView();
	        if (!view) {
	            // the map does not have a view, so we can't act
	            // upon it
	            return;
	        }
	        var currentZoom = view.getZoom();
	        if (currentZoom !== undefined) {
	            var newZoom = view.getConstrainedZoom(currentZoom + delta);
	            if (this.duration_ > 0) {
	                if (view.getAnimating()) {
	                    view.cancelAnimations();
	                }
	                view.animate({
	                    zoom: newZoom,
	                    duration: this.duration_,
	                    easing: easeOut
	                });
	            }
	            else {
	                view.setZoom(newZoom);
	            }
	        }
	    };
	    return Zoom;
	}(Control));

	/**
	 * @module ol/render
	 */
	/**
	 * @param {import("./PluggableMap.js").FrameState} frameState Frame state.
	 * @param {?} declutterTree Declutter tree.
	 * @returns {?} Declutter tree.
	 */
	function renderDeclutterItems(frameState, declutterTree) {
	    if (declutterTree) {
	        declutterTree.clear();
	    }
	    var items = frameState.declutterItems;
	    for (var z = items.length - 1; z >= 0; --z) {
	        var item = items[z];
	        var zIndexItems = item.items;
	        for (var i = 0, ii = zIndexItems.length; i < ii; i += 3) {
	            declutterTree = zIndexItems[i].renderDeclutter(zIndexItems[i + 1], zIndexItems[i + 2], item.opacity, declutterTree);
	        }
	    }
	    items.length = 0;
	    return declutterTree;
	}

	var __extends$T = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @abstract
	 */
	var MapRenderer = /** @class */ (function (_super) {
	    __extends$T(MapRenderer, _super);
	    /**
	     * @param {import("../PluggableMap.js").default} map Map.
	     */
	    function MapRenderer(map) {
	        var _this = _super.call(this) || this;
	        /**
	         * @private
	         * @type {import("../PluggableMap.js").default}
	         */
	        _this.map_ = map;
	        /**
	         * @private
	         */
	        _this.declutterTree_ = null;
	        return _this;
	    }
	    /**
	     * @abstract
	     * @param {import("../render/EventType.js").default} type Event type.
	     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
	     */
	    MapRenderer.prototype.dispatchRenderEvent = function (type, frameState) {
	        abstract();
	    };
	    /**
	     * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
	     * @protected
	     */
	    MapRenderer.prototype.calculateMatrices2D = function (frameState) {
	        var viewState = frameState.viewState;
	        var coordinateToPixelTransform = frameState.coordinateToPixelTransform;
	        var pixelToCoordinateTransform = frameState.pixelToCoordinateTransform;
	        compose(coordinateToPixelTransform, frameState.size[0] / 2, frameState.size[1] / 2, 1 / viewState.resolution, -1 / viewState.resolution, -viewState.rotation, -viewState.center[0], -viewState.center[1]);
	        makeInverse(pixelToCoordinateTransform, coordinateToPixelTransform);
	    };
	    /**
	     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
	     * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
	     * @param {number} hitTolerance Hit tolerance in pixels.
	     * @param {boolean} checkWrapped Check for wrapped geometries.
	     * @param {function(this: S, import("../Feature.js").FeatureLike,
	     *     import("../layer/Layer.js").default): T} callback Feature callback.
	     * @param {S} thisArg Value to use as `this` when executing `callback`.
	     * @param {function(this: U, import("../layer/Layer.js").default): boolean} layerFilter Layer filter
	     *     function, only layers which are visible and for which this function
	     *     returns `true` will be tested for features.  By default, all visible
	     *     layers will be tested.
	     * @param {U} thisArg2 Value to use as `this` when executing `layerFilter`.
	     * @return {T|undefined} Callback result.
	     * @template S,T,U
	     */
	    MapRenderer.prototype.forEachFeatureAtCoordinate = function (coordinate, frameState, hitTolerance, checkWrapped, callback, thisArg, layerFilter, thisArg2) {
	        var result;
	        var viewState = frameState.viewState;
	        /**
	         * @param {boolean} managed Managed layer.
	         * @param {import("../Feature.js").FeatureLike} feature Feature.
	         * @param {import("../layer/Layer.js").default} layer Layer.
	         * @return {?} Callback result.
	         */
	        function forEachFeatureAtCoordinate(managed, feature, layer) {
	            return callback.call(thisArg, feature, managed ? layer : null);
	        }
	        var projection = viewState.projection;
	        var translatedCoordinate = coordinate;
	        var offsets = [[0, 0]];
	        if (projection.canWrapX()) {
	            var projectionExtent = projection.getExtent();
	            var worldWidth = getWidth(projectionExtent);
	            var x = coordinate[0];
	            if (x < projectionExtent[0] || x > projectionExtent[2]) {
	                var worldsAway = Math.ceil((projectionExtent[0] - x) / worldWidth);
	                translatedCoordinate = [x + worldWidth * worldsAway, coordinate[1]];
	            }
	            if (checkWrapped) {
	                offsets.push([-worldWidth, 0], [worldWidth, 0]);
	            }
	        }
	        var layerStates = frameState.layerStatesArray;
	        var numLayers = layerStates.length;
	        var declutteredFeatures;
	        if (this.declutterTree_) {
	            declutteredFeatures = this.declutterTree_.all().map(function (entry) {
	                return entry.value;
	            });
	        }
	        var tmpCoord = [];
	        for (var i = 0; i < offsets.length; i++) {
	            for (var j = numLayers - 1; j >= 0; --j) {
	                var layerState = layerStates[j];
	                var layer = /** @type {import("../layer/Layer.js").default} */ (layerState.layer);
	                if (layer.hasRenderer() && inView(layerState, viewState) && layerFilter.call(thisArg2, layer)) {
	                    var layerRenderer = layer.getRenderer();
	                    var source = layer.getSource();
	                    if (layerRenderer && source) {
	                        var coordinates = source.getWrapX() ? translatedCoordinate : coordinate;
	                        var callback_1 = forEachFeatureAtCoordinate.bind(null, layerState.managed);
	                        tmpCoord[0] = coordinates[0] + offsets[i][0];
	                        tmpCoord[1] = coordinates[1] + offsets[i][1];
	                        result = layerRenderer.forEachFeatureAtCoordinate(tmpCoord, frameState, hitTolerance, callback_1, declutteredFeatures);
	                    }
	                    if (result) {
	                        return result;
	                    }
	                }
	            }
	        }
	        return undefined;
	    };
	    /**
	     * @abstract
	     * @param {import("../pixel.js").Pixel} pixel Pixel.
	     * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
	     * @param {number} hitTolerance Hit tolerance in pixels.
	     * @param {function(this: S, import("../layer/Layer.js").default, (Uint8ClampedArray|Uint8Array)): T} callback Layer
	     *     callback.
	     * @param {function(this: U, import("../layer/Layer.js").default): boolean} layerFilter Layer filter
	     *     function, only layers which are visible and for which this function
	     *     returns `true` will be tested for features.  By default, all visible
	     *     layers will be tested.
	     * @return {T|undefined} Callback result.
	     * @template S,T,U
	     */
	    MapRenderer.prototype.forEachLayerAtPixel = function (pixel, frameState, hitTolerance, callback, layerFilter) {
	        return abstract();
	    };
	    /**
	     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
	     * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
	     * @param {number} hitTolerance Hit tolerance in pixels.
	     * @param {boolean} checkWrapped Check for wrapped geometries.
	     * @param {function(this: U, import("../layer/Layer.js").default): boolean} layerFilter Layer filter
	     *     function, only layers which are visible and for which this function
	     *     returns `true` will be tested for features.  By default, all visible
	     *     layers will be tested.
	     * @param {U} thisArg Value to use as `this` when executing `layerFilter`.
	     * @return {boolean} Is there a feature at the given coordinate?
	     * @template U
	     */
	    MapRenderer.prototype.hasFeatureAtCoordinate = function (coordinate, frameState, hitTolerance, checkWrapped, layerFilter, thisArg) {
	        var hasFeature = this.forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, checkWrapped, TRUE, this, layerFilter, thisArg);
	        return hasFeature !== undefined;
	    };
	    /**
	     * @return {import("../PluggableMap.js").default} Map.
	     */
	    MapRenderer.prototype.getMap = function () {
	        return this.map_;
	    };
	    /**
	     * Render.
	     * @param {?import("../PluggableMap.js").FrameState} frameState Frame state.
	     */
	    MapRenderer.prototype.renderFrame = function (frameState) {
	        this.declutterTree_ = renderDeclutterItems(frameState, this.declutterTree_);
	    };
	    /**
	     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
	     * @protected
	     */
	    MapRenderer.prototype.scheduleExpireIconCache = function (frameState) {
	        if (shared$1.canExpireCache()) {
	            frameState.postRenderFunctions.push(expireIconCache);
	        }
	    };
	    return MapRenderer;
	}(Disposable));
	/**
	 * @param {import("../PluggableMap.js").default} map Map.
	 * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
	 */
	function expireIconCache(map, frameState) {
	    shared$1.expire();
	}

	var __extends$U = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @classdesc
	 * Canvas map renderer.
	 * @api
	 */
	var CompositeMapRenderer = /** @class */ (function (_super) {
	    __extends$U(CompositeMapRenderer, _super);
	    /**
	     * @param {import("../PluggableMap.js").default} map Map.
	     */
	    function CompositeMapRenderer(map) {
	        var _this = _super.call(this, map) || this;
	        /**
	         * @type {import("../events.js").EventsKey}
	         */
	        _this.labelCacheKey_ = listen$1(labelCache, EventType.CLEAR, map.redrawText.bind(map));
	        /**
	         * @private
	         * @type {HTMLDivElement}
	         */
	        _this.element_ = document.createElement('div');
	        var style = _this.element_.style;
	        style.position = 'absolute';
	        style.width = '100%';
	        style.height = '100%';
	        style.zIndex = '0';
	        _this.element_.className = CLASS_UNSELECTABLE + ' ol-layers';
	        var container = map.getViewport();
	        container.insertBefore(_this.element_, container.firstChild || null);
	        /**
	         * @private
	         * @type {Array<HTMLElement>}
	         */
	        _this.children_ = [];
	        /**
	         * @private
	         * @type {boolean}
	         */
	        _this.renderedVisible_ = true;
	        return _this;
	    }
	    /**
	     * @param {import("../render/EventType.js").default} type Event type.
	     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
	     */
	    CompositeMapRenderer.prototype.dispatchRenderEvent = function (type, frameState) {
	        var map = this.getMap();
	        if (map.hasListener(type)) {
	            var event_1 = new RenderEvent(type, undefined, frameState);
	            map.dispatchEvent(event_1);
	        }
	    };
	    CompositeMapRenderer.prototype.disposeInternal = function () {
	        unlistenByKey(this.labelCacheKey_);
	        _super.prototype.disposeInternal.call(this);
	    };
	    /**
	     * @inheritDoc
	     */
	    CompositeMapRenderer.prototype.renderFrame = function (frameState) {
	        if (!frameState) {
	            if (this.renderedVisible_) {
	                this.element_.style.display = 'none';
	                this.renderedVisible_ = false;
	            }
	            return;
	        }
	        this.calculateMatrices2D(frameState);
	        this.dispatchRenderEvent(RenderEventType.PRECOMPOSE, frameState);
	        var layerStatesArray = frameState.layerStatesArray.sort(function (a, b) {
	            return a.zIndex - b.zIndex;
	        });
	        var viewState = frameState.viewState;
	        this.children_.length = 0;
	        var previousElement = null;
	        for (var i = 0, ii = layerStatesArray.length; i < ii; ++i) {
	            var layerState = layerStatesArray[i];
	            frameState.layerIndex = i;
	            if (!inView(layerState, viewState) ||
	                (layerState.sourceState != SourceState.READY && layerState.sourceState != SourceState.UNDEFINED)) {
	                continue;
	            }
	            var layer = layerState.layer;
	            var element = layer.render(frameState, previousElement);
	            if (!element) {
	                continue;
	            }
	            if (element !== previousElement) {
	                this.children_.push(element);
	                previousElement = element;
	            }
	        }
	        _super.prototype.renderFrame.call(this, frameState);
	        replaceChildren(this.element_, this.children_);
	        this.dispatchRenderEvent(RenderEventType.POSTCOMPOSE, frameState);
	        if (!this.renderedVisible_) {
	            this.element_.style.display = '';
	            this.renderedVisible_ = true;
	        }
	        this.scheduleExpireIconCache(frameState);
	    };
	    /**
	     * @inheritDoc
	     */
	    CompositeMapRenderer.prototype.forEachLayerAtPixel = function (pixel, frameState, hitTolerance, callback, layerFilter) {
	        var viewState = frameState.viewState;
	        var layerStates = frameState.layerStatesArray;
	        var numLayers = layerStates.length;
	        for (var i = numLayers - 1; i >= 0; --i) {
	            var layerState = layerStates[i];
	            var layer = layerState.layer;
	            if (layer.hasRenderer() && inView(layerState, viewState) && layerFilter(layer)) {
	                var layerRenderer = layer.getRenderer();
	                var data = layerRenderer.getDataAtPixel(pixel, frameState, hitTolerance);
	                if (data) {
	                    var result = callback(layer, data);
	                    if (result) {
	                        return result;
	                    }
	                }
	            }
	        }
	        return undefined;
	    };
	    return CompositeMapRenderer;
	}(MapRenderer));

	/**
	 * @module ol/OverlayPositioning
	 */
	/**
	 * Overlay position: `'bottom-left'`, `'bottom-center'`,  `'bottom-right'`,
	 * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,
	 * `'top-center'`, `'top-right'`
	 * @enum {string}
	 */
	var OverlayPositioning = {
	    BOTTOM_LEFT: 'bottom-left',
	    BOTTOM_CENTER: 'bottom-center',
	    BOTTOM_RIGHT: 'bottom-right',
	    CENTER_LEFT: 'center-left',
	    CENTER_CENTER: 'center-center',
	    CENTER_RIGHT: 'center-right',
	    TOP_LEFT: 'top-left',
	    TOP_CENTER: 'top-center',
	    TOP_RIGHT: 'top-right'
	};

	var __extends$V = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @typedef {Object} Options
	 * @property {number|string} [id] Set the overlay id. The overlay id can be used
	 * with the {@link module:ol/Map~Map#getOverlayById} method.
	 * @property {HTMLElement} [element] The overlay element.
	 * @property {Array<number>} [offset=[0, 0]] Offsets in pixels used when positioning
	 * the overlay. The first element in the
	 * array is the horizontal offset. A positive value shifts the overlay right.
	 * The second element in the array is the vertical offset. A positive value
	 * shifts the overlay down.
	 * @property {import("./coordinate.js").Coordinate} [position] The overlay position
	 * in map projection.
	 * @property {OverlayPositioning} [positioning='top-left'] Defines how
	 * the overlay is actually positioned with respect to its `position` property.
	 * Possible values are `'bottom-left'`, `'bottom-center'`, `'bottom-right'`,
	 * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,
	 * `'top-center'`, and `'top-right'`.
	 * @property {boolean} [stopEvent=true] Whether event propagation to the map
	 * viewport should be stopped. If `true` the overlay is placed in the same
	 * container as that of the controls (CSS class name
	 * `ol-overlaycontainer-stopevent`); if `false` it is placed in the container
	 * with CSS class name specified by the `className` property.
	 * @property {boolean} [insertFirst=true] Whether the overlay is inserted first
	 * in the overlay container, or appended. If the overlay is placed in the same
	 * container as that of the controls (see the `stopEvent` option) you will
	 * probably set `insertFirst` to `true` so the overlay is displayed below the
	 * controls.
	 * @property {boolean} [autoPan=false] If set to `true` the map is panned when
	 * calling `setPosition`, so that the overlay is entirely visible in the current
	 * viewport.
	 * @property {PanOptions} [autoPanAnimation] The
	 * animation options used to pan the overlay into view. This animation is only
	 * used when `autoPan` is enabled. A `duration` and `easing` may be provided to
	 * customize the animation.
	 * @property {number} [autoPanMargin=20] The margin (in pixels) between the
	 * overlay and the borders of the map when autopanning.
	 * @property {string} [className='ol-overlay-container ol-selectable'] CSS class
	 * name.
	 */
	/**
	 * @typedef {Object} PanOptions
	 * @property {number} [duration=1000] The duration of the animation in
	 * milliseconds.
	 * @property {function(number):number} [easing] The easing function to use. Can
	 * be one from {@link module:ol/easing} or a custom function.
	 * Default is {@link module:ol/easing~inAndOut}.
	 */
	/**
	 * @enum {string}
	 * @protected
	 */
	var Property$4 = {
	    ELEMENT: 'element',
	    MAP: 'map',
	    OFFSET: 'offset',
	    POSITION: 'position',
	    POSITIONING: 'positioning'
	};
	/**
	 * @classdesc
	 * An element to be displayed over the map and attached to a single map
	 * location.  Like {@link module:ol/control/Control~Control}, Overlays are
	 * visible widgets. Unlike Controls, they are not in a fixed position on the
	 * screen, but are tied to a geographical coordinate, so panning the map will
	 * move an Overlay but not a Control.
	 *
	 * Example:
	 *
	 *     import Overlay from 'ol/Overlay';
	 *
	 *     var popup = new Overlay({
	 *       element: document.getElementById('popup')
	 *     });
	 *     popup.setPosition(coordinate);
	 *     map.addOverlay(popup);
	 *
	 * @api
	 */
	var Overlay = /** @class */ (function (_super) {
	    __extends$V(Overlay, _super);
	    /**
	     * @param {Options} options Overlay options.
	     */
	    function Overlay(options) {
	        var _this = _super.call(this) || this;
	        /**
	         * @protected
	         * @type {Options}
	         */
	        _this.options = options;
	        /**
	         * @protected
	         * @type {number|string|undefined}
	         */
	        _this.id = options.id;
	        /**
	         * @protected
	         * @type {boolean}
	         */
	        _this.insertFirst = options.insertFirst !== undefined ?
	            options.insertFirst : true;
	        /**
	         * @protected
	         * @type {boolean}
	         */
	        _this.stopEvent = options.stopEvent !== undefined ? options.stopEvent : true;
	        /**
	         * @protected
	         * @type {HTMLElement}
	         */
	        _this.element = document.createElement('div');
	        _this.element.className = options.className !== undefined ?
	            options.className : 'ol-overlay-container ' + CLASS_SELECTABLE;
	        _this.element.style.position = 'absolute';
	        /**
	         * @protected
	         * @type {boolean}
	         */
	        _this.autoPan = options.autoPan !== undefined ? options.autoPan : false;
	        /**
	         * @protected
	         * @type {PanOptions}
	         */
	        _this.autoPanAnimation = options.autoPanAnimation || /** @type {PanOptions} */ ({});
	        /**
	         * @protected
	         * @type {number}
	         */
	        _this.autoPanMargin = options.autoPanMargin !== undefined ?
	            options.autoPanMargin : 20;
	        /**
	         * @protected
	         * @type {{bottom_: string,
	         *         left_: string,
	         *         right_: string,
	         *         top_: string,
	         *         visible: boolean}}
	         */
	        _this.rendered = {
	            bottom_: '',
	            left_: '',
	            right_: '',
	            top_: '',
	            visible: true
	        };
	        /**
	         * @protected
	         * @type {?import("./events.js").EventsKey}
	         */
	        _this.mapPostrenderListenerKey = null;
	        _this.addEventListener(getChangeEventType(Property$4.ELEMENT), _this.handleElementChanged);
	        _this.addEventListener(getChangeEventType(Property$4.MAP), _this.handleMapChanged);
	        _this.addEventListener(getChangeEventType(Property$4.OFFSET), _this.handleOffsetChanged);
	        _this.addEventListener(getChangeEventType(Property$4.POSITION), _this.handlePositionChanged);
	        _this.addEventListener(getChangeEventType(Property$4.POSITIONING), _this.handlePositioningChanged);
	        if (options.element !== undefined) {
	            _this.setElement(options.element);
	        }
	        _this.setOffset(options.offset !== undefined ? options.offset : [0, 0]);
	        _this.setPositioning(options.positioning !== undefined ?
	            /** @type {OverlayPositioning} */ (options.positioning) :
	            OverlayPositioning.TOP_LEFT);
	        if (options.position !== undefined) {
	            _this.setPosition(options.position);
	        }
	        return _this;
	    }
	    /**
	     * Get the DOM element of this overlay.
	     * @return {HTMLElement|undefined} The Element containing the overlay.
	     * @observable
	     * @api
	     */
	    Overlay.prototype.getElement = function () {
	        return /** @type {HTMLElement|undefined} */ (this.get(Property$4.ELEMENT));
	    };
	    /**
	     * Get the overlay identifier which is set on constructor.
	     * @return {number|string|undefined} Id.
	     * @api
	     */
	    Overlay.prototype.getId = function () {
	        return this.id;
	    };
	    /**
	     * Get the map associated with this overlay.
	     * @return {import("./PluggableMap.js").default|undefined} The map that the
	     * overlay is part of.
	     * @observable
	     * @api
	     */
	    Overlay.prototype.getMap = function () {
	        return (
	        /** @type {import("./PluggableMap.js").default|undefined} */ (this.get(Property$4.MAP)));
	    };
	    /**
	     * Get the offset of this overlay.
	     * @return {Array<number>} The offset.
	     * @observable
	     * @api
	     */
	    Overlay.prototype.getOffset = function () {
	        return /** @type {Array<number>} */ (this.get(Property$4.OFFSET));
	    };
	    /**
	     * Get the current position of this overlay.
	     * @return {import("./coordinate.js").Coordinate|undefined} The spatial point that the overlay is
	     *     anchored at.
	     * @observable
	     * @api
	     */
	    Overlay.prototype.getPosition = function () {
	        return (
	        /** @type {import("./coordinate.js").Coordinate|undefined} */ (this.get(Property$4.POSITION)));
	    };
	    /**
	     * Get the current positioning of this overlay.
	     * @return {OverlayPositioning} How the overlay is positioned
	     *     relative to its point on the map.
	     * @observable
	     * @api
	     */
	    Overlay.prototype.getPositioning = function () {
	        return (
	        /** @type {OverlayPositioning} */ (this.get(Property$4.POSITIONING)));
	    };
	    /**
	     * @protected
	     */
	    Overlay.prototype.handleElementChanged = function () {
	        removeChildren(this.element);
	        var element = this.getElement();
	        if (element) {
	            this.element.appendChild(element);
	        }
	    };
	    /**
	     * @protected
	     */
	    Overlay.prototype.handleMapChanged = function () {
	        if (this.mapPostrenderListenerKey) {
	            removeNode(this.element);
	            unlistenByKey(this.mapPostrenderListenerKey);
	            this.mapPostrenderListenerKey = null;
	        }
	        var map = this.getMap();
	        if (map) {
	            this.mapPostrenderListenerKey = listen$1(map, MapEventType.POSTRENDER, this.render, this);
	            this.updatePixelPosition();
	            var container = this.stopEvent ?
	                map.getOverlayContainerStopEvent() : map.getOverlayContainer();
	            if (this.insertFirst) {
	                container.insertBefore(this.element, container.childNodes[0] || null);
	            }
	            else {
	                container.appendChild(this.element);
	            }
	        }
	    };
	    /**
	     * @protected
	     */
	    Overlay.prototype.render = function () {
	        this.updatePixelPosition();
	    };
	    /**
	     * @protected
	     */
	    Overlay.prototype.handleOffsetChanged = function () {
	        this.updatePixelPosition();
	    };
	    /**
	     * @protected
	     */
	    Overlay.prototype.handlePositionChanged = function () {
	        this.updatePixelPosition();
	        if (this.get(Property$4.POSITION) && this.autoPan) {
	            this.panIntoView();
	        }
	    };
	    /**
	     * @protected
	     */
	    Overlay.prototype.handlePositioningChanged = function () {
	        this.updatePixelPosition();
	    };
	    /**
	     * Set the DOM element to be associated with this overlay.
	     * @param {HTMLElement|undefined} element The Element containing the overlay.
	     * @observable
	     * @api
	     */
	    Overlay.prototype.setElement = function (element) {
	        this.set(Property$4.ELEMENT, element);
	    };
	    /**
	     * Set the map to be associated with this overlay.
	     * @param {import("./PluggableMap.js").default|undefined} map The map that the
	     * overlay is part of.
	     * @observable
	     * @api
	     */
	    Overlay.prototype.setMap = function (map) {
	        this.set(Property$4.MAP, map);
	    };
	    /**
	     * Set the offset for this overlay.
	     * @param {Array<number>} offset Offset.
	     * @observable
	     * @api
	     */
	    Overlay.prototype.setOffset = function (offset) {
	        this.set(Property$4.OFFSET, offset);
	    };
	    /**
	     * Set the position for this overlay. If the position is `undefined` the
	     * overlay is hidden.
	     * @param {import("./coordinate.js").Coordinate|undefined} position The spatial point that the overlay
	     *     is anchored at.
	     * @observable
	     * @api
	     */
	    Overlay.prototype.setPosition = function (position) {
	        this.set(Property$4.POSITION, position);
	    };
	    /**
	     * Pan the map so that the overlay is entirely visible in the current viewport
	     * (if necessary).
	     * @protected
	     */
	    Overlay.prototype.panIntoView = function () {
	        var map = this.getMap();
	        if (!map || !map.getTargetElement()) {
	            return;
	        }
	        var mapRect = this.getRect(map.getTargetElement(), map.getSize());
	        var element = this.getElement();
	        var overlayRect = this.getRect(element, [outerWidth(element), outerHeight(element)]);
	        var margin = this.autoPanMargin;
	        if (!containsExtent(mapRect, overlayRect)) {
	            // the overlay is not completely inside the viewport, so pan the map
	            var offsetLeft = overlayRect[0] - mapRect[0];
	            var offsetRight = mapRect[2] - overlayRect[2];
	            var offsetTop = overlayRect[1] - mapRect[1];
	            var offsetBottom = mapRect[3] - overlayRect[3];
	            var delta = [0, 0];
	            if (offsetLeft < 0) {
	                // move map to the left
	                delta[0] = offsetLeft - margin;
	            }
	            else if (offsetRight < 0) {
	                // move map to the right
	                delta[0] = Math.abs(offsetRight) + margin;
	            }
	            if (offsetTop < 0) {
	                // move map up
	                delta[1] = offsetTop - margin;
	            }
	            else if (offsetBottom < 0) {
	                // move map down
	                delta[1] = Math.abs(offsetBottom) + margin;
	            }
	            if (delta[0] !== 0 || delta[1] !== 0) {
	                var center = /** @type {import("./coordinate.js").Coordinate} */ (map.getView().getCenterInternal());
	                var centerPx = map.getPixelFromCoordinateInternal(center);
	                var newCenterPx = [
	                    centerPx[0] + delta[0],
	                    centerPx[1] + delta[1]
	                ];
	                map.getView().animateInternal({
	                    center: map.getCoordinateFromPixelInternal(newCenterPx),
	                    duration: this.autoPanAnimation.duration,
	                    easing: this.autoPanAnimation.easing
	                });
	            }
	        }
	    };
	    /**
	     * Get the extent of an element relative to the document
	     * @param {HTMLElement} element The element.
	     * @param {import("./size.js").Size} size The size of the element.
	     * @return {import("./extent.js").Extent} The extent.
	     * @protected
	     */
	    Overlay.prototype.getRect = function (element, size) {
	        var box = element.getBoundingClientRect();
	        var offsetX = box.left + window.pageXOffset;
	        var offsetY = box.top + window.pageYOffset;
	        return [
	            offsetX,
	            offsetY,
	            offsetX + size[0],
	            offsetY + size[1]
	        ];
	    };
	    /**
	     * Set the positioning for this overlay.
	     * @param {OverlayPositioning} positioning how the overlay is
	     *     positioned relative to its point on the map.
	     * @observable
	     * @api
	     */
	    Overlay.prototype.setPositioning = function (positioning) {
	        this.set(Property$4.POSITIONING, positioning);
	    };
	    /**
	     * Modify the visibility of the element.
	     * @param {boolean} visible Element visibility.
	     * @protected
	     */
	    Overlay.prototype.setVisible = function (visible) {
	        if (this.rendered.visible !== visible) {
	            this.element.style.display = visible ? '' : 'none';
	            this.rendered.visible = visible;
	        }
	    };
	    /**
	     * Update pixel position.
	     * @protected
	     */
	    Overlay.prototype.updatePixelPosition = function () {
	        var map = this.getMap();
	        var position = this.getPosition();
	        if (!map || !map.isRendered() || !position) {
	            this.setVisible(false);
	            return;
	        }
	        var pixel = map.getPixelFromCoordinate(position);
	        var mapSize = map.getSize();
	        this.updateRenderedPosition(pixel, mapSize);
	    };
	    /**
	     * @param {import("./pixel.js").Pixel} pixel The pixel location.
	     * @param {import("./size.js").Size|undefined} mapSize The map size.
	     * @protected
	     */
	    Overlay.prototype.updateRenderedPosition = function (pixel, mapSize) {
	        var style = this.element.style;
	        var offset = this.getOffset();
	        var positioning = this.getPositioning();
	        this.setVisible(true);
	        var offsetX = offset[0];
	        var offsetY = offset[1];
	        if (positioning == OverlayPositioning.BOTTOM_RIGHT ||
	            positioning == OverlayPositioning.CENTER_RIGHT ||
	            positioning == OverlayPositioning.TOP_RIGHT) {
	            if (this.rendered.left_ !== '') {
	                this.rendered.left_ = '';
	                style.left = '';
	            }
	            var right = Math.round(mapSize[0] - pixel[0] - offsetX) + 'px';
	            if (this.rendered.right_ != right) {
	                this.rendered.right_ = right;
	                style.right = right;
	            }
	        }
	        else {
	            if (this.rendered.right_ !== '') {
	                this.rendered.right_ = '';
	                style.right = '';
	            }
	            if (positioning == OverlayPositioning.BOTTOM_CENTER ||
	                positioning == OverlayPositioning.CENTER_CENTER ||
	                positioning == OverlayPositioning.TOP_CENTER) {
	                offsetX -= this.element.offsetWidth / 2;
	            }
	            var left = Math.round(pixel[0] + offsetX) + 'px';
	            if (this.rendered.left_ != left) {
	                this.rendered.left_ = left;
	                style.left = left;
	            }
	        }
	        if (positioning == OverlayPositioning.BOTTOM_LEFT ||
	            positioning == OverlayPositioning.BOTTOM_CENTER ||
	            positioning == OverlayPositioning.BOTTOM_RIGHT) {
	            if (this.rendered.top_ !== '') {
	                this.rendered.top_ = '';
	                style.top = '';
	            }
	            var bottom = Math.round(mapSize[1] - pixel[1] - offsetY) + 'px';
	            if (this.rendered.bottom_ != bottom) {
	                this.rendered.bottom_ = bottom;
	                style.bottom = bottom;
	            }
	        }
	        else {
	            if (this.rendered.bottom_ !== '') {
	                this.rendered.bottom_ = '';
	                style.bottom = '';
	            }
	            if (positioning == OverlayPositioning.CENTER_LEFT ||
	                positioning == OverlayPositioning.CENTER_CENTER ||
	                positioning == OverlayPositioning.CENTER_RIGHT) {
	                offsetY -= this.element.offsetHeight / 2;
	            }
	            var top_1 = Math.round(pixel[1] + offsetY) + 'px';
	            if (this.rendered.top_ != top_1) {
	                this.rendered.top_ = 'top';
	                style.top = top_1;
	            }
	        }
	    };
	    /**
	     * returns the options this Overlay has been created with
	     * @return {Options} overlay options
	     */
	    Overlay.prototype.getOptions = function () {
	        return this.options;
	    };
	    return Overlay;
	}(BaseObject));

	/**
	 * @module ol/control
	 */
	/**
	 * @typedef {Object} DefaultsOptions
	 * @property {boolean} [attribution=true] Include
	 * {@link module:ol/control/Attribution~Attribution}.
	 * @property {import("./control/Attribution.js").Options} [attributionOptions]
	 * Options for {@link module:ol/control/Attribution~Attribution}.
	 * @property {boolean} [rotate=true] Include
	 * {@link module:ol/control/Rotate~Rotate}.
	 * @property {import("./control/Rotate.js").Options} [rotateOptions] Options
	 * for {@link module:ol/control/Rotate~Rotate}.
	 * @property {boolean} [zoom] Include {@link module:ol/control/Zoom~Zoom}.
	 * @property {import("./control/Zoom.js").Options} [zoomOptions] Options for
	 * {@link module:ol/control/Zoom~Zoom}.
	 * @api
	 */
	/**
	 * Set of controls included in maps by default. Unless configured otherwise,
	 * this returns a collection containing an instance of each of the following
	 * controls:
	 * * {@link module:ol/control/Zoom~Zoom}
	 * * {@link module:ol/control/Rotate~Rotate}
	 * * {@link module:ol/control/Attribution~Attribution}
	 *
	 * @param {DefaultsOptions=} opt_options
	 * Defaults options.
	 * @return {Collection<import("./control/Control.js").default>}
	 * Controls.
	 * @api
	 */
	function defaults$2(opt_options) {
	    var options = opt_options ? opt_options : {};
	    var controls = new Collection$2();
	    var zoomControl = options.zoom !== undefined ? options.zoom : true;
	    if (zoomControl) {
	        controls.push(new Zoom(options.zoomOptions));
	    }
	    var rotateControl = options.rotate !== undefined ? options.rotate : true;
	    if (rotateControl) {
	        controls.push(new Rotate(options.rotateOptions));
	    }
	    var attributionControl = options.attribution !== undefined ?
	        options.attribution : true;
	    if (attributionControl) {
	        controls.push(new Attribution(options.attributionOptions));
	    }
	    return controls;
	}

	/**
	 * @module ol/interaction/Property
	 */
	/**
	 * @enum {string}
	 */
	var InteractionProperty = {
	    ACTIVE: 'active'
	};

	var __extends$W = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * Object literal with config options for interactions.
	 * @typedef {Object} InteractionOptions
	 * @property {function(import("../MapBrowserEvent.js").default):boolean} handleEvent
	 * Method called by the map to notify the interaction that a browser event was
	 * dispatched to the map. If the function returns a falsy value, propagation of
	 * the event to other interactions in the map's interactions chain will be
	 * prevented (this includes functions with no explicit return). The interactions
	 * are traversed in reverse order of the interactions collection of the map.
	 */
	/**
	 * @classdesc
	 * Abstract base class; normally only used for creating subclasses and not
	 * instantiated in apps.
	 * User actions that change the state of the map. Some are similar to controls,
	 * but are not associated with a DOM element.
	 * For example, {@link module:ol/interaction/KeyboardZoom~KeyboardZoom} is
	 * functionally the same as {@link module:ol/control/Zoom~Zoom}, but triggered
	 * by a keyboard event not a button element event.
	 * Although interactions do not have a DOM element, some of them do render
	 * vectors and so are visible on the screen.
	 * @api
	 */
	var Interaction = /** @class */ (function (_super) {
	    __extends$W(Interaction, _super);
	    /**
	     * @param {InteractionOptions} options Options.
	     */
	    function Interaction(options) {
	        var _this = _super.call(this) || this;
	        if (options.handleEvent) {
	            _this.handleEvent = options.handleEvent;
	        }
	        /**
	         * @private
	         * @type {import("../PluggableMap.js").default}
	         */
	        _this.map_ = null;
	        _this.setActive(true);
	        return _this;
	    }
	    /**
	     * Return whether the interaction is currently active.
	     * @return {boolean} `true` if the interaction is active, `false` otherwise.
	     * @observable
	     * @api
	     */
	    Interaction.prototype.getActive = function () {
	        return /** @type {boolean} */ (this.get(InteractionProperty.ACTIVE));
	    };
	    /**
	     * Get the map associated with this interaction.
	     * @return {import("../PluggableMap.js").default} Map.
	     * @api
	     */
	    Interaction.prototype.getMap = function () {
	        return this.map_;
	    };
	    /**
	     * Handles the {@link module:ol/MapBrowserEvent map browser event}.
	     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
	     * @return {boolean} `false` to stop event propagation.
	     * @api
	     */
	    Interaction.prototype.handleEvent = function (mapBrowserEvent) {
	        return true;
	    };
	    /**
	     * Activate or deactivate the interaction.
	     * @param {boolean} active Active.
	     * @observable
	     * @api
	     */
	    Interaction.prototype.setActive = function (active) {
	        this.set(InteractionProperty.ACTIVE, active);
	    };
	    /**
	     * Remove the interaction from its current map and attach it to the new map.
	     * Subclasses may set up event handlers to get notified about changes to
	     * the map here.
	     * @param {import("../PluggableMap.js").default} map Map.
	     */
	    Interaction.prototype.setMap = function (map) {
	        this.map_ = map;
	    };
	    return Interaction;
	}(BaseObject));
	/**
	 * @param {import("../View.js").default} view View.
	 * @param {import("../coordinate.js").Coordinate} delta Delta.
	 * @param {number=} opt_duration Duration.
	 */
	function pan(view, delta, opt_duration) {
	    var currentCenter = view.getCenterInternal();
	    if (currentCenter) {
	        var center = [currentCenter[0] + delta[0], currentCenter[1] + delta[1]];
	        view.animateInternal({
	            duration: opt_duration !== undefined ? opt_duration : 250,
	            easing: linear,
	            center: view.getConstrainedCenter(center)
	        });
	    }
	}
	/**
	 * @param {import("../View.js").default} view View.
	 * @param {number} delta Delta from previous zoom level.
	 * @param {import("../coordinate.js").Coordinate=} opt_anchor Anchor coordinate in the user projection.
	 * @param {number=} opt_duration Duration.
	 */
	function zoomByDelta(view, delta, opt_anchor, opt_duration) {
	    var currentZoom = view.getZoom();
	    if (currentZoom === undefined) {
	        return;
	    }
	    var newZoom = view.getConstrainedZoom(currentZoom + delta);
	    var newResolution = view.getResolutionForZoom(newZoom);
	    if (view.getAnimating()) {
	        view.cancelAnimations();
	    }
	    view.animate({
	        resolution: newResolution,
	        anchor: opt_anchor,
	        duration: opt_duration !== undefined ? opt_duration : 250,
	        easing: easeOut
	    });
	}

	var __extends$X = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @typedef {Object} Options
	 * @property {number} [duration=250] Animation duration in milliseconds.
	 * @property {number} [delta=1] The zoom delta applied on each double click.
	 */
	/**
	 * @classdesc
	 * Allows the user to zoom by double-clicking on the map.
	 * @api
	 */
	var DoubleClickZoom = /** @class */ (function (_super) {
	    __extends$X(DoubleClickZoom, _super);
	    /**
	     * @param {Options=} opt_options Options.
	     */
	    function DoubleClickZoom(opt_options) {
	        var _this = _super.call(this, {
	            handleEvent: handleEvent
	        }) || this;
	        var options = opt_options ? opt_options : {};
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.delta_ = options.delta ? options.delta : 1;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.duration_ = options.duration !== undefined ? options.duration : 250;
	        return _this;
	    }
	    return DoubleClickZoom;
	}(Interaction));
	/**
	 * Handles the {@link module:ol/MapBrowserEvent map browser event} (if it was a
	 * doubleclick) and eventually zooms the map.
	 * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
	 * @return {boolean} `false` to stop event propagation.
	 * @this {DoubleClickZoom}
	 */
	function handleEvent(mapBrowserEvent) {
	    var stopEvent = false;
	    if (mapBrowserEvent.type == MapBrowserEventType.DBLCLICK) {
	        var browserEvent = /** @type {MouseEvent} */ (mapBrowserEvent.originalEvent);
	        var map = mapBrowserEvent.map;
	        var anchor = mapBrowserEvent.coordinate;
	        var delta = browserEvent.shiftKey ? -this.delta_ : this.delta_;
	        var view = map.getView();
	        zoomByDelta(view, delta, anchor, this.duration_);
	        mapBrowserEvent.preventDefault();
	        stopEvent = true;
	    }
	    return !stopEvent;
	}

	/**
	 * @module ol/events/condition
	 */
	/**
	 * Return `true` if only the alt-key and shift-key is pressed, `false` otherwise
	 * (e.g. when additionally the platform-modifier-key is pressed).
	 *
	 * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
	 * @return {boolean} True if only the alt and shift keys are pressed.
	 * @api
	 */
	var altShiftKeysOnly = function (mapBrowserEvent) {
	    var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);
	    return (originalEvent.altKey &&
	        !(originalEvent.metaKey || originalEvent.ctrlKey) &&
	        originalEvent.shiftKey);
	};
	/**
	 * Return `true` if the map has the focus. This condition requires a map target
	 * element with a `tabindex` attribute, e.g. `<div id="map" tabindex="1">`.
	 *
	 * @param {import("../MapBrowserEvent.js").default} event Map browser event.
	 * @return {boolean} The map has the focus.
	 * @api
	 */
	var focus = function (event) {
	    return event.target.getTargetElement() === document.activeElement;
	};
	/**
	 * Return always true.
	 *
	 * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
	 * @return {boolean} True.
	 * @api
	 */
	var always = TRUE;
	/**
	 * Return `true` if the event has an "action"-producing mouse button.
	 *
	 * By definition, this includes left-click on windows/linux, and left-click
	 * without the ctrl key on Macs.
	 *
	 * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
	 * @return {boolean} The result.
	 */
	var mouseActionButton = function (mapBrowserEvent) {
	    var originalEvent = /** @type {MouseEvent} */ (mapBrowserEvent.originalEvent);
	    return originalEvent.button == 0 &&
	        !(WEBKIT && MAC && originalEvent.ctrlKey);
	};
	/**
	 * Return `true` if no modifier key (alt-, shift- or platform-modifier-key) is
	 * pressed.
	 *
	 * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
	 * @return {boolean} True only if there no modifier keys are pressed.
	 * @api
	 */
	var noModifierKeys = function (mapBrowserEvent) {
	    var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);
	    return (!originalEvent.altKey &&
	        !(originalEvent.metaKey || originalEvent.ctrlKey) &&
	        !originalEvent.shiftKey);
	};
	/**
	 * Return `true` if only the shift-key is pressed, `false` otherwise (e.g. when
	 * additionally the alt-key is pressed).
	 *
	 * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
	 * @return {boolean} True if only the shift key is pressed.
	 * @api
	 */
	var shiftKeyOnly = function (mapBrowserEvent) {
	    var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);
	    return (!originalEvent.altKey &&
	        !(originalEvent.metaKey || originalEvent.ctrlKey) &&
	        originalEvent.shiftKey);
	};
	/**
	 * Return `true` if the target element is not editable, i.e. not a `<input>`-,
	 * `<select>`- or `<textarea>`-element, `false` otherwise.
	 *
	 * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
	 * @return {boolean} True only if the target element is not editable.
	 * @api
	 */
	var targetNotEditable = function (mapBrowserEvent) {
	    var target = mapBrowserEvent.target;
	    var tagName = /** @type {Element} */ (target).tagName;
	    return (tagName !== 'INPUT' &&
	        tagName !== 'SELECT' &&
	        tagName !== 'TEXTAREA');
	};
	/**
	 * Return `true` if the event originates from a mouse device.
	 *
	 * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
	 * @return {boolean} True if the event originates from a mouse device.
	 * @api
	 */
	var mouseOnly = function (mapBrowserEvent) {
	    var pointerEvent = /** @type {import("../MapBrowserPointerEvent").default} */ (mapBrowserEvent).pointerEvent;
	    assert(pointerEvent !== undefined, 56); // mapBrowserEvent must originate from a pointer event
	    // see http://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType
	    return pointerEvent.pointerType == 'mouse';
	};
	/**
	 * Return `true` if the event originates from a primary pointer in
	 * contact with the surface or if the left mouse button is pressed.
	 * See http://www.w3.org/TR/pointerevents/#button-states.
	 *
	 * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
	 * @return {boolean} True if the event originates from a primary pointer.
	 * @api
	 */
	var primaryAction = function (mapBrowserEvent) {
	    var pointerEvent = /** @type {import("../MapBrowserPointerEvent").default} */ (mapBrowserEvent).pointerEvent;
	    assert(pointerEvent !== undefined, 56); // mapBrowserEvent must originate from a pointer event
	    return pointerEvent.isPrimary && pointerEvent.button === 0;
	};

	var __extends$Y = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @typedef {Object} Options
	 * @property {function(import("../MapBrowserPointerEvent.js").default):boolean} [handleDownEvent]
	 * Function handling "down" events. If the function returns `true` then a drag
	 * sequence is started.
	 * @property {function(import("../MapBrowserPointerEvent.js").default)} [handleDragEvent]
	 * Function handling "drag" events. This function is called on "move" events
	 * during a drag sequence.
	 * @property {function(import("../MapBrowserEvent.js").default):boolean} [handleEvent]
	 * Method called by the map to notify the interaction that a browser event was
	 * dispatched to the map. The function may return `false` to prevent the
	 * propagation of the event to other interactions in the map's interactions
	 * chain.
	 * @property {function(import("../MapBrowserPointerEvent.js").default)} [handleMoveEvent]
	 * Function handling "move" events. This function is called on "move" events.
	 * This functions is also called during a drag sequence, so during a drag
	 * sequence both the `handleDragEvent` function and this function are called.
	 * If `handleDownEvent` is defined and it returns true this function will not
	 * be called during a drag sequence.
	 * @property {function(import("../MapBrowserPointerEvent.js").default):boolean} [handleUpEvent]
	 *  Function handling "up" events. If the function returns `false` then the
	 * current drag sequence is stopped.
	 * @property {function(boolean):boolean} [stopDown]
	 * Should the down event be propagated to other interactions, or should be
	 * stopped?
	 */
	/**
	 * @classdesc
	 * Base class that calls user-defined functions on `down`, `move` and `up`
	 * events. This class also manages "drag sequences".
	 *
	 * When the `handleDownEvent` user function returns `true` a drag sequence is
	 * started. During a drag sequence the `handleDragEvent` user function is
	 * called on `move` events. The drag sequence ends when the `handleUpEvent`
	 * user function is called and returns `false`.
	 * @api
	 */
	var PointerInteraction = /** @class */ (function (_super) {
	    __extends$Y(PointerInteraction, _super);
	    /**
	     * @param {Options=} opt_options Options.
	     */
	    function PointerInteraction(opt_options) {
	        var _this = this;
	        var options = opt_options ? opt_options : {};
	        _this = _super.call(this, /** @type {import("./Interaction.js").InteractionOptions} */ (options)) || this;
	        if (options.handleDownEvent) {
	            _this.handleDownEvent = options.handleDownEvent;
	        }
	        if (options.handleDragEvent) {
	            _this.handleDragEvent = options.handleDragEvent;
	        }
	        if (options.handleMoveEvent) {
	            _this.handleMoveEvent = options.handleMoveEvent;
	        }
	        if (options.handleUpEvent) {
	            _this.handleUpEvent = options.handleUpEvent;
	        }
	        if (options.stopDown) {
	            _this.stopDown = options.stopDown;
	        }
	        /**
	         * @type {boolean}
	         * @protected
	         */
	        _this.handlingDownUpSequence = false;
	        /**
	         * @type {!Object<string, PointerEvent>}
	         * @private
	         */
	        _this.trackedPointers_ = {};
	        /**
	         * @type {Array<PointerEvent>}
	         * @protected
	         */
	        _this.targetPointers = [];
	        return _this;
	    }
	    /**
	     * Handle pointer down events.
	     * @param {import("../MapBrowserPointerEvent.js").default} mapBrowserEvent Event.
	     * @return {boolean} If the event was consumed.
	     * @protected
	     */
	    PointerInteraction.prototype.handleDownEvent = function (mapBrowserEvent) {
	        return false;
	    };
	    /**
	     * Handle pointer drag events.
	     * @param {import("../MapBrowserPointerEvent.js").default} mapBrowserEvent Event.
	     * @protected
	     */
	    PointerInteraction.prototype.handleDragEvent = function (mapBrowserEvent) { };
	    /**
	     * Handles the {@link module:ol/MapBrowserEvent map browser event} and may call into
	     * other functions, if event sequences like e.g. 'drag' or 'down-up' etc. are
	     * detected.
	     * @override
	     * @api
	     */
	    PointerInteraction.prototype.handleEvent = function (mapBrowserEvent) {
	        if (!( /** @type {import("../MapBrowserPointerEvent.js").default} */(mapBrowserEvent).pointerEvent)) {
	            return true;
	        }
	        var stopEvent = false;
	        this.updateTrackedPointers_(mapBrowserEvent);
	        if (this.handlingDownUpSequence) {
	            if (mapBrowserEvent.type == MapBrowserEventType.POINTERDRAG) {
	                this.handleDragEvent(mapBrowserEvent);
	            }
	            else if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {
	                var handledUp = this.handleUpEvent(mapBrowserEvent);
	                this.handlingDownUpSequence = handledUp && this.targetPointers.length > 0;
	            }
	        }
	        else {
	            if (mapBrowserEvent.type == MapBrowserEventType.POINTERDOWN) {
	                var handled = this.handleDownEvent(mapBrowserEvent);
	                if (handled) {
	                    mapBrowserEvent.preventDefault();
	                }
	                this.handlingDownUpSequence = handled;
	                stopEvent = this.stopDown(handled);
	            }
	            else if (mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE) {
	                this.handleMoveEvent(mapBrowserEvent);
	            }
	        }
	        return !stopEvent;
	    };
	    /**
	     * Handle pointer move events.
	     * @param {import("../MapBrowserPointerEvent.js").default} mapBrowserEvent Event.
	     * @protected
	     */
	    PointerInteraction.prototype.handleMoveEvent = function (mapBrowserEvent) { };
	    /**
	     * Handle pointer up events.
	     * @param {import("../MapBrowserPointerEvent.js").default} mapBrowserEvent Event.
	     * @return {boolean} If the event was consumed.
	     * @protected
	     */
	    PointerInteraction.prototype.handleUpEvent = function (mapBrowserEvent) {
	        return false;
	    };
	    /**
	     * This function is used to determine if "down" events should be propagated
	     * to other interactions or should be stopped.
	     * @param {boolean} handled Was the event handled by the interaction?
	     * @return {boolean} Should the `down` event be stopped?
	     */
	    PointerInteraction.prototype.stopDown = function (handled) {
	        return handled;
	    };
	    /**
	     * @param {import("../MapBrowserPointerEvent.js").default} mapBrowserEvent Event.
	     * @private
	     */
	    PointerInteraction.prototype.updateTrackedPointers_ = function (mapBrowserEvent) {
	        if (isPointerDraggingEvent(mapBrowserEvent)) {
	            var event_1 = mapBrowserEvent.pointerEvent;
	            var id = event_1.pointerId.toString();
	            if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {
	                delete this.trackedPointers_[id];
	            }
	            else if (mapBrowserEvent.type ==
	                MapBrowserEventType.POINTERDOWN) {
	                this.trackedPointers_[id] = event_1;
	            }
	            else if (id in this.trackedPointers_) {
	                // update only when there was a pointerdown event for this pointer
	                this.trackedPointers_[id] = event_1;
	            }
	            this.targetPointers = getValues(this.trackedPointers_);
	        }
	    };
	    return PointerInteraction;
	}(Interaction));
	/**
	 * @param {Array<PointerEvent>} pointerEvents List of events.
	 * @return {import("../pixel.js").Pixel} Centroid pixel.
	 */
	function centroid(pointerEvents) {
	    var length = pointerEvents.length;
	    var clientX = 0;
	    var clientY = 0;
	    for (var i = 0; i < length; i++) {
	        clientX += pointerEvents[i].clientX;
	        clientY += pointerEvents[i].clientY;
	    }
	    return [clientX / length, clientY / length];
	}
	/**
	 * @param {import("../MapBrowserPointerEvent.js").default} mapBrowserEvent Event.
	 * @return {boolean} Whether the event is a pointerdown, pointerdrag
	 *     or pointerup event.
	 */
	function isPointerDraggingEvent(mapBrowserEvent) {
	    var type = mapBrowserEvent.type;
	    return type === MapBrowserEventType.POINTERDOWN ||
	        type === MapBrowserEventType.POINTERDRAG ||
	        type === MapBrowserEventType.POINTERUP;
	}

	var __extends$Z = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @typedef {Object} Options
	 * @property {import("../events/condition.js").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean
	 * to indicate whether that event should be handled.
	 * Default is {@link module:ol/events/condition~noModifierKeys} and {@link module:ol/events/condition~primaryAction}.
	 * @property {import("../Kinetic.js").default} [kinetic] Kinetic inertia to apply to the pan.
	 */
	/**
	 * @classdesc
	 * Allows the user to pan the map by dragging the map.
	 * @api
	 */
	var DragPan = /** @class */ (function (_super) {
	    __extends$Z(DragPan, _super);
	    /**
	     * @param {Options=} opt_options Options.
	     */
	    function DragPan(opt_options) {
	        var _this = _super.call(this, {
	            stopDown: FALSE
	        }) || this;
	        var options = opt_options ? opt_options : {};
	        /**
	         * @private
	         * @type {import("../Kinetic.js").default|undefined}
	         */
	        _this.kinetic_ = options.kinetic;
	        /**
	         * @type {import("../pixel.js").Pixel}
	         */
	        _this.lastCentroid = null;
	        /**
	         * @type {number}
	         */
	        _this.lastPointersCount_;
	        /**
	         * @type {boolean}
	         */
	        _this.panning_ = false;
	        /**
	         * @private
	         * @type {import("../events/condition.js").Condition}
	         */
	        _this.condition_ = options.condition ? options.condition : defaultCondition;
	        /**
	         * @private
	         * @type {boolean}
	         */
	        _this.noKinetic_ = false;
	        return _this;
	    }
	    /**
	     * @inheritDoc
	     */
	    DragPan.prototype.handleDragEvent = function (mapBrowserEvent) {
	        if (!this.panning_) {
	            this.panning_ = true;
	            this.getMap().getView().beginInteraction();
	        }
	        var targetPointers = this.targetPointers;
	        var centroid$1 = centroid(targetPointers);
	        if (targetPointers.length == this.lastPointersCount_) {
	            if (this.kinetic_) {
	                this.kinetic_.update(centroid$1[0], centroid$1[1]);
	            }
	            if (this.lastCentroid) {
	                var delta = [
	                    this.lastCentroid[0] - centroid$1[0],
	                    centroid$1[1] - this.lastCentroid[1]
	                ];
	                var map = mapBrowserEvent.map;
	                var view = map.getView();
	                scale$2(delta, view.getResolution());
	                rotate$1(delta, view.getRotation());
	                view.adjustCenterInternal(delta);
	            }
	        }
	        else if (this.kinetic_) {
	            // reset so we don't overestimate the kinetic energy after
	            // after one finger down, tiny drag, second finger down
	            this.kinetic_.begin();
	        }
	        this.lastCentroid = centroid$1;
	        this.lastPointersCount_ = targetPointers.length;
	    };
	    /**
	     * @inheritDoc
	     */
	    DragPan.prototype.handleUpEvent = function (mapBrowserEvent) {
	        var map = mapBrowserEvent.map;
	        var view = map.getView();
	        if (this.targetPointers.length === 0) {
	            if (!this.noKinetic_ && this.kinetic_ && this.kinetic_.end()) {
	                var distance = this.kinetic_.getDistance();
	                var angle = this.kinetic_.getAngle();
	                var center = view.getCenterInternal();
	                var centerpx = map.getPixelFromCoordinateInternal(center);
	                var dest = map.getCoordinateFromPixelInternal([
	                    centerpx[0] - distance * Math.cos(angle),
	                    centerpx[1] - distance * Math.sin(angle)
	                ]);
	                view.animateInternal({
	                    center: view.getConstrainedCenter(dest),
	                    duration: 500,
	                    easing: easeOut
	                });
	            }
	            if (this.panning_) {
	                this.panning_ = false;
	                view.endInteraction();
	            }
	            return false;
	        }
	        else {
	            if (this.kinetic_) {
	                // reset so we don't overestimate the kinetic energy after
	                // after one finger up, tiny drag, second finger up
	                this.kinetic_.begin();
	            }
	            this.lastCentroid = null;
	            return true;
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    DragPan.prototype.handleDownEvent = function (mapBrowserEvent) {
	        if (this.targetPointers.length > 0 && this.condition_(mapBrowserEvent)) {
	            var map = mapBrowserEvent.map;
	            var view = map.getView();
	            this.lastCentroid = null;
	            // stop any current animation
	            if (view.getAnimating()) {
	                view.cancelAnimations();
	            }
	            if (this.kinetic_) {
	                this.kinetic_.begin();
	            }
	            // No kinetic as soon as more than one pointer on the screen is
	            // detected. This is to prevent nasty pans after pinch.
	            this.noKinetic_ = this.targetPointers.length > 1;
	            return true;
	        }
	        else {
	            return false;
	        }
	    };
	    return DragPan;
	}(PointerInteraction));
	/**
	 * @param {import("../MapBrowserPointerEvent.js").default} mapBrowserEvent Browser event.
	 * @return {boolean} Combined condition result.
	 */
	function defaultCondition(mapBrowserEvent) {
	    return noModifierKeys(mapBrowserEvent) && primaryAction(mapBrowserEvent);
	}

	var __extends$_ = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @typedef {Object} Options
	 * @property {import("../events/condition.js").Condition} [condition] A function that takes an
	 * {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean
	 * to indicate whether that event should be handled.
	 * Default is {@link module:ol/events/condition~altShiftKeysOnly}.
	 * @property {number} [duration=250] Animation duration in milliseconds.
	 */
	/**
	 * @classdesc
	 * Allows the user to rotate the map by clicking and dragging on the map,
	 * normally combined with an {@link module:ol/events/condition} that limits
	 * it to when the alt and shift keys are held down.
	 *
	 * This interaction is only supported for mouse devices.
	 * @api
	 */
	var DragRotate = /** @class */ (function (_super) {
	    __extends$_(DragRotate, _super);
	    /**
	     * @param {Options=} opt_options Options.
	     */
	    function DragRotate(opt_options) {
	        var _this = this;
	        var options = opt_options ? opt_options : {};
	        _this = _super.call(this, {
	            stopDown: FALSE
	        }) || this;
	        /**
	         * @private
	         * @type {import("../events/condition.js").Condition}
	         */
	        _this.condition_ = options.condition ? options.condition : altShiftKeysOnly;
	        /**
	         * @private
	         * @type {number|undefined}
	         */
	        _this.lastAngle_ = undefined;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.duration_ = options.duration !== undefined ? options.duration : 250;
	        return _this;
	    }
	    /**
	     * @inheritDoc
	     */
	    DragRotate.prototype.handleDragEvent = function (mapBrowserEvent) {
	        if (!mouseOnly(mapBrowserEvent)) {
	            return;
	        }
	        var map = mapBrowserEvent.map;
	        var view = map.getView();
	        if (view.getConstraints().rotation === disable) {
	            return;
	        }
	        var size = map.getSize();
	        var offset = mapBrowserEvent.pixel;
	        var theta = Math.atan2(size[1] / 2 - offset[1], offset[0] - size[0] / 2);
	        if (this.lastAngle_ !== undefined) {
	            var delta = theta - this.lastAngle_;
	            view.adjustRotationInternal(-delta);
	        }
	        this.lastAngle_ = theta;
	    };
	    /**
	     * @inheritDoc
	     */
	    DragRotate.prototype.handleUpEvent = function (mapBrowserEvent) {
	        if (!mouseOnly(mapBrowserEvent)) {
	            return true;
	        }
	        var map = mapBrowserEvent.map;
	        var view = map.getView();
	        view.endInteraction(this.duration_);
	        return false;
	    };
	    /**
	     * @inheritDoc
	     */
	    DragRotate.prototype.handleDownEvent = function (mapBrowserEvent) {
	        if (!mouseOnly(mapBrowserEvent)) {
	            return false;
	        }
	        if (mouseActionButton(mapBrowserEvent) && this.condition_(mapBrowserEvent)) {
	            var map = mapBrowserEvent.map;
	            map.getView().beginInteraction();
	            this.lastAngle_ = undefined;
	            return true;
	        }
	        else {
	            return false;
	        }
	    };
	    return DragRotate;
	}(PointerInteraction));

	/**
	 * @module ol/render/Box
	 */
	var __extends$$ = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var RenderBox = /** @class */ (function (_super) {
	    __extends$$(RenderBox, _super);
	    /**
	     * @param {string} className CSS class name.
	     */
	    function RenderBox(className) {
	        var _this = _super.call(this) || this;
	        /**
	         * @type {import("../geom/Polygon.js").default}
	         * @private
	         */
	        _this.geometry_ = null;
	        /**
	         * @type {HTMLDivElement}
	         * @private
	         */
	        _this.element_ = document.createElement('div');
	        _this.element_.style.position = 'absolute';
	        _this.element_.className = 'ol-box ' + className;
	        /**
	         * @private
	         * @type {import("../PluggableMap.js").default}
	         */
	        _this.map_ = null;
	        /**
	         * @private
	         * @type {import("../pixel.js").Pixel}
	         */
	        _this.startPixel_ = null;
	        /**
	         * @private
	         * @type {import("../pixel.js").Pixel}
	         */
	        _this.endPixel_ = null;
	        return _this;
	    }
	    /**
	     * @inheritDoc
	     */
	    RenderBox.prototype.disposeInternal = function () {
	        this.setMap(null);
	    };
	    /**
	     * @private
	     */
	    RenderBox.prototype.render_ = function () {
	        var startPixel = this.startPixel_;
	        var endPixel = this.endPixel_;
	        var px = 'px';
	        var style = this.element_.style;
	        style.left = Math.min(startPixel[0], endPixel[0]) + px;
	        style.top = Math.min(startPixel[1], endPixel[1]) + px;
	        style.width = Math.abs(endPixel[0] - startPixel[0]) + px;
	        style.height = Math.abs(endPixel[1] - startPixel[1]) + px;
	    };
	    /**
	     * @param {import("../PluggableMap.js").default} map Map.
	     */
	    RenderBox.prototype.setMap = function (map) {
	        if (this.map_) {
	            this.map_.getOverlayContainer().removeChild(this.element_);
	            var style = this.element_.style;
	            style.left = 'inherit';
	            style.top = 'inherit';
	            style.width = 'inherit';
	            style.height = 'inherit';
	        }
	        this.map_ = map;
	        if (this.map_) {
	            this.map_.getOverlayContainer().appendChild(this.element_);
	        }
	    };
	    /**
	     * @param {import("../pixel.js").Pixel} startPixel Start pixel.
	     * @param {import("../pixel.js").Pixel} endPixel End pixel.
	     */
	    RenderBox.prototype.setPixels = function (startPixel, endPixel) {
	        this.startPixel_ = startPixel;
	        this.endPixel_ = endPixel;
	        this.createOrUpdateGeometry();
	        this.render_();
	    };
	    /**
	     * Creates or updates the cached geometry.
	     */
	    RenderBox.prototype.createOrUpdateGeometry = function () {
	        var startPixel = this.startPixel_;
	        var endPixel = this.endPixel_;
	        var pixels = [
	            startPixel,
	            [startPixel[0], endPixel[1]],
	            endPixel,
	            [endPixel[0], startPixel[1]]
	        ];
	        var coordinates = pixels.map(this.map_.getCoordinateFromPixelInternal, this.map_);
	        // close the polygon
	        coordinates[4] = coordinates[0].slice();
	        if (!this.geometry_) {
	            this.geometry_ = new Polygon([coordinates]);
	        }
	        else {
	            this.geometry_.setCoordinates([coordinates]);
	        }
	    };
	    /**
	     * @return {import("../geom/Polygon.js").default} Geometry.
	     */
	    RenderBox.prototype.getGeometry = function () {
	        return this.geometry_;
	    };
	    return RenderBox;
	}(Disposable));

	var __extends$10 = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * A function that takes a {@link module:ol/MapBrowserEvent} and two
	 * {@link module:ol/pixel~Pixel}s and returns a `{boolean}`. If the condition is met,
	 * true should be returned.
	 * @typedef {function(this: ?, import("../MapBrowserEvent.js").default, import("../pixel.js").Pixel, import("../pixel.js").Pixel):boolean} EndCondition
	 */
	/**
	 * @typedef {Object} Options
	 * @property {string} [className='ol-dragbox'] CSS class name for styling the box.
	 * @property {import("../events/condition.js").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean
	 * to indicate whether that event should be handled.
	 * Default is {@link ol/events/condition~always}.
	 * @property {number} [minArea=64] The minimum area of the box in pixel, this value is used by the default
	 * `boxEndCondition` function.
	 * @property {EndCondition} [boxEndCondition] A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and two
	 * {@link module:ol/pixel~Pixel}s to indicate whether a `boxend` event should be fired.
	 * Default is `true` if the area of the box is bigger than the `minArea` option.
	 * @property {function(this:DragBox, import("../MapBrowserEvent.js").default)} [onBoxEnd] Code to execute just
	 * before `boxend` is fired.
	 */
	/**
	 * @enum {string}
	 */
	var DragBoxEventType = {
	    /**
	     * Triggered upon drag box start.
	     * @event DragBoxEvent#boxstart
	     * @api
	     */
	    BOXSTART: 'boxstart',
	    /**
	     * Triggered on drag when box is active.
	     * @event DragBoxEvent#boxdrag
	     * @api
	     */
	    BOXDRAG: 'boxdrag',
	    /**
	     * Triggered upon drag box end.
	     * @event DragBoxEvent#boxend
	     * @api
	     */
	    BOXEND: 'boxend'
	};
	/**
	 * @classdesc
	 * Events emitted by {@link module:ol/interaction/DragBox~DragBox} instances are instances of
	 * this type.
	 */
	var DragBoxEvent = /** @class */ (function (_super) {
	    __extends$10(DragBoxEvent, _super);
	    /**
	     * @param {string} type The event type.
	     * @param {import("../coordinate.js").Coordinate} coordinate The event coordinate.
	     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Originating event.
	     */
	    function DragBoxEvent(type, coordinate, mapBrowserEvent) {
	        var _this = _super.call(this, type) || this;
	        /**
	         * The coordinate of the drag event.
	         * @const
	         * @type {import("../coordinate.js").Coordinate}
	         * @api
	         */
	        _this.coordinate = coordinate;
	        /**
	         * @const
	         * @type {import("../MapBrowserEvent.js").default}
	         * @api
	         */
	        _this.mapBrowserEvent = mapBrowserEvent;
	        return _this;
	    }
	    return DragBoxEvent;
	}(BaseEvent));
	/**
	 * @classdesc
	 * Allows the user to draw a vector box by clicking and dragging on the map,
	 * normally combined with an {@link module:ol/events/condition} that limits
	 * it to when the shift or other key is held down. This is used, for example,
	 * for zooming to a specific area of the map
	 * (see {@link module:ol/interaction/DragZoom~DragZoom} and
	 * {@link module:ol/interaction/DragRotateAndZoom}).
	 *
	 * This interaction is only supported for mouse devices.
	 *
	 * @fires DragBoxEvent
	 * @api
	 */
	var DragBox = /** @class */ (function (_super) {
	    __extends$10(DragBox, _super);
	    /**
	     * @param {Options=} opt_options Options.
	     */
	    function DragBox(opt_options) {
	        var _this = _super.call(this) || this;
	        var options = opt_options ? opt_options : {};
	        /**
	         * @type {import("../render/Box.js").default}
	         * @private
	         */
	        _this.box_ = new RenderBox(options.className || 'ol-dragbox');
	        /**
	         * @type {number}
	         * @private
	         */
	        _this.minArea_ = options.minArea !== undefined ? options.minArea : 64;
	        /**
	         * Function to execute just before `onboxend` is fired
	         * @type {function(this:DragBox, import("../MapBrowserEvent.js").default): void}
	         * @private
	         */
	        _this.onBoxEnd_ = options.onBoxEnd ? options.onBoxEnd : VOID;
	        /**
	         * @type {import("../pixel.js").Pixel}
	         * @private
	         */
	        _this.startPixel_ = null;
	        /**
	         * @private
	         * @type {import("../events/condition.js").Condition}
	         */
	        _this.condition_ = options.condition ? options.condition : always;
	        /**
	         * @private
	         * @type {EndCondition}
	         */
	        _this.boxEndCondition_ = options.boxEndCondition ?
	            options.boxEndCondition : _this.defaultBoxEndCondition;
	        return _this;
	    }
	    /**
	     * The default condition for determining whether the boxend event
	     * should fire.
	     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent The originating MapBrowserEvent
	     *     leading to the box end.
	     * @param {import("../pixel.js").Pixel} startPixel The starting pixel of the box.
	     * @param {import("../pixel.js").Pixel} endPixel The end pixel of the box.
	     * @return {boolean} Whether or not the boxend condition should be fired.
	     */
	    DragBox.prototype.defaultBoxEndCondition = function (mapBrowserEvent, startPixel, endPixel) {
	        var width = endPixel[0] - startPixel[0];
	        var height = endPixel[1] - startPixel[1];
	        return width * width + height * height >= this.minArea_;
	    };
	    /**
	     * Returns geometry of last drawn box.
	     * @return {import("../geom/Polygon.js").default} Geometry.
	     * @api
	     */
	    DragBox.prototype.getGeometry = function () {
	        return this.box_.getGeometry();
	    };
	    /**
	     * @inheritDoc
	     */
	    DragBox.prototype.handleDragEvent = function (mapBrowserEvent) {
	        if (!mouseOnly(mapBrowserEvent)) {
	            return;
	        }
	        this.box_.setPixels(this.startPixel_, mapBrowserEvent.pixel);
	        this.dispatchEvent(new DragBoxEvent(DragBoxEventType.BOXDRAG, mapBrowserEvent.coordinate, mapBrowserEvent));
	    };
	    /**
	     * @inheritDoc
	     */
	    DragBox.prototype.handleUpEvent = function (mapBrowserEvent) {
	        if (!mouseOnly(mapBrowserEvent)) {
	            return true;
	        }
	        this.box_.setMap(null);
	        if (this.boxEndCondition_(mapBrowserEvent, this.startPixel_, mapBrowserEvent.pixel)) {
	            this.onBoxEnd_(mapBrowserEvent);
	            this.dispatchEvent(new DragBoxEvent(DragBoxEventType.BOXEND, mapBrowserEvent.coordinate, mapBrowserEvent));
	        }
	        return false;
	    };
	    /**
	     * @inheritDoc
	     */
	    DragBox.prototype.handleDownEvent = function (mapBrowserEvent) {
	        if (!mouseOnly(mapBrowserEvent)) {
	            return false;
	        }
	        if (mouseActionButton(mapBrowserEvent) &&
	            this.condition_(mapBrowserEvent)) {
	            this.startPixel_ = mapBrowserEvent.pixel;
	            this.box_.setMap(mapBrowserEvent.map);
	            this.box_.setPixels(this.startPixel_, this.startPixel_);
	            this.dispatchEvent(new DragBoxEvent(DragBoxEventType.BOXSTART, mapBrowserEvent.coordinate, mapBrowserEvent));
	            return true;
	        }
	        else {
	            return false;
	        }
	    };
	    return DragBox;
	}(PointerInteraction));

	var __extends$11 = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @typedef {Object} Options
	 * @property {string} [className='ol-dragzoom'] CSS class name for styling the
	 * box.
	 * @property {import("../events/condition.js").Condition} [condition] A function that
	 * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
	 * boolean to indicate whether that event should be handled.
	 * Default is {@link module:ol/events/condition~shiftKeyOnly}.
	 * @property {number} [duration=200] Animation duration in milliseconds.
	 * @property {boolean} [out=false] Use interaction for zooming out.
	 * @property {number} [minArea=64] The minimum area of the box in pixel, this value is used by the parent default
	 * `boxEndCondition` function.
	 */
	/**
	 * @classdesc
	 * Allows the user to zoom the map by clicking and dragging on the map,
	 * normally combined with an {@link module:ol/events/condition} that limits
	 * it to when a key, shift by default, is held down.
	 *
	 * To change the style of the box, use CSS and the `.ol-dragzoom` selector, or
	 * your custom one configured with `className`.
	 * @api
	 */
	var DragZoom = /** @class */ (function (_super) {
	    __extends$11(DragZoom, _super);
	    /**
	     * @param {Options=} opt_options Options.
	     */
	    function DragZoom(opt_options) {
	        var _this = this;
	        var options = opt_options ? opt_options : {};
	        var condition = options.condition ? options.condition : shiftKeyOnly;
	        _this = _super.call(this, {
	            condition: condition,
	            className: options.className || 'ol-dragzoom',
	            minArea: options.minArea,
	            onBoxEnd: onBoxEnd
	        }) || this;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.duration_ = options.duration !== undefined ? options.duration : 200;
	        /**
	         * @private
	         * @type {boolean}
	         */
	        _this.out_ = options.out !== undefined ? options.out : false;
	        return _this;
	    }
	    return DragZoom;
	}(DragBox));
	/**
	 * @this {DragZoom}
	 */
	function onBoxEnd() {
	    var map = this.getMap();
	    var view = /** @type {!import("../View.js").default} */ (map.getView());
	    var size = /** @type {!import("../size.js").Size} */ (map.getSize());
	    var extent = this.getGeometry().getExtent();
	    if (this.out_) {
	        var mapExtent = view.calculateExtentInternal(size);
	        var boxPixelExtent = createOrUpdateFromCoordinates([
	            map.getPixelFromCoordinateInternal(getBottomLeft(extent)),
	            map.getPixelFromCoordinateInternal(getTopRight(extent))
	        ]);
	        var factor = view.getResolutionForExtentInternal(boxPixelExtent, size);
	        scaleFromCenter(mapExtent, 1 / factor);
	        extent = mapExtent;
	    }
	    var resolution = view.getConstrainedResolution(view.getResolutionForExtentInternal(extent, size));
	    var center = view.getConstrainedCenter(getCenter(extent), resolution);
	    view.animateInternal({
	        resolution: resolution,
	        center: center,
	        duration: this.duration_,
	        easing: easeOut
	    });
	}

	/**
	 * @module ol/events/KeyCode
	 */
	/**
	 * @enum {number}
	 * @const
	 */
	var KeyCode = {
	    LEFT: 37,
	    UP: 38,
	    RIGHT: 39,
	    DOWN: 40
	};

	var __extends$12 = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @typedef {Object} Options
	 * @property {import("../events/condition.js").Condition} [condition] A function that
	 * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
	 * boolean to indicate whether that event should be handled. Default is
	 * {@link module:ol/events/condition~noModifierKeys} and
	 * {@link module:ol/events/condition~targetNotEditable}.
	 * @property {number} [duration=100] Animation duration in milliseconds.
	 * @property {number} [pixelDelta=128] The amount of pixels to pan on each key
	 * press.
	 */
	/**
	 * @classdesc
	 * Allows the user to pan the map using keyboard arrows.
	 * Note that, although this interaction is by default included in maps,
	 * the keys can only be used when browser focus is on the element to which
	 * the keyboard events are attached. By default, this is the map div,
	 * though you can change this with the `keyboardEventTarget` in
	 * {@link module:ol/Map~Map}. `document` never loses focus but, for any other
	 * element, focus will have to be on, and returned to, this element if the keys
	 * are to function.
	 * See also {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}.
	 * @api
	 */
	var KeyboardPan = /** @class */ (function (_super) {
	    __extends$12(KeyboardPan, _super);
	    /**
	     * @param {Options=} opt_options Options.
	     */
	    function KeyboardPan(opt_options) {
	        var _this = _super.call(this, {
	            handleEvent: handleEvent$1
	        }) || this;
	        var options = opt_options || {};
	        /**
	         * @private
	         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Browser event.
	         * @return {boolean} Combined condition result.
	         */
	        _this.defaultCondition_ = function (mapBrowserEvent) {
	            return noModifierKeys(mapBrowserEvent) &&
	                targetNotEditable(mapBrowserEvent);
	        };
	        /**
	         * @private
	         * @type {import("../events/condition.js").Condition}
	         */
	        _this.condition_ = options.condition !== undefined ?
	            options.condition : _this.defaultCondition_;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.duration_ = options.duration !== undefined ? options.duration : 100;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.pixelDelta_ = options.pixelDelta !== undefined ?
	            options.pixelDelta : 128;
	        return _this;
	    }
	    return KeyboardPan;
	}(Interaction));
	/**
	 * Handles the {@link module:ol/MapBrowserEvent map browser event} if it was a
	 * `KeyEvent`, and decides the direction to pan to (if an arrow key was
	 * pressed).
	 * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
	 * @return {boolean} `false` to stop event propagation.
	 * @this {KeyboardPan}
	 */
	function handleEvent$1(mapBrowserEvent) {
	    var stopEvent = false;
	    if (mapBrowserEvent.type == EventType.KEYDOWN) {
	        var keyEvent = /** @type {KeyboardEvent} */ (mapBrowserEvent.originalEvent);
	        var keyCode = keyEvent.keyCode;
	        if (this.condition_(mapBrowserEvent) &&
	            (keyCode == KeyCode.DOWN ||
	                keyCode == KeyCode.LEFT ||
	                keyCode == KeyCode.RIGHT ||
	                keyCode == KeyCode.UP)) {
	            var map = mapBrowserEvent.map;
	            var view = map.getView();
	            var mapUnitsDelta = view.getResolution() * this.pixelDelta_;
	            var deltaX = 0, deltaY = 0;
	            if (keyCode == KeyCode.DOWN) {
	                deltaY = -mapUnitsDelta;
	            }
	            else if (keyCode == KeyCode.LEFT) {
	                deltaX = -mapUnitsDelta;
	            }
	            else if (keyCode == KeyCode.RIGHT) {
	                deltaX = mapUnitsDelta;
	            }
	            else {
	                deltaY = mapUnitsDelta;
	            }
	            var delta = [deltaX, deltaY];
	            rotate$1(delta, view.getRotation());
	            pan(view, delta, this.duration_);
	            mapBrowserEvent.preventDefault();
	            stopEvent = true;
	        }
	    }
	    return !stopEvent;
	}

	var __extends$13 = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @typedef {Object} Options
	 * @property {number} [duration=100] Animation duration in milliseconds.
	 * @property {import("../events/condition.js").Condition} [condition] A function that
	 * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
	 * boolean to indicate whether that event should be handled. Default is
	 * {@link module:ol/events/condition~targetNotEditable}.
	 * @property {number} [delta=1] The zoom level delta on each key press.
	 */
	/**
	 * @classdesc
	 * Allows the user to zoom the map using keyboard + and -.
	 * Note that, although this interaction is by default included in maps,
	 * the keys can only be used when browser focus is on the element to which
	 * the keyboard events are attached. By default, this is the map div,
	 * though you can change this with the `keyboardEventTarget` in
	 * {@link module:ol/Map~Map}. `document` never loses focus but, for any other
	 * element, focus will have to be on, and returned to, this element if the keys
	 * are to function.
	 * See also {@link module:ol/interaction/KeyboardPan~KeyboardPan}.
	 * @api
	 */
	var KeyboardZoom = /** @class */ (function (_super) {
	    __extends$13(KeyboardZoom, _super);
	    /**
	     * @param {Options=} opt_options Options.
	     */
	    function KeyboardZoom(opt_options) {
	        var _this = _super.call(this, {
	            handleEvent: handleEvent$2
	        }) || this;
	        var options = opt_options ? opt_options : {};
	        /**
	         * @private
	         * @type {import("../events/condition.js").Condition}
	         */
	        _this.condition_ = options.condition ? options.condition : targetNotEditable;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.delta_ = options.delta ? options.delta : 1;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.duration_ = options.duration !== undefined ? options.duration : 100;
	        return _this;
	    }
	    return KeyboardZoom;
	}(Interaction));
	/**
	 * Handles the {@link module:ol/MapBrowserEvent map browser event} if it was a
	 * `KeyEvent`, and decides whether to zoom in or out (depending on whether the
	 * key pressed was '+' or '-').
	 * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
	 * @return {boolean} `false` to stop event propagation.
	 * @this {KeyboardZoom}
	 */
	function handleEvent$2(mapBrowserEvent) {
	    var stopEvent = false;
	    if (mapBrowserEvent.type == EventType.KEYDOWN ||
	        mapBrowserEvent.type == EventType.KEYPRESS) {
	        var keyEvent = /** @type {KeyboardEvent} */ (mapBrowserEvent.originalEvent);
	        var charCode = keyEvent.charCode;
	        if (this.condition_(mapBrowserEvent) &&
	            (charCode == '+'.charCodeAt(0) || charCode == '-'.charCodeAt(0))) {
	            var map = mapBrowserEvent.map;
	            var delta = (charCode == '+'.charCodeAt(0)) ? this.delta_ : -this.delta_;
	            var view = map.getView();
	            zoomByDelta(view, delta, undefined, this.duration_);
	            mapBrowserEvent.preventDefault();
	            stopEvent = true;
	        }
	    }
	    return !stopEvent;
	}

	var __extends$14 = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @enum {string}
	 */
	var Mode = {
	    TRACKPAD: 'trackpad',
	    WHEEL: 'wheel'
	};
	/**
	 * @typedef {Object} Options
	 * @property {import("../events/condition.js").Condition} [condition] A function that
	 * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
	 * boolean to indicate whether that event should be handled. Default is
	 * {@link module:ol/events/condition~always}.
	 * @property {number} [maxDelta=1] Maximum mouse wheel delta.
	 * @property {number} [duration=250] Animation duration in milliseconds.
	 * @property {number} [timeout=80] Mouse wheel timeout duration in milliseconds.
	 * @property {boolean} [useAnchor=true] Enable zooming using the mouse's
	 * location as the anchor. When set to `false`, zooming in and out will zoom to
	 * the center of the screen instead of zooming on the mouse's location.
	 */
	/**
	 * @classdesc
	 * Allows the user to zoom the map by scrolling the mouse wheel.
	 * @api
	 */
	var MouseWheelZoom = /** @class */ (function (_super) {
	    __extends$14(MouseWheelZoom, _super);
	    /**
	     * @param {Options=} opt_options Options.
	     */
	    function MouseWheelZoom(opt_options) {
	        var _this = this;
	        var options = opt_options ? opt_options : {};
	        _this = _super.call(this, /** @type {import("./Interaction.js").InteractionOptions} */ (options)) || this;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.totalDelta_ = 0;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.lastDelta_ = 0;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.maxDelta_ = options.maxDelta !== undefined ? options.maxDelta : 1;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.duration_ = options.duration !== undefined ? options.duration : 250;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.timeout_ = options.timeout !== undefined ? options.timeout : 80;
	        /**
	         * @private
	         * @type {boolean}
	         */
	        _this.useAnchor_ = options.useAnchor !== undefined ? options.useAnchor : true;
	        /**
	         * @private
	         * @type {import("../events/condition.js").Condition}
	         */
	        _this.condition_ = options.condition ? options.condition : always;
	        /**
	         * @private
	         * @type {?import("../coordinate.js").Coordinate}
	         */
	        _this.lastAnchor_ = null;
	        /**
	         * @private
	         * @type {number|undefined}
	         */
	        _this.startTime_ = undefined;
	        /**
	         * @private
	         * @type {?}
	         */
	        _this.timeoutId_;
	        /**
	         * @private
	         * @type {Mode|undefined}
	         */
	        _this.mode_ = undefined;
	        /**
	         * Trackpad events separated by this delay will be considered separate
	         * interactions.
	         * @type {number}
	         */
	        _this.trackpadEventGap_ = 400;
	        /**
	         * @type {?}
	         */
	        _this.trackpadTimeoutId_;
	        /**
	         * The number of delta values per zoom level
	         * @private
	         * @type {number}
	         */
	        _this.trackpadDeltaPerZoom_ = 300;
	        return _this;
	    }
	    /**
	     * @private
	     */
	    MouseWheelZoom.prototype.endInteraction_ = function () {
	        this.trackpadTimeoutId_ = undefined;
	        var view = this.getMap().getView();
	        view.endInteraction(undefined, Math.sign(this.lastDelta_), this.lastAnchor_);
	    };
	    /**
	     * Handles the {@link module:ol/MapBrowserEvent map browser event} (if it was a mousewheel-event) and eventually
	     * zooms the map.
	     * @override
	     */
	    MouseWheelZoom.prototype.handleEvent = function (mapBrowserEvent) {
	        if (!this.condition_(mapBrowserEvent)) {
	            return true;
	        }
	        var type = mapBrowserEvent.type;
	        if (type !== EventType.WHEEL) {
	            return true;
	        }
	        mapBrowserEvent.preventDefault();
	        var map = mapBrowserEvent.map;
	        var wheelEvent = /** @type {WheelEvent} */ (mapBrowserEvent.originalEvent);
	        if (this.useAnchor_) {
	            this.lastAnchor_ = mapBrowserEvent.coordinate;
	        }
	        // Delta normalisation inspired by
	        // https://github.com/mapbox/mapbox-gl-js/blob/001c7b9/js/ui/handler/scroll_zoom.js
	        var delta;
	        if (mapBrowserEvent.type == EventType.WHEEL) {
	            delta = wheelEvent.deltaY;
	            if (FIREFOX &&
	                wheelEvent.deltaMode === WheelEvent.DOM_DELTA_PIXEL) {
	                delta /= DEVICE_PIXEL_RATIO;
	            }
	            if (wheelEvent.deltaMode === WheelEvent.DOM_DELTA_LINE) {
	                delta *= 40;
	            }
	        }
	        if (delta === 0) {
	            return false;
	        }
	        else {
	            this.lastDelta_ = delta;
	        }
	        var now = Date.now();
	        if (this.startTime_ === undefined) {
	            this.startTime_ = now;
	        }
	        if (!this.mode_ || now - this.startTime_ > this.trackpadEventGap_) {
	            this.mode_ = Math.abs(delta) < 4 ?
	                Mode.TRACKPAD :
	                Mode.WHEEL;
	        }
	        if (this.mode_ === Mode.TRACKPAD) {
	            var view = map.getView();
	            if (this.trackpadTimeoutId_) {
	                clearTimeout(this.trackpadTimeoutId_);
	            }
	            else {
	                view.beginInteraction();
	            }
	            this.trackpadTimeoutId_ = setTimeout(this.endInteraction_.bind(this), this.trackpadEventGap_);
	            view.adjustZoom(-delta / this.trackpadDeltaPerZoom_, this.lastAnchor_);
	            this.startTime_ = now;
	            return false;
	        }
	        this.totalDelta_ += delta;
	        var timeLeft = Math.max(this.timeout_ - (now - this.startTime_), 0);
	        clearTimeout(this.timeoutId_);
	        this.timeoutId_ = setTimeout(this.handleWheelZoom_.bind(this, map), timeLeft);
	        return false;
	    };
	    /**
	     * @private
	     * @param {import("../PluggableMap.js").default} map Map.
	     */
	    MouseWheelZoom.prototype.handleWheelZoom_ = function (map) {
	        var view = map.getView();
	        if (view.getAnimating()) {
	            view.cancelAnimations();
	        }
	        var delta = clamp(this.totalDelta_, -this.maxDelta_, this.maxDelta_);
	        zoomByDelta(view, -delta, this.lastAnchor_, this.duration_);
	        this.mode_ = undefined;
	        this.totalDelta_ = 0;
	        this.lastAnchor_ = null;
	        this.startTime_ = undefined;
	        this.timeoutId_ = undefined;
	    };
	    /**
	     * Enable or disable using the mouse's location as an anchor when zooming
	     * @param {boolean} useAnchor true to zoom to the mouse's location, false
	     * to zoom to the center of the map
	     * @api
	     */
	    MouseWheelZoom.prototype.setMouseAnchor = function (useAnchor) {
	        this.useAnchor_ = useAnchor;
	        if (!useAnchor) {
	            this.lastAnchor_ = null;
	        }
	    };
	    return MouseWheelZoom;
	}(Interaction));

	var __extends$15 = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @typedef {Object} Options
	 * @property {number} [duration=250] The duration of the animation in
	 * milliseconds.
	 * @property {number} [threshold=0.3] Minimal angle in radians to start a rotation.
	 */
	/**
	 * @classdesc
	 * Allows the user to rotate the map by twisting with two fingers
	 * on a touch screen.
	 * @api
	 */
	var PinchRotate = /** @class */ (function (_super) {
	    __extends$15(PinchRotate, _super);
	    /**
	     * @param {Options=} opt_options Options.
	     */
	    function PinchRotate(opt_options) {
	        var _this = this;
	        var options = opt_options ? opt_options : {};
	        var pointerOptions = /** @type {import("./Pointer.js").Options} */ (options);
	        if (!pointerOptions.stopDown) {
	            pointerOptions.stopDown = FALSE;
	        }
	        _this = _super.call(this, pointerOptions) || this;
	        /**
	         * @private
	         * @type {import("../coordinate.js").Coordinate}
	         */
	        _this.anchor_ = null;
	        /**
	         * @private
	         * @type {number|undefined}
	         */
	        _this.lastAngle_ = undefined;
	        /**
	         * @private
	         * @type {boolean}
	         */
	        _this.rotating_ = false;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.rotationDelta_ = 0.0;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.threshold_ = options.threshold !== undefined ? options.threshold : 0.3;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.duration_ = options.duration !== undefined ? options.duration : 250;
	        return _this;
	    }
	    /**
	     * @inheritDoc
	     */
	    PinchRotate.prototype.handleDragEvent = function (mapBrowserEvent) {
	        var rotationDelta = 0.0;
	        var touch0 = this.targetPointers[0];
	        var touch1 = this.targetPointers[1];
	        // angle between touches
	        var angle = Math.atan2(touch1.clientY - touch0.clientY, touch1.clientX - touch0.clientX);
	        if (this.lastAngle_ !== undefined) {
	            var delta = angle - this.lastAngle_;
	            this.rotationDelta_ += delta;
	            if (!this.rotating_ &&
	                Math.abs(this.rotationDelta_) > this.threshold_) {
	                this.rotating_ = true;
	            }
	            rotationDelta = delta;
	        }
	        this.lastAngle_ = angle;
	        var map = mapBrowserEvent.map;
	        var view = map.getView();
	        if (view.getConstraints().rotation === disable) {
	            return;
	        }
	        // rotate anchor point.
	        // FIXME: should be the intersection point between the lines:
	        //     touch0,touch1 and previousTouch0,previousTouch1
	        var viewportPosition = map.getViewport().getBoundingClientRect();
	        var centroid$1 = centroid(this.targetPointers);
	        centroid$1[0] -= viewportPosition.left;
	        centroid$1[1] -= viewportPosition.top;
	        this.anchor_ = map.getCoordinateFromPixelInternal(centroid$1);
	        // rotate
	        if (this.rotating_) {
	            map.render();
	            view.adjustRotationInternal(rotationDelta, this.anchor_);
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    PinchRotate.prototype.handleUpEvent = function (mapBrowserEvent) {
	        if (this.targetPointers.length < 2) {
	            var map = mapBrowserEvent.map;
	            var view = map.getView();
	            view.endInteraction(this.duration_);
	            return false;
	        }
	        else {
	            return true;
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    PinchRotate.prototype.handleDownEvent = function (mapBrowserEvent) {
	        if (this.targetPointers.length >= 2) {
	            var map = mapBrowserEvent.map;
	            this.anchor_ = null;
	            this.lastAngle_ = undefined;
	            this.rotating_ = false;
	            this.rotationDelta_ = 0.0;
	            if (!this.handlingDownUpSequence) {
	                map.getView().beginInteraction();
	            }
	            return true;
	        }
	        else {
	            return false;
	        }
	    };
	    return PinchRotate;
	}(PointerInteraction));

	var __extends$16 = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @typedef {Object} Options
	 * @property {number} [duration=400] Animation duration in milliseconds.
	 */
	/**
	 * @classdesc
	 * Allows the user to zoom the map by pinching with two fingers
	 * on a touch screen.
	 * @api
	 */
	var PinchZoom = /** @class */ (function (_super) {
	    __extends$16(PinchZoom, _super);
	    /**
	     * @param {Options=} opt_options Options.
	     */
	    function PinchZoom(opt_options) {
	        var _this = this;
	        var options = opt_options ? opt_options : {};
	        var pointerOptions = /** @type {import("./Pointer.js").Options} */ (options);
	        if (!pointerOptions.stopDown) {
	            pointerOptions.stopDown = FALSE;
	        }
	        _this = _super.call(this, pointerOptions) || this;
	        /**
	         * @private
	         * @type {import("../coordinate.js").Coordinate}
	         */
	        _this.anchor_ = null;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.duration_ = options.duration !== undefined ? options.duration : 400;
	        /**
	         * @private
	         * @type {number|undefined}
	         */
	        _this.lastDistance_ = undefined;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.lastScaleDelta_ = 1;
	        return _this;
	    }
	    /**
	     * @inheritDoc
	     */
	    PinchZoom.prototype.handleDragEvent = function (mapBrowserEvent) {
	        var scaleDelta = 1.0;
	        var touch0 = this.targetPointers[0];
	        var touch1 = this.targetPointers[1];
	        var dx = touch0.clientX - touch1.clientX;
	        var dy = touch0.clientY - touch1.clientY;
	        // distance between touches
	        var distance = Math.sqrt(dx * dx + dy * dy);
	        if (this.lastDistance_ !== undefined) {
	            scaleDelta = this.lastDistance_ / distance;
	        }
	        this.lastDistance_ = distance;
	        var map = mapBrowserEvent.map;
	        var view = map.getView();
	        if (scaleDelta != 1.0) {
	            this.lastScaleDelta_ = scaleDelta;
	        }
	        // scale anchor point.
	        var viewportPosition = map.getViewport().getBoundingClientRect();
	        var centroid$1 = centroid(this.targetPointers);
	        centroid$1[0] -= viewportPosition.left;
	        centroid$1[1] -= viewportPosition.top;
	        this.anchor_ = map.getCoordinateFromPixelInternal(centroid$1);
	        // scale, bypass the resolution constraint
	        map.render();
	        view.adjustResolutionInternal(scaleDelta, this.anchor_);
	    };
	    /**
	     * @inheritDoc
	     */
	    PinchZoom.prototype.handleUpEvent = function (mapBrowserEvent) {
	        if (this.targetPointers.length < 2) {
	            var map = mapBrowserEvent.map;
	            var view = map.getView();
	            var direction = this.lastScaleDelta_ > 1 ? 1 : -1;
	            view.endInteraction(this.duration_, direction);
	            return false;
	        }
	        else {
	            return true;
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    PinchZoom.prototype.handleDownEvent = function (mapBrowserEvent) {
	        if (this.targetPointers.length >= 2) {
	            var map = mapBrowserEvent.map;
	            this.anchor_ = null;
	            this.lastDistance_ = undefined;
	            this.lastScaleDelta_ = 1;
	            if (!this.handlingDownUpSequence) {
	                map.getView().beginInteraction();
	            }
	            return true;
	        }
	        else {
	            return false;
	        }
	    };
	    return PinchZoom;
	}(PointerInteraction));

	var __extends$17 = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @classdesc
	 * Multi-linestring geometry.
	 *
	 * @api
	 */
	var MultiLineString = /** @class */ (function (_super) {
	    __extends$17(MultiLineString, _super);
	    /**
	     * @param {Array<Array<import("../coordinate.js").Coordinate>|LineString>|Array<number>} coordinates
	     *     Coordinates or LineString geometries. (For internal use, flat coordinates in
	     *     combination with `opt_layout` and `opt_ends` are also accepted.)
	     * @param {GeometryLayout=} opt_layout Layout.
	     * @param {Array<number>=} opt_ends Flat coordinate ends for internal use.
	     */
	    function MultiLineString(coordinates, opt_layout, opt_ends) {
	        var _this = _super.call(this) || this;
	        /**
	         * @type {Array<number>}
	         * @private
	         */
	        _this.ends_ = [];
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.maxDelta_ = -1;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.maxDeltaRevision_ = -1;
	        if (Array.isArray(coordinates[0])) {
	            _this.setCoordinates(/** @type {Array<Array<import("../coordinate.js").Coordinate>>} */ (coordinates), opt_layout);
	        }
	        else if (opt_layout !== undefined && opt_ends) {
	            _this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */ (coordinates));
	            _this.ends_ = opt_ends;
	        }
	        else {
	            var layout = _this.getLayout();
	            var lineStrings = /** @type {Array<LineString>} */ (coordinates);
	            var flatCoordinates = [];
	            var ends = [];
	            for (var i = 0, ii = lineStrings.length; i < ii; ++i) {
	                var lineString = lineStrings[i];
	                if (i === 0) {
	                    layout = lineString.getLayout();
	                }
	                extend$1(flatCoordinates, lineString.getFlatCoordinates());
	                ends.push(flatCoordinates.length);
	            }
	            _this.setFlatCoordinates(layout, flatCoordinates);
	            _this.ends_ = ends;
	        }
	        return _this;
	    }
	    /**
	     * Append the passed linestring to the multilinestring.
	     * @param {LineString} lineString LineString.
	     * @api
	     */
	    MultiLineString.prototype.appendLineString = function (lineString) {
	        if (!this.flatCoordinates) {
	            this.flatCoordinates = lineString.getFlatCoordinates().slice();
	        }
	        else {
	            extend$1(this.flatCoordinates, lineString.getFlatCoordinates().slice());
	        }
	        this.ends_.push(this.flatCoordinates.length);
	        this.changed();
	    };
	    /**
	     * Make a complete copy of the geometry.
	     * @return {!MultiLineString} Clone.
	     * @override
	     * @api
	     */
	    MultiLineString.prototype.clone = function () {
	        return new MultiLineString(this.flatCoordinates.slice(), this.layout, this.ends_.slice());
	    };
	    /**
	     * @inheritDoc
	     */
	    MultiLineString.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {
	        if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
	            return minSquaredDistance;
	        }
	        if (this.maxDeltaRevision_ != this.getRevision()) {
	            this.maxDelta_ = Math.sqrt(arrayMaxSquaredDelta(this.flatCoordinates, 0, this.ends_, this.stride, 0));
	            this.maxDeltaRevision_ = this.getRevision();
	        }
	        return assignClosestArrayPoint(this.flatCoordinates, 0, this.ends_, this.stride, this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);
	    };
	    /**
	     * Returns the coordinate at `m` using linear interpolation, or `null` if no
	     * such coordinate exists.
	     *
	     * `opt_extrapolate` controls extrapolation beyond the range of Ms in the
	     * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first
	     * M will return the first coordinate and Ms greater than the last M will
	     * return the last coordinate.
	     *
	     * `opt_interpolate` controls interpolation between consecutive LineStrings
	     * within the MultiLineString. If `opt_interpolate` is `true` the coordinates
	     * will be linearly interpolated between the last coordinate of one LineString
	     * and the first coordinate of the next LineString.  If `opt_interpolate` is
	     * `false` then the function will return `null` for Ms falling between
	     * LineStrings.
	     *
	     * @param {number} m M.
	     * @param {boolean=} opt_extrapolate Extrapolate. Default is `false`.
	     * @param {boolean=} opt_interpolate Interpolate. Default is `false`.
	     * @return {import("../coordinate.js").Coordinate} Coordinate.
	     * @api
	     */
	    MultiLineString.prototype.getCoordinateAtM = function (m, opt_extrapolate, opt_interpolate) {
	        if ((this.layout != GeometryLayout.XYM &&
	            this.layout != GeometryLayout.XYZM) ||
	            this.flatCoordinates.length === 0) {
	            return null;
	        }
	        var extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;
	        var interpolate = opt_interpolate !== undefined ? opt_interpolate : false;
	        return lineStringsCoordinateAtM(this.flatCoordinates, 0, this.ends_, this.stride, m, extrapolate, interpolate);
	    };
	    /**
	     * Return the coordinates of the multilinestring.
	     * @return {Array<Array<import("../coordinate.js").Coordinate>>} Coordinates.
	     * @override
	     * @api
	     */
	    MultiLineString.prototype.getCoordinates = function () {
	        return inflateCoordinatesArray(this.flatCoordinates, 0, this.ends_, this.stride);
	    };
	    /**
	     * @return {Array<number>} Ends.
	     */
	    MultiLineString.prototype.getEnds = function () {
	        return this.ends_;
	    };
	    /**
	     * Return the linestring at the specified index.
	     * @param {number} index Index.
	     * @return {LineString} LineString.
	     * @api
	     */
	    MultiLineString.prototype.getLineString = function (index) {
	        if (index < 0 || this.ends_.length <= index) {
	            return null;
	        }
	        return new LineString(this.flatCoordinates.slice(index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);
	    };
	    /**
	     * Return the linestrings of this multilinestring.
	     * @return {Array<LineString>} LineStrings.
	     * @api
	     */
	    MultiLineString.prototype.getLineStrings = function () {
	        var flatCoordinates = this.flatCoordinates;
	        var ends = this.ends_;
	        var layout = this.layout;
	        /** @type {Array<LineString>} */
	        var lineStrings = [];
	        var offset = 0;
	        for (var i = 0, ii = ends.length; i < ii; ++i) {
	            var end = ends[i];
	            var lineString = new LineString(flatCoordinates.slice(offset, end), layout);
	            lineStrings.push(lineString);
	            offset = end;
	        }
	        return lineStrings;
	    };
	    /**
	     * @return {Array<number>} Flat midpoints.
	     */
	    MultiLineString.prototype.getFlatMidpoints = function () {
	        var midpoints = [];
	        var flatCoordinates = this.flatCoordinates;
	        var offset = 0;
	        var ends = this.ends_;
	        var stride = this.stride;
	        for (var i = 0, ii = ends.length; i < ii; ++i) {
	            var end = ends[i];
	            var midpoint = interpolatePoint(flatCoordinates, offset, end, stride, 0.5);
	            extend$1(midpoints, midpoint);
	            offset = end;
	        }
	        return midpoints;
	    };
	    /**
	     * @inheritDoc
	     */
	    MultiLineString.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {
	        var simplifiedFlatCoordinates = [];
	        var simplifiedEnds = [];
	        simplifiedFlatCoordinates.length = douglasPeuckerArray(this.flatCoordinates, 0, this.ends_, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0, simplifiedEnds);
	        return new MultiLineString(simplifiedFlatCoordinates, GeometryLayout.XY, simplifiedEnds);
	    };
	    /**
	     * @inheritDoc
	     * @api
	     */
	    MultiLineString.prototype.getType = function () {
	        return GeometryType.MULTI_LINE_STRING;
	    };
	    /**
	     * @inheritDoc
	     * @api
	     */
	    MultiLineString.prototype.intersectsExtent = function (extent) {
	        return intersectsLineStringArray(this.flatCoordinates, 0, this.ends_, this.stride, extent);
	    };
	    /**
	     * Set the coordinates of the multilinestring.
	     * @param {!Array<Array<import("../coordinate.js").Coordinate>>} coordinates Coordinates.
	     * @param {GeometryLayout=} opt_layout Layout.
	     * @override
	     * @api
	     */
	    MultiLineString.prototype.setCoordinates = function (coordinates, opt_layout) {
	        this.setLayout(opt_layout, coordinates, 2);
	        if (!this.flatCoordinates) {
	            this.flatCoordinates = [];
	        }
	        var ends = deflateCoordinatesArray(this.flatCoordinates, 0, coordinates, this.stride, this.ends_);
	        this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];
	        this.changed();
	    };
	    return MultiLineString;
	}(SimpleGeometry));

	var __extends$18 = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @classdesc
	 * Multi-point geometry.
	 *
	 * @api
	 */
	var MultiPoint = /** @class */ (function (_super) {
	    __extends$18(MultiPoint, _super);
	    /**
	     * @param {Array<import("../coordinate.js").Coordinate>|Array<number>} coordinates Coordinates.
	     *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.
	     * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
	     */
	    function MultiPoint(coordinates, opt_layout) {
	        var _this = _super.call(this) || this;
	        if (opt_layout && !Array.isArray(coordinates[0])) {
	            _this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */ (coordinates));
	        }
	        else {
	            _this.setCoordinates(/** @type {Array<import("../coordinate.js").Coordinate>} */ (coordinates), opt_layout);
	        }
	        return _this;
	    }
	    /**
	     * Append the passed point to this multipoint.
	     * @param {Point} point Point.
	     * @api
	     */
	    MultiPoint.prototype.appendPoint = function (point) {
	        if (!this.flatCoordinates) {
	            this.flatCoordinates = point.getFlatCoordinates().slice();
	        }
	        else {
	            extend$1(this.flatCoordinates, point.getFlatCoordinates());
	        }
	        this.changed();
	    };
	    /**
	     * Make a complete copy of the geometry.
	     * @return {!MultiPoint} Clone.
	     * @override
	     * @api
	     */
	    MultiPoint.prototype.clone = function () {
	        var multiPoint = new MultiPoint(this.flatCoordinates.slice(), this.layout);
	        return multiPoint;
	    };
	    /**
	     * @inheritDoc
	     */
	    MultiPoint.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {
	        if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
	            return minSquaredDistance;
	        }
	        var flatCoordinates = this.flatCoordinates;
	        var stride = this.stride;
	        for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {
	            var squaredDistance$1 = squaredDistance(x, y, flatCoordinates[i], flatCoordinates[i + 1]);
	            if (squaredDistance$1 < minSquaredDistance) {
	                minSquaredDistance = squaredDistance$1;
	                for (var j = 0; j < stride; ++j) {
	                    closestPoint[j] = flatCoordinates[i + j];
	                }
	                closestPoint.length = stride;
	            }
	        }
	        return minSquaredDistance;
	    };
	    /**
	     * Return the coordinates of the multipoint.
	     * @return {Array<import("../coordinate.js").Coordinate>} Coordinates.
	     * @override
	     * @api
	     */
	    MultiPoint.prototype.getCoordinates = function () {
	        return inflateCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
	    };
	    /**
	     * Return the point at the specified index.
	     * @param {number} index Index.
	     * @return {Point} Point.
	     * @api
	     */
	    MultiPoint.prototype.getPoint = function (index) {
	        var n = !this.flatCoordinates ? 0 : this.flatCoordinates.length / this.stride;
	        if (index < 0 || n <= index) {
	            return null;
	        }
	        return new Point(this.flatCoordinates.slice(index * this.stride, (index + 1) * this.stride), this.layout);
	    };
	    /**
	     * Return the points of this multipoint.
	     * @return {Array<Point>} Points.
	     * @api
	     */
	    MultiPoint.prototype.getPoints = function () {
	        var flatCoordinates = this.flatCoordinates;
	        var layout = this.layout;
	        var stride = this.stride;
	        /** @type {Array<Point>} */
	        var points = [];
	        for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {
	            var point = new Point(flatCoordinates.slice(i, i + stride), layout);
	            points.push(point);
	        }
	        return points;
	    };
	    /**
	     * @inheritDoc
	     * @api
	     */
	    MultiPoint.prototype.getType = function () {
	        return GeometryType.MULTI_POINT;
	    };
	    /**
	     * @inheritDoc
	     * @api
	     */
	    MultiPoint.prototype.intersectsExtent = function (extent) {
	        var flatCoordinates = this.flatCoordinates;
	        var stride = this.stride;
	        for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {
	            var x = flatCoordinates[i];
	            var y = flatCoordinates[i + 1];
	            if (containsXY(extent, x, y)) {
	                return true;
	            }
	        }
	        return false;
	    };
	    /**
	     * Set the coordinates of the multipoint.
	     * @param {!Array<import("../coordinate.js").Coordinate>} coordinates Coordinates.
	     * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
	     * @override
	     * @api
	     */
	    MultiPoint.prototype.setCoordinates = function (coordinates, opt_layout) {
	        this.setLayout(opt_layout, coordinates, 1);
	        if (!this.flatCoordinates) {
	            this.flatCoordinates = [];
	        }
	        this.flatCoordinates.length = deflateCoordinates(this.flatCoordinates, 0, coordinates, this.stride);
	        this.changed();
	    };
	    return MultiPoint;
	}(SimpleGeometry));

	/**
	 * @module ol/geom/flat/center
	 */
	/**
	 * @param {Array<number>} flatCoordinates Flat coordinates.
	 * @param {number} offset Offset.
	 * @param {Array<Array<number>>} endss Endss.
	 * @param {number} stride Stride.
	 * @return {Array<number>} Flat centers.
	 */
	function linearRingss$1(flatCoordinates, offset, endss, stride) {
	    var flatCenters = [];
	    var extent = createEmpty();
	    for (var i = 0, ii = endss.length; i < ii; ++i) {
	        var ends = endss[i];
	        extent = createOrUpdateFromFlatCoordinates(flatCoordinates, offset, ends[0], stride);
	        flatCenters.push((extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2);
	        offset = ends[ends.length - 1];
	    }
	    return flatCenters;
	}

	var __extends$19 = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @classdesc
	 * Multi-polygon geometry.
	 *
	 * @api
	 */
	var MultiPolygon = /** @class */ (function (_super) {
	    __extends$19(MultiPolygon, _super);
	    /**
	     * @param {Array<Array<Array<import("../coordinate.js").Coordinate>>|Polygon>|Array<number>} coordinates Coordinates.
	     *     For internal use, flat coordinates in combination with `opt_layout` and `opt_endss` are also accepted.
	     * @param {GeometryLayout=} opt_layout Layout.
	     * @param {Array<Array<number>>=} opt_endss Array of ends for internal use with flat coordinates.
	     */
	    function MultiPolygon(coordinates, opt_layout, opt_endss) {
	        var _this = _super.call(this) || this;
	        /**
	         * @type {Array<Array<number>>}
	         * @private
	         */
	        _this.endss_ = [];
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.flatInteriorPointsRevision_ = -1;
	        /**
	         * @private
	         * @type {Array<number>}
	         */
	        _this.flatInteriorPoints_ = null;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.maxDelta_ = -1;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.maxDeltaRevision_ = -1;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.orientedRevision_ = -1;
	        /**
	         * @private
	         * @type {Array<number>}
	         */
	        _this.orientedFlatCoordinates_ = null;
	        if (!opt_endss && !Array.isArray(coordinates[0])) {
	            var layout = _this.getLayout();
	            var polygons = /** @type {Array<Polygon>} */ (coordinates);
	            var flatCoordinates = [];
	            var endss = [];
	            for (var i = 0, ii = polygons.length; i < ii; ++i) {
	                var polygon = polygons[i];
	                if (i === 0) {
	                    layout = polygon.getLayout();
	                }
	                var offset = flatCoordinates.length;
	                var ends = polygon.getEnds();
	                for (var j = 0, jj = ends.length; j < jj; ++j) {
	                    ends[j] += offset;
	                }
	                extend$1(flatCoordinates, polygon.getFlatCoordinates());
	                endss.push(ends);
	            }
	            opt_layout = layout;
	            coordinates = flatCoordinates;
	            opt_endss = endss;
	        }
	        if (opt_layout !== undefined && opt_endss) {
	            _this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */ (coordinates));
	            _this.endss_ = opt_endss;
	        }
	        else {
	            _this.setCoordinates(/** @type {Array<Array<Array<import("../coordinate.js").Coordinate>>>} */ (coordinates), opt_layout);
	        }
	        return _this;
	    }
	    /**
	     * Append the passed polygon to this multipolygon.
	     * @param {Polygon} polygon Polygon.
	     * @api
	     */
	    MultiPolygon.prototype.appendPolygon = function (polygon) {
	        /** @type {Array<number>} */
	        var ends;
	        if (!this.flatCoordinates) {
	            this.flatCoordinates = polygon.getFlatCoordinates().slice();
	            ends = polygon.getEnds().slice();
	            this.endss_.push();
	        }
	        else {
	            var offset = this.flatCoordinates.length;
	            extend$1(this.flatCoordinates, polygon.getFlatCoordinates());
	            ends = polygon.getEnds().slice();
	            for (var i = 0, ii = ends.length; i < ii; ++i) {
	                ends[i] += offset;
	            }
	        }
	        this.endss_.push(ends);
	        this.changed();
	    };
	    /**
	     * Make a complete copy of the geometry.
	     * @return {!MultiPolygon} Clone.
	     * @override
	     * @api
	     */
	    MultiPolygon.prototype.clone = function () {
	        var len = this.endss_.length;
	        var newEndss = new Array(len);
	        for (var i = 0; i < len; ++i) {
	            newEndss[i] = this.endss_[i].slice();
	        }
	        return new MultiPolygon(this.flatCoordinates.slice(), this.layout, newEndss);
	    };
	    /**
	     * @inheritDoc
	     */
	    MultiPolygon.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {
	        if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
	            return minSquaredDistance;
	        }
	        if (this.maxDeltaRevision_ != this.getRevision()) {
	            this.maxDelta_ = Math.sqrt(multiArrayMaxSquaredDelta(this.flatCoordinates, 0, this.endss_, this.stride, 0));
	            this.maxDeltaRevision_ = this.getRevision();
	        }
	        return assignClosestMultiArrayPoint(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);
	    };
	    /**
	     * @inheritDoc
	     */
	    MultiPolygon.prototype.containsXY = function (x, y) {
	        return linearRingssContainsXY(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, x, y);
	    };
	    /**
	     * Return the area of the multipolygon on projected plane.
	     * @return {number} Area (on projected plane).
	     * @api
	     */
	    MultiPolygon.prototype.getArea = function () {
	        return linearRingss(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride);
	    };
	    /**
	     * Get the coordinate array for this geometry.  This array has the structure
	     * of a GeoJSON coordinate array for multi-polygons.
	     *
	     * @param {boolean=} opt_right Orient coordinates according to the right-hand
	     *     rule (counter-clockwise for exterior and clockwise for interior rings).
	     *     If `false`, coordinates will be oriented according to the left-hand rule
	     *     (clockwise for exterior and counter-clockwise for interior rings).
	     *     By default, coordinate orientation will depend on how the geometry was
	     *     constructed.
	     * @return {Array<Array<Array<import("../coordinate.js").Coordinate>>>} Coordinates.
	     * @override
	     * @api
	     */
	    MultiPolygon.prototype.getCoordinates = function (opt_right) {
	        var flatCoordinates;
	        if (opt_right !== undefined) {
	            flatCoordinates = this.getOrientedFlatCoordinates().slice();
	            orientLinearRingsArray(flatCoordinates, 0, this.endss_, this.stride, opt_right);
	        }
	        else {
	            flatCoordinates = this.flatCoordinates;
	        }
	        return inflateMultiCoordinatesArray(flatCoordinates, 0, this.endss_, this.stride);
	    };
	    /**
	     * @return {Array<Array<number>>} Endss.
	     */
	    MultiPolygon.prototype.getEndss = function () {
	        return this.endss_;
	    };
	    /**
	     * @return {Array<number>} Flat interior points.
	     */
	    MultiPolygon.prototype.getFlatInteriorPoints = function () {
	        if (this.flatInteriorPointsRevision_ != this.getRevision()) {
	            var flatCenters = linearRingss$1(this.flatCoordinates, 0, this.endss_, this.stride);
	            this.flatInteriorPoints_ = getInteriorPointsOfMultiArray(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, flatCenters);
	            this.flatInteriorPointsRevision_ = this.getRevision();
	        }
	        return this.flatInteriorPoints_;
	    };
	    /**
	     * Return the interior points as {@link module:ol/geom/MultiPoint multipoint}.
	     * @return {MultiPoint} Interior points as XYM coordinates, where M is
	     * the length of the horizontal intersection that the point belongs to.
	     * @api
	     */
	    MultiPolygon.prototype.getInteriorPoints = function () {
	        return new MultiPoint(this.getFlatInteriorPoints().slice(), GeometryLayout.XYM);
	    };
	    /**
	     * @return {Array<number>} Oriented flat coordinates.
	     */
	    MultiPolygon.prototype.getOrientedFlatCoordinates = function () {
	        if (this.orientedRevision_ != this.getRevision()) {
	            var flatCoordinates = this.flatCoordinates;
	            if (linearRingssAreOriented(flatCoordinates, 0, this.endss_, this.stride)) {
	                this.orientedFlatCoordinates_ = flatCoordinates;
	            }
	            else {
	                this.orientedFlatCoordinates_ = flatCoordinates.slice();
	                this.orientedFlatCoordinates_.length =
	                    orientLinearRingsArray(this.orientedFlatCoordinates_, 0, this.endss_, this.stride);
	            }
	            this.orientedRevision_ = this.getRevision();
	        }
	        return this.orientedFlatCoordinates_;
	    };
	    /**
	     * @inheritDoc
	     */
	    MultiPolygon.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {
	        var simplifiedFlatCoordinates = [];
	        var simplifiedEndss = [];
	        simplifiedFlatCoordinates.length = quantizeMultiArray(this.flatCoordinates, 0, this.endss_, this.stride, Math.sqrt(squaredTolerance), simplifiedFlatCoordinates, 0, simplifiedEndss);
	        return new MultiPolygon(simplifiedFlatCoordinates, GeometryLayout.XY, simplifiedEndss);
	    };
	    /**
	     * Return the polygon at the specified index.
	     * @param {number} index Index.
	     * @return {Polygon} Polygon.
	     * @api
	     */
	    MultiPolygon.prototype.getPolygon = function (index) {
	        if (index < 0 || this.endss_.length <= index) {
	            return null;
	        }
	        var offset;
	        if (index === 0) {
	            offset = 0;
	        }
	        else {
	            var prevEnds = this.endss_[index - 1];
	            offset = prevEnds[prevEnds.length - 1];
	        }
	        var ends = this.endss_[index].slice();
	        var end = ends[ends.length - 1];
	        if (offset !== 0) {
	            for (var i = 0, ii = ends.length; i < ii; ++i) {
	                ends[i] -= offset;
	            }
	        }
	        return new Polygon(this.flatCoordinates.slice(offset, end), this.layout, ends);
	    };
	    /**
	     * Return the polygons of this multipolygon.
	     * @return {Array<Polygon>} Polygons.
	     * @api
	     */
	    MultiPolygon.prototype.getPolygons = function () {
	        var layout = this.layout;
	        var flatCoordinates = this.flatCoordinates;
	        var endss = this.endss_;
	        var polygons = [];
	        var offset = 0;
	        for (var i = 0, ii = endss.length; i < ii; ++i) {
	            var ends = endss[i].slice();
	            var end = ends[ends.length - 1];
	            if (offset !== 0) {
	                for (var j = 0, jj = ends.length; j < jj; ++j) {
	                    ends[j] -= offset;
	                }
	            }
	            var polygon = new Polygon(flatCoordinates.slice(offset, end), layout, ends);
	            polygons.push(polygon);
	            offset = end;
	        }
	        return polygons;
	    };
	    /**
	     * @inheritDoc
	     * @api
	     */
	    MultiPolygon.prototype.getType = function () {
	        return GeometryType.MULTI_POLYGON;
	    };
	    /**
	     * @inheritDoc
	     * @api
	     */
	    MultiPolygon.prototype.intersectsExtent = function (extent) {
	        return intersectsLinearRingMultiArray(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, extent);
	    };
	    /**
	     * Set the coordinates of the multipolygon.
	     * @param {!Array<Array<Array<import("../coordinate.js").Coordinate>>>} coordinates Coordinates.
	     * @param {GeometryLayout=} opt_layout Layout.
	     * @override
	     * @api
	     */
	    MultiPolygon.prototype.setCoordinates = function (coordinates, opt_layout) {
	        this.setLayout(opt_layout, coordinates, 3);
	        if (!this.flatCoordinates) {
	            this.flatCoordinates = [];
	        }
	        var endss = deflateMultiCoordinatesArray(this.flatCoordinates, 0, coordinates, this.stride, this.endss_);
	        if (endss.length === 0) {
	            this.flatCoordinates.length = 0;
	        }
	        else {
	            var lastEnds = endss[endss.length - 1];
	            this.flatCoordinates.length = lastEnds.length === 0 ?
	                0 : lastEnds[lastEnds.length - 1];
	        }
	        this.changed();
	    };
	    return MultiPolygon;
	}(SimpleGeometry));

	/**
	 * @module ol/interaction
	 */
	/**
	 * @typedef {Object} DefaultsOptions
	 * @property {boolean} [altShiftDragRotate=true] Whether Alt-Shift-drag rotate is
	 * desired.
	 * @property {boolean} [onFocusOnly=false] Interact only when the map has the
	 * focus. This affects the `MouseWheelZoom` and `DragPan` interactions and is
	 * useful when page scroll is desired for maps that do not have the browser's
	 * focus.
	 * @property {boolean} [doubleClickZoom=true] Whether double click zoom is
	 * desired.
	 * @property {boolean} [keyboard=true] Whether keyboard interaction is desired.
	 * @property {boolean} [mouseWheelZoom=true] Whether mousewheel zoom is desired.
	 * @property {boolean} [shiftDragZoom=true] Whether Shift-drag zoom is desired.
	 * @property {boolean} [dragPan=true] Whether drag pan is desired.
	 * @property {boolean} [pinchRotate=true] Whether pinch rotate is desired.
	 * @property {boolean} [pinchZoom=true] Whether pinch zoom is desired.
	 * @property {number} [zoomDelta] Zoom level delta when using keyboard or double click zoom.
	 * @property {number} [zoomDuration] Duration of the zoom animation in
	 * milliseconds.
	 */
	/**
	 * Set of interactions included in maps by default. Specific interactions can be
	 * excluded by setting the appropriate option to false in the constructor
	 * options, but the order of the interactions is fixed.  If you want to specify
	 * a different order for interactions, you will need to create your own
	 * {@link module:ol/interaction/Interaction} instances and insert
	 * them into a {@link module:ol/Collection} in the order you want
	 * before creating your {@link module:ol/Map~Map} instance. Changing the order can
	 * be of interest if the event propagation needs to be stopped at a point.
	 * The default set of interactions, in sequence, is:
	 * * {@link module:ol/interaction/DragRotate~DragRotate}
	 * * {@link module:ol/interaction/DoubleClickZoom~DoubleClickZoom}
	 * * {@link module:ol/interaction/DragPan~DragPan}
	 * * {@link module:ol/interaction/PinchRotate~PinchRotate}
	 * * {@link module:ol/interaction/PinchZoom~PinchZoom}
	 * * {@link module:ol/interaction/KeyboardPan~KeyboardPan}
	 * * {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}
	 * * {@link module:ol/interaction/MouseWheelZoom~MouseWheelZoom}
	 * * {@link module:ol/interaction/DragZoom~DragZoom}
	 *
	 * @param {DefaultsOptions=} opt_options Defaults options.
	 * @return {import("./Collection.js").default<import("./interaction/Interaction.js").default>}
	 * A collection of interactions to be used with the {@link module:ol/Map~Map}
	 * constructor's `interactions` option.
	 * @api
	 */
	function defaults$3(opt_options) {
	    var options = opt_options ? opt_options : {};
	    var interactions = new Collection$2();
	    var kinetic = new Kinetic(-0.005, 0.05, 100);
	    var altShiftDragRotate = options.altShiftDragRotate !== undefined ?
	        options.altShiftDragRotate : true;
	    if (altShiftDragRotate) {
	        interactions.push(new DragRotate());
	    }
	    var doubleClickZoom = options.doubleClickZoom !== undefined ?
	        options.doubleClickZoom : true;
	    if (doubleClickZoom) {
	        interactions.push(new DoubleClickZoom({
	            delta: options.zoomDelta,
	            duration: options.zoomDuration
	        }));
	    }
	    var dragPan = options.dragPan !== undefined ? options.dragPan : true;
	    if (dragPan) {
	        interactions.push(new DragPan({
	            condition: options.onFocusOnly ? focus : undefined,
	            kinetic: kinetic
	        }));
	    }
	    var pinchRotate = options.pinchRotate !== undefined ? options.pinchRotate :
	        true;
	    if (pinchRotate) {
	        interactions.push(new PinchRotate());
	    }
	    var pinchZoom = options.pinchZoom !== undefined ? options.pinchZoom : true;
	    if (pinchZoom) {
	        interactions.push(new PinchZoom({
	            duration: options.zoomDuration
	        }));
	    }
	    var keyboard = options.keyboard !== undefined ? options.keyboard : true;
	    if (keyboard) {
	        interactions.push(new KeyboardPan());
	        interactions.push(new KeyboardZoom({
	            delta: options.zoomDelta,
	            duration: options.zoomDuration
	        }));
	    }
	    var mouseWheelZoom = options.mouseWheelZoom !== undefined ?
	        options.mouseWheelZoom : true;
	    if (mouseWheelZoom) {
	        interactions.push(new MouseWheelZoom({
	            condition: options.onFocusOnly ? focus : undefined,
	            duration: options.zoomDuration
	        }));
	    }
	    var shiftDragZoom = options.shiftDragZoom !== undefined ?
	        options.shiftDragZoom : true;
	    if (shiftDragZoom) {
	        interactions.push(new DragZoom({
	            duration: options.zoomDuration
	        }));
	    }
	    return interactions;
	}

	var __extends$1a = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @classdesc
	 * The map is the core component of OpenLayers. For a map to render, a view,
	 * one or more layers, and a target container are needed:
	 *
	 *     import Map from 'ol/Map';
	 *     import View from 'ol/View';
	 *     import TileLayer from 'ol/layer/Tile';
	 *     import OSM from 'ol/source/OSM';
	 *
	 *     var map = new Map({
	 *       view: new View({
	 *         center: [0, 0],
	 *         zoom: 1
	 *       }),
	 *       layers: [
	 *         new TileLayer({
	 *           source: new OSM()
	 *         })
	 *       ],
	 *       target: 'map'
	 *     });
	 *
	 * The above snippet creates a map using a {@link module:ol/layer/Tile} to
	 * display {@link module:ol/source/OSM~OSM} OSM data and render it to a DOM
	 * element with the id `map`.
	 *
	 * The constructor places a viewport container (with CSS class name
	 * `ol-viewport`) in the target element (see `getViewport()`), and then two
	 * further elements within the viewport: one with CSS class name
	 * `ol-overlaycontainer-stopevent` for controls and some overlays, and one with
	 * CSS class name `ol-overlaycontainer` for other overlays (see the `stopEvent`
	 * option of {@link module:ol/Overlay~Overlay} for the difference). The map
	 * itself is placed in a further element within the viewport.
	 *
	 * Layers are stored as a {@link module:ol/Collection~Collection} in
	 * layerGroups. A top-level group is provided by the library. This is what is
	 * accessed by `getLayerGroup` and `setLayerGroup`. Layers entered in the
	 * options are added to this group, and `addLayer` and `removeLayer` change the
	 * layer collection in the group. `getLayers` is a convenience function for
	 * `getLayerGroup().getLayers()`. Note that {@link module:ol/layer/Group~Group}
	 * is a subclass of {@link module:ol/layer/Base}, so layers entered in the
	 * options or added with `addLayer` can be groups, which can contain further
	 * groups, and so on.
	 *
	 * @api
	 */
	var Map$1 = /** @class */ (function (_super) {
	    __extends$1a(Map, _super);
	    /**
	     * @param {import("./PluggableMap.js").MapOptions} options Map options.
	     */
	    function Map(options) {
	        var _this = this;
	        options = assign$1({}, options);
	        if (!options.controls) {
	            options.controls = defaults$2();
	        }
	        if (!options.interactions) {
	            options.interactions = defaults$3();
	        }
	        _this = _super.call(this, options) || this;
	        return _this;
	    }
	    Map.prototype.createRenderer = function () {
	        return new CompositeMapRenderer(this);
	    };
	    return Map;
	}(PluggableMap));

	/**
	 * @module ol/tilecoord
	 */
	/**
	 * An array of three numbers representing the location of a tile in a tile
	 * grid. The order is `z` (zoom level), `x` (column), and `y` (row).
	 * @typedef {Array<number>} TileCoord
	 * @api
	 */
	/**
	 * @param {number} z Z.
	 * @param {number} x X.
	 * @param {number} y Y.
	 * @param {TileCoord=} opt_tileCoord Tile coordinate.
	 * @return {TileCoord} Tile coordinate.
	 */
	function createOrUpdate$1(z, x, y, opt_tileCoord) {
	    if (opt_tileCoord !== undefined) {
	        opt_tileCoord[0] = z;
	        opt_tileCoord[1] = x;
	        opt_tileCoord[2] = y;
	        return opt_tileCoord;
	    }
	    else {
	        return [z, x, y];
	    }
	}
	/**
	 * @param {number} z Z.
	 * @param {number} x X.
	 * @param {number} y Y.
	 * @return {string} Key.
	 */
	function getKeyZXY(z, x, y) {
	    return z + '/' + x + '/' + y;
	}
	/**
	 * Get the key for a tile coord.
	 * @param {TileCoord} tileCoord The tile coord.
	 * @return {string} Key.
	 */
	function getKey$1(tileCoord) {
	    return getKeyZXY(tileCoord[0], tileCoord[1], tileCoord[2]);
	}
	/**
	 * Get a tile coord given a key.
	 * @param {string} key The tile coord key.
	 * @return {TileCoord} The tile coord.
	 */
	function fromKey(key) {
	    return key.split('/').map(Number);
	}
	/**
	 * @param {TileCoord} tileCoord Tile coord.
	 * @return {number} Hash.
	 */
	function hash$1(tileCoord) {
	    return (tileCoord[1] << tileCoord[0]) + tileCoord[2];
	}
	/**
	 * @param {TileCoord} tileCoord Tile coordinate.
	 * @param {!import("./tilegrid/TileGrid.js").default} tileGrid Tile grid.
	 * @return {boolean} Tile coordinate is within extent and zoom level range.
	 */
	function withinExtentAndZ(tileCoord, tileGrid) {
	    var z = tileCoord[0];
	    var x = tileCoord[1];
	    var y = tileCoord[2];
	    if (tileGrid.getMinZoom() > z || z > tileGrid.getMaxZoom()) {
	        return false;
	    }
	    var extent = tileGrid.getExtent();
	    var tileRange;
	    if (!extent) {
	        tileRange = tileGrid.getFullTileRange(z);
	    }
	    else {
	        tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);
	    }
	    if (!tileRange) {
	        return true;
	    }
	    else {
	        return tileRange.containsXY(x, y);
	    }
	}

	var __extends$1b = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var TileCache = /** @class */ (function (_super) {
	    __extends$1b(TileCache, _super);
	    /**
	     * @param {number=} opt_highWaterMark High water mark.
	     */
	    function TileCache(opt_highWaterMark) {
	        return _super.call(this, opt_highWaterMark) || this;
	    }
	    /**
	     * @param {!Object<string, import("./TileRange.js").default>} usedTiles Used tiles.
	     */
	    TileCache.prototype.expireCache = function (usedTiles) {
	        while (this.canExpireCache()) {
	            var tile = this.peekLast();
	            if (tile.getKey() in usedTiles) {
	                break;
	            }
	            else {
	                this.pop().dispose();
	            }
	        }
	    };
	    /**
	     * Prune all tiles from the cache that don't have the same z as the newest tile.
	     */
	    TileCache.prototype.pruneExceptNewestZ = function () {
	        if (this.getCount() === 0) {
	            return;
	        }
	        var key = this.peekFirstKey();
	        var tileCoord = fromKey(key);
	        var z = tileCoord[0];
	        this.forEach(function (tile) {
	            if (tile.tileCoord[0] !== z) {
	                this.remove(getKey$1(tile.tileCoord));
	                tile.dispose();
	            }
	        }.bind(this));
	    };
	    return TileCache;
	}(LRUCache));

	/**
	 * @module ol/TileRange
	 */
	/**
	 * A representation of a contiguous block of tiles.  A tile range is specified
	 * by its min/max tile coordinates and is inclusive of coordinates.
	 */
	var TileRange = /** @class */ (function () {
	    /**
	     * @param {number} minX Minimum X.
	     * @param {number} maxX Maximum X.
	     * @param {number} minY Minimum Y.
	     * @param {number} maxY Maximum Y.
	     */
	    function TileRange(minX, maxX, minY, maxY) {
	        /**
	         * @type {number}
	         */
	        this.minX = minX;
	        /**
	         * @type {number}
	         */
	        this.maxX = maxX;
	        /**
	         * @type {number}
	         */
	        this.minY = minY;
	        /**
	         * @type {number}
	         */
	        this.maxY = maxY;
	    }
	    /**
	     * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
	     * @return {boolean} Contains tile coordinate.
	     */
	    TileRange.prototype.contains = function (tileCoord) {
	        return this.containsXY(tileCoord[1], tileCoord[2]);
	    };
	    /**
	     * @param {TileRange} tileRange Tile range.
	     * @return {boolean} Contains.
	     */
	    TileRange.prototype.containsTileRange = function (tileRange) {
	        return this.minX <= tileRange.minX && tileRange.maxX <= this.maxX &&
	            this.minY <= tileRange.minY && tileRange.maxY <= this.maxY;
	    };
	    /**
	     * @param {number} x Tile coordinate x.
	     * @param {number} y Tile coordinate y.
	     * @return {boolean} Contains coordinate.
	     */
	    TileRange.prototype.containsXY = function (x, y) {
	        return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;
	    };
	    /**
	     * @param {TileRange} tileRange Tile range.
	     * @return {boolean} Equals.
	     */
	    TileRange.prototype.equals = function (tileRange) {
	        return this.minX == tileRange.minX && this.minY == tileRange.minY &&
	            this.maxX == tileRange.maxX && this.maxY == tileRange.maxY;
	    };
	    /**
	     * @param {TileRange} tileRange Tile range.
	     */
	    TileRange.prototype.extend = function (tileRange) {
	        if (tileRange.minX < this.minX) {
	            this.minX = tileRange.minX;
	        }
	        if (tileRange.maxX > this.maxX) {
	            this.maxX = tileRange.maxX;
	        }
	        if (tileRange.minY < this.minY) {
	            this.minY = tileRange.minY;
	        }
	        if (tileRange.maxY > this.maxY) {
	            this.maxY = tileRange.maxY;
	        }
	    };
	    /**
	     * @return {number} Height.
	     */
	    TileRange.prototype.getHeight = function () {
	        return this.maxY - this.minY + 1;
	    };
	    /**
	     * @return {import("./size.js").Size} Size.
	     */
	    TileRange.prototype.getSize = function () {
	        return [this.getWidth(), this.getHeight()];
	    };
	    /**
	     * @return {number} Width.
	     */
	    TileRange.prototype.getWidth = function () {
	        return this.maxX - this.minX + 1;
	    };
	    /**
	     * @param {TileRange} tileRange Tile range.
	     * @return {boolean} Intersects.
	     */
	    TileRange.prototype.intersects = function (tileRange) {
	        return this.minX <= tileRange.maxX &&
	            this.maxX >= tileRange.minX &&
	            this.minY <= tileRange.maxY &&
	            this.maxY >= tileRange.minY;
	    };
	    return TileRange;
	}());
	/**
	 * @param {number} minX Minimum X.
	 * @param {number} maxX Maximum X.
	 * @param {number} minY Minimum Y.
	 * @param {number} maxY Maximum Y.
	 * @param {TileRange=} tileRange TileRange.
	 * @return {TileRange} Tile range.
	 */
	function createOrUpdate$2(minX, maxX, minY, maxY, tileRange) {
	    if (tileRange !== undefined) {
	        tileRange.minX = minX;
	        tileRange.maxX = maxX;
	        tileRange.minY = minY;
	        tileRange.maxY = maxY;
	        return tileRange;
	    }
	    else {
	        return new TileRange(minX, maxX, minY, maxY);
	    }
	}

	var __extends$1c = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @typedef {Object} ReplayState
	 * @property {boolean} dirty
	 * @property {null|import("./render.js").OrderFunction} renderedRenderOrder
	 * @property {number} renderedTileRevision
	 * @property {number} renderedResolution
	 * @property {number} renderedRevision
	 * @property {number} renderedZ
	 * @property {number} renderedTileResolution
	 * @property {number} renderedTileZ
	 */
	var VectorRenderTile = /** @class */ (function (_super) {
	    __extends$1c(VectorRenderTile, _super);
	    /**
	     * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
	     * @param {import("./TileState.js").default} state State.
	     * @param {import("./tilecoord.js").TileCoord} urlTileCoord Wrapped tile coordinate for source urls.
	     * @param {import("./tilegrid/TileGrid.js").default} sourceTileGrid Tile grid of the source.
	     * @param {function(VectorRenderTile):Array<import("./VectorTile").default>} getSourceTiles Function
	     * to get an source tiles for this tile.
	     * @param {function(VectorRenderTile):void} removeSourceTiles Function to remove this tile from its
	     * source tiles's consumer count.
	     */
	    function VectorRenderTile(tileCoord, state, urlTileCoord, sourceTileGrid, getSourceTiles, removeSourceTiles) {
	        var _this = _super.call(this, tileCoord, state, { transition: 0 }) || this;
	        /**
	         * @private
	         * @type {!Object<string, CanvasRenderingContext2D>}
	         */
	        _this.context_ = {};
	        /**
	         * Executor groups by layer uid. Entries are read/written by the renderer.
	         * @type {Object<string, Array<import("./render/canvas/ExecutorGroup.js").default>>}
	         */
	        _this.executorGroups = {};
	        /**
	         * Number of loading source tiles. Read/written by the source.
	         * @type {number}
	         */
	        _this.loadingSourceTiles = 0;
	        /**
	         * Tile keys of error source tiles. Read/written by the source.
	         * @type {Object<string, boolean>}
	         */
	        _this.errorSourceTileKeys = {};
	        /**
	         * @type {ImageData}
	         */
	        _this.hitDetectionImageData = null;
	        /**
	         * @private
	         * @type {!Object<string, ReplayState>}
	         */
	        _this.replayState_ = {};
	        /**
	         * @type {number}
	         */
	        _this.wantedResolution;
	        /**
	         * @type {!function():Array<import("./VectorTile.js").default>}
	         */
	        _this.getSourceTiles = getSourceTiles.bind(_this, _this);
	        /**
	         * @type {!function(import("./VectorRenderTile.js").default):void}
	         */
	        _this.removeSourceTiles_ = removeSourceTiles;
	        /**
	         * @private
	         * @type {import("./tilegrid/TileGrid.js").default}
	         */
	        _this.sourceTileGrid_ = sourceTileGrid;
	        /**
	         * @type {Array<import("./events.js").EventsKey>}
	         */
	        _this.sourceTileListenerKeys = [];
	        /**
	         * z of the source tiles of the last getSourceTiles call.
	         * @type {number}
	         */
	        _this.sourceZ = -1;
	        /**
	         * True when all tiles for this tile's nominal resolution are available.
	         * @type {boolean}
	         */
	        _this.hifi = false;
	        /**
	         * @type {import("./tilecoord.js").TileCoord}
	         */
	        _this.wrappedTileCoord = urlTileCoord;
	        return _this;
	    }
	    /**
	     * @inheritDoc
	     */
	    VectorRenderTile.prototype.disposeInternal = function () {
	        this.sourceTileListenerKeys.forEach(unlistenByKey);
	        this.sourceTileListenerKeys.length = 0;
	        this.removeSourceTiles_(this);
	        for (var key in this.context_) {
	            var canvas = this.context_[key].canvas;
	            canvas.width = 0;
	            canvas.height = 0;
	        }
	        for (var key in this.executorGroups) {
	            var executorGroups = this.executorGroups[key];
	            for (var i = 0, ii = executorGroups.length; i < ii; ++i) {
	                executorGroups[i].disposeInternal();
	            }
	        }
	        _super.prototype.disposeInternal.call(this);
	    };
	    /**
	     * @param {import("./layer/Layer.js").default} layer Layer.
	     * @return {CanvasRenderingContext2D} The rendering context.
	     */
	    VectorRenderTile.prototype.getContext = function (layer) {
	        var key = getUid(layer);
	        if (!(key in this.context_)) {
	            this.context_[key] = createCanvasContext2D();
	        }
	        return this.context_[key];
	    };
	    /**
	     * @param {import("./layer/Layer.js").default} layer Layer.
	     * @return {boolean} Tile has a rendering context for the given layer.
	     */
	    VectorRenderTile.prototype.hasContext = function (layer) {
	        return getUid(layer) in this.context_;
	    };
	    /**
	     * Get the Canvas for this tile.
	     * @param {import("./layer/Layer.js").default} layer Layer.
	     * @return {HTMLCanvasElement} Canvas.
	     */
	    VectorRenderTile.prototype.getImage = function (layer) {
	        return this.hasContext(layer) ? this.getContext(layer).canvas : null;
	    };
	    /**
	     * @param {import("./layer/Layer.js").default} layer Layer.
	     * @return {ReplayState} The replay state.
	     */
	    VectorRenderTile.prototype.getReplayState = function (layer) {
	        var key = getUid(layer);
	        if (!(key in this.replayState_)) {
	            this.replayState_[key] = {
	                dirty: false,
	                renderedRenderOrder: null,
	                renderedResolution: NaN,
	                renderedRevision: -1,
	                renderedTileResolution: NaN,
	                renderedTileRevision: -1,
	                renderedZ: -1,
	                renderedTileZ: -1
	            };
	        }
	        return this.replayState_[key];
	    };
	    /**
	     * @inheritDoc
	     */
	    VectorRenderTile.prototype.load = function () {
	        this.getSourceTiles();
	    };
	    return VectorRenderTile;
	}(Tile));

	var __extends$1d = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	var VectorTile = /** @class */ (function (_super) {
	    __extends$1d(VectorTile, _super);
	    /**
	     * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
	     * @param {TileState} state State.
	     * @param {string} src Data source url.
	     * @param {import("./format/Feature.js").default} format Feature format.
	     * @param {import("./Tile.js").LoadFunction} tileLoadFunction Tile load function.
	     * @param {import("./Tile.js").Options=} opt_options Tile options.
	     */
	    function VectorTile(tileCoord, state, src, format, tileLoadFunction, opt_options) {
	        var _this = _super.call(this, tileCoord, state, opt_options) || this;
	        /**
	         * @type {number}
	         */
	        _this.consumers = 0;
	        /**
	         * Extent of this tile; set by the source.
	         * @type {import("./extent.js").Extent}
	         */
	        _this.extent = null;
	        /**
	         * @private
	         * @type {import("./format/Feature.js").default}
	         */
	        _this.format_ = format;
	        /**
	         * @private
	         * @type {Array<import("./Feature.js").default>}
	         */
	        _this.features_ = null;
	        /**
	         * @private
	         * @type {import("./featureloader.js").FeatureLoader}
	         */
	        _this.loader_;
	        /**
	         * Feature projection of this tile; set by the source.
	         * @type {import("./proj/Projection.js").default}
	         */
	        _this.projection = null;
	        /**
	         * Resolution of this tile; set by the source.
	         * @type {number}
	         */
	        _this.resolution;
	        /**
	         * @private
	         * @type {import("./Tile.js").LoadFunction}
	         */
	        _this.tileLoadFunction_ = tileLoadFunction;
	        /**
	         * @private
	         * @type {string}
	         */
	        _this.url_ = src;
	        return _this;
	    }
	    /**
	     * Get the feature format assigned for reading this tile's features.
	     * @return {import("./format/Feature.js").default} Feature format.
	     * @api
	     */
	    VectorTile.prototype.getFormat = function () {
	        return this.format_;
	    };
	    /**
	     * Get the features for this tile. Geometries will be in the view projection.
	     * @return {Array<import("./Feature.js").FeatureLike>} Features.
	     * @api
	     */
	    VectorTile.prototype.getFeatures = function () {
	        return this.features_;
	    };
	    /**
	     * @inheritDoc
	     */
	    VectorTile.prototype.getKey = function () {
	        return this.url_;
	    };
	    /**
	     * @inheritDoc
	     */
	    VectorTile.prototype.load = function () {
	        if (this.state == TileState.IDLE) {
	            this.setState(TileState.LOADING);
	            this.tileLoadFunction_(this, this.url_);
	            this.loader_(this.extent, this.resolution, this.projection);
	        }
	    };
	    /**
	     * Handler for successful tile load.
	     * @param {Array<import("./Feature.js").default>} features The loaded features.
	     * @param {import("./proj/Projection.js").default} dataProjection Data projection.
	     */
	    VectorTile.prototype.onLoad = function (features, dataProjection) {
	        this.setFeatures(features);
	    };
	    /**
	     * Handler for tile load errors.
	     */
	    VectorTile.prototype.onError = function () {
	        this.setState(TileState.ERROR);
	    };
	    /**
	     * Function for use in an {@link module:ol/source/VectorTile~VectorTile}'s `tileLoadFunction`.
	     * Sets the features for the tile.
	     * @param {Array<import("./Feature.js").default>} features Features.
	     * @api
	     */
	    VectorTile.prototype.setFeatures = function (features) {
	        this.features_ = features;
	        this.setState(TileState.LOADED);
	    };
	    /**
	     * Set the feature loader for reading this tile's features.
	     * @param {import("./featureloader.js").FeatureLoader} loader Feature loader.
	     * @api
	     */
	    VectorTile.prototype.setLoader = function (loader) {
	        this.loader_ = loader;
	    };
	    return VectorTile;
	}(Tile));

	function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$2(Object(source), true).forEach(function (key) { defineProperty$4(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
	var file$1 = "src/map/OverviewSwitcher.svelte";

	function create_fragment$1(ctx) {
	  var div1;
	  var div0;
	  var t;
	  var div1_title_value;
	  var dispose;
	  var block = {
	    c: function create() {
	      div1 = element("div");
	      div0 = element("div");
	      t = text(
	      /*label*/
	      ctx[0]);
	      attr_dev(div0, "class", "label svelte-mtd2bv");
	      add_location(div0, file$1, 126, 4, 3522);
	      attr_dev(div1, "id", "overview-switcher-map");
	      attr_dev(div1, "title", div1_title_value = "Switch to " +
	      /*label*/
	      ctx[0] + " layer");
	      attr_dev(div1, "class", "controls bottom left svelte-mtd2bv");
	      add_location(div1, file$1, 120, 0, 3350);
	      dispose = [listen_dev(div1, "click",
	      /*handleClick*/
	      ctx[1], false, false, false), listen_dev(div1, "contextmenu", stop_propagation(
	      /*contextmenu_handler*/
	      ctx[8]), false, false, true)];
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, div1, anchor);
	      append_dev(div1, div0);
	      append_dev(div0, t);
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (dirty &
	      /*label*/
	      1) set_data_dev(t,
	      /*label*/
	      ctx[0]);

	      if (dirty &
	      /*label*/
	      1 && div1_title_value !== (div1_title_value = "Switch to " +
	      /*label*/
	      ctx[0] + " layer")) {
	        attr_dev(div1, "title", div1_title_value);
	      }
	    },
	    i: noop,
	    o: noop,
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(div1);
	      run_all(dispose);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$1.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function cloneLayer(layer) {
	  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  return new layer.constructor(_objectSpread$1({
	    label: layer.get("label"),
	    shortLabel: layer.get("shortLabel"),
	    visible: false,
	    source: layer.getSource()
	  }, props));
	}

	function instance$1($$self, $$props, $$invalidate) {
	  var mainMap = getContext("map");
	  var label;
	  var activeIndex = 1;
	  var nextIndex = 0;
	  var baseLayers = mainMap.baseLayers.map(function (layer, i) {
	    if (layer.getVisible()) {
	      activeIndex = i;
	      nextIndex = (i + 1) % mainMap.baseLayers.length;
	    }

	    if (layer instanceof LayerGroup) {
	      return cloneLayer(layer.getLayers().item(0), {
	        label: layer.get("label"),
	        shortLabel: layer.get("shortLabel")
	      });
	    } else {
	      return cloneLayer(layer);
	    }
	  });
	  var view = new View();
	  var map = new Map$1({
	    controls: [],
	    interactions: [],
	    layers: baseLayers,
	    view: view
	  });
	  onMount(function () {
	    map.setTarget("overview-switcher-map");
	    view.setCenter(DEFAULT_CENTER);
	    view.setZoom(OVERVIEW_SWITCHER_ZOOM);
	    baseLayers[nextIndex].setVisible(true);
	    $$invalidate(0, label = baseLayers[nextIndex].get("label"));
	    mainMap.on("moveend", function () {
	      view.animate({
	        center: mainMap.getCenter(),
	        duration: 50
	      });
	    });
	    mainMap.baseLayers.forEach(function (layer) {
	      layer.on("change:visible", function (event) {
	        if (!event.target.getVisible()) {
	          return;
	        }

	        var baseLayerLabel = event.target.get("label");
	        baseLayers.forEach(function (layer, i) {
	          var visible = layer.get("label") === baseLayerLabel;
	          layer.setVisible(false);

	          if (visible) {
	            activeIndex = i;
	            nextIndex = (i + 1) % mainMap.baseLayers.length;
	          }
	        });
	        baseLayers[nextIndex].setVisible(true);
	        $$invalidate(0, label = baseLayers[nextIndex].get("shortLabel"));
	      });
	    });
	  });

	  function handleClick() {
	    activeIndex = (activeIndex + 1) % baseLayers.length;
	    mainMap.setBaseLayer(mainMap.baseLayers[activeIndex]);
	  }

	  function contextmenu_handler(event) {
	    bubble($$self, event);
	  }

	  $$self.$capture_state = function () {
	    return {};
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("label" in $$props) $$invalidate(0, label = $$props.label);
	    if ("activeIndex" in $$props) activeIndex = $$props.activeIndex;
	    if ("nextIndex" in $$props) nextIndex = $$props.nextIndex;
	  };

	  return [label, handleClick, activeIndex, nextIndex, mainMap, baseLayers, view, map, contextmenu_handler];
	}

	var OverviewSwitcher =
	/*#__PURE__*/
	function (_SvelteComponentDev) {
	  inherits(OverviewSwitcher, _SvelteComponentDev);

	  function OverviewSwitcher(options) {
	    var _this;

	    classCallCheck(this, OverviewSwitcher);

	    _this = possibleConstructorReturn(this, getPrototypeOf(OverviewSwitcher).call(this, options));
	    init(assertThisInitialized(_this), options, instance$1, create_fragment$1, not_equal, {});
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "OverviewSwitcher",
	      options: options,
	      id: create_fragment$1.name
	    });
	    return _this;
	  }

	  return OverviewSwitcher;
	}(SvelteComponentDev);

	var Error_1 = globals.Error;
	var file$2 = "src/map/Map.svelte"; // (216:8) {#if $currentLocation.position}

	function create_if_block$1(ctx) {
	  var button;
	  var dispose;
	  var block = {
	    c: function create() {
	      button = element("button");
	      button.textContent = "my_location";
	      attr_dev(button, "title", "My location");
	      attr_dev(button, "class", "material-icons svelte-1cuqhjy");
	      add_location(button, file$2, 216, 12, 5549);
	      dispose = listen_dev(button, "click",
	      /*handleMyLocation*/
	      ctx[5], false, false, false);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, button, anchor);
	    },
	    p: noop,
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(button);
	      dispose();
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block$1.name,
	    type: "if",
	    source: "(216:8) {#if $currentLocation.position}",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$2(ctx) {
	  var div1;
	  var updating_open;
	  var t0;
	  var t1;
	  var div0;
	  var t2;
	  var button0;
	  var t4;
	  var button1;
	  var t6;
	  var button2;
	  var current;
	  var dispose;

	  function contextmenu_open_binding(value) {
	    /*contextmenu_open_binding*/
	    ctx[14].call(null, value);
	  }

	  var contextmenu_props = {
	    pixel:
	    /*contextMenuPixel*/
	    ctx[2]
	  };

	  if (
	  /*contextMenuOpen*/
	  ctx[1] !== void 0) {
	    contextmenu_props.open =
	    /*contextMenuOpen*/
	    ctx[1];
	  }

	  var contextmenu = new ContextMenu({
	    props: contextmenu_props,
	    $$inline: true
	  });
	  binding_callbacks.push(function () {
	    return bind$1(contextmenu, "open", contextmenu_open_binding);
	  });
	  var overviewswitcher = new OverviewSwitcher({
	    $$inline: true
	  });
	  var if_block =
	  /*$currentLocation*/
	  ctx[3].position && create_if_block$1(ctx);
	  var block = {
	    c: function create() {
	      div1 = element("div");
	      create_component(contextmenu.$$.fragment);
	      t0 = space();
	      create_component(overviewswitcher.$$.fragment);
	      t1 = space();
	      div0 = element("div");
	      if (if_block) if_block.c();
	      t2 = space();
	      button0 = element("button");
	      button0.textContent = "public";
	      t4 = space();
	      button1 = element("button");
	      button1.textContent = "add";
	      t6 = space();
	      button2 = element("button");
	      button2.textContent = "remove";
	      attr_dev(button0, "title", "Show coverage area");
	      attr_dev(button0, "class", "material-icons svelte-1cuqhjy");
	      add_location(button0, file$2, 220, 8, 5703);
	      attr_dev(button1, "title", "Zoom in");
	      attr_dev(button1, "class", "material-icons svelte-1cuqhjy");
	      add_location(button1, file$2, 223, 8, 5843);
	      attr_dev(button2, "title", "Zoom out");
	      attr_dev(button2, "class", "material-icons svelte-1cuqhjy");
	      add_location(button2, file$2, 224, 8, 5937);
	      attr_dev(div0, "class", "controls bottom right column svelte-1cuqhjy");
	      add_location(div0, file$2, 214, 4, 5423);
	      attr_dev(div1, "id", "map");
	      attr_dev(div1, "class", "svelte-1cuqhjy");
	      add_location(div1, file$2, 209, 0, 5231);
	      dispose = [listen_dev(button0, "click",
	      /*handleZoomToFullExtent*/
	      ctx[6], false, false, false), listen_dev(button1, "click",
	      /*handleZoomIn*/
	      ctx[7], false, false, false), listen_dev(button2, "click",
	      /*handleZoomOut*/
	      ctx[8], false, false, false), listen_dev(div0, "contextmenu", stop_propagation(
	      /*contextmenu_handler*/
	      ctx[13]), false, false, true), listen_dev(div1, "contextmenu", prevent_default(
	      /*handleContextMenu*/
	      ctx[4]), false, true, false)];
	    },
	    l: function claim(nodes) {
	      throw new Error_1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, div1, anchor);
	      mount_component(contextmenu, div1, null);
	      append_dev(div1, t0);
	      mount_component(overviewswitcher, div1, null);
	      append_dev(div1, t1);
	      append_dev(div1, div0);
	      if (if_block) if_block.m(div0, null);
	      append_dev(div0, t2);
	      append_dev(div0, button0);
	      append_dev(div0, t4);
	      append_dev(div0, button1);
	      append_dev(div0, t6);
	      append_dev(div0, button2);
	      /*div1_binding*/

	      ctx[15](div1);
	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      var contextmenu_changes = {};
	      if (dirty &
	      /*contextMenuPixel*/
	      4) contextmenu_changes.pixel =
	      /*contextMenuPixel*/
	      ctx[2];

	      if (!updating_open && dirty &
	      /*contextMenuOpen*/
	      2) {
	        updating_open = true;
	        contextmenu_changes.open =
	        /*contextMenuOpen*/
	        ctx[1];
	        add_flush_callback(function () {
	          return updating_open = false;
	        });
	      }

	      contextmenu.$set(contextmenu_changes);

	      if (
	      /*$currentLocation*/
	      ctx[3].position) {
	        if (if_block) {
	          if_block.p(ctx, dirty);
	        } else {
	          if_block = create_if_block$1(ctx);
	          if_block.c();
	          if_block.m(div0, t2);
	        }
	      } else if (if_block) {
	        if_block.d(1);
	        if_block = null;
	      }
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(contextmenu.$$.fragment, local);
	      transition_in(overviewswitcher.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(contextmenu.$$.fragment, local);
	      transition_out(overviewswitcher.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(div1);
	      destroy_component(contextmenu);
	      destroy_component(overviewswitcher);
	      if (if_block) if_block.d();
	      /*div1_binding*/

	      ctx[15](null);
	      run_all(dispose);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$2.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$2($$self, $$props, $$invalidate) {
	  var $currentLocation;
	  validate_store(currentLocation, "currentLocation");
	  component_subscribe($$self, currentLocation, function ($$value) {
	    return $$invalidate(3, $currentLocation = $$value);
	  });
	  var map = getContext("map");
	  var mapElement;
	  var contextMenuOpen = false;
	  var contextMenuPixel = [0, 0];
	  var contextMenuClosedViaPointerDown = false;
	  onMount(function () {
	    map.setTarget(mapElement);
	    map.setDefaultCenter().then(function () {
	      currentLocation.subscribe(function (locationData) {
	        map.showMyLocation(locationData);
	      });
	      var startTime = new Date().getTime();
	      var unsubscribe = currentLocation.subscribe(function _callee(locationData) {
	        var now, _DEFAULT_CENTER, defaultX, defaultY, _map$getCenter, _map$getCenter2, x, y, moved;

	        return regenerator.async(function _callee$(_context) {
	          while (1) {
	            switch (_context.prev = _context.next) {
	              case 0:
	                now = new Date().getTime();
	                _DEFAULT_CENTER = slicedToArray(DEFAULT_CENTER, 2), defaultX = _DEFAULT_CENTER[0], defaultY = _DEFAULT_CENTER[1];
	                _map$getCenter = map.getCenter(), _map$getCenter2 = slicedToArray(_map$getCenter, 2), x = _map$getCenter2[0], y = _map$getCenter2[1];
	                moved = defaultX !== x || defaultY !== y;

	                if (!(moved || now - startTime > 5000)) {
	                  _context.next = 10;
	                  break;
	                }

	                _context.next = 7;
	                return regenerator.awrap(tick());

	              case 7:
	                unsubscribe();
	                _context.next = 11;
	                break;

	              case 10:
	                if (locationData.position) {
	                  map.setCenter(locationData.position, STREET_LEVEL_ZOOM);
	                }

	              case 11:
	              case "end":
	                return _context.stop();
	            }
	          }
	        });
	      });
	    });
	    new hammer.Manager(mapElement, {
	      recognizers: [[hammer.Press, {
	        time: 500
	      }]]
	    }).on("press", function (event) {
	      handleContextMenu(event);
	    });
	    document.body.addEventListener("pointerdown", function (event) {
	      if (event.target.classList.contains("map-context-menu-item")) {
	        event.stopPropagation();
	        return false;
	      }

	      if (contextMenuOpen) {
	        closeContextMenu();
	        contextMenuClosedViaPointerDown = true;
	      }
	    }, true);
	    document.body.addEventListener("click", function (event) {
	      if (contextMenuClosedViaPointerDown) {
	        event.preventDefault();
	        event.stopPropagation();
	        contextMenuClosedViaPointerDown = false;
	      }
	    }, true);
	  });

	  function handleContextMenu(event) {
	    var x, y;

	    switch (event.type) {
	      case "press":
	        var _ref3 = [event.center.x, event.center.y];
	        x = _ref3[0];
	        y = _ref3[1];
	        break;

	      case "contextmenu":
	        var _ref4 = [event.pageX, event.pageY];
	        x = _ref4[0];
	        y = _ref4[1];
	        break;

	      default:
	        throw new Error("Unhandled context menu event: ".concat(event.type));
	    }

	    openContextMenu(x, y);
	  }

	  function openContextMenu(x, y) {
	    $$invalidate(1, contextMenuOpen = true);
	    $$invalidate(2, contextMenuPixel = [x, y]);
	  }

	  function closeContextMenu() {
	    $$invalidate(1, contextMenuOpen = false);
	  }

	  function handleMyLocation() {
	    map.setCenter($currentLocation.position);
	    map.zoomToStreetLevel();
	  }

	  function handleZoomToFullExtent() {
	    map.zoomToFullExtent();
	  }

	  function handleZoomIn() {
	    map.zoomIn();
	  }

	  function handleZoomOut() {
	    map.zoomOut();
	  }

	  function contextmenu_handler(event) {
	    bubble($$self, event);
	  }

	  function contextmenu_open_binding(value) {
	    contextMenuOpen = value;
	    $$invalidate(1, contextMenuOpen);
	  }

	  function div1_binding($$value) {
	    binding_callbacks[$$value ? "unshift" : "push"](function () {
	      $$invalidate(0, mapElement = $$value);
	    });
	  }

	  $$self.$capture_state = function () {
	    return {};
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("mapElement" in $$props) $$invalidate(0, mapElement = $$props.mapElement);
	    if ("contextMenuOpen" in $$props) $$invalidate(1, contextMenuOpen = $$props.contextMenuOpen);
	    if ("contextMenuPixel" in $$props) $$invalidate(2, contextMenuPixel = $$props.contextMenuPixel);
	    if ("contextMenuClosedViaPointerDown" in $$props) contextMenuClosedViaPointerDown = $$props.contextMenuClosedViaPointerDown;
	    if ("$currentLocation" in $$props) currentLocation.set($currentLocation = $$props.$currentLocation);
	  };

	  return [mapElement, contextMenuOpen, contextMenuPixel, $currentLocation, handleContextMenu, handleMyLocation, handleZoomToFullExtent, handleZoomIn, handleZoomOut, contextMenuClosedViaPointerDown, map, openContextMenu, closeContextMenu, contextmenu_handler, contextmenu_open_binding, div1_binding];
	}

	var Map$2 =
	/*#__PURE__*/
	function (_SvelteComponentDev) {
	  inherits(Map, _SvelteComponentDev);

	  function Map(options) {
	    var _this;

	    classCallCheck(this, Map);

	    _this = possibleConstructorReturn(this, getPrototypeOf(Map).call(this, options));
	    init(assertThisInitialized(_this), options, instance$2, create_fragment$2, safe_not_equal, {});
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "Map",
	      options: options,
	      id: create_fragment$2.name
	    });
	    return _this;
	  }

	  return Map;
	}(SvelteComponentDev);

	/**
	 * @module ol/format/Feature
	 */
	/**
	 * @typedef {Object} ReadOptions
	 * @property {import("../proj.js").ProjectionLike} [dataProjection] Projection of the data we are reading.
	 * If not provided, the projection will be derived from the data (where possible) or
	 * the `dataProjection` of the format is assigned (where set). If the projection
	 * can not be derived from the data and if no `dataProjection` is set for a format,
	 * the features will not be reprojected.
	 * @property {import("../extent.js").Extent} [extent] Tile extent in map units of the tile being read.
	 * This is only required when reading data with tile pixels as geometry units. When configured,
	 * a `dataProjection` with `TILE_PIXELS` as `units` and the tile's pixel extent as `extent` needs to be
	 * provided.
	 * @property {import("../proj.js").ProjectionLike} [featureProjection] Projection of the feature geometries
	 * created by the format reader. If not provided, features will be returned in the
	 * `dataProjection`.
	 */
	/**
	 * @typedef {Object} WriteOptions
	 * @property {import("../proj.js").ProjectionLike} [dataProjection] Projection of the data we are writing.
	 * If not provided, the `dataProjection` of the format is assigned (where set).
	 * If no `dataProjection` is set for a format, the features will be returned
	 * in the `featureProjection`.
	 * @property {import("../proj.js").ProjectionLike} [featureProjection] Projection of the feature geometries
	 * that will be serialized by the format writer. If not provided, geometries are assumed
	 * to be in the `dataProjection` if that is set; in other words, they are not transformed.
	 * @property {boolean} [rightHanded] When writing geometries, follow the right-hand
	 * rule for linear ring orientation.  This means that polygons will have counter-clockwise
	 * exterior rings and clockwise interior rings.  By default, coordinates are serialized
	 * as they are provided at construction.  If `true`, the right-hand rule will
	 * be applied.  If `false`, the left-hand rule will be applied (clockwise for
	 * exterior and counter-clockwise for interior rings).  Note that not all
	 * formats support this.  The GeoJSON format does use this property when writing
	 * geometries.
	 * @property {number} [decimals] Maximum number of decimal places for coordinates.
	 * Coordinates are stored internally as floats, but floating-point arithmetic can create
	 * coordinates with a large number of decimal places, not generally wanted on output.
	 * Set a number here to round coordinates. Can also be used to ensure that
	 * coordinates read in can be written back out with the same number of decimals.
	 * Default is no rounding.
	 */
	/**
	 * @classdesc
	 * Abstract base class; normally only used for creating subclasses and not
	 * instantiated in apps.
	 * Base class for feature formats.
	 * {@link module:ol/format/Feature~FeatureFormat} subclasses provide the ability to decode and encode
	 * {@link module:ol/Feature~Feature} objects from a variety of commonly used geospatial
	 * file formats.  See the documentation for each format for more details.
	 *
	 * @abstract
	 * @api
	 */
	var FeatureFormat = /** @class */ (function () {
	    function FeatureFormat() {
	        /**
	         * @protected
	         * @type {import("../proj/Projection.js").default}
	         */
	        this.dataProjection = null;
	        /**
	         * @protected
	         * @type {import("../proj/Projection.js").default}
	         */
	        this.defaultFeatureProjection = null;
	    }
	    /**
	     * Adds the data projection to the read options.
	     * @param {Document|Node|Object|string} source Source.
	     * @param {ReadOptions=} opt_options Options.
	     * @return {ReadOptions|undefined} Options.
	     * @protected
	     */
	    FeatureFormat.prototype.getReadOptions = function (source, opt_options) {
	        var options;
	        if (opt_options) {
	            var dataProjection = opt_options.dataProjection ?
	                get$4(opt_options.dataProjection) : this.readProjection(source);
	            if (opt_options.extent &&
	                dataProjection && dataProjection.getUnits() === Units.TILE_PIXELS) {
	                dataProjection = get$4(dataProjection);
	                dataProjection.setWorldExtent(opt_options.extent);
	            }
	            options = {
	                dataProjection: dataProjection,
	                featureProjection: opt_options.featureProjection
	            };
	        }
	        return this.adaptOptions(options);
	    };
	    /**
	     * Sets the `dataProjection` on the options, if no `dataProjection`
	     * is set.
	     * @param {WriteOptions|ReadOptions|undefined} options
	     *     Options.
	     * @protected
	     * @return {WriteOptions|ReadOptions|undefined}
	     *     Updated options.
	     */
	    FeatureFormat.prototype.adaptOptions = function (options) {
	        return assign$1({
	            dataProjection: this.dataProjection,
	            featureProjection: this.defaultFeatureProjection
	        }, options);
	    };
	    /**
	     * @abstract
	     * @return {import("./FormatType.js").default} Format.
	     */
	    FeatureFormat.prototype.getType = function () {
	        return abstract();
	    };
	    /**
	     * Read a single feature from a source.
	     *
	     * @abstract
	     * @param {Document|Node|Object|string} source Source.
	     * @param {ReadOptions=} opt_options Read options.
	     * @return {import("../Feature.js").FeatureLike} Feature.
	     */
	    FeatureFormat.prototype.readFeature = function (source, opt_options) {
	        return abstract();
	    };
	    /**
	     * Read all features from a source.
	     *
	     * @abstract
	     * @param {Document|Node|ArrayBuffer|Object|string} source Source.
	     * @param {ReadOptions=} opt_options Read options.
	     * @return {Array<import("../Feature.js").FeatureLike>} Features.
	     */
	    FeatureFormat.prototype.readFeatures = function (source, opt_options) {
	        return abstract();
	    };
	    /**
	     * Read a single geometry from a source.
	     *
	     * @abstract
	     * @param {Document|Node|Object|string} source Source.
	     * @param {ReadOptions=} opt_options Read options.
	     * @return {import("../geom/Geometry.js").default} Geometry.
	     */
	    FeatureFormat.prototype.readGeometry = function (source, opt_options) {
	        return abstract();
	    };
	    /**
	     * Read the projection from a source.
	     *
	     * @abstract
	     * @param {Document|Node|Object|string} source Source.
	     * @return {import("../proj/Projection.js").default} Projection.
	     */
	    FeatureFormat.prototype.readProjection = function (source) {
	        return abstract();
	    };
	    /**
	     * Encode a feature in this format.
	     *
	     * @abstract
	     * @param {import("../Feature.js").default} feature Feature.
	     * @param {WriteOptions=} opt_options Write options.
	     * @return {string} Result.
	     */
	    FeatureFormat.prototype.writeFeature = function (feature, opt_options) {
	        return abstract();
	    };
	    /**
	     * Encode an array of features in this format.
	     *
	     * @abstract
	     * @param {Array<import("../Feature.js").default>} features Features.
	     * @param {WriteOptions=} opt_options Write options.
	     * @return {string} Result.
	     */
	    FeatureFormat.prototype.writeFeatures = function (features, opt_options) {
	        return abstract();
	    };
	    /**
	     * Write a single geometry in this format.
	     *
	     * @abstract
	     * @param {import("../geom/Geometry.js").default} geometry Geometry.
	     * @param {WriteOptions=} opt_options Write options.
	     * @return {string} Result.
	     */
	    FeatureFormat.prototype.writeGeometry = function (geometry, opt_options) {
	        return abstract();
	    };
	    return FeatureFormat;
	}());
	/**
	 * @param {import("../geom/Geometry.js").default} geometry Geometry.
	 * @param {boolean} write Set to true for writing, false for reading.
	 * @param {(WriteOptions|ReadOptions)=} opt_options Options.
	 * @return {import("../geom/Geometry.js").default} Transformed geometry.
	 */
	function transformGeometryWithOptions(geometry, write, opt_options) {
	    var featureProjection = opt_options ? get$4(opt_options.featureProjection) : null;
	    var dataProjection = opt_options ? get$4(opt_options.dataProjection) : null;
	    var transformed;
	    if (featureProjection && dataProjection && !equivalent(featureProjection, dataProjection)) {
	        transformed = (write ? geometry.clone() : geometry).transform(write ? featureProjection : dataProjection, write ? dataProjection : featureProjection);
	    }
	    else {
	        transformed = geometry;
	    }
	    if (write && opt_options && /** @type {WriteOptions} */ (opt_options).decimals !== undefined) {
	        var power_1 = Math.pow(10, /** @type {WriteOptions} */ (opt_options).decimals);
	        // if decimals option on write, round each coordinate appropriately
	        /**
	         * @param {Array<number>} coordinates Coordinates.
	         * @return {Array<number>} Transformed coordinates.
	         */
	        var transform = function (coordinates) {
	            for (var i = 0, ii = coordinates.length; i < ii; ++i) {
	                coordinates[i] = Math.round(coordinates[i] * power_1) / power_1;
	            }
	            return coordinates;
	        };
	        if (transformed === geometry) {
	            transformed = geometry.clone();
	        }
	        transformed.applyTransform(transform);
	    }
	    return transformed;
	}

	var __extends$1e = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @classdesc
	 * Abstract base class; normally only used for creating subclasses and not
	 * instantiated in apps.
	 * Base class for JSON feature formats.
	 *
	 * @abstract
	 */
	var JSONFeature = /** @class */ (function (_super) {
	    __extends$1e(JSONFeature, _super);
	    function JSONFeature() {
	        return _super.call(this) || this;
	    }
	    /**
	     * @inheritDoc
	     */
	    JSONFeature.prototype.getType = function () {
	        return FormatType.JSON;
	    };
	    /**
	     * Read a feature.  Only works for a single feature. Use `readFeatures` to
	     * read a feature collection.
	     *
	     * @param {ArrayBuffer|Document|Node|Object|string} source Source.
	     * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
	     * @return {import("../Feature.js").default} Feature.
	     * @api
	     */
	    JSONFeature.prototype.readFeature = function (source, opt_options) {
	        return this.readFeatureFromObject(getObject(source), this.getReadOptions(source, opt_options));
	    };
	    /**
	     * Read all features.  Works with both a single feature and a feature
	     * collection.
	     *
	     * @param {ArrayBuffer|Document|Node|Object|string} source Source.
	     * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
	     * @return {Array<import("../Feature.js").default>} Features.
	     * @api
	     */
	    JSONFeature.prototype.readFeatures = function (source, opt_options) {
	        return this.readFeaturesFromObject(getObject(source), this.getReadOptions(source, opt_options));
	    };
	    /**
	     * @abstract
	     * @param {Object} object Object.
	     * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
	     * @protected
	     * @return {import("../Feature.js").default} Feature.
	     */
	    JSONFeature.prototype.readFeatureFromObject = function (object, opt_options) {
	        return abstract();
	    };
	    /**
	     * @abstract
	     * @param {Object} object Object.
	     * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
	     * @protected
	     * @return {Array<import("../Feature.js").default>} Features.
	     */
	    JSONFeature.prototype.readFeaturesFromObject = function (object, opt_options) {
	        return abstract();
	    };
	    /**
	     * Read a geometry.
	     *
	     * @param {ArrayBuffer|Document|Node|Object|string} source Source.
	     * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
	     * @return {import("../geom/Geometry.js").default} Geometry.
	     * @api
	     */
	    JSONFeature.prototype.readGeometry = function (source, opt_options) {
	        return this.readGeometryFromObject(getObject(source), this.getReadOptions(source, opt_options));
	    };
	    /**
	     * @abstract
	     * @param {Object} object Object.
	     * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
	     * @protected
	     * @return {import("../geom/Geometry.js").default} Geometry.
	     */
	    JSONFeature.prototype.readGeometryFromObject = function (object, opt_options) {
	        return abstract();
	    };
	    /**
	     * Read the projection.
	     *
	     * @param {ArrayBuffer|Document|Node|Object|string} source Source.
	     * @return {import("../proj/Projection.js").default} Projection.
	     * @api
	     */
	    JSONFeature.prototype.readProjection = function (source) {
	        return this.readProjectionFromObject(getObject(source));
	    };
	    /**
	     * @abstract
	     * @param {Object} object Object.
	     * @protected
	     * @return {import("../proj/Projection.js").default} Projection.
	     */
	    JSONFeature.prototype.readProjectionFromObject = function (object) {
	        return abstract();
	    };
	    /**
	     * Encode a feature as string.
	     *
	     * @param {import("../Feature.js").default} feature Feature.
	     * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
	     * @return {string} Encoded feature.
	     * @api
	     */
	    JSONFeature.prototype.writeFeature = function (feature, opt_options) {
	        return JSON.stringify(this.writeFeatureObject(feature, opt_options));
	    };
	    /**
	     * @abstract
	     * @param {import("../Feature.js").default} feature Feature.
	     * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
	     * @return {Object} Object.
	     */
	    JSONFeature.prototype.writeFeatureObject = function (feature, opt_options) {
	        return abstract();
	    };
	    /**
	     * Encode an array of features as string.
	     *
	     * @param {Array<import("../Feature.js").default>} features Features.
	     * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
	     * @return {string} Encoded features.
	     * @api
	     */
	    JSONFeature.prototype.writeFeatures = function (features, opt_options) {
	        return JSON.stringify(this.writeFeaturesObject(features, opt_options));
	    };
	    /**
	     * @abstract
	     * @param {Array<import("../Feature.js").default>} features Features.
	     * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
	     * @return {Object} Object.
	     */
	    JSONFeature.prototype.writeFeaturesObject = function (features, opt_options) {
	        return abstract();
	    };
	    /**
	     * Encode a geometry as string.
	     *
	     * @param {import("../geom/Geometry.js").default} geometry Geometry.
	     * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
	     * @return {string} Encoded geometry.
	     * @api
	     */
	    JSONFeature.prototype.writeGeometry = function (geometry, opt_options) {
	        return JSON.stringify(this.writeGeometryObject(geometry, opt_options));
	    };
	    /**
	     * @abstract
	     * @param {import("../geom/Geometry.js").default} geometry Geometry.
	     * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
	     * @return {Object} Object.
	     */
	    JSONFeature.prototype.writeGeometryObject = function (geometry, opt_options) {
	        return abstract();
	    };
	    return JSONFeature;
	}(FeatureFormat));
	/**
	 * @param {Document|Node|Object|string} source Source.
	 * @return {Object} Object.
	 */
	function getObject(source) {
	    if (typeof source === 'string') {
	        var object = JSON.parse(source);
	        return object ? /** @type {Object} */ (object) : null;
	    }
	    else if (source !== null) {
	        return source;
	    }
	    else {
	        return null;
	    }
	}

	var __extends$1f = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @classdesc
	 * An array of {@link module:ol/geom/Geometry} objects.
	 *
	 * @api
	 */
	var GeometryCollection = /** @class */ (function (_super) {
	    __extends$1f(GeometryCollection, _super);
	    /**
	     * @param {Array<Geometry>=} opt_geometries Geometries.
	     */
	    function GeometryCollection(opt_geometries) {
	        var _this = _super.call(this) || this;
	        /**
	         * @private
	         * @type {Array<Geometry>}
	         */
	        _this.geometries_ = opt_geometries ? opt_geometries : null;
	        /**
	         * @type {Array<import("../events.js").EventsKey>}
	         */
	        _this.changeEventsKeys_ = [];
	        _this.listenGeometriesChange_();
	        return _this;
	    }
	    /**
	     * @private
	     */
	    GeometryCollection.prototype.unlistenGeometriesChange_ = function () {
	        this.changeEventsKeys_.forEach(unlistenByKey);
	        this.changeEventsKeys_.length = 0;
	    };
	    /**
	     * @private
	     */
	    GeometryCollection.prototype.listenGeometriesChange_ = function () {
	        if (!this.geometries_) {
	            return;
	        }
	        for (var i = 0, ii = this.geometries_.length; i < ii; ++i) {
	            this.changeEventsKeys_.push(listen$1(this.geometries_[i], EventType.CHANGE, this.changed, this));
	        }
	    };
	    /**
	     * Make a complete copy of the geometry.
	     * @return {!GeometryCollection} Clone.
	     * @override
	     * @api
	     */
	    GeometryCollection.prototype.clone = function () {
	        var geometryCollection = new GeometryCollection(null);
	        geometryCollection.setGeometries(this.geometries_);
	        return geometryCollection;
	    };
	    /**
	     * @inheritDoc
	     */
	    GeometryCollection.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {
	        if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {
	            return minSquaredDistance;
	        }
	        var geometries = this.geometries_;
	        for (var i = 0, ii = geometries.length; i < ii; ++i) {
	            minSquaredDistance = geometries[i].closestPointXY(x, y, closestPoint, minSquaredDistance);
	        }
	        return minSquaredDistance;
	    };
	    /**
	     * @inheritDoc
	     */
	    GeometryCollection.prototype.containsXY = function (x, y) {
	        var geometries = this.geometries_;
	        for (var i = 0, ii = geometries.length; i < ii; ++i) {
	            if (geometries[i].containsXY(x, y)) {
	                return true;
	            }
	        }
	        return false;
	    };
	    /**
	     * @inheritDoc
	     */
	    GeometryCollection.prototype.computeExtent = function (extent) {
	        createOrUpdateEmpty(extent);
	        var geometries = this.geometries_;
	        for (var i = 0, ii = geometries.length; i < ii; ++i) {
	            extend(extent, geometries[i].getExtent());
	        }
	        return extent;
	    };
	    /**
	     * Return the geometries that make up this geometry collection.
	     * @return {Array<Geometry>} Geometries.
	     * @api
	     */
	    GeometryCollection.prototype.getGeometries = function () {
	        return cloneGeometries(this.geometries_);
	    };
	    /**
	     * @return {Array<Geometry>} Geometries.
	     */
	    GeometryCollection.prototype.getGeometriesArray = function () {
	        return this.geometries_;
	    };
	    /**
	     * @inheritDoc
	     */
	    GeometryCollection.prototype.getSimplifiedGeometry = function (squaredTolerance) {
	        if (this.simplifiedGeometryRevision !== this.getRevision()) {
	            this.simplifiedGeometryMaxMinSquaredTolerance = 0;
	            this.simplifiedGeometryRevision = this.getRevision();
	        }
	        if (squaredTolerance < 0 ||
	            (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&
	                squaredTolerance < this.simplifiedGeometryMaxMinSquaredTolerance)) {
	            return this;
	        }
	        var simplifiedGeometries = [];
	        var geometries = this.geometries_;
	        var simplified = false;
	        for (var i = 0, ii = geometries.length; i < ii; ++i) {
	            var geometry = geometries[i];
	            var simplifiedGeometry = geometry.getSimplifiedGeometry(squaredTolerance);
	            simplifiedGeometries.push(simplifiedGeometry);
	            if (simplifiedGeometry !== geometry) {
	                simplified = true;
	            }
	        }
	        if (simplified) {
	            var simplifiedGeometryCollection = new GeometryCollection(null);
	            simplifiedGeometryCollection.setGeometriesArray(simplifiedGeometries);
	            return simplifiedGeometryCollection;
	        }
	        else {
	            this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;
	            return this;
	        }
	    };
	    /**
	     * @inheritDoc
	     * @api
	     */
	    GeometryCollection.prototype.getType = function () {
	        return GeometryType.GEOMETRY_COLLECTION;
	    };
	    /**
	     * @inheritDoc
	     * @api
	     */
	    GeometryCollection.prototype.intersectsExtent = function (extent) {
	        var geometries = this.geometries_;
	        for (var i = 0, ii = geometries.length; i < ii; ++i) {
	            if (geometries[i].intersectsExtent(extent)) {
	                return true;
	            }
	        }
	        return false;
	    };
	    /**
	     * @return {boolean} Is empty.
	     */
	    GeometryCollection.prototype.isEmpty = function () {
	        return this.geometries_.length === 0;
	    };
	    /**
	     * @inheritDoc
	     * @api
	     */
	    GeometryCollection.prototype.rotate = function (angle, anchor) {
	        var geometries = this.geometries_;
	        for (var i = 0, ii = geometries.length; i < ii; ++i) {
	            geometries[i].rotate(angle, anchor);
	        }
	        this.changed();
	    };
	    /**
	     * @inheritDoc
	     * @api
	     */
	    GeometryCollection.prototype.scale = function (sx, opt_sy, opt_anchor) {
	        var anchor = opt_anchor;
	        if (!anchor) {
	            anchor = getCenter(this.getExtent());
	        }
	        var geometries = this.geometries_;
	        for (var i = 0, ii = geometries.length; i < ii; ++i) {
	            geometries[i].scale(sx, opt_sy, anchor);
	        }
	        this.changed();
	    };
	    /**
	     * Set the geometries that make up this geometry collection.
	     * @param {Array<Geometry>} geometries Geometries.
	     * @api
	     */
	    GeometryCollection.prototype.setGeometries = function (geometries) {
	        this.setGeometriesArray(cloneGeometries(geometries));
	    };
	    /**
	     * @param {Array<Geometry>} geometries Geometries.
	     */
	    GeometryCollection.prototype.setGeometriesArray = function (geometries) {
	        this.unlistenGeometriesChange_();
	        this.geometries_ = geometries;
	        this.listenGeometriesChange_();
	        this.changed();
	    };
	    /**
	     * @inheritDoc
	     * @api
	     */
	    GeometryCollection.prototype.applyTransform = function (transformFn) {
	        var geometries = this.geometries_;
	        for (var i = 0, ii = geometries.length; i < ii; ++i) {
	            geometries[i].applyTransform(transformFn);
	        }
	        this.changed();
	    };
	    /**
	     * @inheritDoc
	     * @api
	     */
	    GeometryCollection.prototype.translate = function (deltaX, deltaY) {
	        var geometries = this.geometries_;
	        for (var i = 0, ii = geometries.length; i < ii; ++i) {
	            geometries[i].translate(deltaX, deltaY);
	        }
	        this.changed();
	    };
	    /**
	     * @inheritDoc
	     */
	    GeometryCollection.prototype.disposeInternal = function () {
	        this.unlistenGeometriesChange_();
	        _super.prototype.disposeInternal.call(this);
	    };
	    return GeometryCollection;
	}(Geometry));
	/**
	 * @param {Array<Geometry>} geometries Geometries.
	 * @return {Array<Geometry>} Cloned geometries.
	 */
	function cloneGeometries(geometries) {
	    var clonedGeometries = [];
	    for (var i = 0, ii = geometries.length; i < ii; ++i) {
	        clonedGeometries.push(geometries[i].clone());
	    }
	    return clonedGeometries;
	}

	/**
	 * @module ol/format/GeoJSON
	 */
	var __extends$1g = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @typedef {import("geojson").GeoJSON} GeoJSONObject
	 * @typedef {import("geojson").Feature} GeoJSONFeature
	 * @typedef {import("geojson").FeatureCollection} GeoJSONFeatureCollection
	 * @typedef {import("geojson").Geometry} GeoJSONGeometry
	 * @typedef {import("geojson").Point} GeoJSONPoint
	 * @typedef {import("geojson").LineString} GeoJSONLineString
	 * @typedef {import("geojson").Polygon} GeoJSONPolygon
	 * @typedef {import("geojson").MultiPoint} GeoJSONMultiPoint
	 * @typedef {import("geojson").MultiLineString} GeoJSONMultiLineString
	 * @typedef {import("geojson").MultiPolygon} GeoJSONMultiPolygon
	 * @typedef {import("geojson").GeometryCollection} GeoJSONGeometryCollection
	 */
	/**
	 * @typedef {Object} Options
	 * @property {import("../proj.js").ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.
	 * @property {import("../proj.js").ProjectionLike} [featureProjection] Projection for features read or
	 * written by the format.  Options passed to read or write methods will take precedence.
	 * @property {string} [geometryName] Geometry name to use when creating features.
	 * @property {boolean} [extractGeometryName=false] Certain GeoJSON providers include
	 * the geometry_name field in the feature GeoJSON. If set to `true` the GeoJSON reader
	 * will look for that field to set the geometry name. If both this field is set to `true`
	 * and a `geometryName` is provided, the `geometryName` will take precedence.
	 */
	/**
	 * @classdesc
	 * Feature format for reading and writing data in the GeoJSON format.
	 *
	  * @api
	 */
	var GeoJSON = /** @class */ (function (_super) {
	    __extends$1g(GeoJSON, _super);
	    /**
	     * @param {Options=} opt_options Options.
	     */
	    function GeoJSON(opt_options) {
	        var _this = this;
	        var options = opt_options ? opt_options : {};
	        _this = _super.call(this) || this;
	        /**
	         * @inheritDoc
	         */
	        _this.dataProjection = get$4(options.dataProjection ?
	            options.dataProjection : 'EPSG:4326');
	        if (options.featureProjection) {
	            _this.defaultFeatureProjection = get$4(options.featureProjection);
	        }
	        /**
	         * Name of the geometry attribute for features.
	         * @type {string|undefined}
	         * @private
	         */
	        _this.geometryName_ = options.geometryName;
	        /**
	         * Look for the geometry name in the feature GeoJSON
	         * @type {boolean|undefined}
	         * @private
	         */
	        _this.extractGeometryName_ = options.extractGeometryName;
	        return _this;
	    }
	    /**
	     * @inheritDoc
	     */
	    GeoJSON.prototype.readFeatureFromObject = function (object, opt_options) {
	        /**
	         * @type {GeoJSONFeature}
	         */
	        var geoJSONFeature = null;
	        if (object['type'] === 'Feature') {
	            geoJSONFeature = /** @type {GeoJSONFeature} */ (object);
	        }
	        else {
	            geoJSONFeature = {
	                'type': 'Feature',
	                'geometry': /** @type {GeoJSONGeometry} */ (object),
	                'properties': null
	            };
	        }
	        var geometry = readGeometry(geoJSONFeature['geometry'], opt_options);
	        var feature = new Feature();
	        if (this.geometryName_) {
	            feature.setGeometryName(this.geometryName_);
	        }
	        else if (this.extractGeometryName_ && 'geometry_name' in geoJSONFeature !== undefined) {
	            feature.setGeometryName(geoJSONFeature['geometry_name']);
	        }
	        feature.setGeometry(geometry);
	        if ('id' in geoJSONFeature) {
	            feature.setId(geoJSONFeature['id']);
	        }
	        if (geoJSONFeature['properties']) {
	            feature.setProperties(geoJSONFeature['properties'], true);
	        }
	        return feature;
	    };
	    /**
	     * @inheritDoc
	     */
	    GeoJSON.prototype.readFeaturesFromObject = function (object, opt_options) {
	        var geoJSONObject = /** @type {GeoJSONObject} */ (object);
	        /** @type {Array<import("../Feature.js").default>} */
	        var features = null;
	        if (geoJSONObject['type'] === 'FeatureCollection') {
	            var geoJSONFeatureCollection = /** @type {GeoJSONFeatureCollection} */ (object);
	            features = [];
	            var geoJSONFeatures = geoJSONFeatureCollection['features'];
	            for (var i = 0, ii = geoJSONFeatures.length; i < ii; ++i) {
	                features.push(this.readFeatureFromObject(geoJSONFeatures[i], opt_options));
	            }
	        }
	        else {
	            features = [this.readFeatureFromObject(object, opt_options)];
	        }
	        return features;
	    };
	    /**
	     * @inheritDoc
	     */
	    GeoJSON.prototype.readGeometryFromObject = function (object, opt_options) {
	        return readGeometry(/** @type {GeoJSONGeometry} */ (object), opt_options);
	    };
	    /**
	     * @inheritDoc
	     */
	    GeoJSON.prototype.readProjectionFromObject = function (object) {
	        var crs = object['crs'];
	        var projection;
	        if (crs) {
	            if (crs['type'] == 'name') {
	                projection = get$4(crs['properties']['name']);
	            }
	            else {
	                assert(false, 36); // Unknown SRS type
	            }
	        }
	        else {
	            projection = this.dataProjection;
	        }
	        return (
	        /** @type {import("../proj/Projection.js").default} */ (projection));
	    };
	    /**
	     * Encode a feature as a GeoJSON Feature object.
	     *
	     * @param {import("../Feature.js").default} feature Feature.
	     * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
	     * @return {GeoJSONFeature} Object.
	     * @override
	     * @api
	     */
	    GeoJSON.prototype.writeFeatureObject = function (feature, opt_options) {
	        opt_options = this.adaptOptions(opt_options);
	        /** @type {GeoJSONFeature} */
	        var object = {
	            'type': 'Feature',
	            geometry: null,
	            properties: null
	        };
	        var id = feature.getId();
	        if (id !== undefined) {
	            object.id = id;
	        }
	        var geometry = feature.getGeometry();
	        if (geometry) {
	            object.geometry = writeGeometry(geometry, opt_options);
	        }
	        var properties = feature.getProperties();
	        delete properties[feature.getGeometryName()];
	        if (!isEmpty$1(properties)) {
	            object.properties = properties;
	        }
	        return object;
	    };
	    /**
	     * Encode an array of features as a GeoJSON object.
	     *
	     * @param {Array<import("../Feature.js").default>} features Features.
	     * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
	     * @return {GeoJSONFeatureCollection} GeoJSON Object.
	     * @override
	     * @api
	     */
	    GeoJSON.prototype.writeFeaturesObject = function (features, opt_options) {
	        opt_options = this.adaptOptions(opt_options);
	        var objects = [];
	        for (var i = 0, ii = features.length; i < ii; ++i) {
	            objects.push(this.writeFeatureObject(features[i], opt_options));
	        }
	        return {
	            type: 'FeatureCollection',
	            features: objects
	        };
	    };
	    /**
	     * Encode a geometry as a GeoJSON object.
	     *
	     * @param {import("../geom/Geometry.js").default} geometry Geometry.
	     * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
	     * @return {GeoJSONGeometry|GeoJSONGeometryCollection} Object.
	     * @override
	     * @api
	     */
	    GeoJSON.prototype.writeGeometryObject = function (geometry, opt_options) {
	        return writeGeometry(geometry, this.adaptOptions(opt_options));
	    };
	    return GeoJSON;
	}(JSONFeature));
	/**
	 * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.
	 * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
	 * @return {import("../geom/Geometry.js").default} Geometry.
	 */
	function readGeometry(object, opt_options) {
	    if (!object) {
	        return null;
	    }
	    /**
	     * @type {import("../geom/Geometry.js").default}
	     */
	    var geometry;
	    switch (object['type']) {
	        case GeometryType.POINT: {
	            geometry = readPointGeometry(/** @type {GeoJSONPoint} */ (object));
	            break;
	        }
	        case GeometryType.LINE_STRING: {
	            geometry = readLineStringGeometry(/** @type {GeoJSONLineString} */ (object));
	            break;
	        }
	        case GeometryType.POLYGON: {
	            geometry = readPolygonGeometry(/** @type {GeoJSONPolygon} */ (object));
	            break;
	        }
	        case GeometryType.MULTI_POINT: {
	            geometry = readMultiPointGeometry(/** @type {GeoJSONMultiPoint} */ (object));
	            break;
	        }
	        case GeometryType.MULTI_LINE_STRING: {
	            geometry = readMultiLineStringGeometry(/** @type {GeoJSONMultiLineString} */ (object));
	            break;
	        }
	        case GeometryType.MULTI_POLYGON: {
	            geometry = readMultiPolygonGeometry(/** @type {GeoJSONMultiPolygon} */ (object));
	            break;
	        }
	        case GeometryType.GEOMETRY_COLLECTION: {
	            geometry = readGeometryCollectionGeometry(/** @type {GeoJSONGeometryCollection} */ (object));
	            break;
	        }
	        default: {
	            throw new Error('Unsupported GeoJSON type: ' + object.type);
	        }
	    }
	    return transformGeometryWithOptions(geometry, false, opt_options);
	}
	/**
	 * @param {GeoJSONGeometryCollection} object Object.
	 * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
	 * @return {GeometryCollection} Geometry collection.
	 */
	function readGeometryCollectionGeometry(object, opt_options) {
	    var geometries = object['geometries'].map(
	    /**
	     * @param {GeoJSONGeometry} geometry Geometry.
	     * @return {import("../geom/Geometry.js").default} geometry Geometry.
	     */
	    function (geometry) {
	        return readGeometry(geometry, opt_options);
	    });
	    return new GeometryCollection(geometries);
	}
	/**
	 * @param {GeoJSONPoint} object Object.
	 * @return {Point} Point.
	 */
	function readPointGeometry(object) {
	    return new Point(object['coordinates']);
	}
	/**
	 * @param {GeoJSONLineString} object Object.
	 * @return {LineString} LineString.
	 */
	function readLineStringGeometry(object) {
	    return new LineString(object['coordinates']);
	}
	/**
	 * @param {GeoJSONMultiLineString} object Object.
	 * @return {MultiLineString} MultiLineString.
	 */
	function readMultiLineStringGeometry(object) {
	    return new MultiLineString(object['coordinates']);
	}
	/**
	 * @param {GeoJSONMultiPoint} object Object.
	 * @return {MultiPoint} MultiPoint.
	 */
	function readMultiPointGeometry(object) {
	    return new MultiPoint(object['coordinates']);
	}
	/**
	 * @param {GeoJSONMultiPolygon} object Object.
	 * @return {MultiPolygon} MultiPolygon.
	 */
	function readMultiPolygonGeometry(object) {
	    return new MultiPolygon(object['coordinates']);
	}
	/**
	 * @param {GeoJSONPolygon} object Object.
	 * @return {Polygon} Polygon.
	 */
	function readPolygonGeometry(object) {
	    return new Polygon(object['coordinates']);
	}
	/**
	 * @param {import("../geom/Geometry.js").default} geometry Geometry.
	 * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
	 * @return {GeoJSONGeometry} GeoJSON geometry.
	 */
	function writeGeometry(geometry, opt_options) {
	    geometry = transformGeometryWithOptions(geometry, true, opt_options);
	    var type = geometry.getType();
	    /** @type {GeoJSONGeometry} */
	    var geoJSON;
	    switch (type) {
	        case GeometryType.POINT: {
	            geoJSON = writePointGeometry(/** @type {Point} */ (geometry));
	            break;
	        }
	        case GeometryType.LINE_STRING: {
	            geoJSON = writeLineStringGeometry(/** @type {LineString} */ (geometry));
	            break;
	        }
	        case GeometryType.POLYGON: {
	            geoJSON = writePolygonGeometry(/** @type {Polygon} */ (geometry), opt_options);
	            break;
	        }
	        case GeometryType.MULTI_POINT: {
	            geoJSON = writeMultiPointGeometry(/** @type {MultiPoint} */ (geometry));
	            break;
	        }
	        case GeometryType.MULTI_LINE_STRING: {
	            geoJSON = writeMultiLineStringGeometry(/** @type {MultiLineString} */ (geometry));
	            break;
	        }
	        case GeometryType.MULTI_POLYGON: {
	            geoJSON = writeMultiPolygonGeometry(/** @type {MultiPolygon} */ (geometry), opt_options);
	            break;
	        }
	        case GeometryType.GEOMETRY_COLLECTION: {
	            geoJSON = writeGeometryCollectionGeometry(/** @type {GeometryCollection} */ (geometry), opt_options);
	            break;
	        }
	        case GeometryType.CIRCLE: {
	            geoJSON = {
	                type: 'GeometryCollection',
	                geometries: []
	            };
	            break;
	        }
	        default: {
	            throw new Error('Unsupported geometry type: ' + type);
	        }
	    }
	    return geoJSON;
	}
	/**
	 * @param {GeometryCollection} geometry Geometry.
	 * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
	 * @return {GeoJSONGeometryCollection} GeoJSON geometry collection.
	 */
	function writeGeometryCollectionGeometry(geometry, opt_options) {
	    var geometries = geometry.getGeometriesArray().map(function (geometry) {
	        var options = assign$1({}, opt_options);
	        delete options.featureProjection;
	        return writeGeometry(geometry, options);
	    });
	    return {
	        type: 'GeometryCollection',
	        geometries: geometries
	    };
	}
	/**
	 * @param {LineString} geometry Geometry.
	 * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
	 * @return {GeoJSONGeometry} GeoJSON geometry.
	 */
	function writeLineStringGeometry(geometry, opt_options) {
	    return {
	        type: 'LineString',
	        coordinates: geometry.getCoordinates()
	    };
	}
	/**
	 * @param {MultiLineString} geometry Geometry.
	 * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
	 * @return {GeoJSONGeometry} GeoJSON geometry.
	 */
	function writeMultiLineStringGeometry(geometry, opt_options) {
	    return {
	        type: 'MultiLineString',
	        coordinates: geometry.getCoordinates()
	    };
	}
	/**
	 * @param {MultiPoint} geometry Geometry.
	 * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
	 * @return {GeoJSONGeometry} GeoJSON geometry.
	 */
	function writeMultiPointGeometry(geometry, opt_options) {
	    return {
	        type: 'MultiPoint',
	        coordinates: geometry.getCoordinates()
	    };
	}
	/**
	 * @param {MultiPolygon} geometry Geometry.
	 * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
	 * @return {GeoJSONGeometry} GeoJSON geometry.
	 */
	function writeMultiPolygonGeometry(geometry, opt_options) {
	    var right;
	    if (opt_options) {
	        right = opt_options.rightHanded;
	    }
	    return {
	        type: 'MultiPolygon',
	        coordinates: geometry.getCoordinates(right)
	    };
	}
	/**
	 * @param {Point} geometry Geometry.
	 * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
	 * @return {GeoJSONGeometry} GeoJSON geometry.
	 */
	function writePointGeometry(geometry, opt_options) {
	    return {
	        type: 'Point',
	        coordinates: geometry.getCoordinates()
	    };
	}
	/**
	 * @param {Polygon} geometry Geometry.
	 * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
	 * @return {GeoJSONGeometry} GeoJSON geometry.
	 */
	function writePolygonGeometry(geometry, opt_options) {
	    var right;
	    if (opt_options) {
	        right = opt_options.rightHanded;
	    }
	    return {
	        type: 'Polygon',
	        coordinates: geometry.getCoordinates(right)
	    };
	}

	var read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m;
	  var eLen = (nBytes * 8) - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var nBits = -7;
	  var i = isLE ? (nBytes - 1) : 0;
	  var d = isLE ? -1 : 1;
	  var s = buffer[offset + i];

	  i += d;

	  e = s & ((1 << (-nBits)) - 1);
	  s >>= (-nBits);
	  nBits += eLen;
	  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1);
	  e >>= (-nBits);
	  nBits += mLen;
	  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias;
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen);
	    e = e - eBias;
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	};

	var write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c;
	  var eLen = (nBytes * 8) - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
	  var i = isLE ? 0 : (nBytes - 1);
	  var d = isLE ? 1 : -1;
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

	  value = Math.abs(value);

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0;
	    e = eMax;
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2);
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--;
	      c *= 2;
	    }
	    if (e + eBias >= 1) {
	      value += rt / c;
	    } else {
	      value += rt * Math.pow(2, 1 - eBias);
	    }
	    if (value * c >= 2) {
	      e++;
	      c /= 2;
	    }

	    if (e + eBias >= eMax) {
	      m = 0;
	      e = eMax;
	    } else if (e + eBias >= 1) {
	      m = ((value * c) - 1) * Math.pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
	      e = 0;
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m;
	  eLen += mLen;
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128;
	};

	var ieee754 = {
		read: read,
		write: write
	};

	var pbf = Pbf;



	function Pbf(buf) {
	    this.buf = ArrayBuffer.isView && ArrayBuffer.isView(buf) ? buf : new Uint8Array(buf || 0);
	    this.pos = 0;
	    this.type = 0;
	    this.length = this.buf.length;
	}

	Pbf.Varint  = 0; // varint: int32, int64, uint32, uint64, sint32, sint64, bool, enum
	Pbf.Fixed64 = 1; // 64-bit: double, fixed64, sfixed64
	Pbf.Bytes   = 2; // length-delimited: string, bytes, embedded messages, packed repeated fields
	Pbf.Fixed32 = 5; // 32-bit: float, fixed32, sfixed32

	var SHIFT_LEFT_32 = (1 << 16) * (1 << 16),
	    SHIFT_RIGHT_32 = 1 / SHIFT_LEFT_32;

	// Threshold chosen based on both benchmarking and knowledge about browser string
	// data structures (which currently switch structure types at 12 bytes or more)
	var TEXT_DECODER_MIN_LENGTH = 12;
	var utf8TextDecoder = typeof TextDecoder === 'undefined' ? null : new TextDecoder('utf8');

	Pbf.prototype = {

	    destroy: function() {
	        this.buf = null;
	    },

	    // === READING =================================================================

	    readFields: function(readField, result, end) {
	        end = end || this.length;

	        while (this.pos < end) {
	            var val = this.readVarint(),
	                tag = val >> 3,
	                startPos = this.pos;

	            this.type = val & 0x7;
	            readField(tag, result, this);

	            if (this.pos === startPos) this.skip(val);
	        }
	        return result;
	    },

	    readMessage: function(readField, result) {
	        return this.readFields(readField, result, this.readVarint() + this.pos);
	    },

	    readFixed32: function() {
	        var val = readUInt32(this.buf, this.pos);
	        this.pos += 4;
	        return val;
	    },

	    readSFixed32: function() {
	        var val = readInt32(this.buf, this.pos);
	        this.pos += 4;
	        return val;
	    },

	    // 64-bit int handling is based on github.com/dpw/node-buffer-more-ints (MIT-licensed)

	    readFixed64: function() {
	        var val = readUInt32(this.buf, this.pos) + readUInt32(this.buf, this.pos + 4) * SHIFT_LEFT_32;
	        this.pos += 8;
	        return val;
	    },

	    readSFixed64: function() {
	        var val = readUInt32(this.buf, this.pos) + readInt32(this.buf, this.pos + 4) * SHIFT_LEFT_32;
	        this.pos += 8;
	        return val;
	    },

	    readFloat: function() {
	        var val = ieee754.read(this.buf, this.pos, true, 23, 4);
	        this.pos += 4;
	        return val;
	    },

	    readDouble: function() {
	        var val = ieee754.read(this.buf, this.pos, true, 52, 8);
	        this.pos += 8;
	        return val;
	    },

	    readVarint: function(isSigned) {
	        var buf = this.buf,
	            val, b;

	        b = buf[this.pos++]; val  =  b & 0x7f;        if (b < 0x80) return val;
	        b = buf[this.pos++]; val |= (b & 0x7f) << 7;  if (b < 0x80) return val;
	        b = buf[this.pos++]; val |= (b & 0x7f) << 14; if (b < 0x80) return val;
	        b = buf[this.pos++]; val |= (b & 0x7f) << 21; if (b < 0x80) return val;
	        b = buf[this.pos];   val |= (b & 0x0f) << 28;

	        return readVarintRemainder(val, isSigned, this);
	    },

	    readVarint64: function() { // for compatibility with v2.0.1
	        return this.readVarint(true);
	    },

	    readSVarint: function() {
	        var num = this.readVarint();
	        return num % 2 === 1 ? (num + 1) / -2 : num / 2; // zigzag encoding
	    },

	    readBoolean: function() {
	        return Boolean(this.readVarint());
	    },

	    readString: function() {
	        var end = this.readVarint() + this.pos;
	        var pos = this.pos;
	        this.pos = end;

	        if (end - pos >= TEXT_DECODER_MIN_LENGTH && utf8TextDecoder) {
	            // longer strings are fast with the built-in browser TextDecoder API
	            return readUtf8TextDecoder(this.buf, pos, end);
	        }
	        // short strings are fast with our custom implementation
	        return readUtf8(this.buf, pos, end);
	    },

	    readBytes: function() {
	        var end = this.readVarint() + this.pos,
	            buffer = this.buf.subarray(this.pos, end);
	        this.pos = end;
	        return buffer;
	    },

	    // verbose for performance reasons; doesn't affect gzipped size

	    readPackedVarint: function(arr, isSigned) {
	        if (this.type !== Pbf.Bytes) return arr.push(this.readVarint(isSigned));
	        var end = readPackedEnd(this);
	        arr = arr || [];
	        while (this.pos < end) arr.push(this.readVarint(isSigned));
	        return arr;
	    },
	    readPackedSVarint: function(arr) {
	        if (this.type !== Pbf.Bytes) return arr.push(this.readSVarint());
	        var end = readPackedEnd(this);
	        arr = arr || [];
	        while (this.pos < end) arr.push(this.readSVarint());
	        return arr;
	    },
	    readPackedBoolean: function(arr) {
	        if (this.type !== Pbf.Bytes) return arr.push(this.readBoolean());
	        var end = readPackedEnd(this);
	        arr = arr || [];
	        while (this.pos < end) arr.push(this.readBoolean());
	        return arr;
	    },
	    readPackedFloat: function(arr) {
	        if (this.type !== Pbf.Bytes) return arr.push(this.readFloat());
	        var end = readPackedEnd(this);
	        arr = arr || [];
	        while (this.pos < end) arr.push(this.readFloat());
	        return arr;
	    },
	    readPackedDouble: function(arr) {
	        if (this.type !== Pbf.Bytes) return arr.push(this.readDouble());
	        var end = readPackedEnd(this);
	        arr = arr || [];
	        while (this.pos < end) arr.push(this.readDouble());
	        return arr;
	    },
	    readPackedFixed32: function(arr) {
	        if (this.type !== Pbf.Bytes) return arr.push(this.readFixed32());
	        var end = readPackedEnd(this);
	        arr = arr || [];
	        while (this.pos < end) arr.push(this.readFixed32());
	        return arr;
	    },
	    readPackedSFixed32: function(arr) {
	        if (this.type !== Pbf.Bytes) return arr.push(this.readSFixed32());
	        var end = readPackedEnd(this);
	        arr = arr || [];
	        while (this.pos < end) arr.push(this.readSFixed32());
	        return arr;
	    },
	    readPackedFixed64: function(arr) {
	        if (this.type !== Pbf.Bytes) return arr.push(this.readFixed64());
	        var end = readPackedEnd(this);
	        arr = arr || [];
	        while (this.pos < end) arr.push(this.readFixed64());
	        return arr;
	    },
	    readPackedSFixed64: function(arr) {
	        if (this.type !== Pbf.Bytes) return arr.push(this.readSFixed64());
	        var end = readPackedEnd(this);
	        arr = arr || [];
	        while (this.pos < end) arr.push(this.readSFixed64());
	        return arr;
	    },

	    skip: function(val) {
	        var type = val & 0x7;
	        if (type === Pbf.Varint) while (this.buf[this.pos++] > 0x7f) {}
	        else if (type === Pbf.Bytes) this.pos = this.readVarint() + this.pos;
	        else if (type === Pbf.Fixed32) this.pos += 4;
	        else if (type === Pbf.Fixed64) this.pos += 8;
	        else throw new Error('Unimplemented type: ' + type);
	    },

	    // === WRITING =================================================================

	    writeTag: function(tag, type) {
	        this.writeVarint((tag << 3) | type);
	    },

	    realloc: function(min) {
	        var length = this.length || 16;

	        while (length < this.pos + min) length *= 2;

	        if (length !== this.length) {
	            var buf = new Uint8Array(length);
	            buf.set(this.buf);
	            this.buf = buf;
	            this.length = length;
	        }
	    },

	    finish: function() {
	        this.length = this.pos;
	        this.pos = 0;
	        return this.buf.subarray(0, this.length);
	    },

	    writeFixed32: function(val) {
	        this.realloc(4);
	        writeInt32(this.buf, val, this.pos);
	        this.pos += 4;
	    },

	    writeSFixed32: function(val) {
	        this.realloc(4);
	        writeInt32(this.buf, val, this.pos);
	        this.pos += 4;
	    },

	    writeFixed64: function(val) {
	        this.realloc(8);
	        writeInt32(this.buf, val & -1, this.pos);
	        writeInt32(this.buf, Math.floor(val * SHIFT_RIGHT_32), this.pos + 4);
	        this.pos += 8;
	    },

	    writeSFixed64: function(val) {
	        this.realloc(8);
	        writeInt32(this.buf, val & -1, this.pos);
	        writeInt32(this.buf, Math.floor(val * SHIFT_RIGHT_32), this.pos + 4);
	        this.pos += 8;
	    },

	    writeVarint: function(val) {
	        val = +val || 0;

	        if (val > 0xfffffff || val < 0) {
	            writeBigVarint(val, this);
	            return;
	        }

	        this.realloc(4);

	        this.buf[this.pos++] =           val & 0x7f  | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;
	        this.buf[this.pos++] = ((val >>>= 7) & 0x7f) | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;
	        this.buf[this.pos++] = ((val >>>= 7) & 0x7f) | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;
	        this.buf[this.pos++] =   (val >>> 7) & 0x7f;
	    },

	    writeSVarint: function(val) {
	        this.writeVarint(val < 0 ? -val * 2 - 1 : val * 2);
	    },

	    writeBoolean: function(val) {
	        this.writeVarint(Boolean(val));
	    },

	    writeString: function(str) {
	        str = String(str);
	        this.realloc(str.length * 4);

	        this.pos++; // reserve 1 byte for short string length

	        var startPos = this.pos;
	        // write the string directly to the buffer and see how much was written
	        this.pos = writeUtf8(this.buf, str, this.pos);
	        var len = this.pos - startPos;

	        if (len >= 0x80) makeRoomForExtraLength(startPos, len, this);

	        // finally, write the message length in the reserved place and restore the position
	        this.pos = startPos - 1;
	        this.writeVarint(len);
	        this.pos += len;
	    },

	    writeFloat: function(val) {
	        this.realloc(4);
	        ieee754.write(this.buf, val, this.pos, true, 23, 4);
	        this.pos += 4;
	    },

	    writeDouble: function(val) {
	        this.realloc(8);
	        ieee754.write(this.buf, val, this.pos, true, 52, 8);
	        this.pos += 8;
	    },

	    writeBytes: function(buffer) {
	        var len = buffer.length;
	        this.writeVarint(len);
	        this.realloc(len);
	        for (var i = 0; i < len; i++) this.buf[this.pos++] = buffer[i];
	    },

	    writeRawMessage: function(fn, obj) {
	        this.pos++; // reserve 1 byte for short message length

	        // write the message directly to the buffer and see how much was written
	        var startPos = this.pos;
	        fn(obj, this);
	        var len = this.pos - startPos;

	        if (len >= 0x80) makeRoomForExtraLength(startPos, len, this);

	        // finally, write the message length in the reserved place and restore the position
	        this.pos = startPos - 1;
	        this.writeVarint(len);
	        this.pos += len;
	    },

	    writeMessage: function(tag, fn, obj) {
	        this.writeTag(tag, Pbf.Bytes);
	        this.writeRawMessage(fn, obj);
	    },

	    writePackedVarint:   function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedVarint, arr);   },
	    writePackedSVarint:  function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedSVarint, arr);  },
	    writePackedBoolean:  function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedBoolean, arr);  },
	    writePackedFloat:    function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedFloat, arr);    },
	    writePackedDouble:   function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedDouble, arr);   },
	    writePackedFixed32:  function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedFixed32, arr);  },
	    writePackedSFixed32: function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedSFixed32, arr); },
	    writePackedFixed64:  function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedFixed64, arr);  },
	    writePackedSFixed64: function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedSFixed64, arr); },

	    writeBytesField: function(tag, buffer) {
	        this.writeTag(tag, Pbf.Bytes);
	        this.writeBytes(buffer);
	    },
	    writeFixed32Field: function(tag, val) {
	        this.writeTag(tag, Pbf.Fixed32);
	        this.writeFixed32(val);
	    },
	    writeSFixed32Field: function(tag, val) {
	        this.writeTag(tag, Pbf.Fixed32);
	        this.writeSFixed32(val);
	    },
	    writeFixed64Field: function(tag, val) {
	        this.writeTag(tag, Pbf.Fixed64);
	        this.writeFixed64(val);
	    },
	    writeSFixed64Field: function(tag, val) {
	        this.writeTag(tag, Pbf.Fixed64);
	        this.writeSFixed64(val);
	    },
	    writeVarintField: function(tag, val) {
	        this.writeTag(tag, Pbf.Varint);
	        this.writeVarint(val);
	    },
	    writeSVarintField: function(tag, val) {
	        this.writeTag(tag, Pbf.Varint);
	        this.writeSVarint(val);
	    },
	    writeStringField: function(tag, str) {
	        this.writeTag(tag, Pbf.Bytes);
	        this.writeString(str);
	    },
	    writeFloatField: function(tag, val) {
	        this.writeTag(tag, Pbf.Fixed32);
	        this.writeFloat(val);
	    },
	    writeDoubleField: function(tag, val) {
	        this.writeTag(tag, Pbf.Fixed64);
	        this.writeDouble(val);
	    },
	    writeBooleanField: function(tag, val) {
	        this.writeVarintField(tag, Boolean(val));
	    }
	};

	function readVarintRemainder(l, s, p) {
	    var buf = p.buf,
	        h, b;

	    b = buf[p.pos++]; h  = (b & 0x70) >> 4;  if (b < 0x80) return toNum(l, h, s);
	    b = buf[p.pos++]; h |= (b & 0x7f) << 3;  if (b < 0x80) return toNum(l, h, s);
	    b = buf[p.pos++]; h |= (b & 0x7f) << 10; if (b < 0x80) return toNum(l, h, s);
	    b = buf[p.pos++]; h |= (b & 0x7f) << 17; if (b < 0x80) return toNum(l, h, s);
	    b = buf[p.pos++]; h |= (b & 0x7f) << 24; if (b < 0x80) return toNum(l, h, s);
	    b = buf[p.pos++]; h |= (b & 0x01) << 31; if (b < 0x80) return toNum(l, h, s);

	    throw new Error('Expected varint not more than 10 bytes');
	}

	function readPackedEnd(pbf) {
	    return pbf.type === Pbf.Bytes ?
	        pbf.readVarint() + pbf.pos : pbf.pos + 1;
	}

	function toNum(low, high, isSigned) {
	    if (isSigned) {
	        return high * 0x100000000 + (low >>> 0);
	    }

	    return ((high >>> 0) * 0x100000000) + (low >>> 0);
	}

	function writeBigVarint(val, pbf) {
	    var low, high;

	    if (val >= 0) {
	        low  = (val % 0x100000000) | 0;
	        high = (val / 0x100000000) | 0;
	    } else {
	        low  = ~(-val % 0x100000000);
	        high = ~(-val / 0x100000000);

	        if (low ^ 0xffffffff) {
	            low = (low + 1) | 0;
	        } else {
	            low = 0;
	            high = (high + 1) | 0;
	        }
	    }

	    if (val >= 0x10000000000000000 || val < -0x10000000000000000) {
	        throw new Error('Given varint doesn\'t fit into 10 bytes');
	    }

	    pbf.realloc(10);

	    writeBigVarintLow(low, high, pbf);
	    writeBigVarintHigh(high, pbf);
	}

	function writeBigVarintLow(low, high, pbf) {
	    pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;
	    pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;
	    pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;
	    pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;
	    pbf.buf[pbf.pos]   = low & 0x7f;
	}

	function writeBigVarintHigh(high, pbf) {
	    var lsb = (high & 0x07) << 4;

	    pbf.buf[pbf.pos++] |= lsb         | ((high >>>= 3) ? 0x80 : 0); if (!high) return;
	    pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;
	    pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;
	    pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;
	    pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;
	    pbf.buf[pbf.pos++]  = high & 0x7f;
	}

	function makeRoomForExtraLength(startPos, len, pbf) {
	    var extraLen =
	        len <= 0x3fff ? 1 :
	        len <= 0x1fffff ? 2 :
	        len <= 0xfffffff ? 3 : Math.floor(Math.log(len) / (Math.LN2 * 7));

	    // if 1 byte isn't enough for encoding message length, shift the data to the right
	    pbf.realloc(extraLen);
	    for (var i = pbf.pos - 1; i >= startPos; i--) pbf.buf[i + extraLen] = pbf.buf[i];
	}

	function writePackedVarint(arr, pbf)   { for (var i = 0; i < arr.length; i++) pbf.writeVarint(arr[i]);   }
	function writePackedSVarint(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeSVarint(arr[i]);  }
	function writePackedFloat(arr, pbf)    { for (var i = 0; i < arr.length; i++) pbf.writeFloat(arr[i]);    }
	function writePackedDouble(arr, pbf)   { for (var i = 0; i < arr.length; i++) pbf.writeDouble(arr[i]);   }
	function writePackedBoolean(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeBoolean(arr[i]);  }
	function writePackedFixed32(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeFixed32(arr[i]);  }
	function writePackedSFixed32(arr, pbf) { for (var i = 0; i < arr.length; i++) pbf.writeSFixed32(arr[i]); }
	function writePackedFixed64(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeFixed64(arr[i]);  }
	function writePackedSFixed64(arr, pbf) { for (var i = 0; i < arr.length; i++) pbf.writeSFixed64(arr[i]); }

	// Buffer code below from https://github.com/feross/buffer, MIT-licensed

	function readUInt32(buf, pos) {
	    return ((buf[pos]) |
	        (buf[pos + 1] << 8) |
	        (buf[pos + 2] << 16)) +
	        (buf[pos + 3] * 0x1000000);
	}

	function writeInt32(buf, val, pos) {
	    buf[pos] = val;
	    buf[pos + 1] = (val >>> 8);
	    buf[pos + 2] = (val >>> 16);
	    buf[pos + 3] = (val >>> 24);
	}

	function readInt32(buf, pos) {
	    return ((buf[pos]) |
	        (buf[pos + 1] << 8) |
	        (buf[pos + 2] << 16)) +
	        (buf[pos + 3] << 24);
	}

	function readUtf8(buf, pos, end) {
	    var str = '';
	    var i = pos;

	    while (i < end) {
	        var b0 = buf[i];
	        var c = null; // codepoint
	        var bytesPerSequence =
	            b0 > 0xEF ? 4 :
	            b0 > 0xDF ? 3 :
	            b0 > 0xBF ? 2 : 1;

	        if (i + bytesPerSequence > end) break;

	        var b1, b2, b3;

	        if (bytesPerSequence === 1) {
	            if (b0 < 0x80) {
	                c = b0;
	            }
	        } else if (bytesPerSequence === 2) {
	            b1 = buf[i + 1];
	            if ((b1 & 0xC0) === 0x80) {
	                c = (b0 & 0x1F) << 0x6 | (b1 & 0x3F);
	                if (c <= 0x7F) {
	                    c = null;
	                }
	            }
	        } else if (bytesPerSequence === 3) {
	            b1 = buf[i + 1];
	            b2 = buf[i + 2];
	            if ((b1 & 0xC0) === 0x80 && (b2 & 0xC0) === 0x80) {
	                c = (b0 & 0xF) << 0xC | (b1 & 0x3F) << 0x6 | (b2 & 0x3F);
	                if (c <= 0x7FF || (c >= 0xD800 && c <= 0xDFFF)) {
	                    c = null;
	                }
	            }
	        } else if (bytesPerSequence === 4) {
	            b1 = buf[i + 1];
	            b2 = buf[i + 2];
	            b3 = buf[i + 3];
	            if ((b1 & 0xC0) === 0x80 && (b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {
	                c = (b0 & 0xF) << 0x12 | (b1 & 0x3F) << 0xC | (b2 & 0x3F) << 0x6 | (b3 & 0x3F);
	                if (c <= 0xFFFF || c >= 0x110000) {
	                    c = null;
	                }
	            }
	        }

	        if (c === null) {
	            c = 0xFFFD;
	            bytesPerSequence = 1;

	        } else if (c > 0xFFFF) {
	            c -= 0x10000;
	            str += String.fromCharCode(c >>> 10 & 0x3FF | 0xD800);
	            c = 0xDC00 | c & 0x3FF;
	        }

	        str += String.fromCharCode(c);
	        i += bytesPerSequence;
	    }

	    return str;
	}

	function readUtf8TextDecoder(buf, pos, end) {
	    return utf8TextDecoder.decode(buf.subarray(pos, end));
	}

	function writeUtf8(buf, str, pos) {
	    for (var i = 0, c, lead; i < str.length; i++) {
	        c = str.charCodeAt(i); // code point

	        if (c > 0xD7FF && c < 0xE000) {
	            if (lead) {
	                if (c < 0xDC00) {
	                    buf[pos++] = 0xEF;
	                    buf[pos++] = 0xBF;
	                    buf[pos++] = 0xBD;
	                    lead = c;
	                    continue;
	                } else {
	                    c = lead - 0xD800 << 10 | c - 0xDC00 | 0x10000;
	                    lead = null;
	                }
	            } else {
	                if (c > 0xDBFF || (i + 1 === str.length)) {
	                    buf[pos++] = 0xEF;
	                    buf[pos++] = 0xBF;
	                    buf[pos++] = 0xBD;
	                } else {
	                    lead = c;
	                }
	                continue;
	            }
	        } else if (lead) {
	            buf[pos++] = 0xEF;
	            buf[pos++] = 0xBF;
	            buf[pos++] = 0xBD;
	            lead = null;
	        }

	        if (c < 0x80) {
	            buf[pos++] = c;
	        } else {
	            if (c < 0x800) {
	                buf[pos++] = c >> 0x6 | 0xC0;
	            } else {
	                if (c < 0x10000) {
	                    buf[pos++] = c >> 0xC | 0xE0;
	                } else {
	                    buf[pos++] = c >> 0x12 | 0xF0;
	                    buf[pos++] = c >> 0xC & 0x3F | 0x80;
	                }
	                buf[pos++] = c >> 0x6 & 0x3F | 0x80;
	            }
	            buf[pos++] = c & 0x3F | 0x80;
	        }
	    }
	    return pos;
	}

	/**
	 * @module ol/render/Feature
	 */
	/**
	 * @type {import("../transform.js").Transform}
	 */
	var tmpTransform$2 = create();
	/**
	 * Lightweight, read-only, {@link module:ol/Feature~Feature} and {@link module:ol/geom/Geometry~Geometry} like
	 * structure, optimized for vector tile rendering and styling. Geometry access
	 * through the API is limited to getting the type and extent of the geometry.
	 */
	var RenderFeature = /** @class */ (function () {
	    /**
	     * @param {GeometryType} type Geometry type.
	     * @param {Array<number>} flatCoordinates Flat coordinates. These always need
	     *     to be right-handed for polygons.
	     * @param {Array<number>|Array<Array<number>>} ends Ends or Endss.
	     * @param {Object<string, *>} properties Properties.
	     * @param {number|string|undefined} id Feature id.
	     */
	    function RenderFeature(type, flatCoordinates, ends, properties, id) {
	        /**
	         * @private
	         * @type {import("../extent.js").Extent|undefined}
	         */
	        this.extent_;
	        /**
	         * @private
	         * @type {number|string|undefined}
	         */
	        this.id_ = id;
	        /**
	         * @private
	         * @type {GeometryType}
	         */
	        this.type_ = type;
	        /**
	         * @private
	         * @type {Array<number>}
	         */
	        this.flatCoordinates_ = flatCoordinates;
	        /**
	         * @private
	         * @type {Array<number>}
	         */
	        this.flatInteriorPoints_ = null;
	        /**
	         * @private
	         * @type {Array<number>}
	         */
	        this.flatMidpoints_ = null;
	        /**
	         * @private
	         * @type {Array<number>|Array<Array<number>>}
	         */
	        this.ends_ = ends;
	        /**
	         * @private
	         * @type {Object<string, *>}
	         */
	        this.properties_ = properties;
	    }
	    /**
	     * Get a feature property by its key.
	     * @param {string} key Key
	     * @return {*} Value for the requested key.
	     * @api
	     */
	    RenderFeature.prototype.get = function (key) {
	        return this.properties_[key];
	    };
	    /**
	     * Get the extent of this feature's geometry.
	     * @return {import("../extent.js").Extent} Extent.
	     * @api
	     */
	    RenderFeature.prototype.getExtent = function () {
	        if (!this.extent_) {
	            this.extent_ = this.type_ === GeometryType.POINT ?
	                createOrUpdateFromCoordinate(this.flatCoordinates_) :
	                createOrUpdateFromFlatCoordinates(this.flatCoordinates_, 0, this.flatCoordinates_.length, 2);
	        }
	        return this.extent_;
	    };
	    /**
	     * @return {Array<number>} Flat interior points.
	     */
	    RenderFeature.prototype.getFlatInteriorPoint = function () {
	        if (!this.flatInteriorPoints_) {
	            var flatCenter = getCenter(this.getExtent());
	            this.flatInteriorPoints_ = getInteriorPointOfArray(this.flatCoordinates_, 0, /** @type {Array<number>} */ (this.ends_), 2, flatCenter, 0);
	        }
	        return this.flatInteriorPoints_;
	    };
	    /**
	     * @return {Array<number>} Flat interior points.
	     */
	    RenderFeature.prototype.getFlatInteriorPoints = function () {
	        if (!this.flatInteriorPoints_) {
	            var flatCenters = linearRingss$1(this.flatCoordinates_, 0, /** @type {Array<Array<number>>} */ (this.ends_), 2);
	            this.flatInteriorPoints_ = getInteriorPointsOfMultiArray(this.flatCoordinates_, 0, /** @type {Array<Array<number>>} */ (this.ends_), 2, flatCenters);
	        }
	        return this.flatInteriorPoints_;
	    };
	    /**
	     * @return {Array<number>} Flat midpoint.
	     */
	    RenderFeature.prototype.getFlatMidpoint = function () {
	        if (!this.flatMidpoints_) {
	            this.flatMidpoints_ = interpolatePoint(this.flatCoordinates_, 0, this.flatCoordinates_.length, 2, 0.5);
	        }
	        return this.flatMidpoints_;
	    };
	    /**
	     * @return {Array<number>} Flat midpoints.
	     */
	    RenderFeature.prototype.getFlatMidpoints = function () {
	        if (!this.flatMidpoints_) {
	            this.flatMidpoints_ = [];
	            var flatCoordinates = this.flatCoordinates_;
	            var offset = 0;
	            var ends = /** @type {Array<number>} */ (this.ends_);
	            for (var i = 0, ii = ends.length; i < ii; ++i) {
	                var end = ends[i];
	                var midpoint = interpolatePoint(flatCoordinates, offset, end, 2, 0.5);
	                extend$1(this.flatMidpoints_, midpoint);
	                offset = end;
	            }
	        }
	        return this.flatMidpoints_;
	    };
	    /**
	     * Get the feature identifier.  This is a stable identifier for the feature and
	     * is set when reading data from a remote source.
	     * @return {number|string|undefined} Id.
	     * @api
	     */
	    RenderFeature.prototype.getId = function () {
	        return this.id_;
	    };
	    /**
	     * @return {Array<number>} Flat coordinates.
	     */
	    RenderFeature.prototype.getOrientedFlatCoordinates = function () {
	        return this.flatCoordinates_;
	    };
	    /**
	     * For API compatibility with {@link module:ol/Feature~Feature}, this method is useful when
	     * determining the geometry type in style function (see {@link #getType}).
	     * @return {RenderFeature} Feature.
	     * @api
	     */
	    RenderFeature.prototype.getGeometry = function () {
	        return this;
	    };
	    /**
	     * @param {number} squaredTolerance Squared tolerance.
	     * @return {RenderFeature} Simplified geometry.
	     */
	    RenderFeature.prototype.getSimplifiedGeometry = function (squaredTolerance) {
	        return this;
	    };
	    /**
	     * Get a transformed and simplified version of the geometry.
	     * @abstract
	     * @param {number} squaredTolerance Squared tolerance.
	     * @param {import("../proj.js").TransformFunction} [opt_transform] Optional transform function.
	     * @return {RenderFeature} Simplified geometry.
	     */
	    RenderFeature.prototype.simplifyTransformed = function (squaredTolerance, opt_transform) {
	        return this;
	    };
	    /**
	     * Get the feature properties.
	     * @return {Object<string, *>} Feature properties.
	     * @api
	     */
	    RenderFeature.prototype.getProperties = function () {
	        return this.properties_;
	    };
	    /**
	     * @return {number} Stride.
	     */
	    RenderFeature.prototype.getStride = function () {
	        return 2;
	    };
	    /**
	     * @return {undefined}
	     */
	    RenderFeature.prototype.getStyleFunction = function () {
	        return undefined;
	    };
	    /**
	     * Get the type of this feature's geometry.
	     * @return {GeometryType} Geometry type.
	     * @api
	     */
	    RenderFeature.prototype.getType = function () {
	        return this.type_;
	    };
	    /**
	     * Transform geometry coordinates from tile pixel space to projected.
	     * The SRS of the source and destination are expected to be the same.
	     *
	     * @param {import("../proj.js").ProjectionLike} source The current projection
	     * @param {import("../proj.js").ProjectionLike} destination The desired projection.
	     */
	    RenderFeature.prototype.transform = function (source, destination) {
	        source = get$4(source);
	        var pixelExtent = source.getExtent();
	        var projectedExtent = source.getWorldExtent();
	        var scale = getHeight(projectedExtent) / getHeight(pixelExtent);
	        compose(tmpTransform$2, projectedExtent[0], projectedExtent[3], scale, -scale, 0, 0, 0);
	        transform2D(this.flatCoordinates_, 0, this.flatCoordinates_.length, 2, tmpTransform$2, this.flatCoordinates_);
	    };
	    return RenderFeature;
	}());
	/**
	 * @return {Array<number>|Array<Array<number>>} Ends or endss.
	 */
	RenderFeature.prototype.getEnds = function () {
	    return this.ends_;
	};
	RenderFeature.prototype.getEndss = RenderFeature.prototype.getEnds;
	/**
	 * @return {Array<number>} Flat coordinates.
	 */
	RenderFeature.prototype.getFlatCoordinates =
	    RenderFeature.prototype.getOrientedFlatCoordinates;

	/**
	 * @module ol/format/MVT
	 */
	//FIXME Implement projection handling
	var __extends$1h = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @typedef {Object} Options
	 * @property {import("../Feature.js").FeatureClass} [featureClass] Class for features returned by
	 * {@link module:ol/format/MVT#readFeatures}. Set to {@link module:ol/Feature~Feature} to get full editing and geometry
	 * support at the cost of decreased rendering performance. The default is
	 * {@link module:ol/render/Feature~RenderFeature}, which is optimized for rendering and hit detection.
	 * @property {string} [geometryName='geometry'] Geometry name to use when creating features.
	 * @property {string} [layerName='layer'] Name of the feature attribute that holds the layer name.
	 * @property {Array<string>} [layers] Layers to read features from. If not provided, features will be read from all
	 * @property {string} [idProperty] Optional property that will be assigned as the feature id and removed from the properties.
	 * layers.
	 */
	/**
	 * @classdesc
	 * Feature format for reading data in the Mapbox MVT format.
	 *
	 * @param {Options=} opt_options Options.
	 * @api
	 */
	var MVT = /** @class */ (function (_super) {
	    __extends$1h(MVT, _super);
	    /**
	     * @param {Options=} opt_options Options.
	     */
	    function MVT(opt_options) {
	        var _this = _super.call(this) || this;
	        var options = opt_options ? opt_options : {};
	        /**
	         * @type {Projection}
	         */
	        _this.dataProjection = new Projection({
	            code: '',
	            units: Units.TILE_PIXELS
	        });
	        /**
	         * @private
	         * @type {import("../Feature.js").FeatureClass}
	         */
	        _this.featureClass_ = options.featureClass ? options.featureClass : RenderFeature;
	        /**
	         * @private
	         * @type {string|undefined}
	         */
	        _this.geometryName_ = options.geometryName;
	        /**
	         * @private
	         * @type {string}
	         */
	        _this.layerName_ = options.layerName ? options.layerName : 'layer';
	        /**
	         * @private
	         * @type {Array<string>}
	         */
	        _this.layers_ = options.layers ? options.layers : null;
	        /**
	         * @private
	         * @type {string}
	         */
	        _this.idProperty_ = options.idProperty;
	        return _this;
	    }
	    /**
	     * Read the raw geometry from the pbf offset stored in a raw feature's geometry
	     * property.
	     * @param {PBF} pbf PBF.
	     * @param {Object} feature Raw feature.
	     * @param {Array<number>} flatCoordinates Array to store flat coordinates in.
	     * @param {Array<number>} ends Array to store ends in.
	     * @private
	     */
	    MVT.prototype.readRawGeometry_ = function (pbf, feature, flatCoordinates, ends) {
	        pbf.pos = feature.geometry;
	        var end = pbf.readVarint() + pbf.pos;
	        var cmd = 1;
	        var length = 0;
	        var x = 0;
	        var y = 0;
	        var coordsLen = 0;
	        var currentEnd = 0;
	        while (pbf.pos < end) {
	            if (!length) {
	                var cmdLen = pbf.readVarint();
	                cmd = cmdLen & 0x7;
	                length = cmdLen >> 3;
	            }
	            length--;
	            if (cmd === 1 || cmd === 2) {
	                x += pbf.readSVarint();
	                y += pbf.readSVarint();
	                if (cmd === 1) { // moveTo
	                    if (coordsLen > currentEnd) {
	                        ends.push(coordsLen);
	                        currentEnd = coordsLen;
	                    }
	                }
	                flatCoordinates.push(x, y);
	                coordsLen += 2;
	            }
	            else if (cmd === 7) {
	                if (coordsLen > currentEnd) {
	                    // close polygon
	                    flatCoordinates.push(flatCoordinates[currentEnd], flatCoordinates[currentEnd + 1]);
	                    coordsLen += 2;
	                }
	            }
	            else {
	                assert(false, 59); // Invalid command found in the PBF
	            }
	        }
	        if (coordsLen > currentEnd) {
	            ends.push(coordsLen);
	            currentEnd = coordsLen;
	        }
	    };
	    /**
	     * @private
	     * @param {PBF} pbf PBF
	     * @param {Object} rawFeature Raw Mapbox feature.
	     * @param {import("./Feature.js").ReadOptions} options Read options.
	     * @return {import("../Feature.js").FeatureLike} Feature.
	     */
	    MVT.prototype.createFeature_ = function (pbf, rawFeature, options) {
	        var type = rawFeature.type;
	        if (type === 0) {
	            return null;
	        }
	        var feature;
	        var values = rawFeature.properties;
	        var id;
	        if (!this.idProperty_) {
	            id = rawFeature.id;
	        }
	        else {
	            id = values[this.idProperty_];
	            delete values[this.idProperty_];
	        }
	        values[this.layerName_] = rawFeature.layer.name;
	        var flatCoordinates = [];
	        var ends = [];
	        this.readRawGeometry_(pbf, rawFeature, flatCoordinates, ends);
	        var geometryType = getGeometryType(type, ends.length);
	        if (this.featureClass_ === RenderFeature) {
	            feature = new this.featureClass_(geometryType, flatCoordinates, ends, values, id);
	            feature.transform(options.dataProjection, options.featureProjection);
	        }
	        else {
	            var geom = void 0;
	            if (geometryType == GeometryType.POLYGON) {
	                var endss = [];
	                var offset = 0;
	                var prevEndIndex = 0;
	                for (var i = 0, ii = ends.length; i < ii; ++i) {
	                    var end = ends[i];
	                    if (!linearRingIsClockwise(flatCoordinates, offset, end, 2)) {
	                        endss.push(ends.slice(prevEndIndex, i));
	                        prevEndIndex = i;
	                    }
	                    offset = end;
	                }
	                if (endss.length > 1) {
	                    geom = new MultiPolygon(flatCoordinates, GeometryLayout.XY, endss);
	                }
	                else {
	                    geom = new Polygon(flatCoordinates, GeometryLayout.XY, ends);
	                }
	            }
	            else {
	                geom = geometryType === GeometryType.POINT ? new Point(flatCoordinates, GeometryLayout.XY) :
	                    geometryType === GeometryType.LINE_STRING ? new LineString(flatCoordinates, GeometryLayout.XY) :
	                        geometryType === GeometryType.POLYGON ? new Polygon(flatCoordinates, GeometryLayout.XY, ends) :
	                            geometryType === GeometryType.MULTI_POINT ? new MultiPoint(flatCoordinates, GeometryLayout.XY) :
	                                geometryType === GeometryType.MULTI_LINE_STRING ? new MultiLineString(flatCoordinates, GeometryLayout.XY, ends) :
	                                    null;
	            }
	            var ctor = /** @type {typeof import("../Feature.js").default} */ (this.featureClass_);
	            feature = new ctor();
	            if (this.geometryName_) {
	                feature.setGeometryName(this.geometryName_);
	            }
	            var geometry = transformGeometryWithOptions(geom, false, options);
	            feature.setGeometry(geometry);
	            feature.setId(id);
	            feature.setProperties(values, true);
	        }
	        return feature;
	    };
	    /**
	     * @inheritDoc
	     */
	    MVT.prototype.getType = function () {
	        return FormatType.ARRAY_BUFFER;
	    };
	    /**
	     * Read all features.
	     *
	     * @param {ArrayBuffer} source Source.
	     * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
	     * @return {Array<import("../Feature.js").FeatureLike>} Features.
	     * @api
	     */
	    MVT.prototype.readFeatures = function (source, opt_options) {
	        var layers = this.layers_;
	        var options = /** @type {import("./Feature.js").ReadOptions} */ (this.adaptOptions(opt_options));
	        var dataProjection = get$4(options.dataProjection);
	        dataProjection.setWorldExtent(options.extent);
	        options.dataProjection = dataProjection;
	        var pbf$1 = new pbf(/** @type {ArrayBuffer} */ (source));
	        var pbfLayers = pbf$1.readFields(layersPBFReader, {});
	        var features = [];
	        for (var name_1 in pbfLayers) {
	            if (layers && layers.indexOf(name_1) == -1) {
	                continue;
	            }
	            var pbfLayer = pbfLayers[name_1];
	            var extent = pbfLayer ? [0, 0, pbfLayer.extent, pbfLayer.extent] : null;
	            dataProjection.setExtent(extent);
	            for (var i = 0, ii = pbfLayer.length; i < ii; ++i) {
	                var rawFeature = readRawFeature(pbf$1, pbfLayer, i);
	                features.push(this.createFeature_(pbf$1, rawFeature, options));
	            }
	        }
	        return features;
	    };
	    /**
	     * @inheritDoc
	     * @api
	     */
	    MVT.prototype.readProjection = function (source) {
	        return this.dataProjection;
	    };
	    /**
	     * Sets the layers that features will be read from.
	     * @param {Array<string>} layers Layers.
	     * @api
	     */
	    MVT.prototype.setLayers = function (layers) {
	        this.layers_ = layers;
	    };
	    return MVT;
	}(FeatureFormat));
	/**
	 * Reader callback for parsing layers.
	 * @param {number} tag The tag.
	 * @param {Object} layers The layers object.
	 * @param {PBF} pbf The PBF.
	 */
	function layersPBFReader(tag, layers, pbf) {
	    if (tag === 3) {
	        var layer = {
	            keys: [],
	            values: [],
	            features: []
	        };
	        var end = pbf.readVarint() + pbf.pos;
	        pbf.readFields(layerPBFReader, layer, end);
	        layer.length = layer.features.length;
	        if (layer.length) {
	            layers[layer.name] = layer;
	        }
	    }
	}
	/**
	 * Reader callback for parsing layer.
	 * @param {number} tag The tag.
	 * @param {Object} layer The layer object.
	 * @param {PBF} pbf The PBF.
	 */
	function layerPBFReader(tag, layer, pbf) {
	    if (tag === 15) {
	        layer.version = pbf.readVarint();
	    }
	    else if (tag === 1) {
	        layer.name = pbf.readString();
	    }
	    else if (tag === 5) {
	        layer.extent = pbf.readVarint();
	    }
	    else if (tag === 2) {
	        layer.features.push(pbf.pos);
	    }
	    else if (tag === 3) {
	        layer.keys.push(pbf.readString());
	    }
	    else if (tag === 4) {
	        var value = null;
	        var end = pbf.readVarint() + pbf.pos;
	        while (pbf.pos < end) {
	            tag = pbf.readVarint() >> 3;
	            value = tag === 1 ? pbf.readString() :
	                tag === 2 ? pbf.readFloat() :
	                    tag === 3 ? pbf.readDouble() :
	                        tag === 4 ? pbf.readVarint64() :
	                            tag === 5 ? pbf.readVarint() :
	                                tag === 6 ? pbf.readSVarint() :
	                                    tag === 7 ? pbf.readBoolean() : null;
	        }
	        layer.values.push(value);
	    }
	}
	/**
	 * Reader callback for parsing feature.
	 * @param {number} tag The tag.
	 * @param {Object} feature The feature object.
	 * @param {PBF} pbf The PBF.
	 */
	function featurePBFReader(tag, feature, pbf) {
	    if (tag == 1) {
	        feature.id = pbf.readVarint();
	    }
	    else if (tag == 2) {
	        var end = pbf.readVarint() + pbf.pos;
	        while (pbf.pos < end) {
	            var key = feature.layer.keys[pbf.readVarint()];
	            var value = feature.layer.values[pbf.readVarint()];
	            feature.properties[key] = value;
	        }
	    }
	    else if (tag == 3) {
	        feature.type = pbf.readVarint();
	    }
	    else if (tag == 4) {
	        feature.geometry = pbf.pos;
	    }
	}
	/**
	 * Read a raw feature from the pbf offset stored at index `i` in the raw layer.
	 * @param {PBF} pbf PBF.
	 * @param {Object} layer Raw layer.
	 * @param {number} i Index of the feature in the raw layer's `features` array.
	 * @return {Object} Raw feature.
	 */
	function readRawFeature(pbf, layer, i) {
	    pbf.pos = layer.features[i];
	    var end = pbf.readVarint() + pbf.pos;
	    var feature = {
	        layer: layer,
	        type: 0,
	        properties: {}
	    };
	    pbf.readFields(featurePBFReader, feature, end);
	    return feature;
	}
	/**
	 * @param {number} type The raw feature's geometry type
	 * @param {number} numEnds Number of ends of the flat coordinates of the
	 * geometry.
	 * @return {GeometryType} The geometry type.
	 */
	function getGeometryType(type, numEnds) {
	    /** @type {GeometryType} */
	    var geometryType;
	    if (type === 1) {
	        geometryType = numEnds === 1 ?
	            GeometryType.POINT : GeometryType.MULTI_POINT;
	    }
	    else if (type === 2) {
	        geometryType = numEnds === 1 ?
	            GeometryType.LINE_STRING :
	            GeometryType.MULTI_LINE_STRING;
	    }
	    else if (type === 3) {
	        geometryType = GeometryType.POLYGON;
	        // MultiPolygon not relevant for rendering - winding order determines
	        // outer rings of polygons.
	    }
	    return geometryType;
	}

	/**
	 * @module ol/layer/TileProperty
	 */
	/**
	 * @enum {string}
	 */
	var TileProperty = {
	    PRELOAD: 'preload',
	    USE_INTERIM_TILES_ON_ERROR: 'useInterimTilesOnError'
	};

	var __extends$1i = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @typedef {Object} Options
	 * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
	 * @property {number} [opacity=1] Opacity (0, 1).
	 * @property {boolean} [visible=true] Visibility.
	 * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
	 * rendered outside of this extent.
	 * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
	 * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
	 * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
	 * method was used.
	 * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
	 * visible.
	 * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
	 * be visible.
	 * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`
	 * means no preloading.
	 * @property {import("../source/Tile.js").default} [source] Source for this layer.
	 * @property {import("../PluggableMap.js").default} [map] Sets the layer as overlay on a map. The map will not manage
	 * this layer in its layers collection, and the layer will be rendered on top. This is useful for
	 * temporary layers. The standard way to add a layer to a map and have it managed by the map is to
	 * use {@link module:ol/Map#addLayer}.
	 * @property {boolean} [useInterimTilesOnError=true] Use interim tiles on error.
	 */
	/**
	 * @classdesc
	 * For layer sources that provide pre-rendered, tiled images in grids that are
	 * organized by zoom levels for specific resolutions.
	 * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
	 * property on the layer object; for example, setting `title: 'My Title'` in the
	 * options means that `title` is observable, and has get/set accessors.
	 *
	 * @extends {Layer<import("../source/Tile.js").default>}
	 * @api
	 */
	var BaseTileLayer = /** @class */ (function (_super) {
	    __extends$1i(BaseTileLayer, _super);
	    /**
	     * @param {Options=} opt_options Tile layer options.
	     */
	    function BaseTileLayer(opt_options) {
	        var _this = this;
	        var options = opt_options ? opt_options : {};
	        var baseOptions = assign$1({}, options);
	        delete baseOptions.preload;
	        delete baseOptions.useInterimTilesOnError;
	        _this = _super.call(this, baseOptions) || this;
	        _this.setPreload(options.preload !== undefined ? options.preload : 0);
	        _this.setUseInterimTilesOnError(options.useInterimTilesOnError !== undefined ?
	            options.useInterimTilesOnError : true);
	        return _this;
	    }
	    /**
	    * Return the level as number to which we will preload tiles up to.
	    * @return {number} The level to preload tiles up to.
	    * @observable
	    * @api
	    */
	    BaseTileLayer.prototype.getPreload = function () {
	        return /** @type {number} */ (this.get(TileProperty.PRELOAD));
	    };
	    /**
	    * Set the level as number to which we will preload tiles up to.
	    * @param {number} preload The level to preload tiles up to.
	    * @observable
	    * @api
	    */
	    BaseTileLayer.prototype.setPreload = function (preload) {
	        this.set(TileProperty.PRELOAD, preload);
	    };
	    /**
	    * Whether we use interim tiles on error.
	    * @return {boolean} Use interim tiles on error.
	    * @observable
	    * @api
	    */
	    BaseTileLayer.prototype.getUseInterimTilesOnError = function () {
	        return /** @type {boolean} */ (this.get(TileProperty.USE_INTERIM_TILES_ON_ERROR));
	    };
	    /**
	    * Set whether we use interim tiles on error.
	    * @param {boolean} useInterimTilesOnError Use interim tiles on error.
	    * @observable
	    * @api
	    */
	    BaseTileLayer.prototype.setUseInterimTilesOnError = function (useInterimTilesOnError) {
	        this.set(TileProperty.USE_INTERIM_TILES_ON_ERROR, useInterimTilesOnError);
	    };
	    return BaseTileLayer;
	}(Layer));

	var __extends$1j = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @classdesc
	 * Canvas renderer for tile layers.
	 * @api
	 */
	var CanvasTileLayerRenderer = /** @class */ (function (_super) {
	    __extends$1j(CanvasTileLayerRenderer, _super);
	    /**
	     * @param {import("../../layer/Tile.js").default|import("../../layer/VectorTile.js").default} tileLayer Tile layer.
	     */
	    function CanvasTileLayerRenderer(tileLayer) {
	        var _this = _super.call(this, tileLayer) || this;
	        /**
	         * Rendered extent has changed since the previous `renderFrame()` call
	         * @type {boolean}
	         */
	        _this.extentChanged = true;
	        /**
	         * @private
	         * @type {?import("../../extent.js").Extent}
	         */
	        _this.renderedExtent_ = null;
	        /**
	         * @protected
	         * @type {number}
	         */
	        _this.renderedPixelRatio;
	        /**
	         * @protected
	         * @type {import("../../proj/Projection.js").default}
	         */
	        _this.renderedProjection = null;
	        /**
	         * @protected
	         * @type {number}
	         */
	        _this.renderedRevision;
	        /**
	         * @protected
	         * @type {!Array<import("../../Tile.js").default>}
	         */
	        _this.renderedTiles = [];
	        /**
	         * @private
	         * @type {boolean}
	         */
	        _this.newTiles_ = false;
	        /**
	         * @protected
	         * @type {import("../../extent.js").Extent}
	         */
	        _this.tmpExtent = createEmpty();
	        /**
	         * @private
	         * @type {import("../../TileRange.js").default}
	         */
	        _this.tmpTileRange_ = new TileRange(0, 0, 0, 0);
	        return _this;
	    }
	    /**
	     * @protected
	     * @param {import("../../Tile.js").default} tile Tile.
	     * @return {boolean} Tile is drawable.
	     */
	    CanvasTileLayerRenderer.prototype.isDrawableTile = function (tile) {
	        var tileLayer = this.getLayer();
	        var tileState = tile.getState();
	        var useInterimTilesOnError = tileLayer.getUseInterimTilesOnError();
	        return tileState == TileState.LOADED ||
	            tileState == TileState.EMPTY ||
	            tileState == TileState.ERROR && !useInterimTilesOnError;
	    };
	    /**
	     * @param {number} z Tile coordinate z.
	     * @param {number} x Tile coordinate x.
	     * @param {number} y Tile coordinate y.
	     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
	     * @return {!import("../../Tile.js").default} Tile.
	     */
	    CanvasTileLayerRenderer.prototype.getTile = function (z, x, y, frameState) {
	        var pixelRatio = frameState.pixelRatio;
	        var projection = frameState.viewState.projection;
	        var tileLayer = this.getLayer();
	        var tileSource = tileLayer.getSource();
	        var tile = tileSource.getTile(z, x, y, pixelRatio, projection);
	        if (tile.getState() == TileState.ERROR) {
	            if (!tileLayer.getUseInterimTilesOnError()) {
	                // When useInterimTilesOnError is false, we consider the error tile as loaded.
	                tile.setState(TileState.LOADED);
	            }
	            else if (tileLayer.getPreload() > 0) {
	                // Preloaded tiles for lower resolutions might have finished loading.
	                this.newTiles_ = true;
	            }
	        }
	        if (!this.isDrawableTile(tile)) {
	            tile = tile.getInterimTile();
	        }
	        return tile;
	    };
	    /**
	     * @inheritDoc
	     */
	    CanvasTileLayerRenderer.prototype.loadedTileCallback = function (tiles, zoom, tile) {
	        if (this.isDrawableTile(tile)) {
	            return _super.prototype.loadedTileCallback.call(this, tiles, zoom, tile);
	        }
	        return false;
	    };
	    /**
	     * @inheritDoc
	     */
	    CanvasTileLayerRenderer.prototype.prepareFrame = function (frameState) {
	        return !!this.getLayer().getSource();
	    };
	    /**
	     * TODO: File a TypeScript issue about inheritDoc not being followed
	     * all the way.  Without this explicit return type, the VectorTileLayer
	     * renderFrame function does not pass.
	     *
	     * @inheritDoc
	     * @returns {HTMLElement} The rendered element.
	     */
	    CanvasTileLayerRenderer.prototype.renderFrame = function (frameState, target) {
	        var layerState = frameState.layerStatesArray[frameState.layerIndex];
	        var viewState = frameState.viewState;
	        var projection = viewState.projection;
	        var viewResolution = viewState.resolution;
	        var viewCenter = viewState.center;
	        var rotation = viewState.rotation;
	        var pixelRatio = frameState.pixelRatio;
	        var tileLayer = this.getLayer();
	        var tileSource = tileLayer.getSource();
	        var sourceRevision = tileSource.getRevision();
	        var tileGrid = tileSource.getTileGridForProjection(projection);
	        var z = tileGrid.getZForResolution(viewResolution, tileSource.zDirection);
	        var tileResolution = tileGrid.getResolution(z);
	        var extent = frameState.extent;
	        var layerExtent = layerState.extent && fromUserExtent(layerState.extent, projection);
	        if (layerExtent) {
	            extent = getIntersection(extent, fromUserExtent(layerState.extent, projection));
	        }
	        var tilePixelRatio = tileSource.getTilePixelRatio(pixelRatio);
	        // desired dimensions of the canvas in pixels
	        var width = Math.round(frameState.size[0] * tilePixelRatio);
	        var height = Math.round(frameState.size[1] * tilePixelRatio);
	        if (rotation) {
	            var size = Math.round(Math.sqrt(width * width + height * height));
	            width = size;
	            height = size;
	        }
	        var dx = tileResolution * width / 2 / tilePixelRatio;
	        var dy = tileResolution * height / 2 / tilePixelRatio;
	        var canvasExtent = [
	            viewCenter[0] - dx,
	            viewCenter[1] - dy,
	            viewCenter[0] + dx,
	            viewCenter[1] + dy
	        ];
	        var tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);
	        /**
	         * @type {Object<number, Object<string, import("../../Tile.js").default>>}
	         */
	        var tilesToDrawByZ = {};
	        tilesToDrawByZ[z] = {};
	        var findLoadedTiles = this.createLoadedTileFinder(tileSource, projection, tilesToDrawByZ);
	        var tmpExtent = this.tmpExtent;
	        var tmpTileRange = this.tmpTileRange_;
	        this.newTiles_ = false;
	        for (var x = tileRange.minX; x <= tileRange.maxX; ++x) {
	            for (var y = tileRange.minY; y <= tileRange.maxY; ++y) {
	                var tile = this.getTile(z, x, y, frameState);
	                if (this.isDrawableTile(tile)) {
	                    var uid = getUid(this);
	                    if (tile.getState() == TileState.LOADED) {
	                        tilesToDrawByZ[z][tile.tileCoord.toString()] = tile;
	                        var inTransition = tile.inTransition(uid);
	                        if (!this.newTiles_ && (inTransition || this.renderedTiles.indexOf(tile) === -1)) {
	                            this.newTiles_ = true;
	                        }
	                    }
	                    if (tile.getAlpha(uid, frameState.time) === 1) {
	                        // don't look for alt tiles if alpha is 1
	                        continue;
	                    }
	                }
	                var childTileRange = tileGrid.getTileCoordChildTileRange(tile.tileCoord, tmpTileRange, tmpExtent);
	                var covered = false;
	                if (childTileRange) {
	                    covered = findLoadedTiles(z + 1, childTileRange);
	                }
	                if (!covered) {
	                    tileGrid.forEachTileCoordParentTileRange(tile.tileCoord, findLoadedTiles, tmpTileRange, tmpExtent);
	                }
	            }
	        }
	        var canvasScale = tileResolution / viewResolution;
	        // set forward and inverse pixel transforms
	        compose(this.pixelTransform, frameState.size[0] / 2, frameState.size[1] / 2, 1 / tilePixelRatio, 1 / tilePixelRatio, rotation, -width / 2, -height / 2);
	        var canvasTransform = this.createTransformString(this.pixelTransform);
	        this.useContainer(target, canvasTransform, layerState.opacity);
	        var context = this.context;
	        var canvas = context.canvas;
	        makeInverse(this.inversePixelTransform, this.pixelTransform);
	        // set scale transform for calculating tile positions on the canvas
	        compose(this.tempTransform_, width / 2, height / 2, canvasScale, canvasScale, 0, -width / 2, -height / 2);
	        if (canvas.width != width || canvas.height != height) {
	            canvas.width = width;
	            canvas.height = height;
	        }
	        else if (!this.containerReused) {
	            context.clearRect(0, 0, width, height);
	        }
	        if (layerExtent) {
	            this.clipUnrotated(context, frameState, layerExtent);
	        }
	        this.preRender(context, frameState);
	        this.renderedTiles.length = 0;
	        /** @type {Array<number>} */
	        var zs = Object.keys(tilesToDrawByZ).map(Number);
	        zs.sort(numberSafeCompareFunction);
	        var clips, clipZs, currentClip;
	        if (layerState.opacity === 1 && (!this.containerReused || tileSource.getOpaque(frameState.viewState.projection))) {
	            zs = zs.reverse();
	        }
	        else {
	            clips = [];
	            clipZs = [];
	        }
	        for (var i = zs.length - 1; i >= 0; --i) {
	            var currentZ = zs[i];
	            var currentTilePixelSize = tileSource.getTilePixelSize(currentZ, pixelRatio, projection);
	            var currentResolution = tileGrid.getResolution(currentZ);
	            var currentScale = currentResolution / tileResolution;
	            var dx_1 = currentTilePixelSize[0] * currentScale * canvasScale;
	            var dy_1 = currentTilePixelSize[1] * currentScale * canvasScale;
	            var originTileCoord = tileGrid.getTileCoordForCoordAndZ(getTopLeft(canvasExtent), currentZ);
	            var originTileExtent = tileGrid.getTileCoordExtent(originTileCoord);
	            var origin_1 = apply(this.tempTransform_, [
	                tilePixelRatio * (originTileExtent[0] - canvasExtent[0]) / tileResolution,
	                tilePixelRatio * (canvasExtent[3] - originTileExtent[3]) / tileResolution
	            ]);
	            var tileGutter = tilePixelRatio * tileSource.getGutterForProjection(projection);
	            var tilesToDraw = tilesToDrawByZ[currentZ];
	            for (var tileCoordKey in tilesToDraw) {
	                var tile = /** @type {import("../../ImageTile.js").default} */ (tilesToDraw[tileCoordKey]);
	                var tileCoord = tile.tileCoord;
	                // Calculate integer positions and sizes so that tiles align
	                var floatX = (origin_1[0] - (originTileCoord[1] - tileCoord[1]) * dx_1);
	                var nextX = Math.round(floatX + dx_1);
	                var floatY = (origin_1[1] - (originTileCoord[2] - tileCoord[2]) * dy_1);
	                var nextY = Math.round(floatY + dy_1);
	                var x = Math.round(floatX);
	                var y = Math.round(floatY);
	                var w = nextX - x;
	                var h = nextY - y;
	                var transition = z === currentZ;
	                var inTransition = transition && tile.getAlpha(getUid(this), frameState.time) !== 1;
	                if (!inTransition) {
	                    if (clips) {
	                        // Clip mask for regions in this tile that already filled by a higher z tile
	                        context.save();
	                        currentClip = [x, y, x + w, y, x + w, y + h, x, y + h];
	                        for (var i_1 = 0, ii = clips.length; i_1 < ii; ++i_1) {
	                            if (z !== currentZ && currentZ < clipZs[i_1]) {
	                                var clip = clips[i_1];
	                                context.beginPath();
	                                // counter-clockwise (outer ring) for current tile
	                                context.moveTo(currentClip[0], currentClip[1]);
	                                context.lineTo(currentClip[2], currentClip[3]);
	                                context.lineTo(currentClip[4], currentClip[5]);
	                                context.lineTo(currentClip[6], currentClip[7]);
	                                // clockwise (inner ring) for higher z tile
	                                context.moveTo(clip[6], clip[7]);
	                                context.lineTo(clip[4], clip[5]);
	                                context.lineTo(clip[2], clip[3]);
	                                context.lineTo(clip[0], clip[1]);
	                                context.clip();
	                            }
	                        }
	                        clips.push(currentClip);
	                        clipZs.push(currentZ);
	                    }
	                    else {
	                        context.clearRect(x, y, w, h);
	                    }
	                }
	                this.drawTileImage(tile, frameState, x, y, w, h, tileGutter, transition, layerState.opacity);
	                if (clips && !inTransition) {
	                    context.restore();
	                }
	                this.renderedTiles.push(tile);
	                this.updateUsedTiles(frameState.usedTiles, tileSource, tile);
	            }
	        }
	        this.renderedRevision = sourceRevision;
	        this.renderedResolution = tileResolution;
	        this.extentChanged = !this.renderedExtent_ || !equals(this.renderedExtent_, canvasExtent);
	        this.renderedExtent_ = canvasExtent;
	        this.renderedPixelRatio = pixelRatio;
	        this.renderedProjection = projection;
	        this.manageTilePyramid(frameState, tileSource, tileGrid, pixelRatio, projection, extent, z, tileLayer.getPreload());
	        this.updateCacheSize_(frameState, tileSource);
	        this.scheduleExpireCache(frameState, tileSource);
	        this.postRender(context, frameState);
	        if (layerState.extent) {
	            context.restore();
	        }
	        if (canvasTransform !== canvas.style.transform) {
	            canvas.style.transform = canvasTransform;
	        }
	        return this.container;
	    };
	    /**
	     * @param {import("../../ImageTile.js").default} tile Tile.
	     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
	     * @param {number} x Left of the tile.
	     * @param {number} y Top of the tile.
	     * @param {number} w Width of the tile.
	     * @param {number} h Height of the tile.
	     * @param {number} gutter Tile gutter.
	     * @param {boolean} transition Apply an alpha transition.
	     * @param {number} opacity Opacity.
	     */
	    CanvasTileLayerRenderer.prototype.drawTileImage = function (tile, frameState, x, y, w, h, gutter, transition, opacity) {
	        var image = this.getTileImage(tile);
	        if (!image) {
	            return;
	        }
	        var uid = getUid(this);
	        var tileAlpha = transition ? tile.getAlpha(uid, frameState.time) : 1;
	        var alpha = opacity * tileAlpha;
	        var alphaChanged = alpha !== this.context.globalAlpha;
	        if (alphaChanged) {
	            this.context.save();
	            this.context.globalAlpha = alpha;
	        }
	        this.context.drawImage(image, gutter, gutter, image.width - 2 * gutter, image.height - 2 * gutter, x, y, w, h);
	        if (alphaChanged) {
	            this.context.restore();
	        }
	        if (tileAlpha !== 1) {
	            frameState.animate = true;
	        }
	        else if (transition) {
	            tile.endTransition(uid);
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    CanvasTileLayerRenderer.prototype.getImage = function () {
	        var context = this.context;
	        return context ? context.canvas : null;
	    };
	    /**
	     * Get the image from a tile.
	     * @param {import("../../ImageTile.js").default} tile Tile.
	     * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
	     * @protected
	     */
	    CanvasTileLayerRenderer.prototype.getTileImage = function (tile) {
	        return tile.getImage();
	    };
	    /**
	     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
	     * @param {import("../../source/Tile.js").default} tileSource Tile source.
	     * @protected
	     */
	    CanvasTileLayerRenderer.prototype.scheduleExpireCache = function (frameState, tileSource) {
	        if (tileSource.canExpireCache()) {
	            /**
	             * @param {import("../../source/Tile.js").default} tileSource Tile source.
	             * @param {import("../../PluggableMap.js").default} map Map.
	             * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
	             */
	            var postRenderFunction = function (tileSource, map, frameState) {
	                var tileSourceKey = getUid(tileSource);
	                if (tileSourceKey in frameState.usedTiles) {
	                    tileSource.expireCache(frameState.viewState.projection, frameState.usedTiles[tileSourceKey]);
	                }
	            }.bind(null, tileSource);
	            frameState.postRenderFunctions.push(
	            /** @type {import("../../PluggableMap.js").PostRenderFunction} */ (postRenderFunction));
	        }
	    };
	    /**
	     * @param {!Object<string, !Object<string, boolean>>} usedTiles Used tiles.
	     * @param {import("../../source/Tile.js").default} tileSource Tile source.
	     * @param {import('../../Tile.js').default} tile Tile.
	     * @protected
	     */
	    CanvasTileLayerRenderer.prototype.updateUsedTiles = function (usedTiles, tileSource, tile) {
	        // FIXME should we use tilesToDrawByZ instead?
	        var tileSourceKey = getUid(tileSource);
	        if (!(tileSourceKey in usedTiles)) {
	            usedTiles[tileSourceKey] = {};
	        }
	        usedTiles[tileSourceKey][tile.getKey()] = true;
	    };
	    /**
	     * Check if the cache is big enough, and increase its size if necessary.
	     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
	     * @param {import("../../source/Tile.js").default} tileSource Tile source.
	     * @private
	     */
	    CanvasTileLayerRenderer.prototype.updateCacheSize_ = function (frameState, tileSource) {
	        var tileSourceKey = getUid(tileSource);
	        var size = 0;
	        if (tileSourceKey in frameState.usedTiles) {
	            size += Object.keys(frameState.usedTiles[tileSourceKey]).length;
	        }
	        if (tileSourceKey in frameState.wantedTiles) {
	            size += Object.keys(frameState.wantedTiles[tileSourceKey]).length;
	        }
	        var tileCache = tileSource.tileCache;
	        if (tileCache.highWaterMark < size) {
	            tileCache.highWaterMark = size;
	        }
	    };
	    /**
	     * Manage tile pyramid.
	     * This function performs a number of functions related to the tiles at the
	     * current zoom and lower zoom levels:
	     * - registers idle tiles in frameState.wantedTiles so that they are not
	     *   discarded by the tile queue
	     * - enqueues missing tiles
	     * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
	     * @param {import("../../source/Tile.js").default} tileSource Tile source.
	     * @param {import("../../tilegrid/TileGrid.js").default} tileGrid Tile grid.
	     * @param {number} pixelRatio Pixel ratio.
	     * @param {import("../../proj/Projection.js").default} projection Projection.
	     * @param {import("../../extent.js").Extent} extent Extent.
	     * @param {number} currentZ Current Z.
	     * @param {number} preload Load low resolution tiles up to 'preload' levels.
	     * @param {function(import("../../Tile.js").default)=} opt_tileCallback Tile callback.
	     * @protected
	     */
	    CanvasTileLayerRenderer.prototype.manageTilePyramid = function (frameState, tileSource, tileGrid, pixelRatio, projection, extent, currentZ, preload, opt_tileCallback) {
	        var tileSourceKey = getUid(tileSource);
	        if (!(tileSourceKey in frameState.wantedTiles)) {
	            frameState.wantedTiles[tileSourceKey] = {};
	        }
	        var wantedTiles = frameState.wantedTiles[tileSourceKey];
	        var tileQueue = frameState.tileQueue;
	        var minZoom = tileGrid.getMinZoom();
	        var tile, tileRange, tileResolution, x, y, z;
	        for (z = minZoom; z <= currentZ; ++z) {
	            tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z, tileRange);
	            tileResolution = tileGrid.getResolution(z);
	            for (x = tileRange.minX; x <= tileRange.maxX; ++x) {
	                for (y = tileRange.minY; y <= tileRange.maxY; ++y) {
	                    if (currentZ - z <= preload) {
	                        tile = tileSource.getTile(z, x, y, pixelRatio, projection);
	                        if (tile.getState() == TileState.IDLE) {
	                            wantedTiles[tile.getKey()] = true;
	                            if (!tileQueue.isKeyQueued(tile.getKey())) {
	                                tileQueue.enqueue([tile, tileSourceKey,
	                                    tileGrid.getTileCoordCenter(tile.tileCoord), tileResolution]);
	                            }
	                        }
	                        if (opt_tileCallback !== undefined) {
	                            opt_tileCallback(tile);
	                        }
	                    }
	                    else {
	                        tileSource.useTile(z, x, y, projection);
	                    }
	                }
	            }
	        }
	    };
	    return CanvasTileLayerRenderer;
	}(CanvasLayerRenderer));
	/**
	 * @function
	 * @return {import("../../layer/Tile.js").default|import("../../layer/VectorTile.js").default}
	 */
	CanvasTileLayerRenderer.prototype.getLayer;

	var __extends$1k = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @classdesc
	 * For layer sources that provide pre-rendered, tiled images in grids that are
	 * organized by zoom levels for specific resolutions.
	 * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
	 * property on the layer object; for example, setting `title: 'My Title'` in the
	 * options means that `title` is observable, and has get/set accessors.
	 *
	 * @api
	 */
	var TileLayer = /** @class */ (function (_super) {
	    __extends$1k(TileLayer, _super);
	    /**
	     * @param {import("./BaseTile.js").Options=} opt_options Tile layer options.
	     */
	    function TileLayer(opt_options) {
	        return _super.call(this, opt_options) || this;
	    }
	    /**
	     * Create a renderer for this layer.
	     * @return {import("../renderer/Layer.js").default} A layer renderer.
	     * @protected
	     */
	    TileLayer.prototype.createRenderer = function () {
	        return new CanvasTileLayerRenderer(this);
	    };
	    return TileLayer;
	}(BaseTileLayer));

	/**
	 * @module ol/layer/VectorTileRenderType
	 */
	/**
	 * @enum {string}
	 * Render mode for vector tiles:
	 *  * `'image'`: Vector tiles are rendered as images. Great performance, but
	 *    point symbols and texts are always rotated with the view and pixels are
	 *    scaled during zoom animations.
	 *  * `'hybrid'`: Polygon and line elements are rendered as images, so pixels
	 *    are scaled during zoom animations. Point symbols and texts are accurately
	 *    rendered as vectors and can stay upright on rotated views.
	 * @api
	 */
	var VectorTileRenderType = {
	    IMAGE: 'image',
	    HYBRID: 'hybrid'
	};

	var __extends$1l = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @type {!Object<string, Array<import("../../render/canvas/BuilderType.js").default>>}
	 */
	var IMAGE_REPLAYS = {
	    'image': [ReplayType.POLYGON, ReplayType.CIRCLE,
	        ReplayType.LINE_STRING, ReplayType.IMAGE, ReplayType.TEXT],
	    'hybrid': [ReplayType.POLYGON, ReplayType.LINE_STRING]
	};
	/**
	 * @type {!Object<string, Array<import("../../render/canvas/BuilderType.js").default>>}
	 */
	var VECTOR_REPLAYS = {
	    'image': [ReplayType.DEFAULT],
	    'hybrid': [ReplayType.IMAGE, ReplayType.TEXT, ReplayType.DEFAULT]
	};
	/**
	 * @classdesc
	 * Canvas renderer for vector tile layers.
	 * @api
	 */
	var CanvasVectorTileLayerRenderer = /** @class */ (function (_super) {
	    __extends$1l(CanvasVectorTileLayerRenderer, _super);
	    /**
	     * @param {import("../../layer/VectorTile.js").default} layer VectorTile layer.
	     */
	    function CanvasVectorTileLayerRenderer(layer) {
	        var _this = _super.call(this, layer) || this;
	        /** @private */
	        _this.boundHandleStyleImageChange_ = _this.handleStyleImageChange_.bind(_this);
	        /**
	         * @private
	         * @type {boolean}
	         */
	        _this.dirty_ = false;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.renderedLayerRevision_;
	        /**
	         * @private
	         * @type {import("../../transform").Transform}
	         */
	        _this.renderedPixelToCoordinateTransform_ = null;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.renderedRotation_;
	        /**
	         * @private
	         * @type {!Object<string, import("../../VectorRenderTile.js").default>}
	         */
	        _this.renderTileImageQueue_ = {};
	        /**
	         * @type {Object<string, import("../../events.js").EventsKey>}
	         */
	        _this.tileListenerKeys_ = {};
	        /**
	         * @private
	         * @type {import("../../transform.js").Transform}
	         */
	        _this.tmpTransform_ = create();
	        return _this;
	    }
	    /**
	     * @param {import("../../VectorRenderTile.js").default} tile Tile.
	     * @param {number} pixelRatio Pixel ratio.
	     * @param {import("../../proj/Projection").default} projection Projection.
	     * @param {boolean} queue Queue tile for rendering.
	     * @return {boolean|undefined} Tile needs to be rendered.
	     */
	    CanvasVectorTileLayerRenderer.prototype.prepareTile = function (tile, pixelRatio, projection, queue) {
	        var render;
	        var tileUid = getUid(tile);
	        var state = tile.getState();
	        if (((state === TileState.LOADED && tile.hifi) ||
	            state === TileState.ERROR || state === TileState.ABORT) &&
	            tileUid in this.tileListenerKeys_) {
	            unlistenByKey(this.tileListenerKeys_[tileUid]);
	            delete this.tileListenerKeys_[tileUid];
	        }
	        if (state === TileState.LOADED || state === TileState.ERROR) {
	            this.updateExecutorGroup_(tile, pixelRatio, projection);
	            if (this.tileImageNeedsRender_(tile, pixelRatio, projection)) {
	                render = true;
	                if (queue) {
	                    this.renderTileImageQueue_[tileUid] = tile;
	                }
	            }
	        }
	        return render;
	    };
	    /**
	     * @inheritDoc
	     */
	    CanvasVectorTileLayerRenderer.prototype.getTile = function (z, x, y, frameState) {
	        var tile = /** @type {import("../../VectorRenderTile.js").default} */ (_super.prototype.getTile.call(this, z, x, y, frameState));
	        var pixelRatio = frameState.pixelRatio;
	        var viewState = frameState.viewState;
	        var resolution = viewState.resolution;
	        var projection = viewState.projection;
	        if (tile.getState() < TileState.LOADED) {
	            tile.wantedResolution = resolution;
	            var tileUid = getUid(tile);
	            if (!(tileUid in this.tileListenerKeys_)) {
	                var listenerKey = listen$1(tile, EventType.CHANGE, this.prepareTile.bind(this, tile, pixelRatio, projection, true));
	                this.tileListenerKeys_[tileUid] = listenerKey;
	            }
	        }
	        else {
	            var viewHints = frameState.viewHints;
	            var hifi = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);
	            if (hifi || !tile.wantedResolution) {
	                tile.wantedResolution = resolution;
	            }
	            var render = this.prepareTile(tile, pixelRatio, projection, false);
	            if (render) {
	                this.renderTileImage_(tile, frameState);
	            }
	        }
	        return tile;
	    };
	    /**
	     * @inheritdoc
	     */
	    CanvasVectorTileLayerRenderer.prototype.isDrawableTile = function (tile) {
	        return _super.prototype.isDrawableTile.call(this, tile) && tile.hasContext(this.getLayer());
	    };
	    /**
	     * @inheritDoc
	     */
	    CanvasVectorTileLayerRenderer.prototype.getTileImage = function (tile) {
	        return tile.getImage(this.getLayer());
	    };
	    /**
	     * @inheritDoc
	     */
	    CanvasVectorTileLayerRenderer.prototype.prepareFrame = function (frameState) {
	        var layerRevision = this.getLayer().getRevision();
	        if (this.renderedLayerRevision_ != layerRevision) {
	            this.renderedTiles.length = 0;
	        }
	        this.renderedLayerRevision_ = layerRevision;
	        return _super.prototype.prepareFrame.call(this, frameState);
	    };
	    /**
	     * @param {import("../../VectorRenderTile.js").default} tile Tile.
	     * @param {number} pixelRatio Pixel ratio.
	     * @param {import("../../proj/Projection.js").default} projection Projection.
	     * @private
	     */
	    CanvasVectorTileLayerRenderer.prototype.updateExecutorGroup_ = function (tile, pixelRatio, projection) {
	        var layer = /** @type {import("../../layer/VectorTile.js").default} */ (this.getLayer());
	        var revision = layer.getRevision();
	        var renderOrder = layer.getRenderOrder() || null;
	        var resolution = tile.wantedResolution;
	        var builderState = tile.getReplayState(layer);
	        if (!builderState.dirty && builderState.renderedResolution === resolution &&
	            builderState.renderedRevision == revision &&
	            builderState.renderedRenderOrder == renderOrder && builderState.renderedZ === tile.sourceZ) {
	            return;
	        }
	        var source = layer.getSource();
	        var sourceTileGrid = source.getTileGrid();
	        var tileGrid = source.getTileGridForProjection(projection);
	        var tileExtent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);
	        var sourceTiles = source.getSourceTiles(pixelRatio, projection, tile);
	        var layerUid = getUid(layer);
	        var executorGroups = tile.executorGroups[layerUid];
	        if (executorGroups) {
	            for (var i = 0, ii = executorGroups.length; i < ii; ++i) {
	                executorGroups[i].dispose();
	            }
	        }
	        tile.hitDetectionImageData = null;
	        tile.executorGroups[layerUid] = [];
	        var _loop_1 = function (t, tt) {
	            var sourceTile = sourceTiles[t];
	            if (sourceTile.getState() != TileState.LOADED) {
	                return "continue";
	            }
	            var sourceTileCoord = sourceTile.tileCoord;
	            var sourceTileExtent = sourceTileGrid.getTileCoordExtent(sourceTileCoord);
	            var sharedExtent = getIntersection(tileExtent, sourceTileExtent);
	            var bufferedExtent = equals(sourceTileExtent, sharedExtent) ? null :
	                buffer(sharedExtent, layer.getRenderBuffer() * resolution, this_1.tmpExtent);
	            builderState.dirty = false;
	            var builderGroup = new BuilderGroup(0, sharedExtent, resolution, pixelRatio, layer.getDeclutter());
	            var squaredTolerance = getSquaredTolerance(resolution, pixelRatio);
	            /**
	             * @param {import("../../Feature.js").FeatureLike} feature Feature.
	             * @this {CanvasVectorTileLayerRenderer}
	             */
	            var render = function (feature) {
	                var styles;
	                var styleFunction = feature.getStyleFunction() || layer.getStyleFunction();
	                if (styleFunction) {
	                    styles = styleFunction(feature, resolution);
	                }
	                if (styles) {
	                    var dirty = this.renderFeature(feature, squaredTolerance, styles, builderGroup);
	                    this.dirty_ = this.dirty_ || dirty;
	                    builderState.dirty = builderState.dirty || dirty;
	                }
	            };
	            var features = sourceTile.getFeatures();
	            if (renderOrder && renderOrder !== builderState.renderedRenderOrder) {
	                features.sort(renderOrder);
	            }
	            for (var i = 0, ii = features.length; i < ii; ++i) {
	                var feature = features[i];
	                if (!bufferedExtent || intersects(bufferedExtent, feature.getGeometry().getExtent())) {
	                    render.call(this_1, feature);
	                }
	            }
	            var executorGroupInstructions = builderGroup.finish();
	            // no need to clip when the render tile is covered by a single source tile
	            var replayExtent = layer.getDeclutter() && sourceTiles.length === 1 ?
	                null :
	                sharedExtent;
	            var renderingReplayGroup = new ExecutorGroup(replayExtent, resolution, pixelRatio, source.getOverlaps(), executorGroupInstructions, layer.getRenderBuffer());
	            tile.executorGroups[layerUid].push(renderingReplayGroup);
	        };
	        var this_1 = this;
	        for (var t = 0, tt = sourceTiles.length; t < tt; ++t) {
	            _loop_1(t);
	        }
	        builderState.renderedRevision = revision;
	        builderState.renderedZ = tile.sourceZ;
	        builderState.renderedRenderOrder = renderOrder;
	        builderState.renderedResolution = resolution;
	    };
	    /**
	     * @inheritDoc
	     */
	    CanvasVectorTileLayerRenderer.prototype.forEachFeatureAtCoordinate = function (coordinate, frameState, hitTolerance, callback, declutteredFeatures) {
	        var resolution = frameState.viewState.resolution;
	        var rotation = frameState.viewState.rotation;
	        hitTolerance = hitTolerance == undefined ? 0 : hitTolerance;
	        var layer = /** @type {import("../../layer/VectorTile.js").default} */ (this.getLayer());
	        var declutter = layer.getDeclutter();
	        var source = layer.getSource();
	        var tileGrid = source.getTileGridForProjection(frameState.viewState.projection);
	        /** @type {!Object<string, boolean>} */
	        var features = {};
	        var renderedTiles = /** @type {Array<import("../../VectorRenderTile.js").default>} */ (this.renderedTiles);
	        var found;
	        var i, ii;
	        var _loop_2 = function () {
	            var tile = renderedTiles[i];
	            var tileExtent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);
	            var tileContainsCoordinate = containsCoordinate(tileExtent, coordinate);
	            if (!declutter) {
	                // When not decluttering, we only need to consider the tile that contains the given
	                // coordinate, because each feature will be rendered for each tile that contains it.
	                if (!tileContainsCoordinate) {
	                    return "continue";
	                }
	            }
	            var executorGroups = tile.executorGroups[getUid(layer)];
	            for (var t = 0, tt = executorGroups.length; t < tt; ++t) {
	                var executorGroup = executorGroups[t];
	                found = found || executorGroup.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, 
	                /**
	                 * @param {import("../../Feature.js").FeatureLike} feature Feature.
	                 * @return {?} Callback result.
	                 */
	                function (feature) {
	                    if (tileContainsCoordinate || (declutteredFeatures && declutteredFeatures.indexOf(feature) !== -1)) {
	                        var key = feature.getId();
	                        if (key === undefined) {
	                            key = getUid(feature);
	                        }
	                        if (!(key in features)) {
	                            features[key] = true;
	                            return callback(feature, layer);
	                        }
	                    }
	                }, layer.getDeclutter() ? declutteredFeatures : null);
	            }
	        };
	        for (i = 0, ii = renderedTiles.length; i < ii; ++i) {
	            _loop_2();
	        }
	        return found;
	    };
	    /**
	     * @inheritDoc
	     */
	    CanvasVectorTileLayerRenderer.prototype.getFeatures = function (pixel) {
	        return new Promise(function (resolve, reject) {
	            var layer = /** @type {import("../../layer/VectorTile.js").default} */ (this.getLayer());
	            var source = layer.getSource();
	            var projection = this.renderedProjection;
	            var projectionExtent = projection.getExtent();
	            var resolution = this.renderedResolution;
	            var tileGrid = source.getTileGridForProjection(projection);
	            var coordinate = apply(this.renderedPixelToCoordinateTransform_, pixel.slice());
	            var tileCoord = tileGrid.getTileCoordForCoordAndResolution(coordinate, resolution);
	            var tile;
	            for (var i = 0, ii = this.renderedTiles.length; i < ii; ++i) {
	                if (tileCoord.toString() === this.renderedTiles[i].tileCoord.toString()) {
	                    tile = this.renderedTiles[i];
	                    if (tile.getState() === TileState.LOADED && tile.hifi) {
	                        var extent_1 = tileGrid.getTileCoordExtent(tile.tileCoord);
	                        if (source.getWrapX() && projection.canWrapX() && !containsExtent(projectionExtent, extent_1)) {
	                            var worldWidth = getWidth(projectionExtent);
	                            var worldsAway = Math.floor((coordinate[0] - projectionExtent[0]) / worldWidth);
	                            coordinate[0] -= (worldsAway * worldWidth);
	                        }
	                        break;
	                    }
	                    tile = undefined;
	                }
	            }
	            if (!tile) {
	                resolve([]);
	                return;
	            }
	            var extent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);
	            var corner = getTopLeft(extent);
	            var tilePixel = [
	                (coordinate[0] - corner[0]) / resolution,
	                (corner[1] - coordinate[1]) / resolution
	            ];
	            var features = tile.getSourceTiles().reduce(function (accumulator, sourceTile) {
	                return accumulator.concat(sourceTile.getFeatures());
	            }, []);
	            if (!tile.hitDetectionImageData) {
	                var tileSize_1 = toSize(tileGrid.getTileSize(tileGrid.getZForResolution(resolution)));
	                var size = [tileSize_1[0] / 2, tileSize_1[1] / 2];
	                var rotation_1 = this.renderedRotation_;
	                var transforms_1 = [
	                    this.getRenderTransform(tileGrid.getTileCoordCenter(tile.wrappedTileCoord), resolution, 0, 0.5, size[0], size[1], 0)
	                ];
	                requestAnimationFrame(function () {
	                    tile.hitDetectionImageData = createHitDetectionImageData(tileSize_1, transforms_1, features, layer.getStyleFunction(), tileGrid.getTileCoordExtent(tile.wrappedTileCoord), tile.getReplayState(layer).renderedResolution, rotation_1);
	                    resolve(hitDetect(tilePixel, features, tile.hitDetectionImageData));
	                });
	            }
	            else {
	                resolve(hitDetect(tilePixel, features, tile.hitDetectionImageData));
	            }
	        }.bind(this));
	    };
	    /**
	     * @inheritDoc
	     */
	    CanvasVectorTileLayerRenderer.prototype.handleFontsChanged = function () {
	        clear$1(this.renderTileImageQueue_);
	        var layer = this.getLayer();
	        if (layer.getVisible() && this.renderedLayerRevision_ !== undefined) {
	            layer.changed();
	        }
	    };
	    /**
	     * Handle changes in image style state.
	     * @param {import("../../events/Event.js").default} event Image style change event.
	     * @private
	     */
	    CanvasVectorTileLayerRenderer.prototype.handleStyleImageChange_ = function (event) {
	        this.renderIfReadyAndVisible();
	    };
	    /**
	     * @inheritDoc
	     */
	    CanvasVectorTileLayerRenderer.prototype.renderFrame = function (frameState, target) {
	        var viewHints = frameState.viewHints;
	        var hifi = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);
	        this.renderQueuedTileImages_(hifi, frameState);
	        _super.prototype.renderFrame.call(this, frameState, target);
	        this.renderedPixelToCoordinateTransform_ = frameState.pixelToCoordinateTransform.slice();
	        this.renderedRotation_ = frameState.viewState.rotation;
	        var layer = /** @type {import("../../layer/VectorTile.js").default} */ (this.getLayer());
	        var renderMode = layer.getRenderMode();
	        if (renderMode === VectorTileRenderType.IMAGE) {
	            return this.container;
	        }
	        var source = layer.getSource();
	        // Unqueue tiles from the image queue when we don't need any more
	        var usedTiles = frameState.usedTiles[getUid(source)];
	        for (var tileUid in this.renderTileImageQueue_) {
	            if (!usedTiles || !(tileUid in usedTiles)) {
	                delete this.renderTileImageQueue_[tileUid];
	            }
	        }
	        var context = this.context;
	        var declutterReplays = layer.getDeclutter() ? {} : null;
	        var replayTypes = VECTOR_REPLAYS[renderMode];
	        var pixelRatio = frameState.pixelRatio;
	        var viewState = frameState.viewState;
	        var center = viewState.center;
	        var resolution = viewState.resolution;
	        var rotation = viewState.rotation;
	        var size = frameState.size;
	        var width = Math.round(size[0] * pixelRatio);
	        var height = Math.round(size[1] * pixelRatio);
	        var tiles = this.renderedTiles;
	        var tileGrid = source.getTileGridForProjection(frameState.viewState.projection);
	        var clips = [];
	        var clipZs = [];
	        for (var i = tiles.length - 1; i >= 0; --i) {
	            var tile = /** @type {import("../../VectorRenderTile.js").default} */ (tiles[i]);
	            if (tile.getState() == TileState.ABORT) {
	                continue;
	            }
	            var tileCoord = tile.tileCoord;
	            var tileExtent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);
	            var worldOffset = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent)[0] - tileExtent[0];
	            var transform = multiply(scale$1(this.inversePixelTransform.slice(), 1 / pixelRatio, 1 / pixelRatio), this.getRenderTransform(center, resolution, rotation, pixelRatio, width, height, worldOffset));
	            var executorGroups = tile.executorGroups[getUid(layer)];
	            var clipped = false;
	            for (var t = 0, tt = executorGroups.length; t < tt; ++t) {
	                var executorGroup = executorGroups[t];
	                if (!executorGroup.hasExecutors(replayTypes)) {
	                    // sourceTile has no instructions of the types we want to render
	                    continue;
	                }
	                var currentZ = tile.tileCoord[0];
	                var currentClip = void 0;
	                if (!declutterReplays && !clipped) {
	                    currentClip = executorGroup.getClipCoords(transform);
	                    context.save();
	                    // Create a clip mask for regions in this low resolution tile that are
	                    // already filled by a higher resolution tile
	                    for (var j = 0, jj = clips.length; j < jj; ++j) {
	                        var clip = clips[j];
	                        if (currentZ < clipZs[j]) {
	                            context.beginPath();
	                            // counter-clockwise (outer ring) for current tile
	                            context.moveTo(currentClip[0], currentClip[1]);
	                            context.lineTo(currentClip[2], currentClip[3]);
	                            context.lineTo(currentClip[4], currentClip[5]);
	                            context.lineTo(currentClip[6], currentClip[7]);
	                            // clockwise (inner ring) for higher resolution tile
	                            context.moveTo(clip[6], clip[7]);
	                            context.lineTo(clip[4], clip[5]);
	                            context.lineTo(clip[2], clip[3]);
	                            context.lineTo(clip[0], clip[1]);
	                            context.clip();
	                        }
	                    }
	                }
	                executorGroup.execute(context, transform, rotation, hifi, replayTypes, declutterReplays);
	                if (!declutterReplays && !clipped) {
	                    context.restore();
	                    clips.push(currentClip);
	                    clipZs.push(currentZ);
	                    clipped = true;
	                }
	            }
	        }
	        if (declutterReplays) {
	            var layerState = frameState.layerStatesArray[frameState.layerIndex];
	            replayDeclutter(declutterReplays, context, rotation, layerState.opacity, hifi, frameState.declutterItems);
	        }
	        return this.container;
	    };
	    /**
	     * @param {boolean} hifi We have time to render a high fidelity map image.
	     * @param {import('../../PluggableMap.js').FrameState} frameState Frame state.
	     */
	    CanvasVectorTileLayerRenderer.prototype.renderQueuedTileImages_ = function (hifi, frameState) {
	        // When we don't have time to render hifi, only render tiles until we have used up
	        // half of the frame budget of 16 ms
	        for (var uid in this.renderTileImageQueue_) {
	            if (!hifi && Date.now() - frameState.time > 8) {
	                frameState.animate = true;
	                break;
	            }
	            var tile = this.renderTileImageQueue_[uid];
	            delete this.renderTileImageQueue_[uid];
	            this.renderTileImage_(tile, frameState);
	        }
	    };
	    /**
	     * @param {import("../../Feature.js").FeatureLike} feature Feature.
	     * @param {number} squaredTolerance Squared tolerance.
	     * @param {import("../../style/Style.js").default|Array<import("../../style/Style.js").default>} styles The style or array of styles.
	     * @param {import("../../render/canvas/BuilderGroup.js").default} executorGroup Replay group.
	     * @return {boolean} `true` if an image is loading.
	     */
	    CanvasVectorTileLayerRenderer.prototype.renderFeature = function (feature, squaredTolerance, styles, executorGroup) {
	        if (!styles) {
	            return false;
	        }
	        var loading = false;
	        if (Array.isArray(styles)) {
	            for (var i = 0, ii = styles.length; i < ii; ++i) {
	                loading = renderFeature(executorGroup, feature, styles[i], squaredTolerance, this.boundHandleStyleImageChange_) || loading;
	            }
	        }
	        else {
	            loading = renderFeature(executorGroup, feature, styles, squaredTolerance, this.boundHandleStyleImageChange_);
	        }
	        return loading;
	    };
	    /**
	     * @param {import("../../VectorRenderTile.js").default} tile Tile.
	     * @param {number} pixelRatio Pixel ratio.
	     * @param {import("../../proj/Projection.js").default} projection Projection.
	     * @return {boolean} A new tile image was rendered.
	     * @private
	     */
	    CanvasVectorTileLayerRenderer.prototype.tileImageNeedsRender_ = function (tile, pixelRatio, projection) {
	        var layer = /** @type {import("../../layer/VectorTile.js").default} */ (this.getLayer());
	        var replayState = tile.getReplayState(layer);
	        var revision = layer.getRevision();
	        var sourceZ = tile.sourceZ;
	        var resolution = tile.wantedResolution;
	        return replayState.renderedTileResolution !== resolution || replayState.renderedTileRevision !== revision || replayState.renderedTileZ !== sourceZ;
	    };
	    /**
	     * @param {import("../../VectorRenderTile.js").default} tile Tile.
	     * @param {import("../../PluggableMap").FrameState} frameState Frame state.
	     * @private
	     */
	    CanvasVectorTileLayerRenderer.prototype.renderTileImage_ = function (tile, frameState) {
	        var layer = /** @type {import("../../layer/VectorTile.js").default} */ (this.getLayer());
	        var replayState = tile.getReplayState(layer);
	        var revision = layer.getRevision();
	        var executorGroups = tile.executorGroups[getUid(layer)];
	        replayState.renderedTileRevision = revision;
	        replayState.renderedTileZ = tile.sourceZ;
	        var tileCoord = tile.wrappedTileCoord;
	        var z = tileCoord[0];
	        var source = layer.getSource();
	        var pixelRatio = frameState.pixelRatio;
	        var viewState = frameState.viewState;
	        var projection = viewState.projection;
	        var tileGrid = source.getTileGridForProjection(projection);
	        var tileResolution = tileGrid.getResolution(tile.tileCoord[0]);
	        var renderPixelRatio = frameState.pixelRatio / tile.wantedResolution * tileResolution;
	        var resolution = tileGrid.getResolution(z);
	        var context = tile.getContext(layer);
	        // Increase tile size when overzooming for low pixel ratio, to avoid blurry tiles
	        pixelRatio = Math.max(pixelRatio, renderPixelRatio / pixelRatio);
	        var size = source.getTilePixelSize(z, pixelRatio, projection);
	        context.canvas.width = size[0];
	        context.canvas.height = size[1];
	        var renderScale = pixelRatio / renderPixelRatio;
	        if (renderScale !== 1) {
	            var canvasTransform = reset(this.tmpTransform_);
	            scale$1(canvasTransform, renderScale, renderScale);
	            context.setTransform.apply(context, canvasTransform);
	        }
	        var tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent);
	        var pixelScale = renderPixelRatio / resolution;
	        var transform = reset(this.tmpTransform_);
	        scale$1(transform, pixelScale, -pixelScale);
	        translate$1(transform, -tileExtent[0], -tileExtent[3]);
	        for (var i = 0, ii = executorGroups.length; i < ii; ++i) {
	            var executorGroup = executorGroups[i];
	            executorGroup.execute(context, transform, 0, true, IMAGE_REPLAYS[layer.getRenderMode()]);
	        }
	        replayState.renderedTileResolution = tile.wantedResolution;
	    };
	    return CanvasVectorTileLayerRenderer;
	}(CanvasTileLayerRenderer));

	var __extends$1m = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @typedef {Object} Options
	 * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
	 * @property {number} [opacity=1] Opacity (0, 1).
	 * @property {boolean} [visible=true] Visibility.
	 * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
	 * rendered outside of this extent.
	 * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
	 * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
	 * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
	 * method was used.
	 * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
	 * visible.
	 * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
	 * be visible.
	 * @property {import("../render.js").OrderFunction} [renderOrder] Render order. Function to be used when sorting
	 * features before rendering. By default features are drawn in the order that they are created. Use
	 * `null` to avoid the sort, but get an undefined draw order.
	 * @property {number} [renderBuffer=100] The buffer in pixels around the tile extent used by the
	 * renderer when getting features from the vector tile for the rendering or hit-detection.
	 * Recommended value: Vector tiles are usually generated with a buffer, so this value should match
	 * the largest possible buffer of the used tiles. It should be at least the size of the largest
	 * point symbol or line width.
	 * @property {import("./VectorTileRenderType.js").default|string} [renderMode='hybrid'] Render mode for vector tiles:
	 *  * `'image'`: Vector tiles are rendered as images. Great performance, but point symbols and texts
	 *    are always rotated with the view and pixels are scaled during zoom animations. When `declutter`
	 *    is set to `true`, the decluttering is done per tile resulting in labels and point symbols getting
	 *    cut off at tile boundaries.
	 *  * `'hybrid'`: Polygon and line elements are rendered as images, so pixels are scaled during zoom
	 *    animations. Point symbols and texts are accurately rendered as vectors and can stay upright on
	 *    rotated views.
	 *
	 * @property {import("../source/VectorTile.js").default} [source] Source.
	 * @property {import("../PluggableMap.js").default} [map] Sets the layer as overlay on a map. The map will not manage
	 * this layer in its layers collection, and the layer will be rendered on top. This is useful for
	 * temporary layers. The standard way to add a layer to a map and have it managed by the map is to
	 * use {@link module:ol/Map#addLayer}.
	 * @property {boolean} [declutter=false] Declutter images and text. Decluttering is applied to all
	 * image and text styles of all Vector and VectorTile layers that have set this to `true`. The priority
	 * is defined by the z-index of the layer, the `zIndex` of the style and the render order of features.
	 * Higher z-index means higher priority. Within the same z-index, a feature rendered before another has
	 * higher priority.
	 * @property {import("../style/Style.js").StyleLike} [style] Layer style. See
	 * {@link module:ol/style} for default style which will be used if this is not defined.
	 * @property {boolean} [updateWhileAnimating=false] When set to `true`, feature batches will be
	 * recreated during animations. This means that no vectors will be shown clipped, but the setting
	 * will have a performance impact for large amounts of vector data. When set to `false`, batches
	 * will be recreated when no animation is active.
	 * @property {boolean} [updateWhileInteracting=false] When set to `true`, feature batches will be
	 * recreated during interactions. See also `updateWhileAnimating`.
	 * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`
	 * means no preloading.
	 * @property {boolean} [useInterimTilesOnError=true] Use interim tiles on error.
	 */
	/**
	 * @classdesc
	 * Layer for vector tile data that is rendered client-side.
	 * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
	 * property on the layer object; for example, setting `title: 'My Title'` in the
	 * options means that `title` is observable, and has get/set accessors.
	 *
	 * @param {Options=} opt_options Options.
	 * @extends {BaseVectorLayer<import("../source/VectorTile.js").default>}
	 * @api
	 */
	var VectorTileLayer = /** @class */ (function (_super) {
	    __extends$1m(VectorTileLayer, _super);
	    /**
	     * @param {Options=} opt_options Options.
	     */
	    function VectorTileLayer(opt_options) {
	        var _this = this;
	        var options = opt_options ? opt_options : {};
	        var baseOptions = /** @type {Object} */ (assign$1({}, options));
	        delete baseOptions.preload;
	        delete baseOptions.useInterimTilesOnError;
	        _this = _super.call(this, /** @type {import("./BaseVector.js").Options} */ (baseOptions)) || this;
	        var renderMode = options.renderMode || VectorTileRenderType.HYBRID;
	        assert(renderMode == undefined ||
	            renderMode == VectorTileRenderType.IMAGE ||
	            renderMode == VectorTileRenderType.HYBRID, 28); // `renderMode` must be `'image'` or `'hybrid'`
	        /**
	         * @private
	         * @type {VectorTileRenderType}
	         */
	        _this.renderMode_ = renderMode;
	        _this.setPreload(options.preload ? options.preload : 0);
	        _this.setUseInterimTilesOnError(options.useInterimTilesOnError !== undefined ?
	            options.useInterimTilesOnError : true);
	        return _this;
	    }
	    /**
	     * Create a renderer for this layer.
	     * @return {import("../renderer/Layer.js").default} A layer renderer.
	     * @protected
	     */
	    VectorTileLayer.prototype.createRenderer = function () {
	        return new CanvasVectorTileLayerRenderer(this);
	    };
	    /**
	     * Get the topmost feature that intersects the given pixel on the viewport. Returns a promise
	     * that resolves with an array of features. The array will either contain the topmost feature
	     * when a hit was detected, or it will be empty.
	     *
	     * The hit detection algorithm used for this method is optimized for performance, but is less
	     * accurate than the one used in {@link import("../PluggableMap.js").default#getFeaturesAtPixel}: Text
	     * is not considered, and icons are only represented by their bounding box instead of the exact
	     * image.
	     *
	     * @param {import("../pixel.js").Pixel} pixel Pixel.
	     * @return {Promise<Array<import("../Feature").default>>} Promise that resolves with an array of features.
	     * @api
	     */
	    VectorTileLayer.prototype.getFeatures = function (pixel) {
	        return _super.prototype.getFeatures.call(this, pixel);
	    };
	    /**
	     * @return {VectorTileRenderType} The render mode.
	     */
	    VectorTileLayer.prototype.getRenderMode = function () {
	        return this.renderMode_;
	    };
	    /**
	     * Return the level as number to which we will preload tiles up to.
	     * @return {number} The level to preload tiles up to.
	     * @observable
	     * @api
	     */
	    VectorTileLayer.prototype.getPreload = function () {
	        return /** @type {number} */ (this.get(TileProperty.PRELOAD));
	    };
	    /**
	     * Whether we use interim tiles on error.
	     * @return {boolean} Use interim tiles on error.
	     * @observable
	     * @api
	     */
	    VectorTileLayer.prototype.getUseInterimTilesOnError = function () {
	        return /** @type {boolean} */ (this.get(TileProperty.USE_INTERIM_TILES_ON_ERROR));
	    };
	    /**
	     * Set the level as number to which we will preload tiles up to.
	     * @param {number} preload The level to preload tiles up to.
	     * @observable
	     * @api
	     */
	    VectorTileLayer.prototype.setPreload = function (preload) {
	        this.set(TileProperty.PRELOAD, preload);
	    };
	    /**
	     * Set whether we use interim tiles on error.
	     * @param {boolean} useInterimTilesOnError Use interim tiles on error.
	     * @observable
	     * @api
	     */
	    VectorTileLayer.prototype.setUseInterimTilesOnError = function (useInterimTilesOnError) {
	        this.set(TileProperty.USE_INTERIM_TILES_ON_ERROR, useInterimTilesOnError);
	    };
	    return VectorTileLayer;
	}(BaseVectorLayer));

	/**
	 * @module ol/reproj/common
	 */
	/**
	 * Default maximum allowed threshold  (in pixels) for reprojection
	 * triangulation.
	 * @type {number}
	 */
	var ERROR_THRESHOLD = 0.5;

	/**
	 * @module ol/reproj
	 */
	/**
	 * Calculates ideal resolution to use from the source in order to achieve
	 * pixel mapping as close as possible to 1:1 during reprojection.
	 * The resolution is calculated regardless of what resolutions
	 * are actually available in the dataset (TileGrid, Image, ...).
	 *
	 * @param {import("./proj/Projection.js").default} sourceProj Source projection.
	 * @param {import("./proj/Projection.js").default} targetProj Target projection.
	 * @param {import("./coordinate.js").Coordinate} targetCenter Target center.
	 * @param {number} targetResolution Target resolution.
	 * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.
	 */
	function calculateSourceResolution(sourceProj, targetProj, targetCenter, targetResolution) {
	    var sourceCenter = transform(targetCenter, targetProj, sourceProj);
	    // calculate the ideal resolution of the source data
	    var sourceResolution = getPointResolution(targetProj, targetResolution, targetCenter);
	    var targetMetersPerUnit = targetProj.getMetersPerUnit();
	    if (targetMetersPerUnit !== undefined) {
	        sourceResolution *= targetMetersPerUnit;
	    }
	    var sourceMetersPerUnit = sourceProj.getMetersPerUnit();
	    if (sourceMetersPerUnit !== undefined) {
	        sourceResolution /= sourceMetersPerUnit;
	    }
	    // Based on the projection properties, the point resolution at the specified
	    // coordinates may be slightly different. We need to reverse-compensate this
	    // in order to achieve optimal results.
	    var sourceExtent = sourceProj.getExtent();
	    if (!sourceExtent || containsCoordinate(sourceExtent, sourceCenter)) {
	        var compensationFactor = getPointResolution(sourceProj, sourceResolution, sourceCenter) /
	            sourceResolution;
	        if (isFinite(compensationFactor) && compensationFactor > 0) {
	            sourceResolution /= compensationFactor;
	        }
	    }
	    return sourceResolution;
	}
	/**
	 * Enlarge the clipping triangle point by 1 pixel to ensure the edges overlap
	 * in order to mask gaps caused by antialiasing.
	 *
	 * @param {number} centroidX Centroid of the triangle (x coordinate in pixels).
	 * @param {number} centroidY Centroid of the triangle (y coordinate in pixels).
	 * @param {number} x X coordinate of the point (in pixels).
	 * @param {number} y Y coordinate of the point (in pixels).
	 * @return {import("./coordinate.js").Coordinate} New point 1 px farther from the centroid.
	 */
	function enlargeClipPoint(centroidX, centroidY, x, y) {
	    var dX = x - centroidX;
	    var dY = y - centroidY;
	    var distance = Math.sqrt(dX * dX + dY * dY);
	    return [Math.round(x + dX / distance), Math.round(y + dY / distance)];
	}
	/**
	 * Renders the source data into new canvas based on the triangulation.
	 *
	 * @param {number} width Width of the canvas.
	 * @param {number} height Height of the canvas.
	 * @param {number} pixelRatio Pixel ratio.
	 * @param {number} sourceResolution Source resolution.
	 * @param {import("./extent.js").Extent} sourceExtent Extent of the data source.
	 * @param {number} targetResolution Target resolution.
	 * @param {import("./extent.js").Extent} targetExtent Target extent.
	 * @param {import("./reproj/Triangulation.js").default} triangulation
	 * Calculated triangulation.
	 * @param {Array<{extent: import("./extent.js").Extent,
	 *                 image: (HTMLCanvasElement|HTMLImageElement|HTMLVideoElement)}>} sources
	 * Array of sources.
	 * @param {number} gutter Gutter of the sources.
	 * @param {boolean=} opt_renderEdges Render reprojection edges.
	 * @return {HTMLCanvasElement} Canvas with reprojected data.
	 */
	function render$2(width, height, pixelRatio, sourceResolution, sourceExtent, targetResolution, targetExtent, triangulation, sources, gutter, opt_renderEdges) {
	    var context = createCanvasContext2D(Math.round(pixelRatio * width), Math.round(pixelRatio * height));
	    if (sources.length === 0) {
	        return context.canvas;
	    }
	    context.scale(pixelRatio, pixelRatio);
	    var sourceDataExtent = createEmpty();
	    sources.forEach(function (src, i, arr) {
	        extend(sourceDataExtent, src.extent);
	    });
	    var canvasWidthInUnits = getWidth(sourceDataExtent);
	    var canvasHeightInUnits = getHeight(sourceDataExtent);
	    var stitchContext = createCanvasContext2D(Math.round(pixelRatio * canvasWidthInUnits / sourceResolution), Math.round(pixelRatio * canvasHeightInUnits / sourceResolution));
	    var stitchScale = pixelRatio / sourceResolution;
	    sources.forEach(function (src, i, arr) {
	        var xPos = src.extent[0] - sourceDataExtent[0];
	        var yPos = -(src.extent[3] - sourceDataExtent[3]);
	        var srcWidth = getWidth(src.extent);
	        var srcHeight = getHeight(src.extent);
	        stitchContext.drawImage(src.image, gutter, gutter, src.image.width - 2 * gutter, src.image.height - 2 * gutter, xPos * stitchScale, yPos * stitchScale, srcWidth * stitchScale, srcHeight * stitchScale);
	    });
	    var targetTopLeft = getTopLeft(targetExtent);
	    triangulation.getTriangles().forEach(function (triangle, i, arr) {
	        /* Calculate affine transform (src -> dst)
	         * Resulting matrix can be used to transform coordinate
	         * from `sourceProjection` to destination pixels.
	         *
	         * To optimize number of context calls and increase numerical stability,
	         * we also do the following operations:
	         * trans(-topLeftExtentCorner), scale(1 / targetResolution), scale(1, -1)
	         * here before solving the linear system so [ui, vi] are pixel coordinates.
	         *
	         * Src points: xi, yi
	         * Dst points: ui, vi
	         * Affine coefficients: aij
	         *
	         * | x0 y0 1  0  0 0 |   |a00|   |u0|
	         * | x1 y1 1  0  0 0 |   |a01|   |u1|
	         * | x2 y2 1  0  0 0 | x |a02| = |u2|
	         * |  0  0 0 x0 y0 1 |   |a10|   |v0|
	         * |  0  0 0 x1 y1 1 |   |a11|   |v1|
	         * |  0  0 0 x2 y2 1 |   |a12|   |v2|
	         */
	        var source = triangle.source;
	        var target = triangle.target;
	        var x0 = source[0][0], y0 = source[0][1];
	        var x1 = source[1][0], y1 = source[1][1];
	        var x2 = source[2][0], y2 = source[2][1];
	        var u0 = (target[0][0] - targetTopLeft[0]) / targetResolution;
	        var v0 = -(target[0][1] - targetTopLeft[1]) / targetResolution;
	        var u1 = (target[1][0] - targetTopLeft[0]) / targetResolution;
	        var v1 = -(target[1][1] - targetTopLeft[1]) / targetResolution;
	        var u2 = (target[2][0] - targetTopLeft[0]) / targetResolution;
	        var v2 = -(target[2][1] - targetTopLeft[1]) / targetResolution;
	        // Shift all the source points to improve numerical stability
	        // of all the subsequent calculations. The [x0, y0] is used here.
	        // This is also used to simplify the linear system.
	        var sourceNumericalShiftX = x0;
	        var sourceNumericalShiftY = y0;
	        x0 = 0;
	        y0 = 0;
	        x1 -= sourceNumericalShiftX;
	        y1 -= sourceNumericalShiftY;
	        x2 -= sourceNumericalShiftX;
	        y2 -= sourceNumericalShiftY;
	        var augmentedMatrix = [
	            [x1, y1, 0, 0, u1 - u0],
	            [x2, y2, 0, 0, u2 - u0],
	            [0, 0, x1, y1, v1 - v0],
	            [0, 0, x2, y2, v2 - v0]
	        ];
	        var affineCoefs = solveLinearSystem(augmentedMatrix);
	        if (!affineCoefs) {
	            return;
	        }
	        context.save();
	        context.beginPath();
	        var centroidX = (u0 + u1 + u2) / 3;
	        var centroidY = (v0 + v1 + v2) / 3;
	        var p0 = enlargeClipPoint(centroidX, centroidY, u0, v0);
	        var p1 = enlargeClipPoint(centroidX, centroidY, u1, v1);
	        var p2 = enlargeClipPoint(centroidX, centroidY, u2, v2);
	        context.moveTo(p1[0], p1[1]);
	        context.lineTo(p0[0], p0[1]);
	        context.lineTo(p2[0], p2[1]);
	        context.clip();
	        context.transform(affineCoefs[0], affineCoefs[2], affineCoefs[1], affineCoefs[3], u0, v0);
	        context.translate(sourceDataExtent[0] - sourceNumericalShiftX, sourceDataExtent[3] - sourceNumericalShiftY);
	        context.scale(sourceResolution / pixelRatio, -sourceResolution / pixelRatio);
	        context.drawImage(stitchContext.canvas, 0, 0);
	        context.restore();
	    });
	    if (opt_renderEdges) {
	        context.save();
	        context.strokeStyle = 'black';
	        context.lineWidth = 1;
	        triangulation.getTriangles().forEach(function (triangle, i, arr) {
	            var target = triangle.target;
	            var u0 = (target[0][0] - targetTopLeft[0]) / targetResolution;
	            var v0 = -(target[0][1] - targetTopLeft[1]) / targetResolution;
	            var u1 = (target[1][0] - targetTopLeft[0]) / targetResolution;
	            var v1 = -(target[1][1] - targetTopLeft[1]) / targetResolution;
	            var u2 = (target[2][0] - targetTopLeft[0]) / targetResolution;
	            var v2 = -(target[2][1] - targetTopLeft[1]) / targetResolution;
	            context.beginPath();
	            context.moveTo(u1, v1);
	            context.lineTo(u0, v0);
	            context.lineTo(u2, v2);
	            context.closePath();
	            context.stroke();
	        });
	        context.restore();
	    }
	    return context.canvas;
	}

	/**
	 * @module ol/reproj/Triangulation
	 */
	/**
	 * Single triangle; consists of 3 source points and 3 target points.
	 * @typedef {Object} Triangle
	 * @property {Array<import("../coordinate.js").Coordinate>} source
	 * @property {Array<import("../coordinate.js").Coordinate>} target
	 */
	/**
	 * Maximum number of subdivision steps during raster reprojection triangulation.
	 * Prevents high memory usage and large number of proj4 calls (for certain
	 * transformations and areas). At most `2*(2^this)` triangles are created for
	 * each triangulated extent (tile/image).
	 * @type {number}
	 */
	var MAX_SUBDIVISION = 10;
	/**
	 * Maximum allowed size of triangle relative to world width. When transforming
	 * corners of world extent between certain projections, the resulting
	 * triangulation seems to have zero error and no subdivision is performed. If
	 * the triangle width is more than this (relative to world width; 0-1),
	 * subdivison is forced (up to `MAX_SUBDIVISION`). Default is `0.25`.
	 * @type {number}
	 */
	var MAX_TRIANGLE_WIDTH = 0.25;
	/**
	 * @classdesc
	 * Class containing triangulation of the given target extent.
	 * Used for determining source data and the reprojection itself.
	 */
	var Triangulation = /** @class */ (function () {
	    /**
	     * @param {import("../proj/Projection.js").default} sourceProj Source projection.
	     * @param {import("../proj/Projection.js").default} targetProj Target projection.
	     * @param {import("../extent.js").Extent} targetExtent Target extent to triangulate.
	     * @param {import("../extent.js").Extent} maxSourceExtent Maximal source extent that can be used.
	     * @param {number} errorThreshold Acceptable error (in source units).
	     */
	    function Triangulation(sourceProj, targetProj, targetExtent, maxSourceExtent, errorThreshold) {
	        /**
	         * @type {import("../proj/Projection.js").default}
	         * @private
	         */
	        this.sourceProj_ = sourceProj;
	        /**
	         * @type {import("../proj/Projection.js").default}
	         * @private
	         */
	        this.targetProj_ = targetProj;
	        /** @type {!Object<string, import("../coordinate.js").Coordinate>} */
	        var transformInvCache = {};
	        var transformInv = getTransform(this.targetProj_, this.sourceProj_);
	        /**
	         * @param {import("../coordinate.js").Coordinate} c A coordinate.
	         * @return {import("../coordinate.js").Coordinate} Transformed coordinate.
	         * @private
	         */
	        this.transformInv_ = function (c) {
	            var key = c[0] + '/' + c[1];
	            if (!transformInvCache[key]) {
	                transformInvCache[key] = transformInv(c);
	            }
	            return transformInvCache[key];
	        };
	        /**
	         * @type {import("../extent.js").Extent}
	         * @private
	         */
	        this.maxSourceExtent_ = maxSourceExtent;
	        /**
	         * @type {number}
	         * @private
	         */
	        this.errorThresholdSquared_ = errorThreshold * errorThreshold;
	        /**
	         * @type {Array<Triangle>}
	         * @private
	         */
	        this.triangles_ = [];
	        /**
	         * Indicates that the triangulation crosses edge of the source projection.
	         * @type {boolean}
	         * @private
	         */
	        this.wrapsXInSource_ = false;
	        /**
	         * @type {boolean}
	         * @private
	         */
	        this.canWrapXInSource_ = this.sourceProj_.canWrapX() &&
	            !!maxSourceExtent &&
	            !!this.sourceProj_.getExtent() &&
	            (getWidth(maxSourceExtent) == getWidth(this.sourceProj_.getExtent()));
	        /**
	         * @type {?number}
	         * @private
	         */
	        this.sourceWorldWidth_ = this.sourceProj_.getExtent() ?
	            getWidth(this.sourceProj_.getExtent()) : null;
	        /**
	         * @type {?number}
	         * @private
	         */
	        this.targetWorldWidth_ = this.targetProj_.getExtent() ?
	            getWidth(this.targetProj_.getExtent()) : null;
	        var destinationTopLeft = getTopLeft(targetExtent);
	        var destinationTopRight = getTopRight(targetExtent);
	        var destinationBottomRight = getBottomRight(targetExtent);
	        var destinationBottomLeft = getBottomLeft(targetExtent);
	        var sourceTopLeft = this.transformInv_(destinationTopLeft);
	        var sourceTopRight = this.transformInv_(destinationTopRight);
	        var sourceBottomRight = this.transformInv_(destinationBottomRight);
	        var sourceBottomLeft = this.transformInv_(destinationBottomLeft);
	        this.addQuad_(destinationTopLeft, destinationTopRight, destinationBottomRight, destinationBottomLeft, sourceTopLeft, sourceTopRight, sourceBottomRight, sourceBottomLeft, MAX_SUBDIVISION);
	        if (this.wrapsXInSource_) {
	            var leftBound_1 = Infinity;
	            this.triangles_.forEach(function (triangle, i, arr) {
	                leftBound_1 = Math.min(leftBound_1, triangle.source[0][0], triangle.source[1][0], triangle.source[2][0]);
	            });
	            // Shift triangles to be as close to `leftBound` as possible
	            // (if the distance is more than `worldWidth / 2` it can be closer.
	            this.triangles_.forEach(function (triangle) {
	                if (Math.max(triangle.source[0][0], triangle.source[1][0], triangle.source[2][0]) - leftBound_1 > this.sourceWorldWidth_ / 2) {
	                    var newTriangle = [[triangle.source[0][0], triangle.source[0][1]],
	                        [triangle.source[1][0], triangle.source[1][1]],
	                        [triangle.source[2][0], triangle.source[2][1]]];
	                    if ((newTriangle[0][0] - leftBound_1) > this.sourceWorldWidth_ / 2) {
	                        newTriangle[0][0] -= this.sourceWorldWidth_;
	                    }
	                    if ((newTriangle[1][0] - leftBound_1) > this.sourceWorldWidth_ / 2) {
	                        newTriangle[1][0] -= this.sourceWorldWidth_;
	                    }
	                    if ((newTriangle[2][0] - leftBound_1) > this.sourceWorldWidth_ / 2) {
	                        newTriangle[2][0] -= this.sourceWorldWidth_;
	                    }
	                    // Rarely (if the extent contains both the dateline and prime meridian)
	                    // the shift can in turn break some triangles.
	                    // Detect this here and don't shift in such cases.
	                    var minX = Math.min(newTriangle[0][0], newTriangle[1][0], newTriangle[2][0]);
	                    var maxX = Math.max(newTriangle[0][0], newTriangle[1][0], newTriangle[2][0]);
	                    if ((maxX - minX) < this.sourceWorldWidth_ / 2) {
	                        triangle.source = newTriangle;
	                    }
	                }
	            }.bind(this));
	        }
	        transformInvCache = {};
	    }
	    /**
	     * Adds triangle to the triangulation.
	     * @param {import("../coordinate.js").Coordinate} a The target a coordinate.
	     * @param {import("../coordinate.js").Coordinate} b The target b coordinate.
	     * @param {import("../coordinate.js").Coordinate} c The target c coordinate.
	     * @param {import("../coordinate.js").Coordinate} aSrc The source a coordinate.
	     * @param {import("../coordinate.js").Coordinate} bSrc The source b coordinate.
	     * @param {import("../coordinate.js").Coordinate} cSrc The source c coordinate.
	     * @private
	     */
	    Triangulation.prototype.addTriangle_ = function (a, b, c, aSrc, bSrc, cSrc) {
	        this.triangles_.push({
	            source: [aSrc, bSrc, cSrc],
	            target: [a, b, c]
	        });
	    };
	    /**
	     * Adds quad (points in clock-wise order) to the triangulation
	     * (and reprojects the vertices) if valid.
	     * Performs quad subdivision if needed to increase precision.
	     *
	     * @param {import("../coordinate.js").Coordinate} a The target a coordinate.
	     * @param {import("../coordinate.js").Coordinate} b The target b coordinate.
	     * @param {import("../coordinate.js").Coordinate} c The target c coordinate.
	     * @param {import("../coordinate.js").Coordinate} d The target d coordinate.
	     * @param {import("../coordinate.js").Coordinate} aSrc The source a coordinate.
	     * @param {import("../coordinate.js").Coordinate} bSrc The source b coordinate.
	     * @param {import("../coordinate.js").Coordinate} cSrc The source c coordinate.
	     * @param {import("../coordinate.js").Coordinate} dSrc The source d coordinate.
	     * @param {number} maxSubdivision Maximal allowed subdivision of the quad.
	     * @private
	     */
	    Triangulation.prototype.addQuad_ = function (a, b, c, d, aSrc, bSrc, cSrc, dSrc, maxSubdivision) {
	        var sourceQuadExtent = boundingExtent([aSrc, bSrc, cSrc, dSrc]);
	        var sourceCoverageX = this.sourceWorldWidth_ ?
	            getWidth(sourceQuadExtent) / this.sourceWorldWidth_ : null;
	        var sourceWorldWidth = /** @type {number} */ (this.sourceWorldWidth_);
	        // when the quad is wrapped in the source projection
	        // it covers most of the projection extent, but not fully
	        var wrapsX = this.sourceProj_.canWrapX() &&
	            sourceCoverageX > 0.5 && sourceCoverageX < 1;
	        var needsSubdivision = false;
	        if (maxSubdivision > 0) {
	            if (this.targetProj_.isGlobal() && this.targetWorldWidth_) {
	                var targetQuadExtent = boundingExtent([a, b, c, d]);
	                var targetCoverageX = getWidth(targetQuadExtent) / this.targetWorldWidth_;
	                needsSubdivision = targetCoverageX > MAX_TRIANGLE_WIDTH ||
	                    needsSubdivision;
	            }
	            if (!wrapsX && this.sourceProj_.isGlobal() && sourceCoverageX) {
	                needsSubdivision = sourceCoverageX > MAX_TRIANGLE_WIDTH ||
	                    needsSubdivision;
	            }
	        }
	        if (!needsSubdivision && this.maxSourceExtent_) {
	            if (!intersects(sourceQuadExtent, this.maxSourceExtent_)) {
	                // whole quad outside source projection extent -> ignore
	                return;
	            }
	        }
	        if (!needsSubdivision) {
	            if (!isFinite(aSrc[0]) || !isFinite(aSrc[1]) ||
	                !isFinite(bSrc[0]) || !isFinite(bSrc[1]) ||
	                !isFinite(cSrc[0]) || !isFinite(cSrc[1]) ||
	                !isFinite(dSrc[0]) || !isFinite(dSrc[1])) {
	                if (maxSubdivision > 0) {
	                    needsSubdivision = true;
	                }
	                else {
	                    return;
	                }
	            }
	        }
	        if (maxSubdivision > 0) {
	            if (!needsSubdivision) {
	                var center = [(a[0] + c[0]) / 2, (a[1] + c[1]) / 2];
	                var centerSrc = this.transformInv_(center);
	                var dx = void 0;
	                if (wrapsX) {
	                    var centerSrcEstimX = (modulo(aSrc[0], sourceWorldWidth) +
	                        modulo(cSrc[0], sourceWorldWidth)) / 2;
	                    dx = centerSrcEstimX -
	                        modulo(centerSrc[0], sourceWorldWidth);
	                }
	                else {
	                    dx = (aSrc[0] + cSrc[0]) / 2 - centerSrc[0];
	                }
	                var dy = (aSrc[1] + cSrc[1]) / 2 - centerSrc[1];
	                var centerSrcErrorSquared = dx * dx + dy * dy;
	                needsSubdivision = centerSrcErrorSquared > this.errorThresholdSquared_;
	            }
	            if (needsSubdivision) {
	                if (Math.abs(a[0] - c[0]) <= Math.abs(a[1] - c[1])) {
	                    // split horizontally (top & bottom)
	                    var bc = [(b[0] + c[0]) / 2, (b[1] + c[1]) / 2];
	                    var bcSrc = this.transformInv_(bc);
	                    var da = [(d[0] + a[0]) / 2, (d[1] + a[1]) / 2];
	                    var daSrc = this.transformInv_(da);
	                    this.addQuad_(a, b, bc, da, aSrc, bSrc, bcSrc, daSrc, maxSubdivision - 1);
	                    this.addQuad_(da, bc, c, d, daSrc, bcSrc, cSrc, dSrc, maxSubdivision - 1);
	                }
	                else {
	                    // split vertically (left & right)
	                    var ab = [(a[0] + b[0]) / 2, (a[1] + b[1]) / 2];
	                    var abSrc = this.transformInv_(ab);
	                    var cd = [(c[0] + d[0]) / 2, (c[1] + d[1]) / 2];
	                    var cdSrc = this.transformInv_(cd);
	                    this.addQuad_(a, ab, cd, d, aSrc, abSrc, cdSrc, dSrc, maxSubdivision - 1);
	                    this.addQuad_(ab, b, c, cd, abSrc, bSrc, cSrc, cdSrc, maxSubdivision - 1);
	                }
	                return;
	            }
	        }
	        if (wrapsX) {
	            if (!this.canWrapXInSource_) {
	                return;
	            }
	            this.wrapsXInSource_ = true;
	        }
	        this.addTriangle_(a, c, d, aSrc, cSrc, dSrc);
	        this.addTriangle_(a, b, c, aSrc, bSrc, cSrc);
	    };
	    /**
	     * Calculates extent of the 'source' coordinates from all the triangles.
	     *
	     * @return {import("../extent.js").Extent} Calculated extent.
	     */
	    Triangulation.prototype.calculateSourceExtent = function () {
	        var extent = createEmpty();
	        this.triangles_.forEach(function (triangle, i, arr) {
	            var src = triangle.source;
	            extendCoordinate(extent, src[0]);
	            extendCoordinate(extent, src[1]);
	            extendCoordinate(extent, src[2]);
	        });
	        return extent;
	    };
	    /**
	     * @return {Array<Triangle>} Array of the calculated triangles.
	     */
	    Triangulation.prototype.getTriangles = function () {
	        return this.triangles_;
	    };
	    return Triangulation;
	}());

	var __extends$1n = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @typedef {function(number, number, number, number) : import("../Tile.js").default} FunctionType
	 */
	/**
	 * @classdesc
	 * Class encapsulating single reprojected tile.
	 * See {@link module:ol/source/TileImage~TileImage}.
	 *
	 */
	var ReprojTile = /** @class */ (function (_super) {
	    __extends$1n(ReprojTile, _super);
	    /**
	     * @param {import("../proj/Projection.js").default} sourceProj Source projection.
	     * @param {import("../tilegrid/TileGrid.js").default} sourceTileGrid Source tile grid.
	     * @param {import("../proj/Projection.js").default} targetProj Target projection.
	     * @param {import("../tilegrid/TileGrid.js").default} targetTileGrid Target tile grid.
	     * @param {import("../tilecoord.js").TileCoord} tileCoord Coordinate of the tile.
	     * @param {import("../tilecoord.js").TileCoord} wrappedTileCoord Coordinate of the tile wrapped in X.
	     * @param {number} pixelRatio Pixel ratio.
	     * @param {number} gutter Gutter of the source tiles.
	     * @param {FunctionType} getTileFunction
	     *     Function returning source tiles (z, x, y, pixelRatio).
	     * @param {number=} opt_errorThreshold Acceptable reprojection error (in px).
	     * @param {boolean=} opt_renderEdges Render reprojection edges.
	     */
	    function ReprojTile(sourceProj, sourceTileGrid, targetProj, targetTileGrid, tileCoord, wrappedTileCoord, pixelRatio, gutter, getTileFunction, opt_errorThreshold, opt_renderEdges) {
	        var _this = _super.call(this, tileCoord, TileState.IDLE) || this;
	        /**
	         * @private
	         * @type {boolean}
	         */
	        _this.renderEdges_ = opt_renderEdges !== undefined ? opt_renderEdges : false;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.pixelRatio_ = pixelRatio;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.gutter_ = gutter;
	        /**
	         * @private
	         * @type {HTMLCanvasElement}
	         */
	        _this.canvas_ = null;
	        /**
	         * @private
	         * @type {import("../tilegrid/TileGrid.js").default}
	         */
	        _this.sourceTileGrid_ = sourceTileGrid;
	        /**
	         * @private
	         * @type {import("../tilegrid/TileGrid.js").default}
	         */
	        _this.targetTileGrid_ = targetTileGrid;
	        /**
	         * @private
	         * @type {import("../tilecoord.js").TileCoord}
	         */
	        _this.wrappedTileCoord_ = wrappedTileCoord ? wrappedTileCoord : tileCoord;
	        /**
	         * @private
	         * @type {!Array<import("../Tile.js").default>}
	         */
	        _this.sourceTiles_ = [];
	        /**
	         * @private
	         * @type {?Array<import("../events.js").EventsKey>}
	         */
	        _this.sourcesListenerKeys_ = null;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.sourceZ_ = 0;
	        var targetExtent = targetTileGrid.getTileCoordExtent(_this.wrappedTileCoord_);
	        var maxTargetExtent = _this.targetTileGrid_.getExtent();
	        var maxSourceExtent = _this.sourceTileGrid_.getExtent();
	        var limitedTargetExtent = maxTargetExtent ?
	            getIntersection(targetExtent, maxTargetExtent) : targetExtent;
	        if (getArea(limitedTargetExtent) === 0) {
	            // Tile is completely outside range -> EMPTY
	            // TODO: is it actually correct that the source even creates the tile ?
	            _this.state = TileState.EMPTY;
	            return _this;
	        }
	        var sourceProjExtent = sourceProj.getExtent();
	        if (sourceProjExtent) {
	            if (!maxSourceExtent) {
	                maxSourceExtent = sourceProjExtent;
	            }
	            else {
	                maxSourceExtent = getIntersection(maxSourceExtent, sourceProjExtent);
	            }
	        }
	        var targetResolution = targetTileGrid.getResolution(_this.wrappedTileCoord_[0]);
	        var targetCenter = getCenter(limitedTargetExtent);
	        var sourceResolution = calculateSourceResolution(sourceProj, targetProj, targetCenter, targetResolution);
	        if (!isFinite(sourceResolution) || sourceResolution <= 0) {
	            // invalid sourceResolution -> EMPTY
	            // probably edges of the projections when no extent is defined
	            _this.state = TileState.EMPTY;
	            return _this;
	        }
	        var errorThresholdInPixels = opt_errorThreshold !== undefined ?
	            opt_errorThreshold : ERROR_THRESHOLD;
	        /**
	         * @private
	         * @type {!import("./Triangulation.js").default}
	         */
	        _this.triangulation_ = new Triangulation(sourceProj, targetProj, limitedTargetExtent, maxSourceExtent, sourceResolution * errorThresholdInPixels);
	        if (_this.triangulation_.getTriangles().length === 0) {
	            // no valid triangles -> EMPTY
	            _this.state = TileState.EMPTY;
	            return _this;
	        }
	        _this.sourceZ_ = sourceTileGrid.getZForResolution(sourceResolution);
	        var sourceExtent = _this.triangulation_.calculateSourceExtent();
	        if (maxSourceExtent) {
	            if (sourceProj.canWrapX()) {
	                sourceExtent[1] = clamp(sourceExtent[1], maxSourceExtent[1], maxSourceExtent[3]);
	                sourceExtent[3] = clamp(sourceExtent[3], maxSourceExtent[1], maxSourceExtent[3]);
	            }
	            else {
	                sourceExtent = getIntersection(sourceExtent, maxSourceExtent);
	            }
	        }
	        if (!getArea(sourceExtent)) {
	            _this.state = TileState.EMPTY;
	        }
	        else {
	            var sourceRange = sourceTileGrid.getTileRangeForExtentAndZ(sourceExtent, _this.sourceZ_);
	            for (var srcX = sourceRange.minX; srcX <= sourceRange.maxX; srcX++) {
	                for (var srcY = sourceRange.minY; srcY <= sourceRange.maxY; srcY++) {
	                    var tile = getTileFunction(_this.sourceZ_, srcX, srcY, pixelRatio);
	                    if (tile) {
	                        _this.sourceTiles_.push(tile);
	                    }
	                }
	            }
	            if (_this.sourceTiles_.length === 0) {
	                _this.state = TileState.EMPTY;
	            }
	        }
	        return _this;
	    }
	    /**
	     * @inheritDoc
	     */
	    ReprojTile.prototype.disposeInternal = function () {
	        if (this.state == TileState.LOADING) {
	            this.unlistenSources_();
	        }
	        _super.prototype.disposeInternal.call(this);
	    };
	    /**
	     * Get the HTML Canvas element for this tile.
	     * @return {HTMLCanvasElement} Canvas.
	     */
	    ReprojTile.prototype.getImage = function () {
	        return this.canvas_;
	    };
	    /**
	     * @private
	     */
	    ReprojTile.prototype.reproject_ = function () {
	        var sources = [];
	        this.sourceTiles_.forEach(function (tile, i, arr) {
	            if (tile && tile.getState() == TileState.LOADED) {
	                sources.push({
	                    extent: this.sourceTileGrid_.getTileCoordExtent(tile.tileCoord),
	                    image: tile.getImage()
	                });
	            }
	        }.bind(this));
	        this.sourceTiles_.length = 0;
	        if (sources.length === 0) {
	            this.state = TileState.ERROR;
	        }
	        else {
	            var z = this.wrappedTileCoord_[0];
	            var size = this.targetTileGrid_.getTileSize(z);
	            var width = typeof size === 'number' ? size : size[0];
	            var height = typeof size === 'number' ? size : size[1];
	            var targetResolution = this.targetTileGrid_.getResolution(z);
	            var sourceResolution = this.sourceTileGrid_.getResolution(this.sourceZ_);
	            var targetExtent = this.targetTileGrid_.getTileCoordExtent(this.wrappedTileCoord_);
	            this.canvas_ = render$2(width, height, this.pixelRatio_, sourceResolution, this.sourceTileGrid_.getExtent(), targetResolution, targetExtent, this.triangulation_, sources, this.gutter_, this.renderEdges_);
	            this.state = TileState.LOADED;
	        }
	        this.changed();
	    };
	    /**
	     * @inheritDoc
	     */
	    ReprojTile.prototype.load = function () {
	        if (this.state == TileState.IDLE) {
	            this.state = TileState.LOADING;
	            this.changed();
	            var leftToLoad_1 = 0;
	            this.sourcesListenerKeys_ = [];
	            this.sourceTiles_.forEach(function (tile, i, arr) {
	                var state = tile.getState();
	                if (state == TileState.IDLE || state == TileState.LOADING) {
	                    leftToLoad_1++;
	                    var sourceListenKey_1 = listen$1(tile, EventType.CHANGE, function (e) {
	                        var state = tile.getState();
	                        if (state == TileState.LOADED ||
	                            state == TileState.ERROR ||
	                            state == TileState.EMPTY) {
	                            unlistenByKey(sourceListenKey_1);
	                            leftToLoad_1--;
	                            if (leftToLoad_1 === 0) {
	                                this.unlistenSources_();
	                                this.reproject_();
	                            }
	                        }
	                    }, this);
	                    this.sourcesListenerKeys_.push(sourceListenKey_1);
	                }
	            }.bind(this));
	            this.sourceTiles_.forEach(function (tile, i, arr) {
	                var state = tile.getState();
	                if (state == TileState.IDLE) {
	                    tile.load();
	                }
	            });
	            if (leftToLoad_1 === 0) {
	                setTimeout(this.reproject_.bind(this), 0);
	            }
	        }
	    };
	    /**
	     * @private
	     */
	    ReprojTile.prototype.unlistenSources_ = function () {
	        this.sourcesListenerKeys_.forEach(unlistenByKey);
	        this.sourcesListenerKeys_ = null;
	    };
	    return ReprojTile;
	}(Tile));

	/**
	 * @module ol/tileurlfunction
	 */
	/**
	 * @param {string} template Template.
	 * @param {import("./tilegrid/TileGrid.js").default} tileGrid Tile grid.
	 * @return {import("./Tile.js").UrlFunction} Tile URL function.
	 */
	function createFromTemplate(template, tileGrid) {
	    var zRegEx = /\{z\}/g;
	    var xRegEx = /\{x\}/g;
	    var yRegEx = /\{y\}/g;
	    var dashYRegEx = /\{-y\}/g;
	    return (
	    /**
	     * @param {import("./tilecoord.js").TileCoord} tileCoord Tile Coordinate.
	     * @param {number} pixelRatio Pixel ratio.
	     * @param {import("./proj/Projection.js").default} projection Projection.
	     * @return {string|undefined} Tile URL.
	     */
	    function (tileCoord, pixelRatio, projection) {
	        if (!tileCoord) {
	            return undefined;
	        }
	        else {
	            return template.replace(zRegEx, tileCoord[0].toString())
	                .replace(xRegEx, tileCoord[1].toString())
	                .replace(yRegEx, tileCoord[2].toString())
	                .replace(dashYRegEx, function () {
	                var z = tileCoord[0];
	                var range = tileGrid.getFullTileRange(z);
	                assert(range, 55); // The {-y} placeholder requires a tile grid with extent
	                var y = range.getHeight() - tileCoord[2] - 1;
	                return y.toString();
	            });
	        }
	    });
	}
	/**
	 * @param {Array<string>} templates Templates.
	 * @param {import("./tilegrid/TileGrid.js").default} tileGrid Tile grid.
	 * @return {import("./Tile.js").UrlFunction} Tile URL function.
	 */
	function createFromTemplates(templates, tileGrid) {
	    var len = templates.length;
	    var tileUrlFunctions = new Array(len);
	    for (var i = 0; i < len; ++i) {
	        tileUrlFunctions[i] = createFromTemplate(templates[i], tileGrid);
	    }
	    return createFromTileUrlFunctions(tileUrlFunctions);
	}
	/**
	 * @param {Array<import("./Tile.js").UrlFunction>} tileUrlFunctions Tile URL Functions.
	 * @return {import("./Tile.js").UrlFunction} Tile URL function.
	 */
	function createFromTileUrlFunctions(tileUrlFunctions) {
	    if (tileUrlFunctions.length === 1) {
	        return tileUrlFunctions[0];
	    }
	    return (
	    /**
	     * @param {import("./tilecoord.js").TileCoord} tileCoord Tile Coordinate.
	     * @param {number} pixelRatio Pixel ratio.
	     * @param {import("./proj/Projection.js").default} projection Projection.
	     * @return {string|undefined} Tile URL.
	     */
	    function (tileCoord, pixelRatio, projection) {
	        if (!tileCoord) {
	            return undefined;
	        }
	        else {
	            var h = hash$1(tileCoord);
	            var index = modulo(h, tileUrlFunctions.length);
	            return tileUrlFunctions[index](tileCoord, pixelRatio, projection);
	        }
	    });
	}
	/**
	 * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
	 * @param {number} pixelRatio Pixel ratio.
	 * @param {import("./proj/Projection.js").default} projection Projection.
	 * @return {string|undefined} Tile URL.
	 */
	function nullTileUrlFunction(tileCoord, pixelRatio, projection) {
	    return undefined;
	}
	/**
	 * @param {string} url URL.
	 * @return {Array<string>} Array of urls.
	 */
	function expandUrl(url) {
	    var urls = [];
	    var match = /\{([a-z])-([a-z])\}/.exec(url);
	    if (match) {
	        // char range
	        var startCharCode = match[1].charCodeAt(0);
	        var stopCharCode = match[2].charCodeAt(0);
	        var charCode = void 0;
	        for (charCode = startCharCode; charCode <= stopCharCode; ++charCode) {
	            urls.push(url.replace(match[0], String.fromCharCode(charCode)));
	        }
	        return urls;
	    }
	    match = /\{(\d+)-(\d+)\}/.exec(url);
	    if (match) {
	        // number range
	        var stop_1 = parseInt(match[2], 10);
	        for (var i = parseInt(match[1], 10); i <= stop_1; i++) {
	            urls.push(url.replace(match[0], i.toString()));
	        }
	        return urls;
	    }
	    urls.push(url);
	    return urls;
	}

	/**
	 * @module ol/tilegrid/TileGrid
	 */
	/**
	 * @private
	 * @type {import("../tilecoord.js").TileCoord}
	 */
	var tmpTileCoord = [0, 0, 0];
	/**
	 * @typedef {Object} Options
	 * @property {import("../extent.js").Extent} [extent] Extent for the tile grid. No tiles outside this
	 * extent will be requested by {@link module:ol/source/Tile} sources. When no `origin` or
	 * `origins` are configured, the `origin` will be set to the top-left corner of the extent.
	 * @property {number} [minZoom=0] Minimum zoom.
	 * @property {import("../coordinate.js").Coordinate} [origin] The tile grid origin, i.e. where the `x`
	 * and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left to right and upwards. If not
	 * specified, `extent` or `origins` must be provided.
	 * @property {Array<import("../coordinate.js").Coordinate>} [origins] Tile grid origins, i.e. where
	 * the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If given, the array length
	 * should match the length of the `resolutions` array, i.e. each resolution can have a different
	 * origin. Tile coordinates increase left to right and upwards. If not specified, `extent` or
	 * `origin` must be provided.
	 * @property {!Array<number>} resolutions Resolutions. The array index of each resolution needs
	 * to match the zoom level. This means that even if a `minZoom` is configured, the resolutions
	 * array will have a length of `maxZoom + 1`.
	 * @property {Array<import("../size.js").Size>} [sizes] Sizes.
	 * @property {number|import("../size.js").Size} [tileSize] Tile size.
	 * Default is `[256, 256]`.
	 * @property {Array<import("../size.js").Size>} [tileSizes] Tile sizes. If given, the array length
	 * should match the length of the `resolutions` array, i.e. each resolution can have a different
	 * tile size.
	 */
	/**
	 * @classdesc
	 * Base class for setting the grid pattern for sources accessing tiled-image
	 * servers.
	 * @api
	 */
	var TileGrid = /** @class */ (function () {
	    /**
	     * @param {Options} options Tile grid options.
	     */
	    function TileGrid(options) {
	        /**
	         * @protected
	         * @type {number}
	         */
	        this.minZoom = options.minZoom !== undefined ? options.minZoom : 0;
	        /**
	         * @private
	         * @type {!Array<number>}
	         */
	        this.resolutions_ = options.resolutions;
	        assert(isSorted(this.resolutions_, function (a, b) {
	            return b - a;
	        }, true), 17); // `resolutions` must be sorted in descending order
	        // check if we've got a consistent zoom factor and origin
	        var zoomFactor;
	        if (!options.origins) {
	            for (var i = 0, ii = this.resolutions_.length - 1; i < ii; ++i) {
	                if (!zoomFactor) {
	                    zoomFactor = this.resolutions_[i] / this.resolutions_[i + 1];
	                }
	                else {
	                    if (this.resolutions_[i] / this.resolutions_[i + 1] !== zoomFactor) {
	                        zoomFactor = undefined;
	                        break;
	                    }
	                }
	            }
	        }
	        /**
	         * @private
	         * @type {number|undefined}
	         */
	        this.zoomFactor_ = zoomFactor;
	        /**
	         * @protected
	         * @type {number}
	         */
	        this.maxZoom = this.resolutions_.length - 1;
	        /**
	         * @private
	         * @type {import("../coordinate.js").Coordinate}
	         */
	        this.origin_ = options.origin !== undefined ? options.origin : null;
	        /**
	         * @private
	         * @type {Array<import("../coordinate.js").Coordinate>}
	         */
	        this.origins_ = null;
	        if (options.origins !== undefined) {
	            this.origins_ = options.origins;
	            assert(this.origins_.length == this.resolutions_.length, 20); // Number of `origins` and `resolutions` must be equal
	        }
	        var extent = options.extent;
	        if (extent !== undefined &&
	            !this.origin_ && !this.origins_) {
	            this.origin_ = getTopLeft(extent);
	        }
	        assert((!this.origin_ && this.origins_) || (this.origin_ && !this.origins_), 18); // Either `origin` or `origins` must be configured, never both
	        /**
	         * @private
	         * @type {Array<number|import("../size.js").Size>}
	         */
	        this.tileSizes_ = null;
	        if (options.tileSizes !== undefined) {
	            this.tileSizes_ = options.tileSizes;
	            assert(this.tileSizes_.length == this.resolutions_.length, 19); // Number of `tileSizes` and `resolutions` must be equal
	        }
	        /**
	         * @private
	         * @type {number|import("../size.js").Size}
	         */
	        this.tileSize_ = options.tileSize !== undefined ?
	            options.tileSize :
	            !this.tileSizes_ ? DEFAULT_TILE_SIZE : null;
	        assert((!this.tileSize_ && this.tileSizes_) ||
	            (this.tileSize_ && !this.tileSizes_), 22); // Either `tileSize` or `tileSizes` must be configured, never both
	        /**
	         * @private
	         * @type {import("../extent.js").Extent}
	         */
	        this.extent_ = extent !== undefined ? extent : null;
	        /**
	         * @private
	         * @type {Array<import("../TileRange.js").default>}
	         */
	        this.fullTileRanges_ = null;
	        /**
	         * @private
	         * @type {import("../size.js").Size}
	         */
	        this.tmpSize_ = [0, 0];
	        if (options.sizes !== undefined) {
	            this.fullTileRanges_ = options.sizes.map(function (size, z) {
	                var tileRange = new TileRange(Math.min(0, size[0]), Math.max(size[0] - 1, -1), Math.min(0, size[1]), Math.max(size[1] - 1, -1));
	                return tileRange;
	            }, this);
	        }
	        else if (extent) {
	            this.calculateTileRanges_(extent);
	        }
	    }
	    /**
	     * Call a function with each tile coordinate for a given extent and zoom level.
	     *
	     * @param {import("../extent.js").Extent} extent Extent.
	     * @param {number} zoom Integer zoom level.
	     * @param {function(import("../tilecoord.js").TileCoord): void} callback Function called with each tile coordinate.
	     * @api
	     */
	    TileGrid.prototype.forEachTileCoord = function (extent, zoom, callback) {
	        var tileRange = this.getTileRangeForExtentAndZ(extent, zoom);
	        for (var i = tileRange.minX, ii = tileRange.maxX; i <= ii; ++i) {
	            for (var j = tileRange.minY, jj = tileRange.maxY; j <= jj; ++j) {
	                callback([zoom, i, j]);
	            }
	        }
	    };
	    /**
	     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
	     * @param {function(number, import("../TileRange.js").default): boolean} callback Callback.
	     * @param {import("../TileRange.js").default=} opt_tileRange Temporary import("../TileRange.js").default object.
	     * @param {import("../extent.js").Extent=} opt_extent Temporary import("../extent.js").Extent object.
	     * @return {boolean} Callback succeeded.
	     */
	    TileGrid.prototype.forEachTileCoordParentTileRange = function (tileCoord, callback, opt_tileRange, opt_extent) {
	        var tileRange, x, y;
	        var tileCoordExtent = null;
	        var z = tileCoord[0] - 1;
	        if (this.zoomFactor_ === 2) {
	            x = tileCoord[1];
	            y = tileCoord[2];
	        }
	        else {
	            tileCoordExtent = this.getTileCoordExtent(tileCoord, opt_extent);
	        }
	        while (z >= this.minZoom) {
	            if (this.zoomFactor_ === 2) {
	                x = Math.floor(x / 2);
	                y = Math.floor(y / 2);
	                tileRange = createOrUpdate$2(x, x, y, y, opt_tileRange);
	            }
	            else {
	                tileRange = this.getTileRangeForExtentAndZ(tileCoordExtent, z, opt_tileRange);
	            }
	            if (callback(z, tileRange)) {
	                return true;
	            }
	            --z;
	        }
	        return false;
	    };
	    /**
	     * Get the extent for this tile grid, if it was configured.
	     * @return {import("../extent.js").Extent} Extent.
	     * @api
	     */
	    TileGrid.prototype.getExtent = function () {
	        return this.extent_;
	    };
	    /**
	     * Get the maximum zoom level for the grid.
	     * @return {number} Max zoom.
	     * @api
	     */
	    TileGrid.prototype.getMaxZoom = function () {
	        return this.maxZoom;
	    };
	    /**
	     * Get the minimum zoom level for the grid.
	     * @return {number} Min zoom.
	     * @api
	     */
	    TileGrid.prototype.getMinZoom = function () {
	        return this.minZoom;
	    };
	    /**
	     * Get the origin for the grid at the given zoom level.
	     * @param {number} z Integer zoom level.
	     * @return {import("../coordinate.js").Coordinate} Origin.
	     * @api
	     */
	    TileGrid.prototype.getOrigin = function (z) {
	        if (this.origin_) {
	            return this.origin_;
	        }
	        else {
	            return this.origins_[z];
	        }
	    };
	    /**
	     * Get the resolution for the given zoom level.
	     * @param {number} z Integer zoom level.
	     * @return {number} Resolution.
	     * @api
	     */
	    TileGrid.prototype.getResolution = function (z) {
	        return this.resolutions_[z];
	    };
	    /**
	     * Get the list of resolutions for the tile grid.
	     * @return {Array<number>} Resolutions.
	     * @api
	     */
	    TileGrid.prototype.getResolutions = function () {
	        return this.resolutions_;
	    };
	    /**
	     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
	     * @param {import("../TileRange.js").default=} opt_tileRange Temporary import("../TileRange.js").default object.
	     * @param {import("../extent.js").Extent=} opt_extent Temporary import("../extent.js").Extent object.
	     * @return {import("../TileRange.js").default} Tile range.
	     */
	    TileGrid.prototype.getTileCoordChildTileRange = function (tileCoord, opt_tileRange, opt_extent) {
	        if (tileCoord[0] < this.maxZoom) {
	            if (this.zoomFactor_ === 2) {
	                var minX = tileCoord[1] * 2;
	                var minY = tileCoord[2] * 2;
	                return createOrUpdate$2(minX, minX + 1, minY, minY + 1, opt_tileRange);
	            }
	            var tileCoordExtent = this.getTileCoordExtent(tileCoord, opt_extent);
	            return this.getTileRangeForExtentAndZ(tileCoordExtent, tileCoord[0] + 1, opt_tileRange);
	        }
	        return null;
	    };
	    /**
	     * Get the extent for a tile range.
	     * @param {number} z Integer zoom level.
	     * @param {import("../TileRange.js").default} tileRange Tile range.
	     * @param {import("../extent.js").Extent=} opt_extent Temporary import("../extent.js").Extent object.
	     * @return {import("../extent.js").Extent} Extent.
	     */
	    TileGrid.prototype.getTileRangeExtent = function (z, tileRange, opt_extent) {
	        var origin = this.getOrigin(z);
	        var resolution = this.getResolution(z);
	        var tileSize = toSize(this.getTileSize(z), this.tmpSize_);
	        var minX = origin[0] + tileRange.minX * tileSize[0] * resolution;
	        var maxX = origin[0] + (tileRange.maxX + 1) * tileSize[0] * resolution;
	        var minY = origin[1] + tileRange.minY * tileSize[1] * resolution;
	        var maxY = origin[1] + (tileRange.maxY + 1) * tileSize[1] * resolution;
	        return createOrUpdate(minX, minY, maxX, maxY, opt_extent);
	    };
	    /**
	     * Get a tile range for the given extent and integer zoom level.
	     * @param {import("../extent.js").Extent} extent Extent.
	     * @param {number} z Integer zoom level.
	     * @param {import("../TileRange.js").default=} opt_tileRange Temporary tile range object.
	     * @return {import("../TileRange.js").default} Tile range.
	     */
	    TileGrid.prototype.getTileRangeForExtentAndZ = function (extent, z, opt_tileRange) {
	        var tileCoord = tmpTileCoord;
	        this.getTileCoordForXYAndZ_(extent[0], extent[3], z, false, tileCoord);
	        var minX = tileCoord[1];
	        var minY = tileCoord[2];
	        this.getTileCoordForXYAndZ_(extent[2], extent[1], z, true, tileCoord);
	        return createOrUpdate$2(minX, tileCoord[1], minY, tileCoord[2], opt_tileRange);
	    };
	    /**
	     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
	     * @return {import("../coordinate.js").Coordinate} Tile center.
	     */
	    TileGrid.prototype.getTileCoordCenter = function (tileCoord) {
	        var origin = this.getOrigin(tileCoord[0]);
	        var resolution = this.getResolution(tileCoord[0]);
	        var tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);
	        return [
	            origin[0] + (tileCoord[1] + 0.5) * tileSize[0] * resolution,
	            origin[1] - (tileCoord[2] + 0.5) * tileSize[1] * resolution
	        ];
	    };
	    /**
	     * Get the extent of a tile coordinate.
	     *
	     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
	     * @param {import("../extent.js").Extent=} opt_extent Temporary extent object.
	     * @return {import("../extent.js").Extent} Extent.
	     * @api
	     */
	    TileGrid.prototype.getTileCoordExtent = function (tileCoord, opt_extent) {
	        var origin = this.getOrigin(tileCoord[0]);
	        var resolution = this.getResolution(tileCoord[0]);
	        var tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);
	        var minX = origin[0] + tileCoord[1] * tileSize[0] * resolution;
	        var minY = origin[1] - (tileCoord[2] + 1) * tileSize[1] * resolution;
	        var maxX = minX + tileSize[0] * resolution;
	        var maxY = minY + tileSize[1] * resolution;
	        return createOrUpdate(minX, minY, maxX, maxY, opt_extent);
	    };
	    /**
	     * Get the tile coordinate for the given map coordinate and resolution.  This
	     * method considers that coordinates that intersect tile boundaries should be
	     * assigned the higher tile coordinate.
	     *
	     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
	     * @param {number} resolution Resolution.
	     * @param {import("../tilecoord.js").TileCoord=} opt_tileCoord Destination import("../tilecoord.js").TileCoord object.
	     * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
	     * @api
	     */
	    TileGrid.prototype.getTileCoordForCoordAndResolution = function (coordinate, resolution, opt_tileCoord) {
	        return this.getTileCoordForXYAndResolution_(coordinate[0], coordinate[1], resolution, false, opt_tileCoord);
	    };
	    /**
	     * Note that this method should not be called for resolutions that correspond
	     * to an integer zoom level.  Instead call the `getTileCoordForXYAndZ_` method.
	     * @param {number} x X.
	     * @param {number} y Y.
	     * @param {number} resolution Resolution (for a non-integer zoom level).
	     * @param {boolean} reverseIntersectionPolicy Instead of letting edge
	     *     intersections go to the higher tile coordinate, let edge intersections
	     *     go to the lower tile coordinate.
	     * @param {import("../tilecoord.js").TileCoord=} opt_tileCoord Temporary import("../tilecoord.js").TileCoord object.
	     * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
	     * @private
	     */
	    TileGrid.prototype.getTileCoordForXYAndResolution_ = function (x, y, resolution, reverseIntersectionPolicy, opt_tileCoord) {
	        var z = this.getZForResolution(resolution);
	        var scale = resolution / this.getResolution(z);
	        var origin = this.getOrigin(z);
	        var tileSize = toSize(this.getTileSize(z), this.tmpSize_);
	        var adjustX = reverseIntersectionPolicy ? 0.5 : 0;
	        var adjustY = reverseIntersectionPolicy ? 0.5 : 0;
	        var xFromOrigin = Math.floor((x - origin[0]) / resolution + adjustX);
	        var yFromOrigin = Math.floor((origin[1] - y) / resolution + adjustY);
	        var tileCoordX = scale * xFromOrigin / tileSize[0];
	        var tileCoordY = scale * yFromOrigin / tileSize[1];
	        if (reverseIntersectionPolicy) {
	            tileCoordX = Math.ceil(tileCoordX) - 1;
	            tileCoordY = Math.ceil(tileCoordY) - 1;
	        }
	        else {
	            tileCoordX = Math.floor(tileCoordX);
	            tileCoordY = Math.floor(tileCoordY);
	        }
	        return createOrUpdate$1(z, tileCoordX, tileCoordY, opt_tileCoord);
	    };
	    /**
	     * Although there is repetition between this method and `getTileCoordForXYAndResolution_`,
	     * they should have separate implementations.  This method is for integer zoom
	     * levels.  The other method should only be called for resolutions corresponding
	     * to non-integer zoom levels.
	     * @param {number} x Map x coordinate.
	     * @param {number} y Map y coordinate.
	     * @param {number} z Integer zoom level.
	     * @param {boolean} reverseIntersectionPolicy Instead of letting edge
	     *     intersections go to the higher tile coordinate, let edge intersections
	     *     go to the lower tile coordinate.
	     * @param {import("../tilecoord.js").TileCoord=} opt_tileCoord Temporary import("../tilecoord.js").TileCoord object.
	     * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
	     * @private
	     */
	    TileGrid.prototype.getTileCoordForXYAndZ_ = function (x, y, z, reverseIntersectionPolicy, opt_tileCoord) {
	        var origin = this.getOrigin(z);
	        var resolution = this.getResolution(z);
	        var tileSize = toSize(this.getTileSize(z), this.tmpSize_);
	        var adjustX = reverseIntersectionPolicy ? 0.5 : 0;
	        var adjustY = reverseIntersectionPolicy ? 0.5 : 0;
	        var xFromOrigin = Math.floor((x - origin[0]) / resolution + adjustX);
	        var yFromOrigin = Math.floor((origin[1] - y) / resolution + adjustY);
	        var tileCoordX = xFromOrigin / tileSize[0];
	        var tileCoordY = yFromOrigin / tileSize[1];
	        if (reverseIntersectionPolicy) {
	            tileCoordX = Math.ceil(tileCoordX) - 1;
	            tileCoordY = Math.ceil(tileCoordY) - 1;
	        }
	        else {
	            tileCoordX = Math.floor(tileCoordX);
	            tileCoordY = Math.floor(tileCoordY);
	        }
	        return createOrUpdate$1(z, tileCoordX, tileCoordY, opt_tileCoord);
	    };
	    /**
	     * Get a tile coordinate given a map coordinate and zoom level.
	     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
	     * @param {number} z Zoom level.
	     * @param {import("../tilecoord.js").TileCoord=} opt_tileCoord Destination import("../tilecoord.js").TileCoord object.
	     * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
	     * @api
	     */
	    TileGrid.prototype.getTileCoordForCoordAndZ = function (coordinate, z, opt_tileCoord) {
	        return this.getTileCoordForXYAndZ_(coordinate[0], coordinate[1], z, false, opt_tileCoord);
	    };
	    /**
	     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
	     * @return {number} Tile resolution.
	     */
	    TileGrid.prototype.getTileCoordResolution = function (tileCoord) {
	        return this.resolutions_[tileCoord[0]];
	    };
	    /**
	     * Get the tile size for a zoom level. The type of the return value matches the
	     * `tileSize` or `tileSizes` that the tile grid was configured with. To always
	     * get an `import("../size.js").Size`, run the result through `import("../size.js").Size.toSize()`.
	     * @param {number} z Z.
	     * @return {number|import("../size.js").Size} Tile size.
	     * @api
	     */
	    TileGrid.prototype.getTileSize = function (z) {
	        if (this.tileSize_) {
	            return this.tileSize_;
	        }
	        else {
	            return this.tileSizes_[z];
	        }
	    };
	    /**
	     * @param {number} z Zoom level.
	     * @return {import("../TileRange.js").default} Extent tile range for the specified zoom level.
	     */
	    TileGrid.prototype.getFullTileRange = function (z) {
	        if (!this.fullTileRanges_) {
	            return null;
	        }
	        else {
	            return this.fullTileRanges_[z];
	        }
	    };
	    /**
	     * @param {number} resolution Resolution.
	     * @param {number=} opt_direction If 0, the nearest resolution will be used.
	     *     If 1, the nearest lower resolution will be used. If -1, the nearest
	     *     higher resolution will be used. Default is 0.
	     * @return {number} Z.
	     * @api
	     */
	    TileGrid.prototype.getZForResolution = function (resolution, opt_direction) {
	        var z = linearFindNearest(this.resolutions_, resolution, opt_direction || 0);
	        return clamp(z, this.minZoom, this.maxZoom);
	    };
	    /**
	     * @param {!import("../extent.js").Extent} extent Extent for this tile grid.
	     * @private
	     */
	    TileGrid.prototype.calculateTileRanges_ = function (extent) {
	        var length = this.resolutions_.length;
	        var fullTileRanges = new Array(length);
	        for (var z = this.minZoom; z < length; ++z) {
	            fullTileRanges[z] = this.getTileRangeForExtentAndZ(extent, z);
	        }
	        this.fullTileRanges_ = fullTileRanges;
	    };
	    return TileGrid;
	}());

	/**
	 * @module ol/tilegrid
	 */
	/**
	 * @param {import("./proj/Projection.js").default} projection Projection.
	 * @return {!TileGrid} Default tile grid for the
	 * passed projection.
	 */
	function getForProjection(projection) {
	    var tileGrid = projection.getDefaultTileGrid();
	    if (!tileGrid) {
	        tileGrid = createForProjection(projection);
	        projection.setDefaultTileGrid(tileGrid);
	    }
	    return tileGrid;
	}
	/**
	 * @param {TileGrid} tileGrid Tile grid.
	 * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
	 * @param {import("./proj/Projection.js").default} projection Projection.
	 * @return {import("./tilecoord.js").TileCoord} Tile coordinate.
	 */
	function wrapX(tileGrid, tileCoord, projection) {
	    var z = tileCoord[0];
	    var center = tileGrid.getTileCoordCenter(tileCoord);
	    var projectionExtent = extentFromProjection(projection);
	    if (!containsCoordinate(projectionExtent, center)) {
	        var worldWidth = getWidth(projectionExtent);
	        var worldsAway = Math.ceil((projectionExtent[0] - center[0]) / worldWidth);
	        center[0] += worldWidth * worldsAway;
	        return tileGrid.getTileCoordForCoordAndZ(center, z);
	    }
	    else {
	        return tileCoord;
	    }
	}
	/**
	 * @param {import("./extent.js").Extent} extent Extent.
	 * @param {number=} opt_maxZoom Maximum zoom level (default is
	 *     DEFAULT_MAX_ZOOM).
	 * @param {number|import("./size.js").Size=} opt_tileSize Tile size (default uses
	 *     DEFAULT_TILE_SIZE).
	 * @param {Corner=} opt_corner Extent corner (default is `'top-left'`).
	 * @return {!TileGrid} TileGrid instance.
	 */
	function createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner) {
	    var corner = opt_corner !== undefined ? opt_corner : Corner.TOP_LEFT;
	    var resolutions = resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize);
	    return new TileGrid({
	        extent: extent,
	        origin: getCorner(extent, corner),
	        resolutions: resolutions,
	        tileSize: opt_tileSize
	    });
	}
	/**
	 * @typedef {Object} XYZOptions
	 * @property {import("./extent.js").Extent} [extent] Extent for the tile grid. The origin for an XYZ tile grid is the
	 * top-left corner of the extent. The zero level of the grid is defined by the resolution at which one tile fits in the
	 * provided extent. If not provided, the extent of the EPSG:3857 projection is used.
	 * @property {number} [maxZoom] Maximum zoom. The default is `42`. This determines the number of levels
	 * in the grid set. For example, a `maxZoom` of 21 means there are 22 levels in the grid set.
	 * @property {number} [minZoom=0] Minimum zoom.
	 * @property {number|import("./size.js").Size} [tileSize=[256, 256]] Tile size in pixels.
	 */
	/**
	 * Creates a tile grid with a standard XYZ tiling scheme.
	 * @param {XYZOptions=} opt_options Tile grid options.
	 * @return {!TileGrid} Tile grid instance.
	 * @api
	 */
	function createXYZ(opt_options) {
	    var xyzOptions = opt_options || {};
	    var extent = xyzOptions.extent || get$4('EPSG:3857').getExtent();
	    var gridOptions = {
	        extent: extent,
	        minZoom: xyzOptions.minZoom,
	        tileSize: xyzOptions.tileSize,
	        resolutions: resolutionsFromExtent(extent, xyzOptions.maxZoom, xyzOptions.tileSize)
	    };
	    return new TileGrid(gridOptions);
	}
	/**
	 * Create a resolutions array from an extent.  A zoom factor of 2 is assumed.
	 * @param {import("./extent.js").Extent} extent Extent.
	 * @param {number=} opt_maxZoom Maximum zoom level (default is
	 *     DEFAULT_MAX_ZOOM).
	 * @param {number|import("./size.js").Size=} opt_tileSize Tile size (default uses
	 *     DEFAULT_TILE_SIZE).
	 * @return {!Array<number>} Resolutions array.
	 */
	function resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize) {
	    var maxZoom = opt_maxZoom !== undefined ?
	        opt_maxZoom : DEFAULT_MAX_ZOOM;
	    var height = getHeight(extent);
	    var width = getWidth(extent);
	    var tileSize = toSize(opt_tileSize !== undefined ?
	        opt_tileSize : DEFAULT_TILE_SIZE);
	    var maxResolution = Math.max(width / tileSize[0], height / tileSize[1]);
	    var length = maxZoom + 1;
	    var resolutions = new Array(length);
	    for (var z = 0; z < length; ++z) {
	        resolutions[z] = maxResolution / Math.pow(2, z);
	    }
	    return resolutions;
	}
	/**
	 * @param {import("./proj.js").ProjectionLike} projection Projection.
	 * @param {number=} opt_maxZoom Maximum zoom level (default is
	 *     DEFAULT_MAX_ZOOM).
	 * @param {number|import("./size.js").Size=} opt_tileSize Tile size (default uses
	 *     DEFAULT_TILE_SIZE).
	 * @param {Corner=} opt_corner Extent corner (default is `'top-left'`).
	 * @return {!TileGrid} TileGrid instance.
	 */
	function createForProjection(projection, opt_maxZoom, opt_tileSize, opt_corner) {
	    var extent = extentFromProjection(projection);
	    return createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner);
	}
	/**
	 * Generate a tile grid extent from a projection.  If the projection has an
	 * extent, it is used.  If not, a global extent is assumed.
	 * @param {import("./proj.js").ProjectionLike} projection Projection.
	 * @return {import("./extent.js").Extent} Extent.
	 */
	function extentFromProjection(projection) {
	    projection = get$4(projection);
	    var extent = projection.getExtent();
	    if (!extent) {
	        var half = 180 * METERS_PER_UNIT[Units.DEGREES] / projection.getMetersPerUnit();
	        extent = createOrUpdate(-half, -half, half, half);
	    }
	    return extent;
	}

	var __extends$1o = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @typedef {Object} Options
	 * @property {import("./Source.js").AttributionLike} [attributions]
	 * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
	 * @property {number} [cacheSize]
	 * @property {boolean} [opaque]
	 * @property {number} [tilePixelRatio]
	 * @property {import("../proj.js").ProjectionLike} [projection]
	 * @property {import("./State.js").default} [state]
	 * @property {import("../tilegrid/TileGrid.js").default} [tileGrid]
	 * @property {boolean} [wrapX=true]
	 * @property {number} [transition]
	 * @property {string} [key]
	 * @property {number} [zDirection=0]
	 */
	/**
	 * @classdesc
	 * Abstract base class; normally only used for creating subclasses and not
	 * instantiated in apps.
	 * Base class for sources providing images divided into a tile grid.
	 * @abstract
	 * @api
	 */
	var TileSource = /** @class */ (function (_super) {
	    __extends$1o(TileSource, _super);
	    /**
	     * @param {Options} options SourceTile source options.
	     */
	    function TileSource(options) {
	        var _this = _super.call(this, {
	            attributions: options.attributions,
	            attributionsCollapsible: options.attributionsCollapsible,
	            projection: options.projection,
	            state: options.state,
	            wrapX: options.wrapX
	        }) || this;
	        /**
	         * @private
	         * @type {boolean}
	         */
	        _this.opaque_ = options.opaque !== undefined ? options.opaque : false;
	        /**
	         * @private
	         * @type {number}
	         */
	        _this.tilePixelRatio_ = options.tilePixelRatio !== undefined ?
	            options.tilePixelRatio : 1;
	        /**
	         * @protected
	         * @type {import("../tilegrid/TileGrid.js").default}
	         */
	        _this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;
	        var cacheSize = options.cacheSize;
	        if (cacheSize === undefined) {
	            var tileSize = [256, 256];
	            var tileGrid = options.tileGrid;
	            if (tileGrid) {
	                toSize(tileGrid.getTileSize(tileGrid.getMinZoom()), tileSize);
	            }
	            var canUseScreen = typeof screen !== 'undefined';
	            var width = canUseScreen ? (screen.availWidth || screen.width) : 1920;
	            var height = canUseScreen ? (screen.availHeight || screen.height) : 1080;
	            cacheSize = 4 * Math.ceil(width / tileSize[0]) * Math.ceil(height / tileSize[1]);
	        }
	        /**
	         * @protected
	         * @type {import("../TileCache.js").default}
	         */
	        _this.tileCache = new TileCache(cacheSize);
	        /**
	         * @protected
	         * @type {import("../size.js").Size}
	         */
	        _this.tmpSize = [0, 0];
	        /**
	         * @private
	         * @type {string}
	         */
	        _this.key_ = options.key || '';
	        /**
	         * @protected
	         * @type {import("../Tile.js").Options}
	         */
	        _this.tileOptions = { transition: options.transition };
	        /**
	         * zDirection hint, read by the renderer. Indicates which resolution should be used
	         * by a renderer if the views resolution does not match any resolution of the tile source.
	         * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
	         * will be used. If -1, the nearest higher resolution will be used.
	         * @type {number}
	         */
	        _this.zDirection = options.zDirection ? options.zDirection : 0;
	        return _this;
	    }
	    /**
	     * @return {boolean} Can expire cache.
	     */
	    TileSource.prototype.canExpireCache = function () {
	        return this.tileCache.canExpireCache();
	    };
	    /**
	     * @param {import("../proj/Projection.js").default} projection Projection.
	     * @param {!Object<string, import("../TileRange.js").default>} usedTiles Used tiles.
	     */
	    TileSource.prototype.expireCache = function (projection, usedTiles) {
	        var tileCache = this.getTileCacheForProjection(projection);
	        if (tileCache) {
	            tileCache.expireCache(usedTiles);
	        }
	    };
	    /**
	     * @param {import("../proj/Projection.js").default} projection Projection.
	     * @param {number} z Zoom level.
	     * @param {import("../TileRange.js").default} tileRange Tile range.
	     * @param {function(import("../Tile.js").default):(boolean|void)} callback Called with each
	     *     loaded tile.  If the callback returns `false`, the tile will not be
	     *     considered loaded.
	     * @return {boolean} The tile range is fully covered with loaded tiles.
	     */
	    TileSource.prototype.forEachLoadedTile = function (projection, z, tileRange, callback) {
	        var tileCache = this.getTileCacheForProjection(projection);
	        if (!tileCache) {
	            return false;
	        }
	        var covered = true;
	        var tile, tileCoordKey, loaded;
	        for (var x = tileRange.minX; x <= tileRange.maxX; ++x) {
	            for (var y = tileRange.minY; y <= tileRange.maxY; ++y) {
	                tileCoordKey = getKeyZXY(z, x, y);
	                loaded = false;
	                if (tileCache.containsKey(tileCoordKey)) {
	                    tile = /** @type {!import("../Tile.js").default} */ (tileCache.get(tileCoordKey));
	                    loaded = tile.getState() === TileState.LOADED;
	                    if (loaded) {
	                        loaded = (callback(tile) !== false);
	                    }
	                }
	                if (!loaded) {
	                    covered = false;
	                }
	            }
	        }
	        return covered;
	    };
	    /**
	     * @param {import("../proj/Projection.js").default} projection Projection.
	     * @return {number} Gutter.
	     */
	    TileSource.prototype.getGutterForProjection = function (projection) {
	        return 0;
	    };
	    /**
	     * Return the key to be used for all tiles in the source.
	     * @return {string} The key for all tiles.
	     * @protected
	     */
	    TileSource.prototype.getKey = function () {
	        return this.key_;
	    };
	    /**
	     * Set the value to be used as the key for all tiles in the source.
	     * @param {string} key The key for tiles.
	     * @protected
	     */
	    TileSource.prototype.setKey = function (key) {
	        if (this.key_ !== key) {
	            this.key_ = key;
	            this.changed();
	        }
	    };
	    /**
	     * @param {import("../proj/Projection.js").default} projection Projection.
	     * @return {boolean} Opaque.
	     */
	    TileSource.prototype.getOpaque = function (projection) {
	        return this.opaque_;
	    };
	    /**
	     * @inheritDoc
	     */
	    TileSource.prototype.getResolutions = function () {
	        return this.tileGrid.getResolutions();
	    };
	    /**
	     * @abstract
	     * @param {number} z Tile coordinate z.
	     * @param {number} x Tile coordinate x.
	     * @param {number} y Tile coordinate y.
	     * @param {number} pixelRatio Pixel ratio.
	     * @param {import("../proj/Projection.js").default} projection Projection.
	     * @return {!import("../Tile.js").default} Tile.
	     */
	    TileSource.prototype.getTile = function (z, x, y, pixelRatio, projection) {
	        return abstract();
	    };
	    /**
	     * Return the tile grid of the tile source.
	     * @return {import("../tilegrid/TileGrid.js").default} Tile grid.
	     * @api
	     */
	    TileSource.prototype.getTileGrid = function () {
	        return this.tileGrid;
	    };
	    /**
	     * @param {import("../proj/Projection.js").default} projection Projection.
	     * @return {!import("../tilegrid/TileGrid.js").default} Tile grid.
	     */
	    TileSource.prototype.getTileGridForProjection = function (projection) {
	        if (!this.tileGrid) {
	            return getForProjection(projection);
	        }
	        else {
	            return this.tileGrid;
	        }
	    };
	    /**
	     * @param {import("../proj/Projection.js").default} projection Projection.
	     * @return {import("../TileCache.js").default} Tile cache.
	     * @protected
	     */
	    TileSource.prototype.getTileCacheForProjection = function (projection) {
	        var thisProj = this.getProjection();
	        if (thisProj && !equivalent(thisProj, projection)) {
	            return null;
	        }
	        else {
	            return this.tileCache;
	        }
	    };
	    /**
	     * Get the tile pixel ratio for this source. Subclasses may override this
	     * method, which is meant to return a supported pixel ratio that matches the
	     * provided `pixelRatio` as close as possible.
	     * @param {number} pixelRatio Pixel ratio.
	     * @return {number} Tile pixel ratio.
	     */
	    TileSource.prototype.getTilePixelRatio = function (pixelRatio) {
	        return this.tilePixelRatio_;
	    };
	    /**
	     * @param {number} z Z.
	     * @param {number} pixelRatio Pixel ratio.
	     * @param {import("../proj/Projection.js").default} projection Projection.
	     * @return {import("../size.js").Size} Tile size.
	     */
	    TileSource.prototype.getTilePixelSize = function (z, pixelRatio, projection) {
	        var tileGrid = this.getTileGridForProjection(projection);
	        var tilePixelRatio = this.getTilePixelRatio(pixelRatio);
	        var tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);
	        if (tilePixelRatio == 1) {
	            return tileSize;
	        }
	        else {
	            return scale$3(tileSize, tilePixelRatio, this.tmpSize);
	        }
	    };
	    /**
	     * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate
	     * is outside the resolution and extent range of the tile grid, `null` will be
	     * returned.
	     * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
	     * @param {import("../proj/Projection.js").default=} opt_projection Projection.
	     * @return {import("../tilecoord.js").TileCoord} Tile coordinate to be passed to the tileUrlFunction or
	     *     null if no tile URL should be created for the passed `tileCoord`.
	     */
	    TileSource.prototype.getTileCoordForTileUrlFunction = function (tileCoord, opt_projection) {
	        var projection = opt_projection !== undefined ?
	            opt_projection : this.getProjection();
	        var tileGrid = this.getTileGridForProjection(projection);
	        if (this.getWrapX() && projection.isGlobal()) {
	            tileCoord = wrapX(tileGrid, tileCoord, projection);
	        }
	        return withinExtentAndZ(tileCoord, tileGrid) ? tileCoord : null;
	    };
	    /**
	     * Remove all cached tiles from the source. The next render cycle will fetch new tiles.
	     * @api
	     */
	    TileSource.prototype.clear = function () {
	        this.tileCache.clear();
	    };
	    /**
	     * @inheritDoc
	     */
	    TileSource.prototype.refresh = function () {
	        this.clear();
	        _super.prototype.refresh.call(this);
	    };
	    /**
	     * Marks a tile coord as being used, without triggering a load.
	     * @abstract
	     * @param {number} z Tile coordinate z.
	     * @param {number} x Tile coordinate x.
	     * @param {number} y Tile coordinate y.
	     * @param {import("../proj/Projection.js").default} projection Projection.
	     */
	    TileSource.prototype.useTile = function (z, x, y, projection) { };
	    return TileSource;
	}(Source));
	/**
	 * @classdesc
	 * Events emitted by {@link module:ol/source/Tile~TileSource} instances are instances of this
	 * type.
	 */
	var TileSourceEvent = /** @class */ (function (_super) {
	    __extends$1o(TileSourceEvent, _super);
	    /**
	     * @param {string} type Type.
	     * @param {import("../Tile.js").default} tile The tile.
	     */
	    function TileSourceEvent(type, tile) {
	        var _this = _super.call(this, type) || this;
	        /**
	         * The tile related to the event.
	         * @type {import("../Tile.js").default}
	         * @api
	         */
	        _this.tile = tile;
	        return _this;
	    }
	    return TileSourceEvent;
	}(BaseEvent));

	/**
	 * @module ol/source/TileEventType
	 */
	/**
	 * @enum {string}
	 */
	var TileEventType = {
	    /**
	     * Triggered when a tile starts loading.
	     * @event module:ol/source/Tile.TileSourceEvent#tileloadstart
	     * @api
	     */
	    TILELOADSTART: 'tileloadstart',
	    /**
	     * Triggered when a tile finishes loading, either when its data is loaded,
	     * or when loading was aborted because the tile is no longer needed.
	     * @event module:ol/source/Tile.TileSourceEvent#tileloadend
	     * @api
	     */
	    TILELOADEND: 'tileloadend',
	    /**
	     * Triggered if tile loading results in an error.
	     * @event module:ol/source/Tile.TileSourceEvent#tileloaderror
	     * @api
	     */
	    TILELOADERROR: 'tileloaderror'
	};

	var __extends$1p = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @typedef {Object} Options
	 * @property {import("./Source.js").AttributionLike} [attributions]
	 * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
	 * @property {number} [cacheSize]
	 * @property {boolean} [opaque]
	 * @property {import("../proj.js").ProjectionLike} [projection]
	 * @property {import("./State.js").default} [state]
	 * @property {import("../tilegrid/TileGrid.js").default} [tileGrid]
	 * @property {import("../Tile.js").LoadFunction} tileLoadFunction
	 * @property {number} [tilePixelRatio]
	 * @property {import("../Tile.js").UrlFunction} [tileUrlFunction]
	 * @property {string} [url]
	 * @property {Array<string>} [urls]
	 * @property {boolean} [wrapX=true]
	 * @property {number} [transition]
	 * @property {string} [key]
	 * @property {number} [zDirection=0]
	 */
	/**
	 * @classdesc
	 * Base class for sources providing tiles divided into a tile grid over http.
	 *
	 * @fires import("./Tile.js").TileSourceEvent
	 */
	var UrlTile = /** @class */ (function (_super) {
	    __extends$1p(UrlTile, _super);
	    /**
	     * @param {Options} options Image tile options.
	     */
	    function UrlTile(options) {
	        var _this = _super.call(this, {
	            attributions: options.attributions,
	            cacheSize: options.cacheSize,
	            opaque: options.opaque,
	            projection: options.projection,
	            state: options.state,
	            tileGrid: options.tileGrid,
	            tilePixelRatio: options.tilePixelRatio,
	            wrapX: options.wrapX,
	            transition: options.transition,
	            key: options.key,
	            attributionsCollapsible: options.attributionsCollapsible,
	            zDirection: options.zDirection
	        }) || this;
	        /**
	         * @private
	         * @type {boolean}
	         */
	        _this.generateTileUrlFunction_ = !options.tileUrlFunction;
	        /**
	         * @protected
	         * @type {import("../Tile.js").LoadFunction}
	         */
	        _this.tileLoadFunction = options.tileLoadFunction;
	        /**
	         * @protected
	         * @type {import("../Tile.js").UrlFunction}
	         */
	        _this.tileUrlFunction = options.tileUrlFunction ? options.tileUrlFunction.bind(_this) : nullTileUrlFunction;
	        /**
	         * @protected
	         * @type {!Array<string>|null}
	         */
	        _this.urls = null;
	        if (options.urls) {
	            _this.setUrls(options.urls);
	        }
	        else if (options.url) {
	            _this.setUrl(options.url);
	        }
	        /**
	         * @private
	         * @type {!Object<string, boolean>}
	         */
	        _this.tileLoadingKeys_ = {};
	        return _this;
	    }
	    /**
	     * Return the tile load function of the source.
	     * @return {import("../Tile.js").LoadFunction} TileLoadFunction
	     * @api
	     */
	    UrlTile.prototype.getTileLoadFunction = function () {
	        return this.tileLoadFunction;
	    };
	    /**
	     * Return the tile URL function of the source.
	     * @return {import("../Tile.js").UrlFunction} TileUrlFunction
	     * @api
	     */
	    UrlTile.prototype.getTileUrlFunction = function () {
	        return this.tileUrlFunction;
	    };
	    /**
	     * Return the URLs used for this source.
	     * When a tileUrlFunction is used instead of url or urls,
	     * null will be returned.
	     * @return {!Array<string>|null} URLs.
	     * @api
	     */
	    UrlTile.prototype.getUrls = function () {
	        return this.urls;
	    };
	    /**
	     * Handle tile change events.
	     * @param {import("../events/Event.js").default} event Event.
	     * @protected
	     */
	    UrlTile.prototype.handleTileChange = function (event) {
	        var tile = /** @type {import("../Tile.js").default} */ (event.target);
	        var uid = getUid(tile);
	        var tileState = tile.getState();
	        var type;
	        if (tileState == TileState.LOADING) {
	            this.tileLoadingKeys_[uid] = true;
	            type = TileEventType.TILELOADSTART;
	        }
	        else if (uid in this.tileLoadingKeys_) {
	            delete this.tileLoadingKeys_[uid];
	            type = tileState == TileState.ERROR ? TileEventType.TILELOADERROR :
	                (tileState == TileState.LOADED || tileState == TileState.ABORT) ?
	                    TileEventType.TILELOADEND : undefined;
	        }
	        if (type != undefined) {
	            this.dispatchEvent(new TileSourceEvent(type, tile));
	        }
	    };
	    /**
	     * Set the tile load function of the source.
	     * @param {import("../Tile.js").LoadFunction} tileLoadFunction Tile load function.
	     * @api
	     */
	    UrlTile.prototype.setTileLoadFunction = function (tileLoadFunction) {
	        this.tileCache.clear();
	        this.tileLoadFunction = tileLoadFunction;
	        this.changed();
	    };
	    /**
	     * Set the tile URL function of the source.
	     * @param {import("../Tile.js").UrlFunction} tileUrlFunction Tile URL function.
	     * @param {string=} key Optional new tile key for the source.
	     * @api
	     */
	    UrlTile.prototype.setTileUrlFunction = function (tileUrlFunction, key) {
	        this.tileUrlFunction = tileUrlFunction;
	        this.tileCache.pruneExceptNewestZ();
	        if (typeof key !== 'undefined') {
	            this.setKey(key);
	        }
	        else {
	            this.changed();
	        }
	    };
	    /**
	     * Set the URL to use for requests.
	     * @param {string} url URL.
	     * @api
	     */
	    UrlTile.prototype.setUrl = function (url) {
	        var urls = expandUrl(url);
	        this.urls = urls;
	        this.setUrls(urls);
	    };
	    /**
	     * Set the URLs to use for requests.
	     * @param {Array<string>} urls URLs.
	     * @api
	     */
	    UrlTile.prototype.setUrls = function (urls) {
	        this.urls = urls;
	        var key = urls.join('\n');
	        if (this.generateTileUrlFunction_) {
	            this.setTileUrlFunction(createFromTemplates(urls, this.tileGrid), key);
	        }
	        else {
	            this.setKey(key);
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    UrlTile.prototype.useTile = function (z, x, y) {
	        var tileCoordKey = getKeyZXY(z, x, y);
	        if (this.tileCache.containsKey(tileCoordKey)) {
	            this.tileCache.get(tileCoordKey);
	        }
	    };
	    return UrlTile;
	}(TileSource));

	var __extends$1q = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @typedef {Object} Options
	 * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
	 * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
	 * @property {number} [cacheSize] Tile cache size. The default depends on the screen size. Will increase if too small.
	 * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
	 * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
	 * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
	 * @property {boolean} [opaque=true] Whether the layer is opaque.
	 * @property {import("../proj.js").ProjectionLike} [projection] Projection. Default is the view projection.
	 * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
	 * Higher values can increase reprojection performance, but decrease precision.
	 * @property {import("./State.js").default} [state] Source state.
	 * @property {typeof import("../ImageTile.js").default} [tileClass] Class used to instantiate image tiles.
	 * Default is {@link module:ol/ImageTile~ImageTile}.
	 * @property {import("../tilegrid/TileGrid.js").default} [tileGrid] Tile grid.
	 * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
	 * ```js
	 * function(imageTile, src) {
	 *   imageTile.getImage().src = src;
	 * };
	 * ```
	 * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile
	 * service advertizes 256px by 256px tiles but actually sends 512px
	 * by 512px images (for retina/hidpi devices) then `tilePixelRatio`
	 * should be set to `2`.
	 * @property {import("../Tile.js").UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.
	 * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.
	 * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be
	 * used instead of defining each one separately in the `urls` option.
	 * @property {Array<string>} [urls] An array of URL templates.
	 * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to
	 * request out-of-bounds tiles from the server. When set to `false`, only one
	 * world will be rendered. When set to `true`, tiles will be requested for one
	 * world only, but they will be wrapped horizontally to render multiple worlds.
	 * @property {number} [transition] Duration of the opacity transition for rendering.
	 * To disable the opacity transition, pass `transition: 0`.
	 * @property {string} [key] Optional tile key for proper cache fetching
	 * @property {number} [zDirection=0] Indicate which resolution should be used
	 * by a renderer if the view resolution does not match any resolution of the tile source.
	 * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
	 * will be used. If -1, the nearest higher resolution will be used.
	 */
	/**
	 * @classdesc
	 * Base class for sources providing images divided into a tile grid.
	 *
	 * @fires import("./Tile.js").TileSourceEvent
	 * @api
	 */
	var TileImage = /** @class */ (function (_super) {
	    __extends$1q(TileImage, _super);
	    /**
	     * @param {!Options} options Image tile options.
	     */
	    function TileImage(options) {
	        var _this = _super.call(this, {
	            attributions: options.attributions,
	            cacheSize: options.cacheSize,
	            opaque: options.opaque,
	            projection: options.projection,
	            state: options.state,
	            tileGrid: options.tileGrid,
	            tileLoadFunction: options.tileLoadFunction ?
	                options.tileLoadFunction : defaultTileLoadFunction,
	            tilePixelRatio: options.tilePixelRatio,
	            tileUrlFunction: options.tileUrlFunction,
	            url: options.url,
	            urls: options.urls,
	            wrapX: options.wrapX,
	            transition: options.transition,
	            key: options.key,
	            attributionsCollapsible: options.attributionsCollapsible,
	            zDirection: options.zDirection
	        }) || this;
	        /**
	         * @protected
	         * @type {?string}
	         */
	        _this.crossOrigin =
	            options.crossOrigin !== undefined ? options.crossOrigin : null;
	        /**
	         * @protected
	         * @type {typeof ImageTile}
	         */
	        _this.tileClass = options.tileClass !== undefined ?
	            options.tileClass : ImageTile;
	        /**
	         * @protected
	         * @type {!Object<string, TileCache>}
	         */
	        _this.tileCacheForProjection = {};
	        /**
	         * @protected
	         * @type {!Object<string, import("../tilegrid/TileGrid.js").default>}
	         */
	        _this.tileGridForProjection = {};
	        /**
	         * @private
	         * @type {number|undefined}
	         */
	        _this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;
	        /**
	         * @private
	         * @type {boolean}
	         */
	        _this.renderReprojectionEdges_ = false;
	        return _this;
	    }
	    /**
	     * @inheritDoc
	     */
	    TileImage.prototype.canExpireCache = function () {
	        if (this.tileCache.canExpireCache()) {
	            return true;
	        }
	        else {
	            for (var key in this.tileCacheForProjection) {
	                if (this.tileCacheForProjection[key].canExpireCache()) {
	                    return true;
	                }
	            }
	        }
	        return false;
	    };
	    /**
	     * @inheritDoc
	     */
	    TileImage.prototype.expireCache = function (projection, usedTiles) {
	        var usedTileCache = this.getTileCacheForProjection(projection);
	        this.tileCache.expireCache(this.tileCache == usedTileCache ? usedTiles : {});
	        for (var id in this.tileCacheForProjection) {
	            var tileCache = this.tileCacheForProjection[id];
	            tileCache.expireCache(tileCache == usedTileCache ? usedTiles : {});
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    TileImage.prototype.getGutterForProjection = function (projection) {
	        if (
	            this.getProjection() && projection && !equivalent(this.getProjection(), projection)) {
	            return 0;
	        }
	        else {
	            return this.getGutter();
	        }
	    };
	    /**
	     * @return {number} Gutter.
	     */
	    TileImage.prototype.getGutter = function () {
	        return 0;
	    };
	    /**
	     * @inheritDoc
	     */
	    TileImage.prototype.getOpaque = function (projection) {
	        if (
	            this.getProjection() && projection && !equivalent(this.getProjection(), projection)) {
	            return false;
	        }
	        else {
	            return _super.prototype.getOpaque.call(this, projection);
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    TileImage.prototype.getTileGridForProjection = function (projection) {
	        var thisProj = this.getProjection();
	        if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {
	            return this.tileGrid;
	        }
	        else {
	            var projKey = getUid(projection);
	            if (!(projKey in this.tileGridForProjection)) {
	                this.tileGridForProjection[projKey] = getForProjection(projection);
	            }
	            return (
	            /** @type {!import("../tilegrid/TileGrid.js").default} */ (this.tileGridForProjection[projKey]));
	        }
	    };
	    /**
	     * @inheritDoc
	     */
	    TileImage.prototype.getTileCacheForProjection = function (projection) {
	        var thisProj = this.getProjection();
	        if (!thisProj || equivalent(thisProj, projection)) {
	            return this.tileCache;
	        }
	        else {
	            var projKey = getUid(projection);
	            if (!(projKey in this.tileCacheForProjection)) {
	                this.tileCacheForProjection[projKey] = new TileCache(this.tileCache.highWaterMark);
	            }
	            return this.tileCacheForProjection[projKey];
	        }
	    };
	    /**
	     * @param {number} z Tile coordinate z.
	     * @param {number} x Tile coordinate x.
	     * @param {number} y Tile coordinate y.
	     * @param {number} pixelRatio Pixel ratio.
	     * @param {import("../proj/Projection.js").default} projection Projection.
	     * @param {string} key The key set on the tile.
	     * @return {!import("../Tile.js").default} Tile.
	     * @private
	     */
	    TileImage.prototype.createTile_ = function (z, x, y, pixelRatio, projection, key) {
	        var tileCoord = [z, x, y];
	        var urlTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);
	        var tileUrl = urlTileCoord ?
	            this.tileUrlFunction(urlTileCoord, pixelRatio, projection) : undefined;
	        var tile = new this.tileClass(tileCoord, tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY, tileUrl !== undefined ? tileUrl : '', this.crossOrigin, this.tileLoadFunction, this.tileOptions);
	        tile.key = key;
	        tile.addEventListener(EventType.CHANGE, this.handleTileChange.bind(this));
	        return tile;
	    };
	    /**
	     * @inheritDoc
	     */
	    TileImage.prototype.getTile = function (z, x, y, pixelRatio, projection) {
	        var sourceProjection = /** @type {!import("../proj/Projection.js").default} */ (this.getProjection());
	        if (
	            !sourceProjection || !projection || equivalent(sourceProjection, projection)) {
	            return this.getTileInternal(z, x, y, pixelRatio, sourceProjection || projection);
	        }
	        else {
	            var cache = this.getTileCacheForProjection(projection);
	            var tileCoord = [z, x, y];
	            var tile = void 0;
	            var tileCoordKey = getKey$1(tileCoord);
	            if (cache.containsKey(tileCoordKey)) {
	                tile = /** @type {!import("../Tile.js").default} */ (cache.get(tileCoordKey));
	            }
	            var key = this.getKey();
	            if (tile && tile.key == key) {
	                return tile;
	            }
	            else {
	                var sourceTileGrid = this.getTileGridForProjection(sourceProjection);
	                var targetTileGrid = this.getTileGridForProjection(projection);
	                var wrappedTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);
	                var newTile = new ReprojTile(sourceProjection, sourceTileGrid, projection, targetTileGrid, tileCoord, wrappedTileCoord, this.getTilePixelRatio(pixelRatio), this.getGutter(), function (z, x, y, pixelRatio) {
	                    return this.getTileInternal(z, x, y, pixelRatio, sourceProjection);
	                }.bind(this), this.reprojectionErrorThreshold_, this.renderReprojectionEdges_);
	                newTile.key = key;
	                if (tile) {
	                    newTile.interimTile = tile;
	                    newTile.refreshInterimChain();
	                    cache.replace(tileCoordKey, newTile);
	                }
	                else {
	                    cache.set(tileCoordKey, newTile);
	                }
	                return newTile;
	            }
	        }
	    };
	    /**
	     * @param {number} z Tile coordinate z.
	     * @param {number} x Tile coordinate x.
	     * @param {number} y Tile coordinate y.
	     * @param {number} pixelRatio Pixel ratio.
	     * @param {!import("../proj/Projection.js").default} projection Projection.
	     * @return {!import("../Tile.js").default} Tile.
	     * @protected
	     */
	    TileImage.prototype.getTileInternal = function (z, x, y, pixelRatio, projection) {
	        var tile = null;
	        var tileCoordKey = getKeyZXY(z, x, y);
	        var key = this.getKey();
	        if (!this.tileCache.containsKey(tileCoordKey)) {
	            tile = this.createTile_(z, x, y, pixelRatio, projection, key);
	            this.tileCache.set(tileCoordKey, tile);
	        }
	        else {
	            tile = this.tileCache.get(tileCoordKey);
	            if (tile.key != key) {
	                // The source's params changed. If the tile has an interim tile and if we
	                // can use it then we use it. Otherwise we create a new tile.  In both
	                // cases we attempt to assign an interim tile to the new tile.
	                var interimTile = tile;
	                tile = this.createTile_(z, x, y, pixelRatio, projection, key);
	                //make the new tile the head of the list,
	                if (interimTile.getState() == TileState.IDLE) {
	                    //the old tile hasn't begun loading yet, and is now outdated, so we can simply discard it
	                    tile.interimTile = interimTile.interimTile;
	                }
	                else {
	                    tile.interimTile = interimTile;
	                }
	                tile.refreshInterimChain();
	                this.tileCache.replace(tileCoordKey, tile);
	            }
	        }
	        return tile;
	    };
	    /**
	     * Sets whether to render reprojection edges or not (usually for debugging).
	     * @param {boolean} render Render the edges.
	     * @api
	     */
	    TileImage.prototype.setRenderReprojectionEdges = function (render) {
	        if (
	            this.renderReprojectionEdges_ == render) {
	            return;
	        }
	        this.renderReprojectionEdges_ = render;
	        for (var id in this.tileCacheForProjection) {
	            this.tileCacheForProjection[id].clear();
	        }
	        this.changed();
	    };
	    /**
	     * Sets the tile grid to use when reprojecting the tiles to the given
	     * projection instead of the default tile grid for the projection.
	     *
	     * This can be useful when the default tile grid cannot be created
	     * (e.g. projection has no extent defined) or
	     * for optimization reasons (custom tile size, resolutions, ...).
	     *
	     * @param {import("../proj.js").ProjectionLike} projection Projection.
	     * @param {import("../tilegrid/TileGrid.js").default} tilegrid Tile grid to use for the projection.
	     * @api
	     */
	    TileImage.prototype.setTileGridForProjection = function (projection, tilegrid) {
	        {
	            var proj = get$4(projection);
	            if (proj) {
	                var projKey = getUid(proj);
	                if (!(projKey in this.tileGridForProjection)) {
	                    this.tileGridForProjection[projKey] = tilegrid;
	                }
	            }
	        }
	    };
	    return TileImage;
	}(UrlTile));
	/**
	 * @param {ImageTile} imageTile Image tile.
	 * @param {string} src Source.
	 */
	function defaultTileLoadFunction(imageTile, src) {
	    /** @type {HTMLImageElement|HTMLVideoElement} */ (imageTile.getImage()).src = src;
	}

	/**
	 * @module ol/source/XYZ
	 */
	var __extends$1r = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @typedef {Object} Options
	 * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
	 * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
	 * @property {number} [cacheSize] Tile cache size. The default depends on the screen size. Will increase if too small.
	 * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
	 * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
	 * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
	 * @property {boolean} [opaque=true] Whether the layer is opaque.
	 * @property {import("../proj.js").ProjectionLike} [projection='EPSG:3857'] Projection.
	 * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
	 * Higher values can increase reprojection performance, but decrease precision.
	 * @property {number} [maxZoom=18] Optional max zoom level.
	 * @property {number} [minZoom=0] Optional min zoom level.
	 * @property {import("../tilegrid/TileGrid.js").default} [tileGrid] Tile grid.
	 * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
	 * ```js
	 * function(imageTile, src) {
	 *   imageTile.getImage().src = src;
	 * };
	 * ```
	 * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service.
	 * For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px
	 * by 512px images (for retina/hidpi devices) then `tilePixelRatio`
	 * should be set to `2`.
	 * @property {number|import("../size.js").Size} [tileSize=[256, 256]] The tile size used by the tile service.
	 * @property {import("../Tile.js").UrlFunction} [tileUrlFunction] Optional function to get
	 * tile URL given a tile coordinate and the projection.
	 * Required if url or urls are not provided.
	 * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`,
	 * and `{z}` placeholders. A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`,
	 * may be used instead of defining each one separately in the `urls` option.
	 * @property {Array<string>} [urls] An array of URL templates.
	 * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
	 * @property {number} [transition] Duration of the opacity transition for rendering.
	 * To disable the opacity transition, pass `transition: 0`.
	 * @property {number} [zDirection=0] Indicate which resolution should be used
	 * by a renderer if the view resolution does not match any resolution of the tile source.
	 * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
	 * will be used. If -1, the nearest higher resolution will be used.
	 */
	/**
	 * @classdesc
	 * Layer source for tile data with URLs in a set XYZ format that are
	 * defined in a URL template. By default, this follows the widely-used
	 * Google grid where `x` 0 and `y` 0 are in the top left. Grids like
	 * TMS where `x` 0 and `y` 0 are in the bottom left can be used by
	 * using the `{-y}` placeholder in the URL template, so long as the
	 * source does not have a custom tile grid. In this case,
	 * {@link module:ol/source/TileImage} can be used with a `tileUrlFunction`
	 * such as:
	 *
	 *  tileUrlFunction: function(coordinate) {
	 *    return 'http://mapserver.com/' + coordinate[0] + '/' +
	 *        coordinate[1] + '/' + coordinate[2] + '.png';
	 *    }
	 *
	 * @api
	 */
	var XYZ = /** @class */ (function (_super) {
	    __extends$1r(XYZ, _super);
	    /**
	     * @param {Options=} opt_options XYZ options.
	     */
	    function XYZ(opt_options) {
	        var _this = this;
	        var options = opt_options || {};
	        var projection = options.projection !== undefined ?
	            options.projection : 'EPSG:3857';
	        var tileGrid = options.tileGrid !== undefined ? options.tileGrid :
	            createXYZ({
	                extent: extentFromProjection(projection),
	                maxZoom: options.maxZoom,
	                minZoom: options.minZoom,
	                tileSize: options.tileSize
	            });
	        _this = _super.call(this, {
	            attributions: options.attributions,
	            cacheSize: options.cacheSize,
	            crossOrigin: options.crossOrigin,
	            opaque: options.opaque,
	            projection: projection,
	            reprojectionErrorThreshold: options.reprojectionErrorThreshold,
	            tileGrid: tileGrid,
	            tileLoadFunction: options.tileLoadFunction,
	            tilePixelRatio: options.tilePixelRatio,
	            tileUrlFunction: options.tileUrlFunction,
	            url: options.url,
	            urls: options.urls,
	            wrapX: options.wrapX !== undefined ? options.wrapX : true,
	            transition: options.transition,
	            attributionsCollapsible: options.attributionsCollapsible,
	            zDirection: options.zDirection
	        }) || this;
	        return _this;
	    }
	    return XYZ;
	}(TileImage));

	/**
	 * @module ol/source/OSM
	 */
	var __extends$1s = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * The attribution containing a link to the OpenStreetMap Copyright and License
	 * page.
	 * @const
	 * @type {string}
	 * @api
	 */
	var ATTRIBUTION = '&#169; ' +
	    '<a href="https://www.openstreetmap.org/copyright" target="_blank">OpenStreetMap</a> ' +
	    'contributors.';
	/**
	 * @typedef {Object} Options
	 * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
	 * @property {number} [cacheSize] Tile cache size. The default depends on the screen size. Will increase if too small.
	 * @property {null|string} [crossOrigin='anonymous'] The `crossOrigin` attribute for loaded images.  Note that
	 * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
	 * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
	 * @property {number} [maxZoom=19] Max zoom.
	 * @property {boolean} [opaque=true] Whether the layer is opaque.
	 * @property {number} [reprojectionErrorThreshold=1.5] Maximum allowed reprojection error (in pixels).
	 * Higher values can increase reprojection performance, but decrease precision.
	 * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
	 * ```js
	 * function(imageTile, src) {
	 *   imageTile.getImage().src = src;
	 * };
	 * ```
	 * @property {string} [url='https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png'] URL template.
	 * Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.
	 * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
	 */
	/**
	 * @classdesc
	 * Layer source for the OpenStreetMap tile server.
	 * @api
	 */
	var OSM = /** @class */ (function (_super) {
	    __extends$1s(OSM, _super);
	    /**
	     * @param {Options=} [opt_options] Open Street Map options.
	     */
	    function OSM(opt_options) {
	        var _this = this;
	        var options = opt_options || {};
	        var attributions;
	        if (options.attributions !== undefined) {
	            attributions = options.attributions;
	        }
	        else {
	            attributions = [ATTRIBUTION];
	        }
	        var crossOrigin = options.crossOrigin !== undefined ?
	            options.crossOrigin : 'anonymous';
	        var url = options.url !== undefined ?
	            options.url : 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png';
	        _this = _super.call(this, {
	            attributions: attributions,
	            cacheSize: options.cacheSize,
	            crossOrigin: crossOrigin,
	            opaque: options.opaque !== undefined ? options.opaque : true,
	            maxZoom: options.maxZoom !== undefined ? options.maxZoom : 19,
	            reprojectionErrorThreshold: options.reprojectionErrorThreshold,
	            tileLoadFunction: options.tileLoadFunction,
	            url: url,
	            wrapX: options.wrapX,
	            attributionsCollapsible: false
	        }) || this;
	        return _this;
	    }
	    return OSM;
	}(XYZ));

	/**
	 * @module ol/source/VectorTile
	 */
	var __extends$1t = (undefined && undefined.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	/**
	 * @typedef {Object} Options
	 * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
	 * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
	 * @property {number} [cacheSize=128] Cache size.
	 * @property {import("../extent.js").Extent} [extent]
	 * @property {import("../format/Feature.js").default} [format] Feature format for tiles. Used and required by the default.
	 * @property {boolean} [overlaps=true] This source may have overlapping geometries. Setting this
	 * to `false` (e.g. for sources with polygons that represent administrative
	 * boundaries or TopoJSON sources) allows the renderer to optimise fill and
	 * stroke operations.
	 * @property {import("../proj.js").ProjectionLike} [projection='EPSG:3857'] Projection of the tile grid.
	 * @property {import("./State.js").default} [state] Source state.
	 * @property {typeof import("../VectorTile.js").default} [tileClass] Class used to instantiate image tiles.
	 * Default is {@link module:ol/VectorTile}.
	 * @property {number} [maxZoom=22] Optional max zoom level.
	 * @property {number} [minZoom] Optional min zoom level.
	 * @property {number|import("../size.js").Size} [tileSize=512] Optional tile size.
	 * @property {import("../tilegrid/TileGrid.js").default} [tileGrid] Tile grid.
	 * @property {import("../Tile.js").LoadFunction} [tileLoadFunction]
	 * Optional function to load a tile given a URL. Could look like this for pbf tiles:
	 * ```js
	 * function(tile, url) {
	 *   tile.setLoader(function(extent, resolution, projection) {
	 *     fetch(url).then(function(response) {
	 *       response.arrayBuffer().then(function(data) {
	 *         const format = tile.getFormat() // ol/format/MVT configured as source format
	 *         const features = format.readFeatures(data, {
	 *           extent: extent,
	 *           featureProjection: projection
	 *         });
	 *         tile.setFeatures(features);
	 *       });
	 *     });
	 *   });
	 * }
	 * ```
	 * @property {import("../Tile.js").UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.
	 * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.
	 * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be
	 * used instead of defining each one separately in the `urls` option.
	 * @property {number} [transition] A duration for tile opacity
	 * transitions in milliseconds. A duration of 0 disables the opacity transition.
	 * @property {Array<string>} [urls] An array of URL templates.
	 * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
	 * When set to `false`, only one world
	 * will be rendered. When set to `true`, tiles will be wrapped horizontally to
	 * render multiple worlds.
	 * @property {number} [zDirection=1] Indicate which resolution should be used
	 * by a renderer if the view resolution does not match any resolution of the tile source.
	 * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
	 * will be used. If -1, the nearest higher resolution will be used.
	 */
	/**
	 * @classdesc
	 * Class for layer sources providing vector data divided into a tile grid, to be
	 * used with {@link module:ol/layer/VectorTile~VectorTile}. Although this source receives tiles
	 * with vector features from the server, it is not meant for feature editing.
	 * Features are optimized for rendering, their geometries are clipped at or near
	 * tile boundaries and simplified for a view resolution. See
	 * {@link module:ol/source/Vector} for vector sources that are suitable for feature
	 * editing.
	 *
	 * @fires import("./Tile.js").TileSourceEvent
	 * @api
	 */
	var VectorTile$1 = /** @class */ (function (_super) {
	    __extends$1t(VectorTile$1, _super);
	    /**
	     * @param {!Options} options Vector tile options.
	     */
	    function VectorTile$1(options) {
	        var _this = this;
	        var projection = options.projection || 'EPSG:3857';
	        var extent = options.extent || extentFromProjection(projection);
	        var tileGrid = options.tileGrid || createXYZ({
	            extent: extent,
	            maxZoom: options.maxZoom !== undefined ? options.maxZoom : 22,
	            minZoom: options.minZoom,
	            tileSize: options.tileSize || 512
	        });
	        _this = _super.call(this, {
	            attributions: options.attributions,
	            attributionsCollapsible: options.attributionsCollapsible,
	            cacheSize: options.cacheSize,
	            opaque: false,
	            projection: projection,
	            state: options.state,
	            tileGrid: tileGrid,
	            tileLoadFunction: options.tileLoadFunction ? options.tileLoadFunction : defaultLoadFunction,
	            tileUrlFunction: options.tileUrlFunction,
	            url: options.url,
	            urls: options.urls,
	            wrapX: options.wrapX === undefined ? true : options.wrapX,
	            transition: options.transition,
	            zDirection: options.zDirection === undefined ? 1 : options.zDirection
	        }) || this;
	        /**
	         * @private
	         * @type {import("../format/Feature.js").default}
	         */
	        _this.format_ = options.format ? options.format : null;
	        /**
	         * @type {Object<string, import("./VectorTile").default>}
	         */
	        _this.loadingTiles_ = {};
	        /**
	         * @private
	         * @type {Object<string, import("../VectorTile.js").default>}
	         */
	        _this.sourceTileByCoordKey_ = {};
	        /**
	         * @private
	         * @type {Object<string, Array<import("../VectorTile.js").default>>}
	         */
	        _this.sourceTilesByTileKey_ = {};
	        /**
	         * @private
	         * @type {boolean}
	         */
	        _this.overlaps_ = options.overlaps == undefined ? true : options.overlaps;
	        /**
	         * @protected
	         * @type {typeof import("../VectorTile.js").default}
	         */
	        _this.tileClass = options.tileClass ? options.tileClass : VectorTile;
	        /**
	         * @private
	         * @type {Object<string, import("../tilegrid/TileGrid.js").default>}
	         */
	        _this.tileGrids_ = {};
	        return _this;
	    }
	    /**
	     * @return {boolean} The source can have overlapping geometries.
	     */
	    VectorTile$1.prototype.getOverlaps = function () {
	        return this.overlaps_;
	    };
	    /**
	     * clear {@link module:ol/TileCache~TileCache} and delete all source tiles
	     * @api
	     */
	    VectorTile$1.prototype.clear = function () {
	        this.tileCache.clear();
	        this.sourceTileByCoordKey_ = {};
	        this.sourceTilesByTileKey_ = {};
	    };
	    /**
	     * @param {number} pixelRatio Pixel ratio.
	     * @param {import("../proj/Projection").default} projection Projection.
	     * @param {VectorRenderTile} tile Vector image tile.
	     * @return {Array<import("../VectorTile").default>} Tile keys.
	     */
	    VectorTile$1.prototype.getSourceTiles = function (pixelRatio, projection, tile) {
	        var urlTileCoord = tile.wrappedTileCoord;
	        var tileGrid = this.getTileGridForProjection(projection);
	        var extent = tileGrid.getTileCoordExtent(urlTileCoord);
	        var z = urlTileCoord[0];
	        var resolution = tileGrid.getResolution(z);
	        // make extent 1 pixel smaller so we don't load tiles for < 0.5 pixel render space
	        buffer(extent, -resolution, extent);
	        var sourceTileGrid = this.tileGrid;
	        var sourceExtent = sourceTileGrid.getExtent();
	        if (sourceExtent) {
	            getIntersection(extent, sourceExtent, extent);
	        }
	        var sourceZ = sourceTileGrid.getZForResolution(resolution, 1);
	        var minZoom = sourceTileGrid.getMinZoom();
	        var previousSourceTiles = this.sourceTilesByTileKey_[tile.getKey()];
	        var sourceTiles, covered, loadedZ;
	        if (previousSourceTiles && previousSourceTiles.length > 0 && previousSourceTiles[0].tileCoord[0] === sourceZ) {
	            sourceTiles = previousSourceTiles;
	            covered = true;
	            loadedZ = sourceZ;
	        }
	        else {
	            sourceTiles = [];
	            loadedZ = sourceZ + 1;
	            do {
	                --loadedZ;
	                covered = true;
	                sourceTileGrid.forEachTileCoord(extent, loadedZ, function (sourceTileCoord) {
	                    var coordKey = getKey$1(sourceTileCoord);
	                    var sourceTile;
	                    if (coordKey in this.sourceTileByCoordKey_) {
	                        sourceTile = this.sourceTileByCoordKey_[coordKey];
	                        var state = sourceTile.getState();
	                        if (state === TileState.LOADED || state === TileState.ERROR || state === TileState.EMPTY) {
	                            sourceTiles.push(sourceTile);
	                            return;
	                        }
	                    }
	                    else if (loadedZ === sourceZ) {
	                        var tileUrl = this.tileUrlFunction(sourceTileCoord, pixelRatio, projection);
	                        if (tileUrl !== undefined) {
	                            sourceTile = new this.tileClass(sourceTileCoord, TileState.IDLE, tileUrl, this.format_, this.tileLoadFunction);
	                            sourceTile.extent = sourceTileGrid.getTileCoordExtent(sourceTileCoord);
	                            sourceTile.projection = projection;
	                            sourceTile.resolution = sourceTileGrid.getResolution(sourceTileCoord[0]);
	                            this.sourceTileByCoordKey_[coordKey] = sourceTile;
	                            sourceTile.addEventListener(EventType.CHANGE, this.handleTileChange.bind(this));
	                            sourceTile.load();
	                        }
	                    }
	                    covered = false;
	                    if (!sourceTile) {
	                        return;
	                    }
	                    if (sourceTile.getState() !== TileState.EMPTY && tile.getState() === TileState.IDLE) {
	                        tile.loadingSourceTiles++;
	                        var key_1 = listen$1(sourceTile, EventType.CHANGE, function () {
	                            var state = sourceTile.getState();
	                            var sourceTileKey = sourceTile.getKey();
	                            if (state === TileState.LOADED || state === TileState.ERROR) {
	                                if (state === TileState.LOADED) {
	                                    remove(tile.sourceTileListenerKeys, key_1);
	                                    unlistenByKey(key_1);
	                                    tile.loadingSourceTiles--;
	                                    delete tile.errorSourceTileKeys[sourceTileKey];
	                                }
	                                else if (state === TileState.ERROR) {
	                                    tile.errorSourceTileKeys[sourceTileKey] = true;
	                                }
	                                var errorTileCount = Object.keys(tile.errorSourceTileKeys).length;
	                                if (tile.loadingSourceTiles - errorTileCount === 0) {
	                                    tile.hifi = errorTileCount === 0;
	                                    tile.sourceZ = sourceZ;
	                                    tile.setState(TileState.LOADED);
	                                }
	                            }
	                        });
	                        tile.sourceTileListenerKeys.push(key_1);
	                    }
	                }.bind(this));
	                if (!covered) {
	                    sourceTiles.length = 0;
	                }
	            } while (!covered && loadedZ > minZoom);
	        }
	        if (tile.getState() === TileState.IDLE) {
	            tile.setState(TileState.LOADING);
	        }
	        if (covered) {
	            tile.hifi = sourceZ === loadedZ;
	            tile.sourceZ = loadedZ;
	            if (tile.getState() < TileState.LOADED) {
	                tile.setState(TileState.LOADED);
	            }
	            else if (!previousSourceTiles || !equals$1(sourceTiles, previousSourceTiles)) {
	                this.removeSourceTiles(tile);
	                this.addSourceTiles(tile, sourceTiles);
	            }
	        }
	        return sourceTiles;
	    };
	    /**
	     * @param {VectorRenderTile} tile Tile.
	     * @param {Array<import("../VectorTile").default>} sourceTiles Source tiles.
	     */
	    VectorTile$1.prototype.addSourceTiles = function (tile, sourceTiles) {
	        this.sourceTilesByTileKey_[tile.getKey()] = sourceTiles;
	        for (var i = 0, ii = sourceTiles.length; i < ii; ++i) {
	            sourceTiles[i].consumers++;
	        }
	    };
	    /**
	     * @param {VectorRenderTile} tile Tile.
	     */
	    VectorTile$1.prototype.removeSourceTiles = function (tile) {
	        var tileKey = tile.getKey();
	        if (tileKey in this.sourceTilesByTileKey_) {
	            var sourceTiles = this.sourceTilesByTileKey_[tileKey];
	            for (var i = 0, ii = sourceTiles.length; i < ii; ++i) {
	                var sourceTile = sourceTiles[i];
	                sourceTile.consumers--;
	                if (sourceTile.consumers === 0) {
	                    sourceTile.dispose();
	                    delete this.sourceTileByCoordKey_[getKey$1(sourceTile.tileCoord)];
	                }
	            }
	        }
	        delete this.sourceTilesByTileKey_[tileKey];
	    };
	    /**
	     * @inheritDoc
	     */
	    VectorTile$1.prototype.getTile = function (z, x, y, pixelRatio, projection) {
	        var coordKey = getKeyZXY(z, x, y);
	        var key = this.getKey();
	        var tile;
	        if (this.tileCache.containsKey(coordKey)) {
	            tile = /** @type {!import("../Tile.js").default} */ (this.tileCache.get(coordKey));
	            if (tile.key === key) {
	                return tile;
	            }
	        }
	        var tileCoord = [z, x, y];
	        var urlTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);
	        var sourceExtent = this.getTileGrid().getExtent();
	        var tileGrid = this.getTileGridForProjection(projection);
	        if (urlTileCoord && sourceExtent) {
	            var tileExtent = tileGrid.getTileCoordExtent(urlTileCoord);
	            // make extent 1 pixel smaller so we don't load tiles for < 0.5 pixel render space
	            buffer(tileExtent, -tileGrid.getResolution(z), tileExtent);
	            if (!intersects(sourceExtent, tileExtent)) {
	                urlTileCoord = null;
	            }
	        }
	        var empty = true;
	        if (urlTileCoord !== null) {
	            var sourceTileGrid = this.tileGrid;
	            var resolution = tileGrid.getResolution(z);
	            var sourceZ = sourceTileGrid.getZForResolution(resolution, 1);
	            // make extent 1 pixel smaller so we don't load tiles for < 0.5 pixel render space
	            var extent = tileGrid.getTileCoordExtent(urlTileCoord);
	            buffer(extent, -resolution, extent);
	            sourceTileGrid.forEachTileCoord(extent, sourceZ, function (sourceTileCoord) {
	                empty = empty && !this.tileUrlFunction(sourceTileCoord, pixelRatio, projection);
	            }.bind(this));
	        }
	        var newTile = new VectorRenderTile(tileCoord, empty ? TileState.EMPTY : TileState.IDLE, urlTileCoord, this.tileGrid, this.getSourceTiles.bind(this, pixelRatio, projection), this.removeSourceTiles.bind(this));
	        newTile.key = key;
	        if (tile) {
	            newTile.interimTile = tile;
	            newTile.refreshInterimChain();
	            this.tileCache.replace(coordKey, newTile);
	        }
	        else {
	            this.tileCache.set(coordKey, newTile);
	        }
	        return newTile;
	    };
	    /**
	     * @inheritDoc
	     */
	    VectorTile$1.prototype.getTileGridForProjection = function (projection) {
	        var code = projection.getCode();
	        var tileGrid = this.tileGrids_[code];
	        if (!tileGrid) {
	            // A tile grid that matches the tile size of the source tile grid is more
	            // likely to have 1:1 relationships between source tiles and rendered tiles.
	            var sourceTileGrid = this.tileGrid;
	            tileGrid = createForProjection(projection, undefined, sourceTileGrid ? sourceTileGrid.getTileSize(sourceTileGrid.getMinZoom()) : undefined);
	            this.tileGrids_[code] = tileGrid;
	        }
	        return tileGrid;
	    };
	    /**
	     * @inheritDoc
	     */
	    VectorTile$1.prototype.getTilePixelRatio = function (pixelRatio) {
	        return pixelRatio;
	    };
	    /**
	     * @inheritDoc
	     */
	    VectorTile$1.prototype.getTilePixelSize = function (z, pixelRatio, projection) {
	        var tileGrid = this.getTileGridForProjection(projection);
	        var tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);
	        return [Math.round(tileSize[0] * pixelRatio), Math.round(tileSize[1] * pixelRatio)];
	    };
	    return VectorTile$1;
	}(UrlTile));
	/**
	 * Sets the loader for a tile.
	 * @param {import("../VectorTile.js").default} tile Vector tile.
	 * @param {string} url URL.
	 */
	function defaultLoadFunction(tile, url) {
	    var loader = loadFeaturesXhr(url, tile.getFormat(), tile.onLoad.bind(tile), tile.onError.bind(tile));
	    tile.setLoader(loader);
	}

	var BOUNDARY_STYLE = [new Style({
	  stroke: new Stroke({
	    color: 'rgb(48, 48, 48)',
	    width: 10
	  })
	}), new Style({
	  stroke: new Stroke({
	    color: 'rgb(255, 255, 255)',
	    width: 6
	  })
	})];
	var MY_LOCATION_STYLE = new Style({
	  image: new CircleStyle({
	    radius: 8,
	    fill: new Fill({
	      color: 'rgba(10, 128, 255, 0.75)'
	    }),
	    stroke: new Stroke({
	      color: 'white',
	      width: 2
	    })
	  })
	});
	var MY_LOCATION_ACCURACY_STYLE = new Style({
	  fill: new Fill({
	    color: 'rgba(10, 128, 255, 0.15)'
	  }),
	  stroke: new Stroke({
	    color: 'rgba(10, 128, 255, 0.25)',
	    width: 1
	  })
	});
	var ROUTE_STYLE = [new Style({
	  stroke: new Stroke({
	    color: 'white',
	    width: 10
	  })
	}), new Style({
	  stroke: new Stroke({
	    color: '#303030',
	    width: 6
	  })
	})];

	var MapService =
	/*#__PURE__*/
	function () {
	  function MapService() {
	    var _this = this;

	    classCallCheck(this, MapService);

	    var baseLayers = [];

	    if (DEBUG) {
	      var STREET_STYLE = [new Style({
	        stroke: new Stroke({
	          color: '#686868',
	          width: 6
	        })
	      }), new Style({
	        stroke: new Stroke({
	          color: '#a8a8a8',
	          width: 4
	        })
	      })];
	      var INTERSECTION_STYLE = new Style({
	        image: new CircleStyle({
	          radius: 6,
	          stroke: new Stroke({
	            color: '#686868',
	            width: 2
	          }),
	          fill: new Fill({
	            color: 'rgba(255, 255, 255, 0.5)'
	          })
	        })
	      });
	      baseLayers.push(new LayerGroup({
	        label: 'Debug',
	        shortLabel: 'Debug',
	        layers: [this.makeMVTLayer('street', 'Streets', null, true, STREET_STYLE), this.makeMVTLayer('intersection', 'Intersections', null, true, INTERSECTION_STYLE)],
	        visible: false
	      }));
	    }

	    baseLayers.push(this.makeBaseLayer('wylee/cjpa3kgvr149r2qmism8fqrnh', 'Map'), this.makeBaseLayer('wylee/cjpg5l0gb5hgh2sn9p4u49gyw', 'Satellite'), this.makeOSMLayer());
	    this.baseLayers = baseLayers;
	    this.myLocationLayer = new VectorLayer({
	      visible: false,
	      source: new VectorSource({
	        features: new Collection$2()
	      })
	    });
	    this.boundaryLayer = this.makeBoundaryLayer();
	    this.vectorLayer = new VectorLayer({
	      visible: false,
	      source: new VectorSource({
	        features: new Collection$2()
	      })
	    });
	    this.overlays = [];
	    this.view = new View({
	      minZoom: MIN_ZOOM,
	      maxZoom: MAX_ZOOM
	    });
	    this.map = new Map$1({
	      controls: [],
	      layers: baseLayers.concat([this.myLocationLayer, this.boundaryLayer, this.vectorLayer]),
	      view: this.view
	    });
	    this.setBaseLayer(baseLayers[0]);

	    if (DEBUG) {
	      this.on('click', function (event) {
	        var baseLayers = _this.baseLayers[0].get('layers').getArray();

	        _this.map.forEachFeatureAtPixel(event.pixel, function (feature) {
	          var layer = feature.get('layer');
	          var props = ['layer', 'id', 'name'];
	          var data = [];

	          if (layer === 'street') {
	            props.push('start_node_id', 'end_node_id', 'highway', 'bicycle', 'oneway_bicycle');
	          }

	          for (var _i = 0, _props = props; _i < _props.length; _i++) {
	            var prop = _props[_i];
	            data.push("".concat(prop, ": ").concat(feature.get(prop)));
	          }

	          console.debug(data.join('\n'));
	        }, {
	          layerFilter: function layerFilter(layer) {
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	              for (var _iterator = baseLayers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                var baseLayer = _step.value;

	                if (layer === baseLayer) {
	                  return true;
	                }
	              }
	            } catch (err) {
	              _didIteratorError = true;
	              _iteratorError = err;
	            } finally {
	              try {
	                if (!_iteratorNormalCompletion && _iterator.return != null) {
	                  _iterator.return();
	                }
	              } finally {
	                if (_didIteratorError) {
	                  throw _iteratorError;
	                }
	              }
	            }

	            return false;
	          }
	        });
	      });
	    }
	  }

	  createClass(MapService, [{
	    key: "setTarget",
	    value: function setTarget(target) {
	      this.map.setTarget(target);
	    }
	  }, {
	    key: "getSize",
	    value: function getSize() {
	      var size = this.map.getSize();
	      return size ? size : [0, 0];
	    }
	    /* Events */

	  }, {
	    key: "on",
	    value: function on() {
	      var _this$map;

	      return (_this$map = this.map).on.apply(_this$map, arguments);
	    }
	  }, {
	    key: "once",
	    value: function once() {
	      var _this$map2;

	      return (_this$map2 = this.map).once.apply(_this$map2, arguments);
	    }
	    /* Layers */

	  }, {
	    key: "makeBaseLayer",
	    value: function makeBaseLayer(mapboxLayerId, label) {
	      var shortLabel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
	      var visible = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
	      var url = ["".concat(MAPBOX_API_URL, "/styles/v1/").concat(mapboxLayerId, "/tiles/256/{z}/{x}/{y}"), "access_token=".concat(MAPBOX_ACCESS_TOKEN)].join('?');
	      var source = new XYZ({
	        url: url
	      });
	      shortLabel = shortLabel || label;
	      return new TileLayer({
	        label: label,
	        shortLabel: shortLabel,
	        source: source,
	        visible: visible
	      });
	    }
	  }, {
	    key: "makeOSMLayer",
	    value: function makeOSMLayer() {
	      var label = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'OpenStreetMap';
	      var shortLabel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'OSM';
	      var visible = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	      var source = new OSM();
	      return new TileLayer({
	        label: label,
	        shortLabel: shortLabel,
	        source: source,
	        visible: visible
	      });
	    }
	  }, {
	    key: "makeMVTLayer",
	    value: function makeMVTLayer(layerName, label) {
	      var shortLabel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
	      var visible = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
	      var style = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
	      shortLabel = shortLabel || label;
	      var source = new VectorTile$1({
	        format: new MVT(),
	        url: makeApiUrl("map/tiles/".concat(layerName, "/{x}/{y}/{z}"))
	      });
	      return new VectorTileLayer({
	        label: label,
	        shortLabel: shortLabel,
	        source: source,
	        visible: visible,
	        style: style
	      });
	    }
	  }, {
	    key: "makeBoundaryLayer",
	    value: function makeBoundaryLayer() {
	      var source = new VectorSource({
	        format: new GeoJSON(),
	        url: makeApiUrl('map/street-boundary')
	      });
	      return new VectorLayer({
	        source: source,
	        style: BOUNDARY_STYLE
	      });
	    }
	  }, {
	    key: "setBaseLayer",
	    value: function setBaseLayer(layer) {
	      var _iteratorNormalCompletion2 = true;
	      var _didIteratorError2 = false;
	      var _iteratorError2 = undefined;

	      try {
	        for (var _iterator2 = this.baseLayers[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	          var baseLayer = _step2.value;
	          baseLayer.setVisible(baseLayer === layer);
	        }
	      } catch (err) {
	        _didIteratorError2 = true;
	        _iteratorError2 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
	            _iterator2.return();
	          }
	        } finally {
	          if (_didIteratorError2) {
	            throw _iteratorError2;
	          }
	        }
	      }

	      this.baseLayer = layer;
	    }
	    /* Center */

	  }, {
	    key: "getCenter",
	    value: function getCenter() {
	      return this.view.getCenter();
	    }
	  }, {
	    key: "setCenter",
	    value: function setCenter(center, zoom) {
	      var _this2 = this;

	      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	      options.center = center;

	      if (typeof zoom !== 'undefined') {
	        options.zoom = zoom;
	      }

	      if (typeof options.duration === 'undefined') {
	        options.duration = ANIMATION_DURATION;
	      }

	      return new Promise(function (resolve, reject) {
	        _this2.view.animate(options, function (completed) {
	          completed ? resolve() : reject();
	        });
	      });
	    }
	  }, {
	    key: "setDefaultCenter",
	    value: function setDefaultCenter() {
	      return this.setCenter(DEFAULT_CENTER, DEFAULT_ZOOM);
	    }
	  }, {
	    key: "getCoordinateFromPixel",
	    value: function getCoordinateFromPixel(pixel) {
	      var native = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	      var coordinate = this.map.getCoordinateFromPixel(pixel);

	      if (!native && coordinate != null) {
	        coordinate = this.transform(coordinate);
	      }

	      return coordinate;
	    }
	    /* Extent */

	  }, {
	    key: "getExtent",
	    value: function getExtent() {
	      return this.view.calculateExtent();
	    }
	  }, {
	    key: "fitExtent",
	    value: function fitExtent(extent) {
	      var _this3 = this;

	      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	      if (typeof options.duration === 'undefined') {
	        options.duration = ANIMATION_DURATION;
	      }

	      return new Promise(function (resolve, reject) {
	        options.callback = function (completed) {
	          completed ? resolve() : reject();
	        };

	        _this3.view.fit(extent, options);
	      });
	    }
	  }, {
	    key: "isVisible",
	    value: function isVisible(coordinatesOrExtent) {
	      var currentExtent = this.view.calculateExtent();
	      var length = coordinatesOrExtent.length;

	      if (length === 2) {
	        return containsCoordinate(currentExtent, coordinatesOrExtent);
	      } else if (length === 4) {
	        return containsExtent(currentExtent, coordinatesOrExtent);
	      }

	      throw new TypeError('Expected array of length 2 (coordinates) or 4 (extent)');
	    }
	    /* Zoom */

	  }, {
	    key: "getZoom",
	    value: function getZoom() {
	      return this.view.getZoom();
	    }
	  }, {
	    key: "setZoom",
	    value: function setZoom(zoom) {
	      var _this4 = this;

	      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	      options.zoom = zoom;

	      if (typeof options.duration === 'undefined') {
	        options.duration = ANIMATION_DURATION;
	      }

	      return new Promise(function (resolve, reject) {
	        _this4.view.animate(options, function (completed) {
	          completed ? resolve() : reject();
	        });
	      });
	    }
	  }, {
	    key: "zoomIn",
	    value: function zoomIn() {
	      return this.setZoom(this.getZoom() + 1);
	    }
	  }, {
	    key: "zoomOut",
	    value: function zoomOut() {
	      return this.setZoom(this.getZoom() - 1);
	    }
	  }, {
	    key: "zoomToStreetLevel",
	    value: function zoomToStreetLevel() {
	      return this.setZoom(Math.max(STREET_LEVEL_ZOOM, this.getZoom()));
	    }
	  }, {
	    key: "zoomToFullExtent",
	    value: function zoomToFullExtent() {
	      var features = this.boundaryLayer.getSource().getFeatures();

	      if (features.length) {
	        var extent = features[0].getGeometry().getExtent();
	        return this.fitExtent(extent, {
	          padding: [6, 7, 6, 7]
	        });
	      }

	      return this.setDefaultCenter();
	    }
	    /* Location */

	  }, {
	    key: "showMyLocation",
	    value: function showMyLocation(locationData) {
	      var source = this.myLocationLayer.getSource();
	      var position = locationData.position,
	          accuracy = locationData.accuracy,
	          accuracyGeometry = locationData.accuracyGeometry;
	      source.clear();

	      if (position) {
	        var feature = new Feature({
	          geometry: new Point(position)
	        });
	        feature.setStyle(MY_LOCATION_STYLE);

	        if (accuracy > MY_LOCATION_ACCURACY_THRESHOLD && accuracyGeometry) {
	          var accuracyFeature = new Feature({
	            geometry: accuracyGeometry
	          });
	          accuracyFeature.setStyle(MY_LOCATION_ACCURACY_STYLE);
	          source.addFeature(accuracyFeature);
	        }

	        source.addFeature(feature);
	        this.myLocationLayer.setVisible(true);
	      } else {
	        this.myLocationLayer.setVisible(false);
	      }
	    }
	    /* Transform */

	    /**
	     * Transform native coordinate to geographic or vice versa.
	     *
	     * @param coordinate
	     * @param reverse If set, transform geographic coordinate to native
	     *        instead of native to geographic.
	     * @returns Transformed coordinates
	     */

	  }, {
	    key: "transform",
	    value: function transform$1(coordinate) {
	      var reverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	      var _this$_getTransformPr = this._getTransformProjections(reverse),
	          source = _this$_getTransformPr.source,
	          destination = _this$_getTransformPr.destination;

	      return transform(coordinate, source, destination);
	    }
	    /**
	     * Transform native extent to geographic or vice versa.
	     */

	  }, {
	    key: "transformExtent",
	    value: function transformExtent$1(extent) {
	      var reverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	      var _this$_getTransformPr2 = this._getTransformProjections(reverse),
	          source = _this$_getTransformPr2.source,
	          destination = _this$_getTransformPr2.destination;

	      return transformExtent(extent, source, destination);
	    }
	  }, {
	    key: "_getTransformProjections",
	    value: function _getTransformProjections() {
	      var reverse = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	      var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : NATIVE_PROJECTION;
	      var destination = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : GEOGRAPHIC_PROJECTION;
	      return reverse ? {
	        source: destination,
	        destination: source
	      } : {
	        source: source,
	        destination: destination
	      };
	    }
	    /* Overlays */

	  }, {
	    key: "addOverlay",
	    value: function addOverlay(position) {
	      var className = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	      var positioning = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'bottom-center';
	      var element = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

	      if (!element) {
	        element = document.createElement('DIV');
	        element.classList.add('material-icons', 'map-marker');

	        if (className) {
	          var _element$classList;

	          (_element$classList = element.classList).add.apply(_element$classList, toConsumableArray(className.split(' ')));
	        }
	      }

	      var overlay = new Overlay({
	        element: element,
	        position: position,
	        positioning: positioning,
	        insertFirst: false
	      });
	      this.map.addOverlay(overlay);
	      this.overlays.push(overlay); // XXX: Hack to force map redraw. Not sure why this is
	      //      necessary, but overlays sometimes get added in the wrong
	      //      spot (just a little off) without it.

	      this.setCenter(this.getCenter());
	      return overlay;
	    }
	  }, {
	    key: "clearOverlay",
	    value: function clearOverlay(overlay) {
	      this.map.removeOverlay(overlay);
	    }
	  }, {
	    key: "clearOverlays",
	    value: function clearOverlays() {
	      var _iteratorNormalCompletion3 = true;
	      var _didIteratorError3 = false;
	      var _iteratorError3 = undefined;

	      try {
	        for (var _iterator3 = this.overlays[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	          var overlay = _step3.value;
	          this.map.removeOverlay(overlay);
	        }
	      } catch (err) {
	        _didIteratorError3 = true;
	        _iteratorError3 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
	            _iterator3.return();
	          }
	        } finally {
	          if (_didIteratorError3) {
	            throw _iteratorError3;
	          }
	        }
	      }

	      this.overlays.splice(0);
	    }
	  }]);

	  return MapService;
	}();

	var file$3 = "src/Menu.svelte";

	function get_each_context(ctx, list, i) {
	  var child_ctx = ctx.slice();
	  child_ctx[7] = list[i];
	  return child_ctx;
	} // (142:4) {#if show}


	function create_if_block$2(ctx) {
	  var div0;
	  var div0_transition;
	  var t0;
	  var ul;
	  var li0;
	  var div1;
	  var h1;
	  var t2;
	  var span0;
	  var t3;
	  var button;
	  var t5;
	  var li1;
	  var t6;
	  var t7;
	  var li2;
	  var t8;
	  var li3;
	  var a0;
	  var span1;
	  var t10;
	  var span2;
	  var t12;
	  var li4;
	  var t13;
	  var li5;
	  var a1;
	  var span3;
	  var t15;
	  var span4;
	  var t17;
	  var li6;
	  var a2;
	  var span5;
	  var t19;
	  var span6;
	  var t21;
	  var li7;
	  var a3;
	  var span7;
	  var t23;
	  var span8;
	  var t25;
	  var li8;
	  var t26;
	  var li9;
	  var p0;
	  var t28;
	  var p1;
	  var ul_transition;
	  var current;
	  var dispose;
	  var each_value =
	  /*map*/
	  ctx[2].baseLayers;
	  var each_blocks = [];

	  for (var i = 0; i < each_value.length; i += 1) {
	    each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	  }

	  var block = {
	    c: function create() {
	      div0 = element("div");
	      t0 = space();
	      ul = element("ul");
	      li0 = element("li");
	      div1 = element("div");
	      h1 = element("h1");
	      h1.textContent = "byCycle";
	      t2 = space();
	      span0 = element("span");
	      t3 = space();
	      button = element("button");
	      button.textContent = "close";
	      t5 = space();
	      li1 = element("li");
	      t6 = space();

	      for (var _i = 0; _i < each_blocks.length; _i += 1) {
	        each_blocks[_i].c();
	      }

	      t7 = space();
	      li2 = element("li");
	      t8 = space();
	      li3 = element("li");
	      a0 = element("a");
	      span1 = element("span");
	      span1.textContent = "directions_bike";
	      t10 = space();
	      span2 = element("span");
	      span2.textContent = "Bike Map";
	      t12 = space();
	      li4 = element("li");
	      t13 = space();
	      li5 = element("li");
	      a1 = element("a");
	      span3 = element("span");
	      span3.textContent = "notifications";
	      t15 = space();
	      span4 = element("span");
	      span4.textContent = "News";
	      t17 = space();
	      li6 = element("li");
	      a2 = element("a");
	      span5 = element("span");
	      span5.textContent = "info";
	      t19 = space();
	      span6 = element("span");
	      span6.textContent = "About";
	      t21 = space();
	      li7 = element("li");
	      a3 = element("a");
	      span7 = element("span");
	      span7.textContent = "code";
	      t23 = space();
	      span8 = element("span");
	      span8.textContent = "Code";
	      t25 = space();
	      li8 = element("li");
	      t26 = space();
	      li9 = element("li");
	      p0 = element("p");
	      p0.textContent = "byCycle is an experiment in using OpenStreetMap data for routing and geocoding.\n                    Search results and directions may be inaccurate or unsuitable. All information\n                    presented on this site should be verified via other sources.";
	      t28 = space();
	      p1 = element("p");
	      p1.textContent = "Â© 2004-2007,2012,2014,2017-2019 byCycle.org";
	      attr_dev(div0, "id", "mask");
	      attr_dev(div0, "class", "svelte-8yppxw");
	      add_location(div0, file$3, 142, 8, 2559);
	      attr_dev(h1, "class", "svelte-8yppxw");
	      add_location(h1, file$3, 147, 20, 2795);
	      attr_dev(span0, "class", "flex-spacer svelte-8yppxw");
	      add_location(span0, file$3, 148, 20, 2832);
	      attr_dev(button, "id", "close-button");
	      attr_dev(button, "type", "button");
	      attr_dev(button, "title", "Close menu");
	      attr_dev(button, "class", "material-icons svelte-8yppxw");
	      add_location(button, file$3, 149, 20, 2881);
	      attr_dev(div1, "class", "svelte-8yppxw");
	      add_location(div1, file$3, 146, 16, 2769);
	      attr_dev(li0, "id", "header");
	      attr_dev(li0, "class", "svelte-8yppxw");
	      add_location(li0, file$3, 145, 12, 2736);
	      attr_dev(li1, "class", "divider svelte-8yppxw");
	      add_location(li1, file$3, 160, 12, 3217);
	      attr_dev(li2, "class", "divider svelte-8yppxw");
	      add_location(li2, file$3, 181, 12, 4061);
	      attr_dev(span1, "class", "material-icons svelte-8yppxw");
	      add_location(span1, file$3, 185, 20, 4164);
	      attr_dev(span2, "class", "svelte-8yppxw");
	      add_location(span2, file$3, 186, 20, 4236);
	      attr_dev(a0, "href", "#show-bike-map");
	      attr_dev(a0, "class", "svelte-8yppxw");
	      add_location(a0, file$3, 184, 16, 4118);
	      attr_dev(li3, "class", "svelte-8yppxw");
	      add_location(li3, file$3, 183, 12, 4097);
	      attr_dev(li4, "class", "divider svelte-8yppxw");
	      add_location(li4, file$3, 190, 12, 4310);
	      attr_dev(span3, "class", "material-icons svelte-8yppxw");
	      add_location(span3, file$3, 194, 20, 4424);
	      attr_dev(span4, "class", "svelte-8yppxw");
	      add_location(span4, file$3, 195, 20, 4494);
	      attr_dev(a1, "href", "https://info.bycycle.org/");
	      attr_dev(a1, "class", "svelte-8yppxw");
	      add_location(a1, file$3, 193, 16, 4367);
	      attr_dev(li5, "class", "svelte-8yppxw");
	      add_location(li5, file$3, 192, 12, 4346);
	      attr_dev(span5, "class", "material-icons svelte-8yppxw");
	      add_location(span5, file$3, 200, 20, 4647);
	      attr_dev(span6, "class", "svelte-8yppxw");
	      add_location(span6, file$3, 201, 20, 4708);
	      attr_dev(a2, "href", "https://info.bycycle.org/about/");
	      attr_dev(a2, "class", "svelte-8yppxw");
	      add_location(a2, file$3, 199, 16, 4584);
	      attr_dev(li6, "class", "svelte-8yppxw");
	      add_location(li6, file$3, 198, 12, 4563);
	      attr_dev(span7, "class", "material-icons svelte-8yppxw");
	      add_location(span7, file$3, 206, 20, 4861);
	      attr_dev(span8, "class", "svelte-8yppxw");
	      add_location(span8, file$3, 207, 20, 4922);
	      attr_dev(a3, "href", "https://info.bycycle.org/code/");
	      attr_dev(a3, "class", "svelte-8yppxw");
	      add_location(a3, file$3, 205, 16, 4799);
	      attr_dev(li7, "class", "svelte-8yppxw");
	      add_location(li7, file$3, 204, 12, 4778);
	      attr_dev(li8, "class", "divider svelte-8yppxw");
	      add_location(li8, file$3, 211, 12, 4992);
	      attr_dev(p0, "class", "svelte-8yppxw");
	      add_location(p0, file$3, 214, 16, 5062);
	      attr_dev(p1, "class", "svelte-8yppxw");
	      add_location(p1, file$3, 220, 16, 5384);
	      attr_dev(li9, "class", "info svelte-8yppxw");
	      add_location(li9, file$3, 213, 12, 5028);
	      attr_dev(ul, "id", "menu");
	      attr_dev(ul, "class", "svelte-8yppxw");
	      add_location(ul, file$3, 144, 8, 2641);
	      dispose = [listen_dev(div0, "click",
	      /*close*/
	      ctx[4], false, false, false), listen_dev(button, "click",
	      /*close*/
	      ctx[4], false, false, false), listen_dev(ul, "click",
	      /*maybeClose*/
	      ctx[5], false, false, false)];
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, div0, anchor);
	      insert_dev(target, t0, anchor);
	      insert_dev(target, ul, anchor);
	      append_dev(ul, li0);
	      append_dev(li0, div1);
	      append_dev(div1, h1);
	      append_dev(div1, t2);
	      append_dev(div1, span0);
	      append_dev(div1, t3);
	      append_dev(div1, button);
	      append_dev(ul, t5);
	      append_dev(ul, li1);
	      append_dev(ul, t6);

	      for (var _i2 = 0; _i2 < each_blocks.length; _i2 += 1) {
	        each_blocks[_i2].m(ul, null);
	      }

	      append_dev(ul, t7);
	      append_dev(ul, li2);
	      append_dev(ul, t8);
	      append_dev(ul, li3);
	      append_dev(li3, a0);
	      append_dev(a0, span1);
	      append_dev(a0, t10);
	      append_dev(a0, span2);
	      append_dev(ul, t12);
	      append_dev(ul, li4);
	      append_dev(ul, t13);
	      append_dev(ul, li5);
	      append_dev(li5, a1);
	      append_dev(a1, span3);
	      append_dev(a1, t15);
	      append_dev(a1, span4);
	      append_dev(ul, t17);
	      append_dev(ul, li6);
	      append_dev(li6, a2);
	      append_dev(a2, span5);
	      append_dev(a2, t19);
	      append_dev(a2, span6);
	      append_dev(ul, t21);
	      append_dev(ul, li7);
	      append_dev(li7, a3);
	      append_dev(a3, span7);
	      append_dev(a3, t23);
	      append_dev(a3, span8);
	      append_dev(ul, t25);
	      append_dev(ul, li8);
	      append_dev(ul, t26);
	      append_dev(ul, li9);
	      append_dev(li9, p0);
	      append_dev(li9, t28);
	      append_dev(li9, p1);
	      current = true;
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*map*/
	      4) {
	        each_value =
	        /*map*/
	        ctx[2].baseLayers;

	        var _i3;

	        for (_i3 = 0; _i3 < each_value.length; _i3 += 1) {
	          var child_ctx = get_each_context(ctx, each_value, _i3);

	          if (each_blocks[_i3]) {
	            each_blocks[_i3].p(child_ctx, dirty);
	          } else {
	            each_blocks[_i3] = create_each_block(child_ctx);

	            each_blocks[_i3].c();

	            each_blocks[_i3].m(ul, t7);
	          }
	        }

	        for (; _i3 < each_blocks.length; _i3 += 1) {
	          each_blocks[_i3].d(1);
	        }

	        each_blocks.length = each_value.length;
	      }
	    },
	    i: function intro(local) {
	      if (current) return;
	      add_render_callback(function () {
	        if (!div0_transition) div0_transition = create_bidirectional_transition(div0, fade, {
	          duration: 100
	        }, true);
	        div0_transition.run(1);
	      });
	      add_render_callback(function () {
	        if (!ul_transition) ul_transition = create_bidirectional_transition(ul, fly, {
	          x: -320,
	          duration: 150
	        }, true);
	        ul_transition.run(1);
	      });
	      current = true;
	    },
	    o: function outro(local) {
	      if (!div0_transition) div0_transition = create_bidirectional_transition(div0, fade, {
	        duration: 100
	      }, false);
	      div0_transition.run(0);
	      if (!ul_transition) ul_transition = create_bidirectional_transition(ul, fly, {
	        x: -320,
	        duration: 150
	      }, false);
	      ul_transition.run(0);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(div0);
	      if (detaching && div0_transition) div0_transition.end();
	      if (detaching) detach_dev(t0);
	      if (detaching) detach_dev(ul);
	      destroy_each(each_blocks, detaching);
	      if (detaching && ul_transition) ul_transition.end();
	      run_all(dispose);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block$2.name,
	    type: "if",
	    source: "(142:4) {#if show}",
	    ctx: ctx
	  });
	  return block;
	} // (170:20) {:else}


	function create_else_block(ctx) {
	  var a;
	  var span0;
	  var t1;
	  var span1;
	  var t2_value =
	  /*layer*/
	  ctx[7].get("label") + "";
	  var t2;
	  var a_title_value;
	  var dispose;

	  function click_handler() {
	    var _ctx;

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return (
	      /*click_handler*/
	      (_ctx = ctx)[6].apply(_ctx, [
	      /*layer*/
	      ctx[7]].concat(args))
	    );
	  }

	  var block = {
	    c: function create() {
	      a = element("a");
	      span0 = element("span");
	      span0.textContent = "layers";
	      t1 = space();
	      span1 = element("span");
	      t2 = text(t2_value);
	      attr_dev(span0, "class", "material-icons svelte-8yppxw");
	      add_location(span0, file$3, 174, 28, 3846);
	      attr_dev(span1, "class", "svelte-8yppxw");
	      add_location(span1, file$3, 175, 28, 3917);
	      attr_dev(a, "href", "#switch-base-layer");
	      attr_dev(a, "title", a_title_value = "Switch to " +
	      /*layer*/
	      ctx[7].get("label") + " layer");
	      attr_dev(a, "class", "svelte-8yppxw");
	      add_location(a, file$3, 170, 24, 3602);
	      dispose = listen_dev(a, "click", prevent_default(click_handler), false, true, false);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, a, anchor);
	      append_dev(a, span0);
	      append_dev(a, t1);
	      append_dev(a, span1);
	      append_dev(span1, t2);
	    },
	    p: function update(new_ctx, dirty) {
	      ctx = new_ctx;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(a);
	      dispose();
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_else_block.name,
	    type: "else",
	    source: "(170:20) {:else}",
	    ctx: ctx
	  });
	  return block;
	} // (165:20) {#if layer === map.baseLayer}


	function create_if_block_1(ctx) {
	  var div;
	  var span0;
	  var t1;
	  var span1;
	  var t2_value =
	  /*layer*/
	  ctx[7].get("label") + "";
	  var t2;
	  var block = {
	    c: function create() {
	      div = element("div");
	      span0 = element("span");
	      span0.textContent = "layers";
	      t1 = space();
	      span1 = element("span");
	      t2 = text(t2_value);
	      attr_dev(span0, "class", "material-icons svelte-8yppxw");
	      add_location(span0, file$3, 166, 28, 3414);
	      attr_dev(span1, "class", "svelte-8yppxw");
	      add_location(span1, file$3, 167, 28, 3485);
	      attr_dev(div, "class", "svelte-8yppxw");
	      add_location(div, file$3, 165, 24, 3380);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, div, anchor);
	      append_dev(div, span0);
	      append_dev(div, t1);
	      append_dev(div, span1);
	      append_dev(span1, t2);
	    },
	    p: noop,
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(div);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_1.name,
	    type: "if",
	    source: "(165:20) {#if layer === map.baseLayer}",
	    ctx: ctx
	  });
	  return block;
	} // (163:12) {#each map.baseLayers as layer}


	function create_each_block(ctx) {
	  var li;

	  function select_block_type(ctx, dirty) {
	    if (
	    /*layer*/
	    ctx[7] ===
	    /*map*/
	    ctx[2].baseLayer) return create_if_block_1;
	    return create_else_block;
	  }

	  var current_block_type = select_block_type(ctx);
	  var if_block = current_block_type(ctx);
	  var block = {
	    c: function create() {
	      li = element("li");
	      if_block.c();
	      attr_dev(li, "class", "svelte-8yppxw");
	      add_location(li, file$3, 163, 16, 3301);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, li, anchor);
	      if_block.m(li, null);
	    },
	    p: function update(ctx, dirty) {
	      if_block.p(ctx, dirty);
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(li);
	      if_block.d();
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_each_block.name,
	    type: "each",
	    source: "(163:12) {#each map.baseLayers as layer}",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$3(ctx) {
	  var div;
	  var button;
	  var t1;
	  var current;
	  var dispose;
	  var if_block =
	  /*show*/
	  ctx[0] && create_if_block$2(ctx);
	  var block = {
	    c: function create() {
	      div = element("div");
	      button = element("button");
	      button.textContent = "menu";
	      t1 = space();
	      if (if_block) if_block.c();
	      attr_dev(button, "id", "open-button");
	      attr_dev(button, "type", "button");
	      attr_dev(button, "title", "Open menu");
	      attr_dev(button, "class", "material-icons svelte-8yppxw");
	      add_location(button, file$3, 135, 4, 2375);
	      attr_dev(div, "id", "container");
	      set_style(div, "height",
	      /*height*/
	      ctx[1]);
	      attr_dev(div, "class", "svelte-8yppxw");
	      add_location(div, file$3, 134, 0, 2325);
	      dispose = listen_dev(button, "click",
	      /*open*/
	      ctx[3], false, false, false);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, div, anchor);
	      append_dev(div, button);
	      append_dev(div, t1);
	      if (if_block) if_block.m(div, null);
	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (
	      /*show*/
	      ctx[0]) {
	        if (if_block) {
	          if_block.p(ctx, dirty);
	          transition_in(if_block, 1);
	        } else {
	          if_block = create_if_block$2(ctx);
	          if_block.c();
	          transition_in(if_block, 1);
	          if_block.m(div, null);
	        }
	      } else if (if_block) {
	        group_outros();
	        transition_out(if_block, 1, 1, function () {
	          if_block = null;
	        });
	        check_outros();
	      }

	      if (!current || dirty &
	      /*height*/
	      2) {
	        set_style(div, "height",
	        /*height*/
	        ctx[1]);
	      }
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(if_block);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(if_block);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(div);
	      if (if_block) if_block.d();
	      dispose();
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$3.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$3($$self, $$props, $$invalidate) {
	  var map = getContext("map");
	  var show = false;
	  var height = "auto";

	  function open() {
	    $$invalidate(0, show = true);
	  }

	  function close() {
	    $$invalidate(0, show = false);
	  }

	  function maybeClose(event) {
	    var target = event.target;

	    while (target.tagName !== "A") {
	      target = target.parentNode;

	      if (target.tagName === "UL") {
	        return false;
	      }
	    }

	    close();
	  }

	  var click_handler = function click_handler(layer, e) {
	    return map.setBaseLayer(layer);
	  };

	  $$self.$capture_state = function () {
	    return {};
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("show" in $$props) $$invalidate(0, show = $$props.show);
	    if ("height" in $$props) $$invalidate(1, height = $$props.height);
	  };

	  $$self.$$.update = function () {
	    if ($$self.$$.dirty &
	    /*show*/
	    1) {
	       {
	        $$invalidate(1, height = show ? "100%" : "auto");
	      }
	    }
	  };

	  return [show, height, map, open, close, maybeClose, click_handler];
	}

	var Menu =
	/*#__PURE__*/
	function (_SvelteComponentDev) {
	  inherits(Menu, _SvelteComponentDev);

	  function Menu(options) {
	    var _this;

	    classCallCheck(this, Menu);

	    _this = possibleConstructorReturn(this, getPrototypeOf(Menu).call(this, options));
	    init(assertThisInitialized(_this), options, instance$3, create_fragment$3, safe_not_equal, {});
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "Menu",
	      options: options,
	      id: create_fragment$3.name
	    });
	    return _this;
	  }

	  return Menu;
	}(SvelteComponentDev);

	var file$4 = "src/App.svelte"; // (226:4) {#if $progressCounter}

	function create_if_block$3(ctx) {
	  var div0;
	  var div0_transition;
	  var t0;
	  var div1;
	  var div1_transition;
	  var t1;
	  var div2;
	  var span;
	  var div2_transition;
	  var current;
	  var block = {
	    c: function create() {
	      div0 = element("div");
	      t0 = space();
	      div1 = element("div");
	      t1 = space();
	      div2 = element("div");
	      span = element("span");
	      span.textContent = "Loading";
	      attr_dev(div0, "id", "progress-bar");
	      attr_dev(div0, "class", "svelte-hgx48f");
	      add_location(div0, file$4, 226, 8, 4693);
	      attr_dev(div1, "id", "loading-spinner");
	      attr_dev(div1, "class", "svelte-hgx48f");
	      add_location(div1, file$4, 227, 8, 4754);
	      add_location(span, file$4, 228, 42, 4845);
	      attr_dev(div2, "id", "loading");
	      attr_dev(div2, "class", "svelte-hgx48f");
	      add_location(div2, file$4, 228, 8, 4811);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, div0, anchor);
	      insert_dev(target, t0, anchor);
	      insert_dev(target, div1, anchor);
	      insert_dev(target, t1, anchor);
	      insert_dev(target, div2, anchor);
	      append_dev(div2, span);
	      current = true;
	    },
	    i: function intro(local) {
	      if (current) return;
	      add_render_callback(function () {
	        if (!div0_transition) div0_transition = create_bidirectional_transition(div0, fly, {
	          y: -5
	        }, true);
	        div0_transition.run(1);
	      });
	      add_render_callback(function () {
	        if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, {}, true);
	        div1_transition.run(1);
	      });
	      add_render_callback(function () {
	        if (!div2_transition) div2_transition = create_bidirectional_transition(div2, fade, {}, true);
	        div2_transition.run(1);
	      });
	      current = true;
	    },
	    o: function outro(local) {
	      if (!div0_transition) div0_transition = create_bidirectional_transition(div0, fly, {
	        y: -5
	      }, false);
	      div0_transition.run(0);
	      if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, {}, false);
	      div1_transition.run(0);
	      if (!div2_transition) div2_transition = create_bidirectional_transition(div2, fade, {}, false);
	      div2_transition.run(0);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(div0);
	      if (detaching && div0_transition) div0_transition.end();
	      if (detaching) detach_dev(t0);
	      if (detaching) detach_dev(div1);
	      if (detaching && div1_transition) div1_transition.end();
	      if (detaching) detach_dev(t1);
	      if (detaching) detach_dev(div2);
	      if (detaching && div2_transition) div2_transition.end();
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block$3.name,
	    type: "if",
	    source: "(226:4) {#if $progressCounter}",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$4(ctx) {
	  var div;
	  var t0;
	  var header;
	  var h1;
	  var a;
	  var t2;
	  var t3;
	  var t4;
	  var current;
	  var if_block =
	  /*$progressCounter*/
	  ctx[0] && create_if_block$3(ctx);
	  var menu = new Menu({
	    $$inline: true
	  });
	  var map = new Map$2({
	    $$inline: true
	  });
	  var switch_value =
	  /*$currentRoute*/
	  ctx[1].component;

	  function switch_props(ctx) {
	    return {
	      $$inline: true
	    };
	  }

	  if (switch_value) {
	    var switch_instance = new switch_value(switch_props());
	  }

	  var block = {
	    c: function create() {
	      div = element("div");
	      if (if_block) if_block.c();
	      t0 = space();
	      header = element("header");
	      h1 = element("h1");
	      a = element("a");
	      a.textContent = "byCycle";
	      t2 = space();
	      create_component(menu.$$.fragment);
	      t3 = space();
	      create_component(map.$$.fragment);
	      t4 = space();
	      if (switch_instance) create_component(switch_instance.$$.fragment);
	      attr_dev(a, "href", "/");
	      attr_dev(a, "class", "svelte-hgx48f");
	      add_location(a, file$4, 233, 12, 4949);
	      attr_dev(h1, "class", "svelte-hgx48f");
	      add_location(h1, file$4, 232, 8, 4932);
	      attr_dev(header, "title", "Get there by cycle!");
	      attr_dev(header, "class", "svelte-hgx48f");
	      add_location(header, file$4, 231, 4, 4887);
	      attr_dev(div, "id", "container");
	      attr_dev(div, "class", "svelte-hgx48f");
	      add_location(div, file$4, 224, 0, 4637);
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, div, anchor);
	      if (if_block) if_block.m(div, null);
	      append_dev(div, t0);
	      append_dev(div, header);
	      append_dev(header, h1);
	      append_dev(h1, a);
	      append_dev(div, t2);
	      mount_component(menu, div, null);
	      append_dev(div, t3);
	      mount_component(map, div, null);
	      append_dev(div, t4);

	      if (switch_instance) {
	        mount_component(switch_instance, div, null);
	      }

	      current = true;
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (
	      /*$progressCounter*/
	      ctx[0]) {
	        if (!if_block) {
	          if_block = create_if_block$3(ctx);
	          if_block.c();
	          transition_in(if_block, 1);
	          if_block.m(div, t0);
	        } else {
	          transition_in(if_block, 1);
	        }
	      } else if (if_block) {
	        group_outros();
	        transition_out(if_block, 1, 1, function () {
	          if_block = null;
	        });
	        check_outros();
	      }

	      if (switch_value !== (switch_value =
	      /*$currentRoute*/
	      ctx[1].component)) {
	        if (switch_instance) {
	          group_outros();
	          var old_component = switch_instance;
	          transition_out(old_component.$$.fragment, 1, 0, function () {
	            destroy_component(old_component, 1);
	          });
	          check_outros();
	        }

	        if (switch_value) {
	          switch_instance = new switch_value(switch_props());
	          create_component(switch_instance.$$.fragment);
	          transition_in(switch_instance.$$.fragment, 1);
	          mount_component(switch_instance, div, null);
	        } else {
	          switch_instance = null;
	        }
	      }
	    },
	    i: function intro(local) {
	      if (current) return;
	      transition_in(if_block);
	      transition_in(menu.$$.fragment, local);
	      transition_in(map.$$.fragment, local);
	      if (switch_instance) transition_in(switch_instance.$$.fragment, local);
	      current = true;
	    },
	    o: function outro(local) {
	      transition_out(if_block);
	      transition_out(menu.$$.fragment, local);
	      transition_out(map.$$.fragment, local);
	      if (switch_instance) transition_out(switch_instance.$$.fragment, local);
	      current = false;
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(div);
	      if (if_block) if_block.d();
	      destroy_component(menu);
	      destroy_component(map);
	      if (switch_instance) destroy_component(switch_instance);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$4.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$4($$self, $$props, $$invalidate) {
	  var $progressCounter;
	  var $currentRoute;
	  validate_store(progressCounter, "progressCounter");
	  component_subscribe($$self, progressCounter, function ($$value) {
	    return $$invalidate(0, $progressCounter = $$value);
	  });
	  validate_store(currentRoute, "currentRoute");
	  component_subscribe($$self, currentRoute, function ($$value) {
	    return $$invalidate(1, $currentRoute = $$value);
	  });
	  onMount(function () {
	    setTimeout(function () {
	      progressCounter.decrement();
	    }, 1000);
	  });
	  setContext("map", new MapService());

	  $$self.$capture_state = function () {
	    return {};
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("$progressCounter" in $$props) progressCounter.set($progressCounter = $$props.$progressCounter);
	    if ("$currentRoute" in $$props) currentRoute.set($currentRoute = $$props.$currentRoute);
	  };

	  return [$progressCounter, $currentRoute];
	}

	var App =
	/*#__PURE__*/
	function (_SvelteComponentDev) {
	  inherits(App, _SvelteComponentDev);

	  function App(options) {
	    var _this;

	    classCallCheck(this, App);

	    _this = possibleConstructorReturn(this, getPrototypeOf(App).call(this, options));
	    init(assertThisInitialized(_this), options, instance$4, create_fragment$4, not_equal, {});
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "App",
	      options: options,
	      id: create_fragment$4.name
	    });
	    return _this;
	  }

	  return App;
	}(SvelteComponentDev);

	var non = '\u200B\u0085\u180E';

	// check that a method works with the correct list
	// of whitespaces and has a correct name
	var forcedStringTrimMethod = function (METHOD_NAME) {
	  return fails(function () {
	    return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].name !== METHOD_NAME;
	  });
	};

	var $trim = stringTrim.trim;


	// `String.prototype.trim` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.trim
	_export({ target: 'String', proto: true, forced: forcedStringTrimMethod('trim') }, {
	  trim: function trim() {
	    return $trim(this);
	  }
	});

	/*! *****************************************************************************
	Copyright (c) Microsoft Corporation. All rights reserved.
	Licensed under the Apache License, Version 2.0 (the "License"); you may not use
	this file except in compliance with the License. You may obtain a copy of the
	License at http://www.apache.org/licenses/LICENSE-2.0

	THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
	WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
	MERCHANTABLITY OR NON-INFRINGEMENT.

	See the Apache Version 2.0 License for specific language governing permissions
	and limitations under the License.
	***************************************************************************** */
	/* global Reflect, Promise */

	var extendStatics = function(d, b) {
	    extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return extendStatics(d, b);
	};

	function __extends$1u(d, b) {
	    extendStatics(d, b);
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	}

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	function isFunction(x) {
	    return typeof x === 'function';
	}

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	var _enable_super_gross_mode_that_will_cause_bad_things = false;
	var config = {
	    Promise: undefined,
	    set useDeprecatedSynchronousErrorHandling(value) {
	        if (value) {
	            var error = /*@__PURE__*/ new Error();
	            /*@__PURE__*/ console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \n' + error.stack);
	        }
	        _enable_super_gross_mode_that_will_cause_bad_things = value;
	    },
	    get useDeprecatedSynchronousErrorHandling() {
	        return _enable_super_gross_mode_that_will_cause_bad_things;
	    },
	};

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	function hostReportError(err) {
	    setTimeout(function () { throw err; }, 0);
	}

	/** PURE_IMPORTS_START _config,_util_hostReportError PURE_IMPORTS_END */
	var empty$1 = {
	    closed: true,
	    next: function (value) { },
	    error: function (err) {
	        if (config.useDeprecatedSynchronousErrorHandling) {
	            throw err;
	        }
	        else {
	            hostReportError(err);
	        }
	    },
	    complete: function () { }
	};

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	var isArray$4 = /*@__PURE__*/ (function () { return Array.isArray || (function (x) { return x && typeof x.length === 'number'; }); })();

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	function isObject$1(x) {
	    return x !== null && typeof x === 'object';
	}

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	var UnsubscriptionErrorImpl = /*@__PURE__*/ (function () {
	    function UnsubscriptionErrorImpl(errors) {
	        Error.call(this);
	        this.message = errors ?
	            errors.length + " errors occurred during unsubscription:\n" + errors.map(function (err, i) { return i + 1 + ") " + err.toString(); }).join('\n  ') : '';
	        this.name = 'UnsubscriptionError';
	        this.errors = errors;
	        return this;
	    }
	    UnsubscriptionErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);
	    return UnsubscriptionErrorImpl;
	})();
	var UnsubscriptionError = UnsubscriptionErrorImpl;

	/** PURE_IMPORTS_START _util_isArray,_util_isObject,_util_isFunction,_util_UnsubscriptionError PURE_IMPORTS_END */
	var Subscription = /*@__PURE__*/ (function () {
	    function Subscription(unsubscribe) {
	        this.closed = false;
	        this._parentOrParents = null;
	        this._subscriptions = null;
	        if (unsubscribe) {
	            this._unsubscribe = unsubscribe;
	        }
	    }
	    Subscription.prototype.unsubscribe = function () {
	        var errors;
	        if (this.closed) {
	            return;
	        }
	        var _a = this, _parentOrParents = _a._parentOrParents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
	        this.closed = true;
	        this._parentOrParents = null;
	        this._subscriptions = null;
	        if (_parentOrParents instanceof Subscription) {
	            _parentOrParents.remove(this);
	        }
	        else if (_parentOrParents !== null) {
	            for (var index = 0; index < _parentOrParents.length; ++index) {
	                var parent_1 = _parentOrParents[index];
	                parent_1.remove(this);
	            }
	        }
	        if (isFunction(_unsubscribe)) {
	            try {
	                _unsubscribe.call(this);
	            }
	            catch (e) {
	                errors = e instanceof UnsubscriptionError ? flattenUnsubscriptionErrors(e.errors) : [e];
	            }
	        }
	        if (isArray$4(_subscriptions)) {
	            var index = -1;
	            var len = _subscriptions.length;
	            while (++index < len) {
	                var sub = _subscriptions[index];
	                if (isObject$1(sub)) {
	                    try {
	                        sub.unsubscribe();
	                    }
	                    catch (e) {
	                        errors = errors || [];
	                        if (e instanceof UnsubscriptionError) {
	                            errors = errors.concat(flattenUnsubscriptionErrors(e.errors));
	                        }
	                        else {
	                            errors.push(e);
	                        }
	                    }
	                }
	            }
	        }
	        if (errors) {
	            throw new UnsubscriptionError(errors);
	        }
	    };
	    Subscription.prototype.add = function (teardown) {
	        var subscription = teardown;
	        if (!teardown) {
	            return Subscription.EMPTY;
	        }
	        switch (typeof teardown) {
	            case 'function':
	                subscription = new Subscription(teardown);
	            case 'object':
	                if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== 'function') {
	                    return subscription;
	                }
	                else if (this.closed) {
	                    subscription.unsubscribe();
	                    return subscription;
	                }
	                else if (!(subscription instanceof Subscription)) {
	                    var tmp = subscription;
	                    subscription = new Subscription();
	                    subscription._subscriptions = [tmp];
	                }
	                break;
	            default: {
	                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
	            }
	        }
	        var _parentOrParents = subscription._parentOrParents;
	        if (_parentOrParents === null) {
	            subscription._parentOrParents = this;
	        }
	        else if (_parentOrParents instanceof Subscription) {
	            if (_parentOrParents === this) {
	                return subscription;
	            }
	            subscription._parentOrParents = [_parentOrParents, this];
	        }
	        else if (_parentOrParents.indexOf(this) === -1) {
	            _parentOrParents.push(this);
	        }
	        else {
	            return subscription;
	        }
	        var subscriptions = this._subscriptions;
	        if (subscriptions === null) {
	            this._subscriptions = [subscription];
	        }
	        else {
	            subscriptions.push(subscription);
	        }
	        return subscription;
	    };
	    Subscription.prototype.remove = function (subscription) {
	        var subscriptions = this._subscriptions;
	        if (subscriptions) {
	            var subscriptionIndex = subscriptions.indexOf(subscription);
	            if (subscriptionIndex !== -1) {
	                subscriptions.splice(subscriptionIndex, 1);
	            }
	        }
	    };
	    Subscription.EMPTY = (function (empty) {
	        empty.closed = true;
	        return empty;
	    }(new Subscription()));
	    return Subscription;
	}());
	function flattenUnsubscriptionErrors(errors) {
	    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError) ? err.errors : err); }, []);
	}

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	var rxSubscriber = /*@__PURE__*/ (function () {
	    return typeof Symbol === 'function'
	        ? /*@__PURE__*/ Symbol('rxSubscriber')
	        : '@@rxSubscriber_' + /*@__PURE__*/ Math.random();
	})();

	/** PURE_IMPORTS_START tslib,_util_isFunction,_Observer,_Subscription,_internal_symbol_rxSubscriber,_config,_util_hostReportError PURE_IMPORTS_END */
	var Subscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1u(Subscriber, _super);
	    function Subscriber(destinationOrNext, error, complete) {
	        var _this = _super.call(this) || this;
	        _this.syncErrorValue = null;
	        _this.syncErrorThrown = false;
	        _this.syncErrorThrowable = false;
	        _this.isStopped = false;
	        switch (arguments.length) {
	            case 0:
	                _this.destination = empty$1;
	                break;
	            case 1:
	                if (!destinationOrNext) {
	                    _this.destination = empty$1;
	                    break;
	                }
	                if (typeof destinationOrNext === 'object') {
	                    if (destinationOrNext instanceof Subscriber) {
	                        _this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;
	                        _this.destination = destinationOrNext;
	                        destinationOrNext.add(_this);
	                    }
	                    else {
	                        _this.syncErrorThrowable = true;
	                        _this.destination = new SafeSubscriber(_this, destinationOrNext);
	                    }
	                    break;
	                }
	            default:
	                _this.syncErrorThrowable = true;
	                _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);
	                break;
	        }
	        return _this;
	    }
	    Subscriber.prototype[rxSubscriber] = function () { return this; };
	    Subscriber.create = function (next, error, complete) {
	        var subscriber = new Subscriber(next, error, complete);
	        subscriber.syncErrorThrowable = false;
	        return subscriber;
	    };
	    Subscriber.prototype.next = function (value) {
	        if (!this.isStopped) {
	            this._next(value);
	        }
	    };
	    Subscriber.prototype.error = function (err) {
	        if (!this.isStopped) {
	            this.isStopped = true;
	            this._error(err);
	        }
	    };
	    Subscriber.prototype.complete = function () {
	        if (!this.isStopped) {
	            this.isStopped = true;
	            this._complete();
	        }
	    };
	    Subscriber.prototype.unsubscribe = function () {
	        if (this.closed) {
	            return;
	        }
	        this.isStopped = true;
	        _super.prototype.unsubscribe.call(this);
	    };
	    Subscriber.prototype._next = function (value) {
	        this.destination.next(value);
	    };
	    Subscriber.prototype._error = function (err) {
	        this.destination.error(err);
	        this.unsubscribe();
	    };
	    Subscriber.prototype._complete = function () {
	        this.destination.complete();
	        this.unsubscribe();
	    };
	    Subscriber.prototype._unsubscribeAndRecycle = function () {
	        var _parentOrParents = this._parentOrParents;
	        this._parentOrParents = null;
	        this.unsubscribe();
	        this.closed = false;
	        this.isStopped = false;
	        this._parentOrParents = _parentOrParents;
	        return this;
	    };
	    return Subscriber;
	}(Subscription));
	var SafeSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1u(SafeSubscriber, _super);
	    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
	        var _this = _super.call(this) || this;
	        _this._parentSubscriber = _parentSubscriber;
	        var next;
	        var context = _this;
	        if (isFunction(observerOrNext)) {
	            next = observerOrNext;
	        }
	        else if (observerOrNext) {
	            next = observerOrNext.next;
	            error = observerOrNext.error;
	            complete = observerOrNext.complete;
	            if (observerOrNext !== empty$1) {
	                context = Object.create(observerOrNext);
	                if (isFunction(context.unsubscribe)) {
	                    _this.add(context.unsubscribe.bind(context));
	                }
	                context.unsubscribe = _this.unsubscribe.bind(_this);
	            }
	        }
	        _this._context = context;
	        _this._next = next;
	        _this._error = error;
	        _this._complete = complete;
	        return _this;
	    }
	    SafeSubscriber.prototype.next = function (value) {
	        if (!this.isStopped && this._next) {
	            var _parentSubscriber = this._parentSubscriber;
	            if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
	                this.__tryOrUnsub(this._next, value);
	            }
	            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
	                this.unsubscribe();
	            }
	        }
	    };
	    SafeSubscriber.prototype.error = function (err) {
	        if (!this.isStopped) {
	            var _parentSubscriber = this._parentSubscriber;
	            var useDeprecatedSynchronousErrorHandling = config.useDeprecatedSynchronousErrorHandling;
	            if (this._error) {
	                if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
	                    this.__tryOrUnsub(this._error, err);
	                    this.unsubscribe();
	                }
	                else {
	                    this.__tryOrSetError(_parentSubscriber, this._error, err);
	                    this.unsubscribe();
	                }
	            }
	            else if (!_parentSubscriber.syncErrorThrowable) {
	                this.unsubscribe();
	                if (useDeprecatedSynchronousErrorHandling) {
	                    throw err;
	                }
	                hostReportError(err);
	            }
	            else {
	                if (useDeprecatedSynchronousErrorHandling) {
	                    _parentSubscriber.syncErrorValue = err;
	                    _parentSubscriber.syncErrorThrown = true;
	                }
	                else {
	                    hostReportError(err);
	                }
	                this.unsubscribe();
	            }
	        }
	    };
	    SafeSubscriber.prototype.complete = function () {
	        var _this = this;
	        if (!this.isStopped) {
	            var _parentSubscriber = this._parentSubscriber;
	            if (this._complete) {
	                var wrappedComplete = function () { return _this._complete.call(_this._context); };
	                if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
	                    this.__tryOrUnsub(wrappedComplete);
	                    this.unsubscribe();
	                }
	                else {
	                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);
	                    this.unsubscribe();
	                }
	            }
	            else {
	                this.unsubscribe();
	            }
	        }
	    };
	    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
	        try {
	            fn.call(this._context, value);
	        }
	        catch (err) {
	            this.unsubscribe();
	            if (config.useDeprecatedSynchronousErrorHandling) {
	                throw err;
	            }
	            else {
	                hostReportError(err);
	            }
	        }
	    };
	    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
	        if (!config.useDeprecatedSynchronousErrorHandling) {
	            throw new Error('bad call');
	        }
	        try {
	            fn.call(this._context, value);
	        }
	        catch (err) {
	            if (config.useDeprecatedSynchronousErrorHandling) {
	                parent.syncErrorValue = err;
	                parent.syncErrorThrown = true;
	                return true;
	            }
	            else {
	                hostReportError(err);
	                return true;
	            }
	        }
	        return false;
	    };
	    SafeSubscriber.prototype._unsubscribe = function () {
	        var _parentSubscriber = this._parentSubscriber;
	        this._context = null;
	        this._parentSubscriber = null;
	        _parentSubscriber.unsubscribe();
	    };
	    return SafeSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START _Subscriber PURE_IMPORTS_END */
	function canReportError(observer) {
	    while (observer) {
	        var _a = observer, closed_1 = _a.closed, destination = _a.destination, isStopped = _a.isStopped;
	        if (closed_1 || isStopped) {
	            return false;
	        }
	        else if (destination && destination instanceof Subscriber) {
	            observer = destination;
	        }
	        else {
	            observer = null;
	        }
	    }
	    return true;
	}

	/** PURE_IMPORTS_START _Subscriber,_symbol_rxSubscriber,_Observer PURE_IMPORTS_END */
	function toSubscriber(nextOrObserver, error, complete) {
	    if (nextOrObserver) {
	        if (nextOrObserver instanceof Subscriber) {
	            return nextOrObserver;
	        }
	        if (nextOrObserver[rxSubscriber]) {
	            return nextOrObserver[rxSubscriber]();
	        }
	    }
	    if (!nextOrObserver && !error && !complete) {
	        return new Subscriber(empty$1);
	    }
	    return new Subscriber(nextOrObserver, error, complete);
	}

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	var observable = /*@__PURE__*/ (function () { return typeof Symbol === 'function' && Symbol.observable || '@@observable'; })();

	/** PURE_IMPORTS_START  PURE_IMPORTS_END */
	function noop$1() { }

	/** PURE_IMPORTS_START _noop PURE_IMPORTS_END */
	function pipeFromArray(fns) {
	    if (!fns) {
	        return noop$1;
	    }
	    if (fns.length === 1) {
	        return fns[0];
	    }
	    return function piped(input) {
	        return fns.reduce(function (prev, fn) { return fn(prev); }, input);
	    };
	}

	/** PURE_IMPORTS_START _util_canReportError,_util_toSubscriber,_symbol_observable,_util_pipe,_config PURE_IMPORTS_END */
	var Observable$1 = /*@__PURE__*/ (function () {
	    function Observable(subscribe) {
	        this._isScalar = false;
	        if (subscribe) {
	            this._subscribe = subscribe;
	        }
	    }
	    Observable.prototype.lift = function (operator) {
	        var observable = new Observable();
	        observable.source = this;
	        observable.operator = operator;
	        return observable;
	    };
	    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
	        var operator = this.operator;
	        var sink = toSubscriber(observerOrNext, error, complete);
	        if (operator) {
	            sink.add(operator.call(sink, this.source));
	        }
	        else {
	            sink.add(this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?
	                this._subscribe(sink) :
	                this._trySubscribe(sink));
	        }
	        if (config.useDeprecatedSynchronousErrorHandling) {
	            if (sink.syncErrorThrowable) {
	                sink.syncErrorThrowable = false;
	                if (sink.syncErrorThrown) {
	                    throw sink.syncErrorValue;
	                }
	            }
	        }
	        return sink;
	    };
	    Observable.prototype._trySubscribe = function (sink) {
	        try {
	            return this._subscribe(sink);
	        }
	        catch (err) {
	            if (config.useDeprecatedSynchronousErrorHandling) {
	                sink.syncErrorThrown = true;
	                sink.syncErrorValue = err;
	            }
	            if (canReportError(sink)) {
	                sink.error(err);
	            }
	            else {
	                console.warn(err);
	            }
	        }
	    };
	    Observable.prototype.forEach = function (next, promiseCtor) {
	        var _this = this;
	        promiseCtor = getPromiseCtor(promiseCtor);
	        return new promiseCtor(function (resolve, reject) {
	            var subscription;
	            subscription = _this.subscribe(function (value) {
	                try {
	                    next(value);
	                }
	                catch (err) {
	                    reject(err);
	                    if (subscription) {
	                        subscription.unsubscribe();
	                    }
	                }
	            }, reject, resolve);
	        });
	    };
	    Observable.prototype._subscribe = function (subscriber) {
	        var source = this.source;
	        return source && source.subscribe(subscriber);
	    };
	    Observable.prototype[observable] = function () {
	        return this;
	    };
	    Observable.prototype.pipe = function () {
	        var operations = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            operations[_i] = arguments[_i];
	        }
	        if (operations.length === 0) {
	            return this;
	        }
	        return pipeFromArray(operations)(this);
	    };
	    Observable.prototype.toPromise = function (promiseCtor) {
	        var _this = this;
	        promiseCtor = getPromiseCtor(promiseCtor);
	        return new promiseCtor(function (resolve, reject) {
	            var value;
	            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });
	        });
	    };
	    Observable.create = function (subscribe) {
	        return new Observable(subscribe);
	    };
	    return Observable;
	}());
	function getPromiseCtor(promiseCtor) {
	    if (!promiseCtor) {
	        promiseCtor =  Promise;
	    }
	    if (!promiseCtor) {
	        throw new Error('no Promise impl found');
	    }
	    return promiseCtor;
	}

	/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */
	var Action = /*@__PURE__*/ (function (_super) {
	    __extends$1u(Action, _super);
	    function Action(scheduler, work) {
	        return _super.call(this) || this;
	    }
	    Action.prototype.schedule = function (state, delay) {
	        return this;
	    };
	    return Action;
	}(Subscription));

	/** PURE_IMPORTS_START tslib,_Action PURE_IMPORTS_END */
	var AsyncAction = /*@__PURE__*/ (function (_super) {
	    __extends$1u(AsyncAction, _super);
	    function AsyncAction(scheduler, work) {
	        var _this = _super.call(this, scheduler, work) || this;
	        _this.scheduler = scheduler;
	        _this.work = work;
	        _this.pending = false;
	        return _this;
	    }
	    AsyncAction.prototype.schedule = function (state, delay) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        if (this.closed) {
	            return this;
	        }
	        this.state = state;
	        var id = this.id;
	        var scheduler = this.scheduler;
	        if (id != null) {
	            this.id = this.recycleAsyncId(scheduler, id, delay);
	        }
	        this.pending = true;
	        this.delay = delay;
	        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
	        return this;
	    };
	    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        return setInterval(scheduler.flush.bind(scheduler, this), delay);
	    };
	    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        if (delay !== null && this.delay === delay && this.pending === false) {
	            return id;
	        }
	        clearInterval(id);
	        return undefined;
	    };
	    AsyncAction.prototype.execute = function (state, delay) {
	        if (this.closed) {
	            return new Error('executing a cancelled action');
	        }
	        this.pending = false;
	        var error = this._execute(state, delay);
	        if (error) {
	            return error;
	        }
	        else if (this.pending === false && this.id != null) {
	            this.id = this.recycleAsyncId(this.scheduler, this.id, null);
	        }
	    };
	    AsyncAction.prototype._execute = function (state, delay) {
	        var errored = false;
	        var errorValue = undefined;
	        try {
	            this.work(state);
	        }
	        catch (e) {
	            errored = true;
	            errorValue = !!e && e || new Error(e);
	        }
	        if (errored) {
	            this.unsubscribe();
	            return errorValue;
	        }
	    };
	    AsyncAction.prototype._unsubscribe = function () {
	        var id = this.id;
	        var scheduler = this.scheduler;
	        var actions = scheduler.actions;
	        var index = actions.indexOf(this);
	        this.work = null;
	        this.state = null;
	        this.pending = false;
	        this.scheduler = null;
	        if (index !== -1) {
	            actions.splice(index, 1);
	        }
	        if (id != null) {
	            this.id = this.recycleAsyncId(scheduler, id, null);
	        }
	        this.delay = null;
	    };
	    return AsyncAction;
	}(Action));

	var Scheduler = /*@__PURE__*/ (function () {
	    function Scheduler(SchedulerAction, now) {
	        if (now === void 0) {
	            now = Scheduler.now;
	        }
	        this.SchedulerAction = SchedulerAction;
	        this.now = now;
	    }
	    Scheduler.prototype.schedule = function (work, delay, state) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        return new this.SchedulerAction(this, work).schedule(state, delay);
	    };
	    Scheduler.now = function () { return Date.now(); };
	    return Scheduler;
	}());

	/** PURE_IMPORTS_START tslib,_Scheduler PURE_IMPORTS_END */
	var AsyncScheduler = /*@__PURE__*/ (function (_super) {
	    __extends$1u(AsyncScheduler, _super);
	    function AsyncScheduler(SchedulerAction, now) {
	        if (now === void 0) {
	            now = Scheduler.now;
	        }
	        var _this = _super.call(this, SchedulerAction, function () {
	            if (AsyncScheduler.delegate && AsyncScheduler.delegate !== _this) {
	                return AsyncScheduler.delegate.now();
	            }
	            else {
	                return now();
	            }
	        }) || this;
	        _this.actions = [];
	        _this.active = false;
	        _this.scheduled = undefined;
	        return _this;
	    }
	    AsyncScheduler.prototype.schedule = function (work, delay, state) {
	        if (delay === void 0) {
	            delay = 0;
	        }
	        if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {
	            return AsyncScheduler.delegate.schedule(work, delay, state);
	        }
	        else {
	            return _super.prototype.schedule.call(this, work, delay, state);
	        }
	    };
	    AsyncScheduler.prototype.flush = function (action) {
	        var actions = this.actions;
	        if (this.active) {
	            actions.push(action);
	            return;
	        }
	        var error;
	        this.active = true;
	        do {
	            if (error = action.execute(action.state, action.delay)) {
	                break;
	            }
	        } while (action = actions.shift());
	        this.active = false;
	        if (error) {
	            while (action = actions.shift()) {
	                action.unsubscribe();
	            }
	            throw error;
	        }
	    };
	    return AsyncScheduler;
	}(Scheduler));

	/** PURE_IMPORTS_START _AsyncAction,_AsyncScheduler PURE_IMPORTS_END */
	var async = /*@__PURE__*/ new AsyncScheduler(AsyncAction);

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function map(project, thisArg) {
	    return function mapOperation(source) {
	        if (typeof project !== 'function') {
	            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
	        }
	        return source.lift(new MapOperator(project, thisArg));
	    };
	}
	var MapOperator = /*@__PURE__*/ (function () {
	    function MapOperator(project, thisArg) {
	        this.project = project;
	        this.thisArg = thisArg;
	    }
	    MapOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
	    };
	    return MapOperator;
	}());
	var MapSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1u(MapSubscriber, _super);
	    function MapSubscriber(destination, project, thisArg) {
	        var _this = _super.call(this, destination) || this;
	        _this.project = project;
	        _this.count = 0;
	        _this.thisArg = thisArg || _this;
	        return _this;
	    }
	    MapSubscriber.prototype._next = function (value) {
	        var result;
	        try {
	            result = this.project.call(this.thisArg, value, this.count++);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.destination.next(result);
	    };
	    return MapSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */
	function fromEvent(target, eventName, options, resultSelector) {
	    if (isFunction(options)) {
	        resultSelector = options;
	        options = undefined;
	    }
	    if (resultSelector) {
	        return fromEvent(target, eventName, options).pipe(map(function (args) { return isArray$4(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));
	    }
	    return new Observable$1(function (subscriber) {
	        function handler(e) {
	            if (arguments.length > 1) {
	                subscriber.next(Array.prototype.slice.call(arguments));
	            }
	            else {
	                subscriber.next(e);
	            }
	        }
	        setupSubscription(target, eventName, handler, subscriber, options);
	    });
	}
	function setupSubscription(sourceObj, eventName, handler, subscriber, options) {
	    var unsubscribe;
	    if (isEventTarget(sourceObj)) {
	        var source_1 = sourceObj;
	        sourceObj.addEventListener(eventName, handler, options);
	        unsubscribe = function () { return source_1.removeEventListener(eventName, handler, options); };
	    }
	    else if (isJQueryStyleEventEmitter(sourceObj)) {
	        var source_2 = sourceObj;
	        sourceObj.on(eventName, handler);
	        unsubscribe = function () { return source_2.off(eventName, handler); };
	    }
	    else if (isNodeStyleEventEmitter(sourceObj)) {
	        var source_3 = sourceObj;
	        sourceObj.addListener(eventName, handler);
	        unsubscribe = function () { return source_3.removeListener(eventName, handler); };
	    }
	    else if (sourceObj && sourceObj.length) {
	        for (var i = 0, len = sourceObj.length; i < len; i++) {
	            setupSubscription(sourceObj[i], eventName, handler, subscriber, options);
	        }
	    }
	    else {
	        throw new TypeError('Invalid event target');
	    }
	    subscriber.add(unsubscribe);
	}
	function isNodeStyleEventEmitter(sourceObj) {
	    return sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';
	}
	function isJQueryStyleEventEmitter(sourceObj) {
	    return sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';
	}
	function isEventTarget(sourceObj) {
	    return sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';
	}

	/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async PURE_IMPORTS_END */
	function debounceTime(dueTime, scheduler) {
	    if (scheduler === void 0) {
	        scheduler = async;
	    }
	    return function (source) { return source.lift(new DebounceTimeOperator(dueTime, scheduler)); };
	}
	var DebounceTimeOperator = /*@__PURE__*/ (function () {
	    function DebounceTimeOperator(dueTime, scheduler) {
	        this.dueTime = dueTime;
	        this.scheduler = scheduler;
	    }
	    DebounceTimeOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));
	    };
	    return DebounceTimeOperator;
	}());
	var DebounceTimeSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1u(DebounceTimeSubscriber, _super);
	    function DebounceTimeSubscriber(destination, dueTime, scheduler) {
	        var _this = _super.call(this, destination) || this;
	        _this.dueTime = dueTime;
	        _this.scheduler = scheduler;
	        _this.debouncedSubscription = null;
	        _this.lastValue = null;
	        _this.hasValue = false;
	        return _this;
	    }
	    DebounceTimeSubscriber.prototype._next = function (value) {
	        this.clearDebounce();
	        this.lastValue = value;
	        this.hasValue = true;
	        this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));
	    };
	    DebounceTimeSubscriber.prototype._complete = function () {
	        this.debouncedNext();
	        this.destination.complete();
	    };
	    DebounceTimeSubscriber.prototype.debouncedNext = function () {
	        this.clearDebounce();
	        if (this.hasValue) {
	            var lastValue = this.lastValue;
	            this.lastValue = null;
	            this.hasValue = false;
	            this.destination.next(lastValue);
	        }
	    };
	    DebounceTimeSubscriber.prototype.clearDebounce = function () {
	        var debouncedSubscription = this.debouncedSubscription;
	        if (debouncedSubscription !== null) {
	            this.remove(debouncedSubscription);
	            debouncedSubscription.unsubscribe();
	            this.debouncedSubscription = null;
	        }
	    };
	    return DebounceTimeSubscriber;
	}(Subscriber));
	function dispatchNext(subscriber) {
	    subscriber.debouncedNext();
	}

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function distinctUntilChanged(compare, keySelector) {
	    return function (source) { return source.lift(new DistinctUntilChangedOperator(compare, keySelector)); };
	}
	var DistinctUntilChangedOperator = /*@__PURE__*/ (function () {
	    function DistinctUntilChangedOperator(compare, keySelector) {
	        this.compare = compare;
	        this.keySelector = keySelector;
	    }
	    DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));
	    };
	    return DistinctUntilChangedOperator;
	}());
	var DistinctUntilChangedSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1u(DistinctUntilChangedSubscriber, _super);
	    function DistinctUntilChangedSubscriber(destination, compare, keySelector) {
	        var _this = _super.call(this, destination) || this;
	        _this.keySelector = keySelector;
	        _this.hasKey = false;
	        if (typeof compare === 'function') {
	            _this.compare = compare;
	        }
	        return _this;
	    }
	    DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {
	        return x === y;
	    };
	    DistinctUntilChangedSubscriber.prototype._next = function (value) {
	        var key;
	        try {
	            var keySelector = this.keySelector;
	            key = keySelector ? keySelector(value) : value;
	        }
	        catch (err) {
	            return this.destination.error(err);
	        }
	        var result = false;
	        if (this.hasKey) {
	            try {
	                var compare = this.compare;
	                result = compare(this.key, key);
	            }
	            catch (err) {
	                return this.destination.error(err);
	            }
	        }
	        else {
	            this.hasKey = true;
	        }
	        if (!result) {
	            this.key = key;
	            this.destination.next(value);
	        }
	    };
	    return DistinctUntilChangedSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */
	function skipWhile(predicate) {
	    return function (source) { return source.lift(new SkipWhileOperator(predicate)); };
	}
	var SkipWhileOperator = /*@__PURE__*/ (function () {
	    function SkipWhileOperator(predicate) {
	        this.predicate = predicate;
	    }
	    SkipWhileOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));
	    };
	    return SkipWhileOperator;
	}());
	var SkipWhileSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1u(SkipWhileSubscriber, _super);
	    function SkipWhileSubscriber(destination, predicate) {
	        var _this = _super.call(this, destination) || this;
	        _this.predicate = predicate;
	        _this.skipping = true;
	        _this.index = 0;
	        return _this;
	    }
	    SkipWhileSubscriber.prototype._next = function (value) {
	        var destination = this.destination;
	        if (this.skipping) {
	            this.tryCallPredicate(value);
	        }
	        if (!this.skipping) {
	            destination.next(value);
	        }
	    };
	    SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {
	        try {
	            var result = this.predicate(value, this.index++);
	            this.skipping = Boolean(result);
	        }
	        catch (err) {
	            this.destination.error(err);
	        }
	    };
	    return SkipWhileSubscriber;
	}(Subscriber));

	/** PURE_IMPORTS_START tslib,_Subscriber,_util_noop,_util_isFunction PURE_IMPORTS_END */
	function tap(nextOrObserver, error, complete) {
	    return function tapOperatorFunction(source) {
	        return source.lift(new DoOperator(nextOrObserver, error, complete));
	    };
	}
	var DoOperator = /*@__PURE__*/ (function () {
	    function DoOperator(nextOrObserver, error, complete) {
	        this.nextOrObserver = nextOrObserver;
	        this.error = error;
	        this.complete = complete;
	    }
	    DoOperator.prototype.call = function (subscriber, source) {
	        return source.subscribe(new TapSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));
	    };
	    return DoOperator;
	}());
	var TapSubscriber = /*@__PURE__*/ (function (_super) {
	    __extends$1u(TapSubscriber, _super);
	    function TapSubscriber(destination, observerOrNext, error, complete) {
	        var _this = _super.call(this, destination) || this;
	        _this._tapNext = noop$1;
	        _this._tapError = noop$1;
	        _this._tapComplete = noop$1;
	        _this._tapError = error || noop$1;
	        _this._tapComplete = complete || noop$1;
	        if (isFunction(observerOrNext)) {
	            _this._context = _this;
	            _this._tapNext = observerOrNext;
	        }
	        else if (observerOrNext) {
	            _this._context = observerOrNext;
	            _this._tapNext = observerOrNext.next || noop$1;
	            _this._tapError = observerOrNext.error || noop$1;
	            _this._tapComplete = observerOrNext.complete || noop$1;
	        }
	        return _this;
	    }
	    TapSubscriber.prototype._next = function (value) {
	        try {
	            this._tapNext.call(this._context, value);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.destination.next(value);
	    };
	    TapSubscriber.prototype._error = function (err) {
	        try {
	            this._tapError.call(this._context, err);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.destination.error(err);
	    };
	    TapSubscriber.prototype._complete = function () {
	        try {
	            this._tapComplete.call(this._context);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        return this.destination.complete();
	    };
	    return TapSubscriber;
	}(Subscriber));

	// `Array.prototype.{ reduce, reduceRight }` methods implementation
	var createMethod$4 = function (IS_RIGHT) {
	  return function (that, callbackfn, argumentsLength, memo) {
	    aFunction$1(callbackfn);
	    var O = toObject(that);
	    var self = indexedObject(O);
	    var length = toLength(O.length);
	    var index = IS_RIGHT ? length - 1 : 0;
	    var i = IS_RIGHT ? -1 : 1;
	    if (argumentsLength < 2) while (true) {
	      if (index in self) {
	        memo = self[index];
	        index += i;
	        break;
	      }
	      index += i;
	      if (IS_RIGHT ? index < 0 : length <= index) {
	        throw TypeError('Reduce of empty array with no initial value');
	      }
	    }
	    for (;IS_RIGHT ? index >= 0 : length > index; index += i) if (index in self) {
	      memo = callbackfn(memo, self[index], index, O);
	    }
	    return memo;
	  };
	};

	var arrayReduce = {
	  // `Array.prototype.reduce` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.reduce
	  left: createMethod$4(false),
	  // `Array.prototype.reduceRight` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.reduceright
	  right: createMethod$4(true)
	};

	var $reduce = arrayReduce.left;


	// `Array.prototype.reduce` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.reduce
	_export({ target: 'Array', proto: true, forced: sloppyArrayMethod('reduce') }, {
	  reduce: function reduce(callbackfn /* , initialValue */) {
	    return $reduce(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var nativeGetOwnPropertyNames$2 = objectGetOwnPropertyNamesExternal.f;

	var FAILS_ON_PRIMITIVES$2 = fails(function () { return !Object.getOwnPropertyNames(1); });

	// `Object.getOwnPropertyNames` method
	// https://tc39.github.io/ecma262/#sec-object.getownpropertynames
	_export({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$2 }, {
	  getOwnPropertyNames: nativeGetOwnPropertyNames$2
	});

	// `SameValue` abstract operation
	// https://tc39.github.io/ecma262/#sec-samevalue
	var sameValue = Object.is || function is(x, y) {
	  // eslint-disable-next-line no-self-compare
	  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
	};

	// @@search logic
	fixRegexpWellKnownSymbolLogic('search', 1, function (SEARCH, nativeSearch, maybeCallNative) {
	  return [
	    // `String.prototype.search` method
	    // https://tc39.github.io/ecma262/#sec-string.prototype.search
	    function search(regexp) {
	      var O = requireObjectCoercible(this);
	      var searcher = regexp == undefined ? undefined : regexp[SEARCH];
	      return searcher !== undefined ? searcher.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
	    },
	    // `RegExp.prototype[@@search]` method
	    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search
	    function (regexp) {
	      var res = maybeCallNative(nativeSearch, regexp, this);
	      if (res.done) return res.value;

	      var rx = anObject(regexp);
	      var S = String(this);

	      var previousLastIndex = rx.lastIndex;
	      if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
	      var result = regexpExecAbstract(rx, S);
	      if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
	      return result === null ? -1 : result.index;
	    }
	  ];
	});

	var ITERATOR$6 = wellKnownSymbol('iterator');

	var nativeUrl = !fails(function () {
	  var url = new URL('b?a=1&b=2&c=3', 'http://a');
	  var searchParams = url.searchParams;
	  var result = '';
	  url.pathname = 'c%20d';
	  searchParams.forEach(function (value, key) {
	    searchParams['delete']('b');
	    result += key + value;
	  });
	  return (isPure && !url.toJSON)
	    || !searchParams.sort
	    || url.href !== 'http://a/c%20d?a=1&c=3'
	    || searchParams.get('c') !== '3'
	    || String(new URLSearchParams('?a=1')) !== 'a=1'
	    || !searchParams[ITERATOR$6]
	    // throws in Edge
	    || new URL('https://a@b').username !== 'a'
	    || new URLSearchParams(new URLSearchParams('a=b')).get('a') !== 'b'
	    // not punycoded in Edge
	    || new URL('http://ÑÐµÑÑ').host !== 'xn--e1aybc'
	    // not escaped in Chrome 62-
	    || new URL('http://a#Ð±').hash !== '#%D0%B1'
	    // fails in Chrome 66-
	    || result !== 'a1c3'
	    // throws in Safari
	    || new URL('http://x', undefined).host !== 'x';
	});

	// based on https://github.com/bestiejs/punycode.js/blob/master/punycode.js
	var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1
	var base = 36;
	var tMin = 1;
	var tMax = 26;
	var skew = 38;
	var damp = 700;
	var initialBias = 72;
	var initialN = 128; // 0x80
	var delimiter = '-'; // '\x2D'
	var regexNonASCII = /[^\0-\u007E]/; // non-ASCII chars
	var regexSeparators = /[.\u3002\uFF0E\uFF61]/g; // RFC 3490 separators
	var OVERFLOW_ERROR = 'Overflow: input needs wider integers to process';
	var baseMinusTMin = base - tMin;
	var floor$3 = Math.floor;
	var stringFromCharCode = String.fromCharCode;

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 */
	var ucs2decode = function (string) {
	  var output = [];
	  var counter = 0;
	  var length = string.length;
	  while (counter < length) {
	    var value = string.charCodeAt(counter++);
	    if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
	      // It's a high surrogate, and there is a next character.
	      var extra = string.charCodeAt(counter++);
	      if ((extra & 0xFC00) == 0xDC00) { // Low surrogate.
	        output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
	      } else {
	        // It's an unmatched surrogate; only append this code unit, in case the
	        // next code unit is the high surrogate of a surrogate pair.
	        output.push(value);
	        counter--;
	      }
	    } else {
	      output.push(value);
	    }
	  }
	  return output;
	};

	/**
	 * Converts a digit/integer into a basic code point.
	 */
	var digitToBasic = function (digit) {
	  //  0..25 map to ASCII a..z or A..Z
	  // 26..35 map to ASCII 0..9
	  return digit + 22 + 75 * (digit < 26);
	};

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 */
	var adapt = function (delta, numPoints, firstTime) {
	  var k = 0;
	  delta = firstTime ? floor$3(delta / damp) : delta >> 1;
	  delta += floor$3(delta / numPoints);
	  for (; delta > baseMinusTMin * tMax >> 1; k += base) {
	    delta = floor$3(delta / baseMinusTMin);
	  }
	  return floor$3(k + (baseMinusTMin + 1) * delta / (delta + skew));
	};

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 */
	// eslint-disable-next-line  max-statements
	var encode$1 = function (input) {
	  var output = [];

	  // Convert the input in UCS-2 to an array of Unicode code points.
	  input = ucs2decode(input);

	  // Cache the length.
	  var inputLength = input.length;

	  // Initialize the state.
	  var n = initialN;
	  var delta = 0;
	  var bias = initialBias;
	  var i, currentValue;

	  // Handle the basic code points.
	  for (i = 0; i < input.length; i++) {
	    currentValue = input[i];
	    if (currentValue < 0x80) {
	      output.push(stringFromCharCode(currentValue));
	    }
	  }

	  var basicLength = output.length; // number of basic code points.
	  var handledCPCount = basicLength; // number of code points that have been handled;

	  // Finish the basic string with a delimiter unless it's empty.
	  if (basicLength) {
	    output.push(delimiter);
	  }

	  // Main encoding loop:
	  while (handledCPCount < inputLength) {
	    // All non-basic code points < n have been handled already. Find the next larger one:
	    var m = maxInt;
	    for (i = 0; i < input.length; i++) {
	      currentValue = input[i];
	      if (currentValue >= n && currentValue < m) {
	        m = currentValue;
	      }
	    }

	    // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>, but guard against overflow.
	    var handledCPCountPlusOne = handledCPCount + 1;
	    if (m - n > floor$3((maxInt - delta) / handledCPCountPlusOne)) {
	      throw RangeError(OVERFLOW_ERROR);
	    }

	    delta += (m - n) * handledCPCountPlusOne;
	    n = m;

	    for (i = 0; i < input.length; i++) {
	      currentValue = input[i];
	      if (currentValue < n && ++delta > maxInt) {
	        throw RangeError(OVERFLOW_ERROR);
	      }
	      if (currentValue == n) {
	        // Represent delta as a generalized variable-length integer.
	        var q = delta;
	        for (var k = base; /* no condition */; k += base) {
	          var t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
	          if (q < t) break;
	          var qMinusT = q - t;
	          var baseMinusT = base - t;
	          output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT)));
	          q = floor$3(qMinusT / baseMinusT);
	        }

	        output.push(stringFromCharCode(digitToBasic(q)));
	        bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
	        delta = 0;
	        ++handledCPCount;
	      }
	    }

	    ++delta;
	    ++n;
	  }
	  return output.join('');
	};

	var punycodeToAscii = function (input) {
	  var encoded = [];
	  var labels = input.toLowerCase().replace(regexSeparators, '\u002E').split('.');
	  var i, label;
	  for (i = 0; i < labels.length; i++) {
	    label = labels[i];
	    encoded.push(regexNonASCII.test(label) ? 'xn--' + encode$1(label) : label);
	  }
	  return encoded.join('.');
	};

	var getIterator = function (it) {
	  var iteratorMethod = getIteratorMethod(it);
	  if (typeof iteratorMethod != 'function') {
	    throw TypeError(String(it) + ' is not iterable');
	  } return anObject(iteratorMethod.call(it));
	};

	// TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`





















	var $fetch$1 = getBuiltIn('fetch');
	var Headers = getBuiltIn('Headers');
	var ITERATOR$7 = wellKnownSymbol('iterator');
	var URL_SEARCH_PARAMS = 'URLSearchParams';
	var URL_SEARCH_PARAMS_ITERATOR = URL_SEARCH_PARAMS + 'Iterator';
	var setInternalState$5 = internalState.set;
	var getInternalParamsState = internalState.getterFor(URL_SEARCH_PARAMS);
	var getInternalIteratorState = internalState.getterFor(URL_SEARCH_PARAMS_ITERATOR);

	var plus = /\+/g;
	var sequences = Array(4);

	var percentSequence = function (bytes) {
	  return sequences[bytes - 1] || (sequences[bytes - 1] = RegExp('((?:%[\\da-f]{2}){' + bytes + '})', 'gi'));
	};

	var percentDecode = function (sequence) {
	  try {
	    return decodeURIComponent(sequence);
	  } catch (error) {
	    return sequence;
	  }
	};

	var deserialize = function (it) {
	  var result = it.replace(plus, ' ');
	  var bytes = 4;
	  try {
	    return decodeURIComponent(result);
	  } catch (error) {
	    while (bytes) {
	      result = result.replace(percentSequence(bytes--), percentDecode);
	    }
	    return result;
	  }
	};

	var find = /[!'()~]|%20/g;

	var replace$1 = {
	  '!': '%21',
	  "'": '%27',
	  '(': '%28',
	  ')': '%29',
	  '~': '%7E',
	  '%20': '+'
	};

	var replacer = function (match) {
	  return replace$1[match];
	};

	var serialize = function (it) {
	  return encodeURIComponent(it).replace(find, replacer);
	};

	var parseSearchParams = function (result, query) {
	  if (query) {
	    var attributes = query.split('&');
	    var index = 0;
	    var attribute, entry;
	    while (index < attributes.length) {
	      attribute = attributes[index++];
	      if (attribute.length) {
	        entry = attribute.split('=');
	        result.push({
	          key: deserialize(entry.shift()),
	          value: deserialize(entry.join('='))
	        });
	      }
	    }
	  }
	};

	var updateSearchParams = function (query) {
	  this.entries.length = 0;
	  parseSearchParams(this.entries, query);
	};

	var validateArgumentsLength = function (passed, required) {
	  if (passed < required) throw TypeError('Not enough arguments');
	};

	var URLSearchParamsIterator = createIteratorConstructor(function Iterator(params, kind) {
	  setInternalState$5(this, {
	    type: URL_SEARCH_PARAMS_ITERATOR,
	    iterator: getIterator(getInternalParamsState(params).entries),
	    kind: kind
	  });
	}, 'Iterator', function next() {
	  var state = getInternalIteratorState(this);
	  var kind = state.kind;
	  var step = state.iterator.next();
	  var entry = step.value;
	  if (!step.done) {
	    step.value = kind === 'keys' ? entry.key : kind === 'values' ? entry.value : [entry.key, entry.value];
	  } return step;
	});

	// `URLSearchParams` constructor
	// https://url.spec.whatwg.org/#interface-urlsearchparams
	var URLSearchParamsConstructor = function URLSearchParams(/* init */) {
	  anInstance(this, URLSearchParamsConstructor, URL_SEARCH_PARAMS);
	  var init = arguments.length > 0 ? arguments[0] : undefined;
	  var that = this;
	  var entries = [];
	  var iteratorMethod, iterator, next, step, entryIterator, entryNext, first, second, key;

	  setInternalState$5(that, {
	    type: URL_SEARCH_PARAMS,
	    entries: entries,
	    updateURL: function () { /* empty */ },
	    updateSearchParams: updateSearchParams
	  });

	  if (init !== undefined) {
	    if (isObject(init)) {
	      iteratorMethod = getIteratorMethod(init);
	      if (typeof iteratorMethod === 'function') {
	        iterator = iteratorMethod.call(init);
	        next = iterator.next;
	        while (!(step = next.call(iterator)).done) {
	          entryIterator = getIterator(anObject(step.value));
	          entryNext = entryIterator.next;
	          if (
	            (first = entryNext.call(entryIterator)).done ||
	            (second = entryNext.call(entryIterator)).done ||
	            !entryNext.call(entryIterator).done
	          ) throw TypeError('Expected sequence with length 2');
	          entries.push({ key: first.value + '', value: second.value + '' });
	        }
	      } else for (key in init) if (has(init, key)) entries.push({ key: key, value: init[key] + '' });
	    } else {
	      parseSearchParams(entries, typeof init === 'string' ? init.charAt(0) === '?' ? init.slice(1) : init : init + '');
	    }
	  }
	};

	var URLSearchParamsPrototype = URLSearchParamsConstructor.prototype;

	redefineAll(URLSearchParamsPrototype, {
	  // `URLSearchParams.prototype.appent` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-append
	  append: function append(name, value) {
	    validateArgumentsLength(arguments.length, 2);
	    var state = getInternalParamsState(this);
	    state.entries.push({ key: name + '', value: value + '' });
	    state.updateURL();
	  },
	  // `URLSearchParams.prototype.delete` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-delete
	  'delete': function (name) {
	    validateArgumentsLength(arguments.length, 1);
	    var state = getInternalParamsState(this);
	    var entries = state.entries;
	    var key = name + '';
	    var index = 0;
	    while (index < entries.length) {
	      if (entries[index].key === key) entries.splice(index, 1);
	      else index++;
	    }
	    state.updateURL();
	  },
	  // `URLSearchParams.prototype.get` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-get
	  get: function get(name) {
	    validateArgumentsLength(arguments.length, 1);
	    var entries = getInternalParamsState(this).entries;
	    var key = name + '';
	    var index = 0;
	    for (; index < entries.length; index++) {
	      if (entries[index].key === key) return entries[index].value;
	    }
	    return null;
	  },
	  // `URLSearchParams.prototype.getAll` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-getall
	  getAll: function getAll(name) {
	    validateArgumentsLength(arguments.length, 1);
	    var entries = getInternalParamsState(this).entries;
	    var key = name + '';
	    var result = [];
	    var index = 0;
	    for (; index < entries.length; index++) {
	      if (entries[index].key === key) result.push(entries[index].value);
	    }
	    return result;
	  },
	  // `URLSearchParams.prototype.has` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-has
	  has: function has(name) {
	    validateArgumentsLength(arguments.length, 1);
	    var entries = getInternalParamsState(this).entries;
	    var key = name + '';
	    var index = 0;
	    while (index < entries.length) {
	      if (entries[index++].key === key) return true;
	    }
	    return false;
	  },
	  // `URLSearchParams.prototype.set` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-set
	  set: function set(name, value) {
	    validateArgumentsLength(arguments.length, 1);
	    var state = getInternalParamsState(this);
	    var entries = state.entries;
	    var found = false;
	    var key = name + '';
	    var val = value + '';
	    var index = 0;
	    var entry;
	    for (; index < entries.length; index++) {
	      entry = entries[index];
	      if (entry.key === key) {
	        if (found) entries.splice(index--, 1);
	        else {
	          found = true;
	          entry.value = val;
	        }
	      }
	    }
	    if (!found) entries.push({ key: key, value: val });
	    state.updateURL();
	  },
	  // `URLSearchParams.prototype.sort` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-sort
	  sort: function sort() {
	    var state = getInternalParamsState(this);
	    var entries = state.entries;
	    // Array#sort is not stable in some engines
	    var slice = entries.slice();
	    var entry, entriesIndex, sliceIndex;
	    entries.length = 0;
	    for (sliceIndex = 0; sliceIndex < slice.length; sliceIndex++) {
	      entry = slice[sliceIndex];
	      for (entriesIndex = 0; entriesIndex < sliceIndex; entriesIndex++) {
	        if (entries[entriesIndex].key > entry.key) {
	          entries.splice(entriesIndex, 0, entry);
	          break;
	        }
	      }
	      if (entriesIndex === sliceIndex) entries.push(entry);
	    }
	    state.updateURL();
	  },
	  // `URLSearchParams.prototype.forEach` method
	  forEach: function forEach(callback /* , thisArg */) {
	    var entries = getInternalParamsState(this).entries;
	    var boundFunction = bindContext(callback, arguments.length > 1 ? arguments[1] : undefined, 3);
	    var index = 0;
	    var entry;
	    while (index < entries.length) {
	      entry = entries[index++];
	      boundFunction(entry.value, entry.key, this);
	    }
	  },
	  // `URLSearchParams.prototype.keys` method
	  keys: function keys() {
	    return new URLSearchParamsIterator(this, 'keys');
	  },
	  // `URLSearchParams.prototype.values` method
	  values: function values() {
	    return new URLSearchParamsIterator(this, 'values');
	  },
	  // `URLSearchParams.prototype.entries` method
	  entries: function entries() {
	    return new URLSearchParamsIterator(this, 'entries');
	  }
	}, { enumerable: true });

	// `URLSearchParams.prototype[@@iterator]` method
	redefine(URLSearchParamsPrototype, ITERATOR$7, URLSearchParamsPrototype.entries);

	// `URLSearchParams.prototype.toString` method
	// https://url.spec.whatwg.org/#urlsearchparams-stringification-behavior
	redefine(URLSearchParamsPrototype, 'toString', function toString() {
	  var entries = getInternalParamsState(this).entries;
	  var result = [];
	  var index = 0;
	  var entry;
	  while (index < entries.length) {
	    entry = entries[index++];
	    result.push(serialize(entry.key) + '=' + serialize(entry.value));
	  } return result.join('&');
	}, { enumerable: true });

	setToStringTag(URLSearchParamsConstructor, URL_SEARCH_PARAMS);

	_export({ global: true, forced: !nativeUrl }, {
	  URLSearchParams: URLSearchParamsConstructor
	});

	// Wrap `fetch` for correct work with polyfilled `URLSearchParams`
	// https://github.com/zloirock/core-js/issues/674
	if (!nativeUrl && typeof $fetch$1 == 'function' && typeof Headers == 'function') {
	  _export({ global: true, enumerable: true, forced: true }, {
	    fetch: function fetch(input /* , init */) {
	      var args = [input];
	      var init, body, headers;
	      if (arguments.length > 1) {
	        init = arguments[1];
	        if (isObject(init)) {
	          body = init.body;
	          if (classof(body) === URL_SEARCH_PARAMS) {
	            headers = init.headers ? new Headers(init.headers) : new Headers();
	            if (!headers.has('content-type')) {
	              headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
	            }
	            init = objectCreate(init, {
	              body: createPropertyDescriptor(0, String(body)),
	              headers: createPropertyDescriptor(0, headers)
	            });
	          }
	        }
	        args.push(init);
	      } return $fetch$1.apply(this, args);
	    }
	  });
	}

	var web_urlSearchParams = {
	  URLSearchParams: URLSearchParamsConstructor,
	  getState: getInternalParamsState
	};

	// TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`











	var codeAt = stringMultibyte.codeAt;





	var NativeURL = global_1.URL;
	var URLSearchParams$1 = web_urlSearchParams.URLSearchParams;
	var getInternalSearchParamsState = web_urlSearchParams.getState;
	var setInternalState$6 = internalState.set;
	var getInternalURLState = internalState.getterFor('URL');
	var floor$4 = Math.floor;
	var pow$1 = Math.pow;

	var INVALID_AUTHORITY = 'Invalid authority';
	var INVALID_SCHEME = 'Invalid scheme';
	var INVALID_HOST = 'Invalid host';
	var INVALID_PORT = 'Invalid port';

	var ALPHA = /[A-Za-z]/;
	var ALPHANUMERIC = /[\d+\-.A-Za-z]/;
	var DIGIT = /\d/;
	var HEX_START = /^(0x|0X)/;
	var OCT = /^[0-7]+$/;
	var DEC = /^\d+$/;
	var HEX = /^[\dA-Fa-f]+$/;
	// eslint-disable-next-line no-control-regex
	var FORBIDDEN_HOST_CODE_POINT = /[\u0000\u0009\u000A\u000D #%/:?@[\\]]/;
	// eslint-disable-next-line no-control-regex
	var FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT = /[\u0000\u0009\u000A\u000D #/:?@[\\]]/;
	// eslint-disable-next-line no-control-regex
	var LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE = /^[\u0000-\u001F ]+|[\u0000-\u001F ]+$/g;
	// eslint-disable-next-line no-control-regex
	var TAB_AND_NEW_LINE = /[\u0009\u000A\u000D]/g;
	var EOF;

	var parseHost = function (url, input) {
	  var result, codePoints, index;
	  if (input.charAt(0) == '[') {
	    if (input.charAt(input.length - 1) != ']') return INVALID_HOST;
	    result = parseIPv6(input.slice(1, -1));
	    if (!result) return INVALID_HOST;
	    url.host = result;
	  // opaque host
	  } else if (!isSpecial(url)) {
	    if (FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT.test(input)) return INVALID_HOST;
	    result = '';
	    codePoints = arrayFrom(input);
	    for (index = 0; index < codePoints.length; index++) {
	      result += percentEncode(codePoints[index], C0ControlPercentEncodeSet);
	    }
	    url.host = result;
	  } else {
	    input = punycodeToAscii(input);
	    if (FORBIDDEN_HOST_CODE_POINT.test(input)) return INVALID_HOST;
	    result = parseIPv4(input);
	    if (result === null) return INVALID_HOST;
	    url.host = result;
	  }
	};

	var parseIPv4 = function (input) {
	  var parts = input.split('.');
	  var partsLength, numbers, index, part, radix, number, ipv4;
	  if (parts.length && parts[parts.length - 1] == '') {
	    parts.pop();
	  }
	  partsLength = parts.length;
	  if (partsLength > 4) return input;
	  numbers = [];
	  for (index = 0; index < partsLength; index++) {
	    part = parts[index];
	    if (part == '') return input;
	    radix = 10;
	    if (part.length > 1 && part.charAt(0) == '0') {
	      radix = HEX_START.test(part) ? 16 : 8;
	      part = part.slice(radix == 8 ? 1 : 2);
	    }
	    if (part === '') {
	      number = 0;
	    } else {
	      if (!(radix == 10 ? DEC : radix == 8 ? OCT : HEX).test(part)) return input;
	      number = parseInt(part, radix);
	    }
	    numbers.push(number);
	  }
	  for (index = 0; index < partsLength; index++) {
	    number = numbers[index];
	    if (index == partsLength - 1) {
	      if (number >= pow$1(256, 5 - partsLength)) return null;
	    } else if (number > 255) return null;
	  }
	  ipv4 = numbers.pop();
	  for (index = 0; index < numbers.length; index++) {
	    ipv4 += numbers[index] * pow$1(256, 3 - index);
	  }
	  return ipv4;
	};

	// eslint-disable-next-line max-statements
	var parseIPv6 = function (input) {
	  var address = [0, 0, 0, 0, 0, 0, 0, 0];
	  var pieceIndex = 0;
	  var compress = null;
	  var pointer = 0;
	  var value, length, numbersSeen, ipv4Piece, number, swaps, swap;

	  var char = function () {
	    return input.charAt(pointer);
	  };

	  if (char() == ':') {
	    if (input.charAt(1) != ':') return;
	    pointer += 2;
	    pieceIndex++;
	    compress = pieceIndex;
	  }
	  while (char()) {
	    if (pieceIndex == 8) return;
	    if (char() == ':') {
	      if (compress !== null) return;
	      pointer++;
	      pieceIndex++;
	      compress = pieceIndex;
	      continue;
	    }
	    value = length = 0;
	    while (length < 4 && HEX.test(char())) {
	      value = value * 16 + parseInt(char(), 16);
	      pointer++;
	      length++;
	    }
	    if (char() == '.') {
	      if (length == 0) return;
	      pointer -= length;
	      if (pieceIndex > 6) return;
	      numbersSeen = 0;
	      while (char()) {
	        ipv4Piece = null;
	        if (numbersSeen > 0) {
	          if (char() == '.' && numbersSeen < 4) pointer++;
	          else return;
	        }
	        if (!DIGIT.test(char())) return;
	        while (DIGIT.test(char())) {
	          number = parseInt(char(), 10);
	          if (ipv4Piece === null) ipv4Piece = number;
	          else if (ipv4Piece == 0) return;
	          else ipv4Piece = ipv4Piece * 10 + number;
	          if (ipv4Piece > 255) return;
	          pointer++;
	        }
	        address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
	        numbersSeen++;
	        if (numbersSeen == 2 || numbersSeen == 4) pieceIndex++;
	      }
	      if (numbersSeen != 4) return;
	      break;
	    } else if (char() == ':') {
	      pointer++;
	      if (!char()) return;
	    } else if (char()) return;
	    address[pieceIndex++] = value;
	  }
	  if (compress !== null) {
	    swaps = pieceIndex - compress;
	    pieceIndex = 7;
	    while (pieceIndex != 0 && swaps > 0) {
	      swap = address[pieceIndex];
	      address[pieceIndex--] = address[compress + swaps - 1];
	      address[compress + --swaps] = swap;
	    }
	  } else if (pieceIndex != 8) return;
	  return address;
	};

	var findLongestZeroSequence = function (ipv6) {
	  var maxIndex = null;
	  var maxLength = 1;
	  var currStart = null;
	  var currLength = 0;
	  var index = 0;
	  for (; index < 8; index++) {
	    if (ipv6[index] !== 0) {
	      if (currLength > maxLength) {
	        maxIndex = currStart;
	        maxLength = currLength;
	      }
	      currStart = null;
	      currLength = 0;
	    } else {
	      if (currStart === null) currStart = index;
	      ++currLength;
	    }
	  }
	  if (currLength > maxLength) {
	    maxIndex = currStart;
	    maxLength = currLength;
	  }
	  return maxIndex;
	};

	var serializeHost = function (host) {
	  var result, index, compress, ignore0;
	  // ipv4
	  if (typeof host == 'number') {
	    result = [];
	    for (index = 0; index < 4; index++) {
	      result.unshift(host % 256);
	      host = floor$4(host / 256);
	    } return result.join('.');
	  // ipv6
	  } else if (typeof host == 'object') {
	    result = '';
	    compress = findLongestZeroSequence(host);
	    for (index = 0; index < 8; index++) {
	      if (ignore0 && host[index] === 0) continue;
	      if (ignore0) ignore0 = false;
	      if (compress === index) {
	        result += index ? ':' : '::';
	        ignore0 = true;
	      } else {
	        result += host[index].toString(16);
	        if (index < 7) result += ':';
	      }
	    }
	    return '[' + result + ']';
	  } return host;
	};

	var C0ControlPercentEncodeSet = {};
	var fragmentPercentEncodeSet = objectAssign({}, C0ControlPercentEncodeSet, {
	  ' ': 1, '"': 1, '<': 1, '>': 1, '`': 1
	});
	var pathPercentEncodeSet = objectAssign({}, fragmentPercentEncodeSet, {
	  '#': 1, '?': 1, '{': 1, '}': 1
	});
	var userinfoPercentEncodeSet = objectAssign({}, pathPercentEncodeSet, {
	  '/': 1, ':': 1, ';': 1, '=': 1, '@': 1, '[': 1, '\\': 1, ']': 1, '^': 1, '|': 1
	});

	var percentEncode = function (char, set) {
	  var code = codeAt(char, 0);
	  return code > 0x20 && code < 0x7F && !has(set, char) ? char : encodeURIComponent(char);
	};

	var specialSchemes = {
	  ftp: 21,
	  file: null,
	  http: 80,
	  https: 443,
	  ws: 80,
	  wss: 443
	};

	var isSpecial = function (url) {
	  return has(specialSchemes, url.scheme);
	};

	var includesCredentials = function (url) {
	  return url.username != '' || url.password != '';
	};

	var cannotHaveUsernamePasswordPort = function (url) {
	  return !url.host || url.cannotBeABaseURL || url.scheme == 'file';
	};

	var isWindowsDriveLetter = function (string, normalized) {
	  var second;
	  return string.length == 2 && ALPHA.test(string.charAt(0))
	    && ((second = string.charAt(1)) == ':' || (!normalized && second == '|'));
	};

	var startsWithWindowsDriveLetter = function (string) {
	  var third;
	  return string.length > 1 && isWindowsDriveLetter(string.slice(0, 2)) && (
	    string.length == 2 ||
	    ((third = string.charAt(2)) === '/' || third === '\\' || third === '?' || third === '#')
	  );
	};

	var shortenURLsPath = function (url) {
	  var path = url.path;
	  var pathSize = path.length;
	  if (pathSize && (url.scheme != 'file' || pathSize != 1 || !isWindowsDriveLetter(path[0], true))) {
	    path.pop();
	  }
	};

	var isSingleDot = function (segment) {
	  return segment === '.' || segment.toLowerCase() === '%2e';
	};

	var isDoubleDot = function (segment) {
	  segment = segment.toLowerCase();
	  return segment === '..' || segment === '%2e.' || segment === '.%2e' || segment === '%2e%2e';
	};

	// States:
	var SCHEME_START = {};
	var SCHEME = {};
	var NO_SCHEME = {};
	var SPECIAL_RELATIVE_OR_AUTHORITY = {};
	var PATH_OR_AUTHORITY = {};
	var RELATIVE = {};
	var RELATIVE_SLASH = {};
	var SPECIAL_AUTHORITY_SLASHES = {};
	var SPECIAL_AUTHORITY_IGNORE_SLASHES = {};
	var AUTHORITY = {};
	var HOST = {};
	var HOSTNAME = {};
	var PORT = {};
	var FILE = {};
	var FILE_SLASH = {};
	var FILE_HOST = {};
	var PATH_START = {};
	var PATH = {};
	var CANNOT_BE_A_BASE_URL_PATH = {};
	var QUERY = {};
	var FRAGMENT = {};

	// eslint-disable-next-line max-statements
	var parseURL = function (url, input, stateOverride, base) {
	  var state = stateOverride || SCHEME_START;
	  var pointer = 0;
	  var buffer = '';
	  var seenAt = false;
	  var seenBracket = false;
	  var seenPasswordToken = false;
	  var codePoints, char, bufferCodePoints, failure;

	  if (!stateOverride) {
	    url.scheme = '';
	    url.username = '';
	    url.password = '';
	    url.host = null;
	    url.port = null;
	    url.path = [];
	    url.query = null;
	    url.fragment = null;
	    url.cannotBeABaseURL = false;
	    input = input.replace(LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE, '');
	  }

	  input = input.replace(TAB_AND_NEW_LINE, '');

	  codePoints = arrayFrom(input);

	  while (pointer <= codePoints.length) {
	    char = codePoints[pointer];
	    switch (state) {
	      case SCHEME_START:
	        if (char && ALPHA.test(char)) {
	          buffer += char.toLowerCase();
	          state = SCHEME;
	        } else if (!stateOverride) {
	          state = NO_SCHEME;
	          continue;
	        } else return INVALID_SCHEME;
	        break;

	      case SCHEME:
	        if (char && (ALPHANUMERIC.test(char) || char == '+' || char == '-' || char == '.')) {
	          buffer += char.toLowerCase();
	        } else if (char == ':') {
	          if (stateOverride && (
	            (isSpecial(url) != has(specialSchemes, buffer)) ||
	            (buffer == 'file' && (includesCredentials(url) || url.port !== null)) ||
	            (url.scheme == 'file' && !url.host)
	          )) return;
	          url.scheme = buffer;
	          if (stateOverride) {
	            if (isSpecial(url) && specialSchemes[url.scheme] == url.port) url.port = null;
	            return;
	          }
	          buffer = '';
	          if (url.scheme == 'file') {
	            state = FILE;
	          } else if (isSpecial(url) && base && base.scheme == url.scheme) {
	            state = SPECIAL_RELATIVE_OR_AUTHORITY;
	          } else if (isSpecial(url)) {
	            state = SPECIAL_AUTHORITY_SLASHES;
	          } else if (codePoints[pointer + 1] == '/') {
	            state = PATH_OR_AUTHORITY;
	            pointer++;
	          } else {
	            url.cannotBeABaseURL = true;
	            url.path.push('');
	            state = CANNOT_BE_A_BASE_URL_PATH;
	          }
	        } else if (!stateOverride) {
	          buffer = '';
	          state = NO_SCHEME;
	          pointer = 0;
	          continue;
	        } else return INVALID_SCHEME;
	        break;

	      case NO_SCHEME:
	        if (!base || (base.cannotBeABaseURL && char != '#')) return INVALID_SCHEME;
	        if (base.cannotBeABaseURL && char == '#') {
	          url.scheme = base.scheme;
	          url.path = base.path.slice();
	          url.query = base.query;
	          url.fragment = '';
	          url.cannotBeABaseURL = true;
	          state = FRAGMENT;
	          break;
	        }
	        state = base.scheme == 'file' ? FILE : RELATIVE;
	        continue;

	      case SPECIAL_RELATIVE_OR_AUTHORITY:
	        if (char == '/' && codePoints[pointer + 1] == '/') {
	          state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
	          pointer++;
	        } else {
	          state = RELATIVE;
	          continue;
	        } break;

	      case PATH_OR_AUTHORITY:
	        if (char == '/') {
	          state = AUTHORITY;
	          break;
	        } else {
	          state = PATH;
	          continue;
	        }

	      case RELATIVE:
	        url.scheme = base.scheme;
	        if (char == EOF) {
	          url.username = base.username;
	          url.password = base.password;
	          url.host = base.host;
	          url.port = base.port;
	          url.path = base.path.slice();
	          url.query = base.query;
	        } else if (char == '/' || (char == '\\' && isSpecial(url))) {
	          state = RELATIVE_SLASH;
	        } else if (char == '?') {
	          url.username = base.username;
	          url.password = base.password;
	          url.host = base.host;
	          url.port = base.port;
	          url.path = base.path.slice();
	          url.query = '';
	          state = QUERY;
	        } else if (char == '#') {
	          url.username = base.username;
	          url.password = base.password;
	          url.host = base.host;
	          url.port = base.port;
	          url.path = base.path.slice();
	          url.query = base.query;
	          url.fragment = '';
	          state = FRAGMENT;
	        } else {
	          url.username = base.username;
	          url.password = base.password;
	          url.host = base.host;
	          url.port = base.port;
	          url.path = base.path.slice();
	          url.path.pop();
	          state = PATH;
	          continue;
	        } break;

	      case RELATIVE_SLASH:
	        if (isSpecial(url) && (char == '/' || char == '\\')) {
	          state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
	        } else if (char == '/') {
	          state = AUTHORITY;
	        } else {
	          url.username = base.username;
	          url.password = base.password;
	          url.host = base.host;
	          url.port = base.port;
	          state = PATH;
	          continue;
	        } break;

	      case SPECIAL_AUTHORITY_SLASHES:
	        state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
	        if (char != '/' || buffer.charAt(pointer + 1) != '/') continue;
	        pointer++;
	        break;

	      case SPECIAL_AUTHORITY_IGNORE_SLASHES:
	        if (char != '/' && char != '\\') {
	          state = AUTHORITY;
	          continue;
	        } break;

	      case AUTHORITY:
	        if (char == '@') {
	          if (seenAt) buffer = '%40' + buffer;
	          seenAt = true;
	          bufferCodePoints = arrayFrom(buffer);
	          for (var i = 0; i < bufferCodePoints.length; i++) {
	            var codePoint = bufferCodePoints[i];
	            if (codePoint == ':' && !seenPasswordToken) {
	              seenPasswordToken = true;
	              continue;
	            }
	            var encodedCodePoints = percentEncode(codePoint, userinfoPercentEncodeSet);
	            if (seenPasswordToken) url.password += encodedCodePoints;
	            else url.username += encodedCodePoints;
	          }
	          buffer = '';
	        } else if (
	          char == EOF || char == '/' || char == '?' || char == '#' ||
	          (char == '\\' && isSpecial(url))
	        ) {
	          if (seenAt && buffer == '') return INVALID_AUTHORITY;
	          pointer -= arrayFrom(buffer).length + 1;
	          buffer = '';
	          state = HOST;
	        } else buffer += char;
	        break;

	      case HOST:
	      case HOSTNAME:
	        if (stateOverride && url.scheme == 'file') {
	          state = FILE_HOST;
	          continue;
	        } else if (char == ':' && !seenBracket) {
	          if (buffer == '') return INVALID_HOST;
	          failure = parseHost(url, buffer);
	          if (failure) return failure;
	          buffer = '';
	          state = PORT;
	          if (stateOverride == HOSTNAME) return;
	        } else if (
	          char == EOF || char == '/' || char == '?' || char == '#' ||
	          (char == '\\' && isSpecial(url))
	        ) {
	          if (isSpecial(url) && buffer == '') return INVALID_HOST;
	          if (stateOverride && buffer == '' && (includesCredentials(url) || url.port !== null)) return;
	          failure = parseHost(url, buffer);
	          if (failure) return failure;
	          buffer = '';
	          state = PATH_START;
	          if (stateOverride) return;
	          continue;
	        } else {
	          if (char == '[') seenBracket = true;
	          else if (char == ']') seenBracket = false;
	          buffer += char;
	        } break;

	      case PORT:
	        if (DIGIT.test(char)) {
	          buffer += char;
	        } else if (
	          char == EOF || char == '/' || char == '?' || char == '#' ||
	          (char == '\\' && isSpecial(url)) ||
	          stateOverride
	        ) {
	          if (buffer != '') {
	            var port = parseInt(buffer, 10);
	            if (port > 0xFFFF) return INVALID_PORT;
	            url.port = (isSpecial(url) && port === specialSchemes[url.scheme]) ? null : port;
	            buffer = '';
	          }
	          if (stateOverride) return;
	          state = PATH_START;
	          continue;
	        } else return INVALID_PORT;
	        break;

	      case FILE:
	        url.scheme = 'file';
	        if (char == '/' || char == '\\') state = FILE_SLASH;
	        else if (base && base.scheme == 'file') {
	          if (char == EOF) {
	            url.host = base.host;
	            url.path = base.path.slice();
	            url.query = base.query;
	          } else if (char == '?') {
	            url.host = base.host;
	            url.path = base.path.slice();
	            url.query = '';
	            state = QUERY;
	          } else if (char == '#') {
	            url.host = base.host;
	            url.path = base.path.slice();
	            url.query = base.query;
	            url.fragment = '';
	            state = FRAGMENT;
	          } else {
	            if (!startsWithWindowsDriveLetter(codePoints.slice(pointer).join(''))) {
	              url.host = base.host;
	              url.path = base.path.slice();
	              shortenURLsPath(url);
	            }
	            state = PATH;
	            continue;
	          }
	        } else {
	          state = PATH;
	          continue;
	        } break;

	      case FILE_SLASH:
	        if (char == '/' || char == '\\') {
	          state = FILE_HOST;
	          break;
	        }
	        if (base && base.scheme == 'file' && !startsWithWindowsDriveLetter(codePoints.slice(pointer).join(''))) {
	          if (isWindowsDriveLetter(base.path[0], true)) url.path.push(base.path[0]);
	          else url.host = base.host;
	        }
	        state = PATH;
	        continue;

	      case FILE_HOST:
	        if (char == EOF || char == '/' || char == '\\' || char == '?' || char == '#') {
	          if (!stateOverride && isWindowsDriveLetter(buffer)) {
	            state = PATH;
	          } else if (buffer == '') {
	            url.host = '';
	            if (stateOverride) return;
	            state = PATH_START;
	          } else {
	            failure = parseHost(url, buffer);
	            if (failure) return failure;
	            if (url.host == 'localhost') url.host = '';
	            if (stateOverride) return;
	            buffer = '';
	            state = PATH_START;
	          } continue;
	        } else buffer += char;
	        break;

	      case PATH_START:
	        if (isSpecial(url)) {
	          state = PATH;
	          if (char != '/' && char != '\\') continue;
	        } else if (!stateOverride && char == '?') {
	          url.query = '';
	          state = QUERY;
	        } else if (!stateOverride && char == '#') {
	          url.fragment = '';
	          state = FRAGMENT;
	        } else if (char != EOF) {
	          state = PATH;
	          if (char != '/') continue;
	        } break;

	      case PATH:
	        if (
	          char == EOF || char == '/' ||
	          (char == '\\' && isSpecial(url)) ||
	          (!stateOverride && (char == '?' || char == '#'))
	        ) {
	          if (isDoubleDot(buffer)) {
	            shortenURLsPath(url);
	            if (char != '/' && !(char == '\\' && isSpecial(url))) {
	              url.path.push('');
	            }
	          } else if (isSingleDot(buffer)) {
	            if (char != '/' && !(char == '\\' && isSpecial(url))) {
	              url.path.push('');
	            }
	          } else {
	            if (url.scheme == 'file' && !url.path.length && isWindowsDriveLetter(buffer)) {
	              if (url.host) url.host = '';
	              buffer = buffer.charAt(0) + ':'; // normalize windows drive letter
	            }
	            url.path.push(buffer);
	          }
	          buffer = '';
	          if (url.scheme == 'file' && (char == EOF || char == '?' || char == '#')) {
	            while (url.path.length > 1 && url.path[0] === '') {
	              url.path.shift();
	            }
	          }
	          if (char == '?') {
	            url.query = '';
	            state = QUERY;
	          } else if (char == '#') {
	            url.fragment = '';
	            state = FRAGMENT;
	          }
	        } else {
	          buffer += percentEncode(char, pathPercentEncodeSet);
	        } break;

	      case CANNOT_BE_A_BASE_URL_PATH:
	        if (char == '?') {
	          url.query = '';
	          state = QUERY;
	        } else if (char == '#') {
	          url.fragment = '';
	          state = FRAGMENT;
	        } else if (char != EOF) {
	          url.path[0] += percentEncode(char, C0ControlPercentEncodeSet);
	        } break;

	      case QUERY:
	        if (!stateOverride && char == '#') {
	          url.fragment = '';
	          state = FRAGMENT;
	        } else if (char != EOF) {
	          if (char == "'" && isSpecial(url)) url.query += '%27';
	          else if (char == '#') url.query += '%23';
	          else url.query += percentEncode(char, C0ControlPercentEncodeSet);
	        } break;

	      case FRAGMENT:
	        if (char != EOF) url.fragment += percentEncode(char, fragmentPercentEncodeSet);
	        break;
	    }

	    pointer++;
	  }
	};

	// `URL` constructor
	// https://url.spec.whatwg.org/#url-class
	var URLConstructor = function URL(url /* , base */) {
	  var that = anInstance(this, URLConstructor, 'URL');
	  var base = arguments.length > 1 ? arguments[1] : undefined;
	  var urlString = String(url);
	  var state = setInternalState$6(that, { type: 'URL' });
	  var baseState, failure;
	  if (base !== undefined) {
	    if (base instanceof URLConstructor) baseState = getInternalURLState(base);
	    else {
	      failure = parseURL(baseState = {}, String(base));
	      if (failure) throw TypeError(failure);
	    }
	  }
	  failure = parseURL(state, urlString, null, baseState);
	  if (failure) throw TypeError(failure);
	  var searchParams = state.searchParams = new URLSearchParams$1();
	  var searchParamsState = getInternalSearchParamsState(searchParams);
	  searchParamsState.updateSearchParams(state.query);
	  searchParamsState.updateURL = function () {
	    state.query = String(searchParams) || null;
	  };
	  if (!descriptors) {
	    that.href = serializeURL.call(that);
	    that.origin = getOrigin.call(that);
	    that.protocol = getProtocol.call(that);
	    that.username = getUsername.call(that);
	    that.password = getPassword.call(that);
	    that.host = getHost.call(that);
	    that.hostname = getHostname.call(that);
	    that.port = getPort.call(that);
	    that.pathname = getPathname.call(that);
	    that.search = getSearch.call(that);
	    that.searchParams = getSearchParams.call(that);
	    that.hash = getHash.call(that);
	  }
	};

	var URLPrototype = URLConstructor.prototype;

	var serializeURL = function () {
	  var url = getInternalURLState(this);
	  var scheme = url.scheme;
	  var username = url.username;
	  var password = url.password;
	  var host = url.host;
	  var port = url.port;
	  var path = url.path;
	  var query = url.query;
	  var fragment = url.fragment;
	  var output = scheme + ':';
	  if (host !== null) {
	    output += '//';
	    if (includesCredentials(url)) {
	      output += username + (password ? ':' + password : '') + '@';
	    }
	    output += serializeHost(host);
	    if (port !== null) output += ':' + port;
	  } else if (scheme == 'file') output += '//';
	  output += url.cannotBeABaseURL ? path[0] : path.length ? '/' + path.join('/') : '';
	  if (query !== null) output += '?' + query;
	  if (fragment !== null) output += '#' + fragment;
	  return output;
	};

	var getOrigin = function () {
	  var url = getInternalURLState(this);
	  var scheme = url.scheme;
	  var port = url.port;
	  if (scheme == 'blob') try {
	    return new URL(scheme.path[0]).origin;
	  } catch (error) {
	    return 'null';
	  }
	  if (scheme == 'file' || !isSpecial(url)) return 'null';
	  return scheme + '://' + serializeHost(url.host) + (port !== null ? ':' + port : '');
	};

	var getProtocol = function () {
	  return getInternalURLState(this).scheme + ':';
	};

	var getUsername = function () {
	  return getInternalURLState(this).username;
	};

	var getPassword = function () {
	  return getInternalURLState(this).password;
	};

	var getHost = function () {
	  var url = getInternalURLState(this);
	  var host = url.host;
	  var port = url.port;
	  return host === null ? ''
	    : port === null ? serializeHost(host)
	    : serializeHost(host) + ':' + port;
	};

	var getHostname = function () {
	  var host = getInternalURLState(this).host;
	  return host === null ? '' : serializeHost(host);
	};

	var getPort = function () {
	  var port = getInternalURLState(this).port;
	  return port === null ? '' : String(port);
	};

	var getPathname = function () {
	  var url = getInternalURLState(this);
	  var path = url.path;
	  return url.cannotBeABaseURL ? path[0] : path.length ? '/' + path.join('/') : '';
	};

	var getSearch = function () {
	  var query = getInternalURLState(this).query;
	  return query ? '?' + query : '';
	};

	var getSearchParams = function () {
	  return getInternalURLState(this).searchParams;
	};

	var getHash = function () {
	  var fragment = getInternalURLState(this).fragment;
	  return fragment ? '#' + fragment : '';
	};

	var accessorDescriptor = function (getter, setter) {
	  return { get: getter, set: setter, configurable: true, enumerable: true };
	};

	if (descriptors) {
	  objectDefineProperties(URLPrototype, {
	    // `URL.prototype.href` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-href
	    href: accessorDescriptor(serializeURL, function (href) {
	      var url = getInternalURLState(this);
	      var urlString = String(href);
	      var failure = parseURL(url, urlString);
	      if (failure) throw TypeError(failure);
	      getInternalSearchParamsState(url.searchParams).updateSearchParams(url.query);
	    }),
	    // `URL.prototype.origin` getter
	    // https://url.spec.whatwg.org/#dom-url-origin
	    origin: accessorDescriptor(getOrigin),
	    // `URL.prototype.protocol` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-protocol
	    protocol: accessorDescriptor(getProtocol, function (protocol) {
	      var url = getInternalURLState(this);
	      parseURL(url, String(protocol) + ':', SCHEME_START);
	    }),
	    // `URL.prototype.username` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-username
	    username: accessorDescriptor(getUsername, function (username) {
	      var url = getInternalURLState(this);
	      var codePoints = arrayFrom(String(username));
	      if (cannotHaveUsernamePasswordPort(url)) return;
	      url.username = '';
	      for (var i = 0; i < codePoints.length; i++) {
	        url.username += percentEncode(codePoints[i], userinfoPercentEncodeSet);
	      }
	    }),
	    // `URL.prototype.password` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-password
	    password: accessorDescriptor(getPassword, function (password) {
	      var url = getInternalURLState(this);
	      var codePoints = arrayFrom(String(password));
	      if (cannotHaveUsernamePasswordPort(url)) return;
	      url.password = '';
	      for (var i = 0; i < codePoints.length; i++) {
	        url.password += percentEncode(codePoints[i], userinfoPercentEncodeSet);
	      }
	    }),
	    // `URL.prototype.host` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-host
	    host: accessorDescriptor(getHost, function (host) {
	      var url = getInternalURLState(this);
	      if (url.cannotBeABaseURL) return;
	      parseURL(url, String(host), HOST);
	    }),
	    // `URL.prototype.hostname` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-hostname
	    hostname: accessorDescriptor(getHostname, function (hostname) {
	      var url = getInternalURLState(this);
	      if (url.cannotBeABaseURL) return;
	      parseURL(url, String(hostname), HOSTNAME);
	    }),
	    // `URL.prototype.port` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-port
	    port: accessorDescriptor(getPort, function (port) {
	      var url = getInternalURLState(this);
	      if (cannotHaveUsernamePasswordPort(url)) return;
	      port = String(port);
	      if (port == '') url.port = null;
	      else parseURL(url, port, PORT);
	    }),
	    // `URL.prototype.pathname` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-pathname
	    pathname: accessorDescriptor(getPathname, function (pathname) {
	      var url = getInternalURLState(this);
	      if (url.cannotBeABaseURL) return;
	      url.path = [];
	      parseURL(url, pathname + '', PATH_START);
	    }),
	    // `URL.prototype.search` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-search
	    search: accessorDescriptor(getSearch, function (search) {
	      var url = getInternalURLState(this);
	      search = String(search);
	      if (search == '') {
	        url.query = null;
	      } else {
	        if ('?' == search.charAt(0)) search = search.slice(1);
	        url.query = '';
	        parseURL(url, search, QUERY);
	      }
	      getInternalSearchParamsState(url.searchParams).updateSearchParams(url.query);
	    }),
	    // `URL.prototype.searchParams` getter
	    // https://url.spec.whatwg.org/#dom-url-searchparams
	    searchParams: accessorDescriptor(getSearchParams),
	    // `URL.prototype.hash` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-hash
	    hash: accessorDescriptor(getHash, function (hash) {
	      var url = getInternalURLState(this);
	      hash = String(hash);
	      if (hash == '') {
	        url.fragment = null;
	        return;
	      }
	      if ('#' == hash.charAt(0)) hash = hash.slice(1);
	      url.fragment = '';
	      parseURL(url, hash, FRAGMENT);
	    })
	  });
	}

	// `URL.prototype.toJSON` method
	// https://url.spec.whatwg.org/#dom-url-tojson
	redefine(URLPrototype, 'toJSON', function toJSON() {
	  return serializeURL.call(this);
	}, { enumerable: true });

	// `URL.prototype.toString` method
	// https://url.spec.whatwg.org/#URL-stringification-behavior
	redefine(URLPrototype, 'toString', function toString() {
	  return serializeURL.call(this);
	}, { enumerable: true });

	if (NativeURL) {
	  var nativeCreateObjectURL = NativeURL.createObjectURL;
	  var nativeRevokeObjectURL = NativeURL.revokeObjectURL;
	  // `URL.createObjectURL` method
	  // https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL
	  // eslint-disable-next-line no-unused-vars
	  if (nativeCreateObjectURL) redefine(URLConstructor, 'createObjectURL', function createObjectURL(blob) {
	    return nativeCreateObjectURL.apply(NativeURL, arguments);
	  });
	  // `URL.revokeObjectURL` method
	  // https://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL
	  // eslint-disable-next-line no-unused-vars
	  if (nativeRevokeObjectURL) redefine(URLConstructor, 'revokeObjectURL', function revokeObjectURL(url) {
	    return nativeRevokeObjectURL.apply(NativeURL, arguments);
	  });
	}

	setToStringTag(URLConstructor, 'URL');

	_export({ global: true, forced: !nativeUrl, sham: !descriptors }, {
	  URL: URLConstructor
	});

	function fetchWrapper(path) {
	  var params,
	      suppressErrors,
	      abortController,
	      apiUrl,
	      url,
	      response,
	      defaultError,
	      data,
	      _args = arguments;
	  return regenerator.async(function fetchWrapper$(_context) {
	    while (1) {
	      switch (_context.prev = _context.next) {
	        case 0:
	          params = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
	          suppressErrors = _args.length > 2 && _args[2] !== undefined ? _args[2] : false;
	          abortController = abortRequest();
	          apiUrl = makeApiUrl(path);
	          url = new URL(apiUrl);

	          if (Object.getOwnPropertyNames(params).length) {
	            url.search = new URLSearchParams(params);
	          }

	          progressCounter.increment();
	          _context.prev = 7;
	          _context.next = 10;
	          return regenerator.awrap(fetch(url, {
	            signal: abortController.signal
	          }));

	        case 10:
	          response = _context.sent;
	          _context.next = 18;
	          break;

	        case 13:
	          _context.prev = 13;
	          _context.t0 = _context["catch"](7);

	          if (!(_context.t0.name === 'AbortError')) {
	            _context.next = 17;
	            break;
	          }

	          return _context.abrupt("return", null);

	        case 17:
	          return _context.abrupt("return", {
	            error: {
	              title: 'Error',
	              explanation: 'Unable to search at this time',
	              detail:  _context.t0.message 
	            }
	          });

	        case 18:
	          _context.prev = 18;
	          progressCounter.decrement();
	          return _context.finish(18);

	        case 21:
	          if (!(response.status >= 400 && !suppressErrors || response.status >= 500)) {
	            _context.next = 33;
	            break;
	          }

	          defaultError = {
	            title: response.statusText,
	            explanation: 'Something unexpected happened'
	          };
	          _context.prev = 23;
	          _context.next = 26;
	          return regenerator.awrap(response.json());

	        case 26:
	          data = _context.sent;
	          return _context.abrupt("return", {
	            error: data.error || defaultError
	          });

	        case 30:
	          _context.prev = 30;
	          _context.t1 = _context["catch"](23);
	          return _context.abrupt("return", {
	            error: defaultError
	          });

	        case 33:
	          _context.prev = 33;
	          _context.next = 36;
	          return regenerator.awrap(response.json());

	        case 36:
	          return _context.abrupt("return", _context.sent);

	        case 39:
	          _context.prev = 39;
	          _context.t2 = _context["catch"](33);
	          return _context.abrupt("return", {
	            error: {
	              title: 'Bad data received',
	              explanation: 'Fetched data is not valid JSON',
	              detail: _context.t2.toString()
	            }
	          });

	        case 42:
	        case "end":
	          return _context.stop();
	      }
	    }
	  }, null, null, [[7, 13, 18, 21], [23, 30], [33, 39]]);
	}

	function getDirections(state, map, myLocation) {
	  var fromTerm, fromPoint, toTerm, toPoint, fromMyLocation, toMyLocation, position, params, data;
	  return regenerator.async(function getDirections$(_context) {
	    while (1) {
	      switch (_context.prev = _context.next) {
	        case 0:
	          fromTerm = state.fromTerm, fromPoint = state.fromPoint, toTerm = state.toTerm, toPoint = state.toPoint;

	          if (fromTerm.trim() && toTerm.trim()) {
	            _context.next = 3;
	            break;
	          }

	          return _context.abrupt("return", {});

	        case 3:
	          fromMyLocation = fromTerm.toLowerCase() === 'my location';
	          toMyLocation = toTerm.toLowerCase() === 'my location';

	          if (!(fromMyLocation || toMyLocation)) {
	            _context.next = 13;
	            break;
	          }

	          position = myLocation.position;

	          if (!position) {
	            _context.next = 12;
	            break;
	          }

	          if (fromMyLocation) {
	            fromTerm = displayLatLong(position, ',');
	            fromPoint = null;
	          }

	          if (toMyLocation) {
	            toTerm = displayLatLong(position, ',');
	            toPoint = null;
	          }

	          _context.next = 13;
	          break;

	        case 12:
	          return _context.abrupt("return", {
	            fromTerm: fromTerm,
	            fromPoint: fromPoint,
	            toTerm: toTerm,
	            toPoint: toPoint,
	            error: myLocation.error
	          });

	        case 13:
	          map.clearOverlays();
	          map.vectorLayer.getSource().clear(true);
	          params = {
	            from: fromTerm,
	            to: toTerm
	          };

	          if (fromPoint) {
	            if (typeof fromPoint !== 'string') {
	              fromPoint = displayLatLong(fromPoint, ',');
	            }

	            params.from_point = fromPoint;
	          }

	          if (toPoint) {
	            if (typeof toPoint !== 'string') {
	              toPoint = displayLatLong(toPoint, ',');
	            }

	            params.to_point = toPoint;
	          }

	          _context.next = 20;
	          return regenerator.awrap(fetchWrapper('/directions', params));

	        case 20:
	          data = _context.sent;

	          if (!(data === null)) {
	            _context.next = 25;
	            break;
	          }

	          return _context.abrupt("return", null);

	        case 25:
	          if (!(data.error && !data.results)) {
	            _context.next = 27;
	            break;
	          }

	          return _context.abrupt("return", {
	            fromTerm: fromTerm,
	            fromPoint: fromPoint,
	            toTerm: toTerm,
	            toPoint: toPoint,
	            error: data.error
	          });

	        case 27:
	          _context.next = 29;
	          return regenerator.awrap(updateMap(map, data.results));

	        case 29:
	          return _context.abrupt("return", {
	            fromTerm: data.start.name,
	            fromPoint: data.start.point.coordinates,
	            toTerm: data.end.name,
	            toPoint: data.end.point.coordinates,
	            results: data.results
	          });

	        case 30:
	        case "end":
	          return _context.stop();
	      }
	    }
	  });
	}
	function updateMap(map, results) {
	  var start, end, coordinates, line, bounds;
	  return regenerator.async(function updateMap$(_context2) {
	    while (1) {
	      switch (_context2.prev = _context2.next) {
	        case 0:
	          start = results[0].start;
	          end = results[results.length - 1].end;
	          coordinates = results.reduce(function (accumulator, result) {
	            return accumulator.concat(result.linestring.coordinates);
	          }, []);
	          line = new Feature({
	            geometry: new LineString(coordinates)
	          });
	          line.setStyle(ROUTE_STYLE);
	          bounds = results.reduce(function (accumulator, result) {
	            return extend(accumulator, result.bounds);
	          }, results[0].bounds);
	          map.addOverlay(start.point.coordinates, 'map-marker-start', 'center-center');
	          map.addOverlay(end.point.coordinates, 'map-marker-end', 'center-center');
	          map.vectorLayer.getSource().addFeature(line);
	          map.vectorLayer.setVisible(true);
	          _context2.next = 12;
	          return regenerator.awrap(map.fitExtent(bounds, {
	            padding: breakpointSwitch(function (breakpoint) {
	              var buttonWidth = 40;
	              var formHeight = 120;
	              var halfMarkerWidth = 12;
	              var panelWidth = 400;

	              switch (breakpoint) {
	                case 'xs':
	                  return [formHeight + halfMarkerWidth + 8, buttonWidth + halfMarkerWidth + 8, halfMarkerWidth + 4, halfMarkerWidth + 4];

	                case 'sm':
	                  return [formHeight + halfMarkerWidth + 16, buttonWidth + halfMarkerWidth + 16, halfMarkerWidth + 8, halfMarkerWidth + 8];

	                default:
	                  return [formHeight + halfMarkerWidth + 16, buttonWidth + halfMarkerWidth + 16, halfMarkerWidth + 8, panelWidth + halfMarkerWidth + 16];
	              }
	            })
	          }));

	        case 12:
	        case "end":
	          return _context2.stop();
	      }
	    }
	  });
	}

	function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$3(Object(source), true).forEach(function (key) { defineProperty$4(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
	var file$5 = "src/directions/Directions.svelte";

	function get_each_context_1(ctx, list, i) {
	  var child_ctx = ctx.slice();
	  child_ctx[34] = list[i];
	  child_ctx[36] = i;
	  return child_ctx;
	}

	function get_each_context$1(ctx, list, i) {
	  var child_ctx = ctx.slice();
	  child_ctx[28] = list[i].start;
	  child_ctx[29] = list[i].end;
	  child_ctx[30] = list[i].distance;
	  child_ctx[31] = list[i].directions;
	  return child_ctx;
	} // (494:26) 


	function create_if_block_4(ctx) {
	  var div2;
	  var div0;
	  var t0_value =
	  /*state*/
	  ctx[2].error.title + "";
	  var t0;
	  var t1;
	  var div1;
	  var p;
	  var t2_value =
	  /*state*/
	  ctx[2].error.explanation + "";
	  var t2;
	  var t3;
	  var div2_intro;
	  var if_block =
	  /*state*/
	  ctx[2].error.detail && create_if_block_5(ctx);
	  var block = {
	    c: function create() {
	      div2 = element("div");
	      div0 = element("div");
	      t0 = text(t0_value);
	      t1 = space();
	      div1 = element("div");
	      p = element("p");
	      t2 = text(t2_value);
	      t3 = space();
	      if (if_block) if_block.c();
	      attr_dev(div0, "class", "error-title");
	      add_location(div0, file$5, 495, 12, 16058);
	      add_location(p, file$5, 497, 16, 16165);
	      attr_dev(div1, "class", "error-message");
	      add_location(div1, file$5, 496, 12, 16121);
	      attr_dev(div2, "id", "error");
	      attr_dev(div2, "class", "svelte-l6uc7a");
	      add_location(div2, file$5, 494, 8, 16009);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, div2, anchor);
	      append_dev(div2, div0);
	      append_dev(div0, t0);
	      append_dev(div2, t1);
	      append_dev(div2, div1);
	      append_dev(div1, p);
	      append_dev(p, t2);
	      append_dev(div1, t3);
	      if (if_block) if_block.m(div1, null);
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*state*/
	      4 && t0_value !== (t0_value =
	      /*state*/
	      ctx[2].error.title + "")) set_data_dev(t0, t0_value);
	      if (dirty &
	      /*state*/
	      4 && t2_value !== (t2_value =
	      /*state*/
	      ctx[2].error.explanation + "")) set_data_dev(t2, t2_value);

	      if (
	      /*state*/
	      ctx[2].error.detail) {
	        if (if_block) {
	          if_block.p(ctx, dirty);
	        } else {
	          if_block = create_if_block_5(ctx);
	          if_block.c();
	          if_block.m(div1, null);
	        }
	      } else if (if_block) {
	        if_block.d(1);
	        if_block = null;
	      }
	    },
	    i: function intro(local) {
	      if (!div2_intro) {
	        add_render_callback(function () {
	          div2_intro = create_in_transition(div2, fly, {
	            y: 0
	          });
	          div2_intro.start();
	        });
	      }
	    },
	    o: noop,
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(div2);
	      if (if_block) if_block.d();
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_4.name,
	    type: "if",
	    source: "(494:26) ",
	    ctx: ctx
	  });
	  return block;
	} // (417:4) {#if state.results.length}


	function create_if_block$4(ctx) {
	  var div1;
	  var t0;
	  var div0;
	  var p0;
	  var b;
	  var t2;
	  var t3;
	  var p1;
	  var div1_intro;
	  var each_value =
	  /*state*/
	  ctx[2].results;
	  var each_blocks = [];

	  for (var i = 0; i < each_value.length; i += 1) {
	    each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	  }

	  var block = {
	    c: function create() {
	      div1 = element("div");

	      for (var _i = 0; _i < each_blocks.length; _i += 1) {
	        each_blocks[_i].c();
	      }

	      t0 = space();
	      div0 = element("div");
	      p0 = element("p");
	      b = element("b");
	      b.textContent = "Disclaimer";
	      t2 = text(": As you are riding, please keep in mind that you\n                    don't have to follow the suggested route. It may not be safe at any\n                    given point. If you see what looks like an unsafe or undesirable\n                    stretch in the suggested route, you can walk, ride on the sidewalk,\n                    or go a different way.");
	      t3 = space();
	      p1 = element("p");
	      p1.textContent = "Users should independently verify all information presented here.\n                    This service is provided AS IS with NO WARRANTY of any kind.";
	      add_location(b, file$5, 480, 20, 15339);
	      attr_dev(p0, "class", "svelte-l6uc7a");
	      add_location(p0, file$5, 479, 16, 15315);
	      attr_dev(p1, "class", "svelte-l6uc7a");
	      add_location(p1, file$5, 487, 16, 15748);
	      attr_dev(div0, "class", "info svelte-l6uc7a");
	      add_location(div0, file$5, 478, 12, 15280);
	      attr_dev(div1, "id", "results");
	      attr_dev(div1, "class", "hidden-sm svelte-l6uc7a");
	      add_location(div1, file$5, 417, 8, 11790);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, div1, anchor);

	      for (var _i2 = 0; _i2 < each_blocks.length; _i2 += 1) {
	        each_blocks[_i2].m(div1, null);
	      }

	      append_dev(div1, t0);
	      append_dev(div1, div0);
	      append_dev(div0, p0);
	      append_dev(p0, b);
	      append_dev(p0, t2);
	      append_dev(div0, t3);
	      append_dev(div0, p1);
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*handleDirectionClick, state, handleDirectionHover, handleDirectionHoverOut, getArchaicDistance, getIconForTurn, getEstimatedTime*/
	      452) {
	        each_value =
	        /*state*/
	        ctx[2].results;

	        var _i3;

	        for (_i3 = 0; _i3 < each_value.length; _i3 += 1) {
	          var child_ctx = get_each_context$1(ctx, each_value, _i3);

	          if (each_blocks[_i3]) {
	            each_blocks[_i3].p(child_ctx, dirty);
	          } else {
	            each_blocks[_i3] = create_each_block$1(child_ctx);

	            each_blocks[_i3].c();

	            each_blocks[_i3].m(div1, t0);
	          }
	        }

	        for (; _i3 < each_blocks.length; _i3 += 1) {
	          each_blocks[_i3].d(1);
	        }

	        each_blocks.length = each_value.length;
	      }
	    },
	    i: function intro(local) {
	      if (!div1_intro) {
	        add_render_callback(function () {
	          div1_intro = create_in_transition(div1, fly, {
	            y: 0
	          });
	          div1_intro.start();
	        });
	      }
	    },
	    o: noop,
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(div1);
	      destroy_each(each_blocks, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block$4.name,
	    type: "if",
	    source: "(417:4) {#if state.results.length}",
	    ctx: ctx
	  });
	  return block;
	} // (499:16) {#if state.error.detail}


	function create_if_block_5(ctx) {
	  var p;
	  var t_value =
	  /*state*/
	  ctx[2].error.detail + "";
	  var t;
	  var block = {
	    c: function create() {
	      p = element("p");
	      t = text(t_value);
	      add_location(p, file$5, 499, 20, 16259);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, p, anchor);
	      append_dev(p, t);
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*state*/
	      4 && t_value !== (t_value =
	      /*state*/
	      ctx[2].error.detail + "")) set_data_dev(t, t_value);
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(p);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_5.name,
	    type: "if",
	    source: "(499:16) {#if state.error.detail}",
	    ctx: ctx
	  });
	  return block;
	} // (454:32) {:else}


	function create_else_block$1(ctx) {
	  var span0;
	  var t0_value = getIconForTurn(
	  /*direction*/
	  ctx[34].turn) + "";
	  var t0;
	  var t1;
	  var t2;
	  var span1;
	  var t3_value = getArchaicDistance(
	  /*direction*/
	  ctx[34].distance) + "";
	  var t3;

	  function select_block_type_2(ctx, dirty) {
	    if (
	    /*direction*/
	    ctx[34].turn === "straight") return create_if_block_3;
	    return create_else_block_1;
	  }

	  var current_block_type = select_block_type_2(ctx);
	  var if_block = current_block_type(ctx);
	  var block = {
	    c: function create() {
	      span0 = element("span");
	      t0 = text(t0_value);
	      t1 = space();
	      if_block.c();
	      t2 = space();
	      span1 = element("span");
	      t3 = text(t3_value);
	      attr_dev(span0, "class", "material-icons svelte-l6uc7a");
	      add_location(span0, file$5, 454, 36, 14002);
	      attr_dev(span1, "class", "distance svelte-l6uc7a");
	      add_location(span1, file$5, 460, 36, 14444);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, span0, anchor);
	      append_dev(span0, t0);
	      insert_dev(target, t1, anchor);
	      if_block.m(target, anchor);
	      insert_dev(target, t2, anchor);
	      insert_dev(target, span1, anchor);
	      append_dev(span1, t3);
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*state*/
	      4 && t0_value !== (t0_value = getIconForTurn(
	      /*direction*/
	      ctx[34].turn) + "")) set_data_dev(t0, t0_value);

	      if (current_block_type === (current_block_type = select_block_type_2(ctx)) && if_block) {
	        if_block.p(ctx, dirty);
	      } else {
	        if_block.d(1);
	        if_block = current_block_type(ctx);

	        if (if_block) {
	          if_block.c();
	          if_block.m(t2.parentNode, t2);
	        }
	      }

	      if (dirty &
	      /*state*/
	      4 && t3_value !== (t3_value = getArchaicDistance(
	      /*direction*/
	      ctx[34].distance) + "")) set_data_dev(t3, t3_value);
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(span0);
	      if (detaching) detach_dev(t1);
	      if_block.d(detaching);
	      if (detaching) detach_dev(t2);
	      if (detaching) detach_dev(span1);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_else_block$1.name,
	    type: "else",
	    source: "(454:32) {:else}",
	    ctx: ctx
	  });
	  return block;
	} // (443:32) {#if i === 0}


	function create_if_block_1$1(ctx) {
	  var span0;
	  var t0_value = getIconForTurn(
	  /*direction*/
	  ctx[34].turn) + "";
	  var t0;
	  var t1;
	  var span1;
	  var t2;
	  var t3_value =
	  /*direction*/
	  ctx[34].turn + "";
	  var t3;
	  var t4;
	  var t5_value =
	  /*direction*/
	  ctx[34].name + "";
	  var t5;
	  var t6;
	  var t7;
	  var span2;
	  var t8_value = getArchaicDistance(
	  /*direction*/
	  ctx[34].distance) + "";
	  var t8;
	  var if_block =
	  /*direction*/
	  ctx[34].toward && create_if_block_2(ctx);
	  var block = {
	    c: function create() {
	      span0 = element("span");
	      t0 = text(t0_value);
	      t1 = space();
	      span1 = element("span");
	      t2 = text("Go ");
	      t3 = text(t3_value);
	      t4 = text(" on ");
	      t5 = text(t5_value);
	      t6 = space();
	      if (if_block) if_block.c();
	      t7 = space();
	      span2 = element("span");
	      t8 = text(t8_value);
	      attr_dev(span0, "class", "cardinal-direction svelte-l6uc7a");
	      add_location(span0, file$5, 443, 36, 13303);
	      attr_dev(span1, "class", "svelte-l6uc7a");
	      add_location(span1, file$5, 444, 36, 13412);
	      attr_dev(span2, "class", "distance svelte-l6uc7a");
	      add_location(span2, file$5, 450, 36, 13777);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, span0, anchor);
	      append_dev(span0, t0);
	      insert_dev(target, t1, anchor);
	      insert_dev(target, span1, anchor);
	      append_dev(span1, t2);
	      append_dev(span1, t3);
	      append_dev(span1, t4);
	      append_dev(span1, t5);
	      append_dev(span1, t6);
	      if (if_block) if_block.m(span1, null);
	      insert_dev(target, t7, anchor);
	      insert_dev(target, span2, anchor);
	      append_dev(span2, t8);
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*state*/
	      4 && t0_value !== (t0_value = getIconForTurn(
	      /*direction*/
	      ctx[34].turn) + "")) set_data_dev(t0, t0_value);
	      if (dirty &
	      /*state*/
	      4 && t3_value !== (t3_value =
	      /*direction*/
	      ctx[34].turn + "")) set_data_dev(t3, t3_value);
	      if (dirty &
	      /*state*/
	      4 && t5_value !== (t5_value =
	      /*direction*/
	      ctx[34].name + "")) set_data_dev(t5, t5_value);

	      if (
	      /*direction*/
	      ctx[34].toward) {
	        if (if_block) {
	          if_block.p(ctx, dirty);
	        } else {
	          if_block = create_if_block_2(ctx);
	          if_block.c();
	          if_block.m(span1, null);
	        }
	      } else if (if_block) {
	        if_block.d(1);
	        if_block = null;
	      }

	      if (dirty &
	      /*state*/
	      4 && t8_value !== (t8_value = getArchaicDistance(
	      /*direction*/
	      ctx[34].distance) + "")) set_data_dev(t8, t8_value);
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(span0);
	      if (detaching) detach_dev(t1);
	      if (detaching) detach_dev(span1);
	      if (if_block) if_block.d();
	      if (detaching) detach_dev(t7);
	      if (detaching) detach_dev(span2);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_1$1.name,
	    type: "if",
	    source: "(443:32) {#if i === 0}",
	    ctx: ctx
	  });
	  return block;
	} // (458:36) {:else}


	function create_else_block_1(ctx) {
	  var span;
	  var t0;
	  var t1_value =
	  /*direction*/
	  ctx[34].turn + "";
	  var t1;
	  var t2;
	  var t3_value =
	  /*direction*/
	  ctx[34].name + "";
	  var t3;
	  var block = {
	    c: function create() {
	      span = element("span");
	      t0 = text("Turn ");
	      t1 = text(t1_value);
	      t2 = text(" onto ");
	      t3 = text(t3_value);
	      attr_dev(span, "class", "svelte-l6uc7a");
	      add_location(span, file$5, 458, 40, 14309);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, span, anchor);
	      append_dev(span, t0);
	      append_dev(span, t1);
	      append_dev(span, t2);
	      append_dev(span, t3);
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*state*/
	      4 && t1_value !== (t1_value =
	      /*direction*/
	      ctx[34].turn + "")) set_data_dev(t1, t1_value);
	      if (dirty &
	      /*state*/
	      4 && t3_value !== (t3_value =
	      /*direction*/
	      ctx[34].name + "")) set_data_dev(t3, t3_value);
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(span);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_else_block_1.name,
	    type: "else",
	    source: "(458:36) {:else}",
	    ctx: ctx
	  });
	  return block;
	} // (456:36) {#if direction.turn === 'straight'}


	function create_if_block_3(ctx) {
	  var span;
	  var t0;
	  var t1_value =
	  /*direction*/
	  ctx[34].name + "";
	  var t1;
	  var block = {
	    c: function create() {
	      span = element("span");
	      t0 = text("Continue on ");
	      t1 = text(t1_value);
	      attr_dev(span, "class", "svelte-l6uc7a");
	      add_location(span, file$5, 456, 40, 14183);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, span, anchor);
	      append_dev(span, t0);
	      append_dev(span, t1);
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*state*/
	      4 && t1_value !== (t1_value =
	      /*direction*/
	      ctx[34].name + "")) set_data_dev(t1, t1_value);
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(span);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_3.name,
	    type: "if",
	    source: "(456:36) {#if direction.turn === 'straight'}",
	    ctx: ctx
	  });
	  return block;
	} // (447:40) {#if direction.toward}


	function create_if_block_2(ctx) {
	  var br;
	  var small;
	  var t0;
	  var t1_value =
	  /*direction*/
	  ctx[34].toward + "";
	  var t1;
	  var block = {
	    c: function create() {
	      br = element("br");
	      small = element("small");
	      t0 = text("toward ");
	      t1 = text(t1_value);
	      add_location(br, file$5, 447, 44, 13606);
	      add_location(small, file$5, 447, 48, 13610);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, br, anchor);
	      insert_dev(target, small, anchor);
	      append_dev(small, t0);
	      append_dev(small, t1);
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*state*/
	      4 && t1_value !== (t1_value =
	      /*direction*/
	      ctx[34].toward + "")) set_data_dev(t1, t1_value);
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(br);
	      if (detaching) detach_dev(small);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_2.name,
	    type: "if",
	    source: "(447:40) {#if direction.toward}",
	    ctx: ctx
	  });
	  return block;
	} // (437:20) {#each directions as direction, i}


	function create_each_block_1(ctx) {
	  var li;
	  var a;
	  var dispose;

	  function select_block_type_1(ctx, dirty) {
	    if (
	    /*i*/
	    ctx[36] === 0) return create_if_block_1$1;
	    return create_else_block$1;
	  }

	  var current_block_type = select_block_type_1(ctx);
	  var if_block = current_block_type(ctx);

	  function click_handler_1() {
	    var _ctx;

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return (
	      /*click_handler_1*/
	      (_ctx = ctx)[22].apply(_ctx, [
	      /*direction*/
	      ctx[34]].concat(args))
	    );
	  }

	  function mouseenter_handler_1() {
	    var _ctx2;

	    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      args[_key2] = arguments[_key2];
	    }

	    return (
	      /*mouseenter_handler_1*/
	      (_ctx2 = ctx)[23].apply(_ctx2, [
	      /*direction*/
	      ctx[34]].concat(args))
	    );
	  }

	  function mouseleave_handler_1() {
	    var _ctx3;

	    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	      args[_key3] = arguments[_key3];
	    }

	    return (
	      /*mouseleave_handler_1*/
	      (_ctx3 = ctx)[24].apply(_ctx3, [
	      /*direction*/
	      ctx[34]].concat(args))
	    );
	  }

	  var block = {
	    c: function create() {
	      li = element("li");
	      a = element("a");
	      if_block.c();
	      attr_dev(a, "href", "#show-point");
	      attr_dev(a, "class", "svelte-l6uc7a");
	      add_location(a, file$5, 438, 28, 12894);
	      attr_dev(li, "class", "direction svelte-l6uc7a");
	      add_location(li, file$5, 437, 24, 12843);
	      dispose = [listen_dev(a, "click", prevent_default(click_handler_1), false, true, false), listen_dev(a, "mouseenter", prevent_default(mouseenter_handler_1), false, true, false), listen_dev(a, "mouseleave", prevent_default(mouseleave_handler_1), false, true, false)];
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, li, anchor);
	      append_dev(li, a);
	      if_block.m(a, null);
	    },
	    p: function update(new_ctx, dirty) {
	      ctx = new_ctx;
	      if_block.p(ctx, dirty);
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(li);
	      if_block.d();
	      run_all(dispose);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_each_block_1.name,
	    type: "each",
	    source: "(437:20) {#each directions as direction, i}",
	    ctx: ctx
	  });
	  return block;
	} // (419:12) {#each state.results as { start, end, distance, directions }}


	function create_each_block$1(ctx) {
	  var ul;
	  var li0;
	  var span0;
	  var i;
	  var t0_value = getArchaicDistance(
	  /*distance*/
	  ctx[30]) + "";
	  var t0;
	  var t1;
	  var t2_value = getEstimatedTime(
	  /*distance*/
	  ctx[30]) + "";
	  var t2;
	  var t3;
	  var li1;
	  var a0;
	  var span1;
	  var t4;
	  var span2;
	  var b0;
	  var br0;
	  var t6_value =
	  /*start*/
	  ctx[28].name + "";
	  var t6;
	  var t7;
	  var t8;
	  var li2;
	  var a1;
	  var span3;
	  var t9;
	  var span4;
	  var b1;
	  var br1;
	  var t11_value =
	  /*end*/
	  ctx[29].name + "";
	  var t11;
	  var dispose;

	  function click_handler() {
	    var _ctx4;

	    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
	      args[_key4] = arguments[_key4];
	    }

	    return (
	      /*click_handler*/
	      (_ctx4 = ctx)[19].apply(_ctx4, [
	      /*start*/
	      ctx[28]].concat(args))
	    );
	  }

	  function mouseenter_handler() {
	    var _ctx5;

	    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
	      args[_key5] = arguments[_key5];
	    }

	    return (
	      /*mouseenter_handler*/
	      (_ctx5 = ctx)[20].apply(_ctx5, [
	      /*start*/
	      ctx[28]].concat(args))
	    );
	  }

	  function mouseleave_handler() {
	    var _ctx6;

	    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
	      args[_key6] = arguments[_key6];
	    }

	    return (
	      /*mouseleave_handler*/
	      (_ctx6 = ctx)[21].apply(_ctx6, [
	      /*start*/
	      ctx[28]].concat(args))
	    );
	  }

	  var each_value_1 =
	  /*directions*/
	  ctx[31];
	  var each_blocks = [];

	  for (var _i4 = 0; _i4 < each_value_1.length; _i4 += 1) {
	    each_blocks[_i4] = create_each_block_1(get_each_context_1(ctx, each_value_1, _i4));
	  }

	  function click_handler_2() {
	    var _ctx7;

	    for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
	      args[_key7] = arguments[_key7];
	    }

	    return (
	      /*click_handler_2*/
	      (_ctx7 = ctx)[25].apply(_ctx7, [
	      /*end*/
	      ctx[29]].concat(args))
	    );
	  }

	  function mouseenter_handler_2() {
	    var _ctx8;

	    for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
	      args[_key8] = arguments[_key8];
	    }

	    return (
	      /*mouseenter_handler_2*/
	      (_ctx8 = ctx)[26].apply(_ctx8, [
	      /*end*/
	      ctx[29]].concat(args))
	    );
	  }

	  function mouseleave_handler_2() {
	    var _ctx9;

	    for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
	      args[_key9] = arguments[_key9];
	    }

	    return (
	      /*mouseleave_handler_2*/
	      (_ctx9 = ctx)[27].apply(_ctx9, [
	      /*end*/
	      ctx[29]].concat(args))
	    );
	  }

	  var block = {
	    c: function create() {
	      ul = element("ul");
	      li0 = element("li");
	      span0 = element("span");
	      i = element("i");
	      t0 = text(t0_value);
	      t1 = text(" / ~");
	      t2 = text(t2_value);
	      t3 = space();
	      li1 = element("li");
	      a0 = element("a");
	      span1 = element("span");
	      t4 = space();
	      span2 = element("span");
	      b0 = element("b");
	      b0.textContent = "Start";
	      br0 = element("br");
	      t6 = text(t6_value);
	      t7 = space();

	      for (var _i5 = 0; _i5 < each_blocks.length; _i5 += 1) {
	        each_blocks[_i5].c();
	      }

	      t8 = space();
	      li2 = element("li");
	      a1 = element("a");
	      span3 = element("span");
	      t9 = space();
	      span4 = element("span");
	      b1 = element("b");
	      b1.textContent = "End";
	      br1 = element("br");
	      t11 = text(t11_value);
	      add_location(i, file$5, 422, 28, 12040);
	      add_location(span0, file$5, 421, 24, 12005);
	      add_location(li0, file$5, 420, 20, 11976);
	      attr_dev(span1, "class", "material-icons map-marker map-marker-start svelte-l6uc7a");
	      add_location(span1, file$5, 431, 28, 12573);
	      add_location(b0, file$5, 432, 34, 12672);
	      add_location(br0, file$5, 432, 46, 12684);
	      attr_dev(span2, "class", "svelte-l6uc7a");
	      add_location(span2, file$5, 432, 28, 12666);
	      attr_dev(a0, "href", "#show-point");
	      attr_dev(a0, "class", "svelte-l6uc7a");
	      add_location(a0, file$5, 427, 24, 12242);
	      attr_dev(li1, "class", "direction start svelte-l6uc7a");
	      add_location(li1, file$5, 426, 20, 12189);
	      attr_dev(span3, "class", "material-icons map-marker map-marker-end svelte-l6uc7a");
	      add_location(span3, file$5, 471, 28, 15041);
	      add_location(b1, file$5, 472, 34, 15138);
	      add_location(br1, file$5, 472, 44, 15148);
	      attr_dev(span4, "class", "svelte-l6uc7a");
	      add_location(span4, file$5, 472, 28, 15132);
	      attr_dev(a1, "href", "#show-point");
	      attr_dev(a1, "class", "svelte-l6uc7a");
	      add_location(a1, file$5, 467, 24, 14716);
	      attr_dev(li2, "class", "direction end svelte-l6uc7a");
	      add_location(li2, file$5, 466, 20, 14665);
	      attr_dev(ul, "class", "results svelte-l6uc7a");
	      add_location(ul, file$5, 419, 16, 11935);
	      dispose = [listen_dev(a0, "click", prevent_default(click_handler), false, true, false), listen_dev(a0, "mouseenter", prevent_default(mouseenter_handler), false, true, false), listen_dev(a0, "mouseleave", prevent_default(mouseleave_handler), false, true, false), listen_dev(a1, "click", prevent_default(click_handler_2), false, true, false), listen_dev(a1, "mouseenter", prevent_default(mouseenter_handler_2), false, true, false), listen_dev(a1, "mouseleave", prevent_default(mouseleave_handler_2), false, true, false)];
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, ul, anchor);
	      append_dev(ul, li0);
	      append_dev(li0, span0);
	      append_dev(span0, i);
	      append_dev(i, t0);
	      append_dev(i, t1);
	      append_dev(i, t2);
	      append_dev(ul, t3);
	      append_dev(ul, li1);
	      append_dev(li1, a0);
	      append_dev(a0, span1);
	      append_dev(a0, t4);
	      append_dev(a0, span2);
	      append_dev(span2, b0);
	      append_dev(span2, br0);
	      append_dev(span2, t6);
	      append_dev(ul, t7);

	      for (var _i6 = 0; _i6 < each_blocks.length; _i6 += 1) {
	        each_blocks[_i6].m(ul, null);
	      }

	      append_dev(ul, t8);
	      append_dev(ul, li2);
	      append_dev(li2, a1);
	      append_dev(a1, span3);
	      append_dev(a1, t9);
	      append_dev(a1, span4);
	      append_dev(span4, b1);
	      append_dev(span4, br1);
	      append_dev(span4, t11);
	    },
	    p: function update(new_ctx, dirty) {
	      ctx = new_ctx;
	      if (dirty &
	      /*state*/
	      4 && t0_value !== (t0_value = getArchaicDistance(
	      /*distance*/
	      ctx[30]) + "")) set_data_dev(t0, t0_value);
	      if (dirty &
	      /*state*/
	      4 && t2_value !== (t2_value = getEstimatedTime(
	      /*distance*/
	      ctx[30]) + "")) set_data_dev(t2, t2_value);
	      if (dirty &
	      /*state*/
	      4 && t6_value !== (t6_value =
	      /*start*/
	      ctx[28].name + "")) set_data_dev(t6, t6_value);

	      if (dirty &
	      /*handleDirectionClick, state, handleDirectionHover, handleDirectionHoverOut, getArchaicDistance, getIconForTurn*/
	      452) {
	        each_value_1 =
	        /*directions*/
	        ctx[31];

	        var _i7;

	        for (_i7 = 0; _i7 < each_value_1.length; _i7 += 1) {
	          var child_ctx = get_each_context_1(ctx, each_value_1, _i7);

	          if (each_blocks[_i7]) {
	            each_blocks[_i7].p(child_ctx, dirty);
	          } else {
	            each_blocks[_i7] = create_each_block_1(child_ctx);

	            each_blocks[_i7].c();

	            each_blocks[_i7].m(ul, t8);
	          }
	        }

	        for (; _i7 < each_blocks.length; _i7 += 1) {
	          each_blocks[_i7].d(1);
	        }

	        each_blocks.length = each_value_1.length;
	      }

	      if (dirty &
	      /*state*/
	      4 && t11_value !== (t11_value =
	      /*end*/
	      ctx[29].name + "")) set_data_dev(t11, t11_value);
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(ul);
	      destroy_each(each_blocks, detaching);
	      run_all(dispose);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_each_block$1.name,
	    type: "each",
	    source: "(419:12) {#each state.results as { start, end, distance, directions }}",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$5(ctx) {
	  var div6;
	  var form;
	  var div0;
	  var button0;
	  var t0;
	  var button0_disabled_value;
	  var t1;
	  var button1;
	  var t3;
	  var div5;
	  var div3;
	  var div1;
	  var input0;
	  var t4;
	  var div2;
	  var input1;
	  var t5;
	  var div4;
	  var button2;
	  var t6;
	  var button2_disabled_value;
	  var t7;
	  var dispose;

	  function select_block_type(ctx, dirty) {
	    if (
	    /*state*/
	    ctx[2].results.length) return create_if_block$4;
	    if (
	    /*state*/
	    ctx[2].error) return create_if_block_4;
	  }

	  var current_block_type = select_block_type(ctx);
	  var if_block = current_block_type && current_block_type(ctx);
	  var block = {
	    c: function create() {
	      div6 = element("div");
	      form = element("form");
	      div0 = element("div");
	      button0 = element("button");
	      t0 = text("search");
	      t1 = space();
	      button1 = element("button");
	      button1.textContent = "clear";
	      t3 = space();
	      div5 = element("div");
	      div3 = element("div");
	      div1 = element("div");
	      input0 = element("input");
	      t4 = space();
	      div2 = element("div");
	      input1 = element("input");
	      t5 = space();
	      div4 = element("div");
	      button2 = element("button");
	      t6 = text("swap_calls");
	      t7 = space();
	      if (if_block) if_block.c();
	      attr_dev(button0, "type", "submit");
	      attr_dev(button0, "title", "Get directions");
	      attr_dev(button0, "class", "material-icons svelte-l6uc7a");
	      button0.disabled = button0_disabled_value = !(
	      /*state*/
	      ctx[2].fromTerm &&
	      /*state*/
	      ctx[2].toTerm);
	      add_location(button0, file$5, 365, 12, 9851);
	      attr_dev(button1, "type", "reset");
	      attr_dev(button1, "title", "Clear and return to search");
	      attr_dev(button1, "class", "material-icons svelte-l6uc7a");
	      add_location(button1, file$5, 371, 12, 10076);
	      attr_dev(div0, "class", "buttons svelte-l6uc7a");
	      add_location(div0, file$5, 364, 8, 9817);
	      attr_dev(input0, "type", "search");
	      attr_dev(input0, "title", "From");
	      attr_dev(input0, "placeholder", "From (type or select point on map)");
	      attr_dev(input0, "autocapitalize", "off");
	      attr_dev(input0, "autocomplete", "off");
	      attr_dev(input0, "autocorrect", "off");
	      attr_dev(input0, "spellcheck", "false");
	      attr_dev(input0, "class", "svelte-l6uc7a");
	      add_location(input0, file$5, 381, 20, 10381);
	      attr_dev(div1, "class", "svelte-l6uc7a");
	      add_location(div1, file$5, 380, 16, 10355);
	      attr_dev(input1, "type", "search");
	      attr_dev(input1, "title", "To");
	      attr_dev(input1, "placeholder", "To (type or select point on map)");
	      attr_dev(input1, "autocapitalize", "off");
	      attr_dev(input1, "autocomplete", "off");
	      attr_dev(input1, "autocorrect", "off");
	      attr_dev(input1, "spellcheck", "false");
	      attr_dev(input1, "class", "svelte-l6uc7a");
	      add_location(input1, file$5, 393, 20, 10887);
	      attr_dev(div2, "class", "svelte-l6uc7a");
	      add_location(div2, file$5, 392, 16, 10861);
	      attr_dev(div3, "class", "fields svelte-l6uc7a");
	      add_location(div3, file$5, 379, 12, 10318);
	      attr_dev(button2, "type", "button");
	      attr_dev(button2, "title", "Swap from and to");
	      attr_dev(button2, "class", "material-icons svelte-l6uc7a");
	      button2.disabled = button2_disabled_value = !(
	      /*state*/
	      ctx[2].fromTerm ||
	      /*state*/
	      ctx[2].toTerm);
	      add_location(button2, file$5, 406, 16, 11421);
	      attr_dev(div4, "class", "swap-from-and-to svelte-l6uc7a");
	      add_location(div4, file$5, 405, 12, 11374);
	      attr_dev(div5, "class", "svelte-l6uc7a");
	      add_location(div5, file$5, 378, 8, 10300);
	      attr_dev(form, "class", "svelte-l6uc7a");
	      add_location(form, file$5, 363, 4, 9760);
	      attr_dev(div6, "class", "function svelte-l6uc7a");
	      add_location(div6, file$5, 362, 0, 9733);
	      dispose = [listen_dev(button1, "click",
	      /*handleReset*/
	      ctx[5], false, false, false), listen_dev(input0, "input",
	      /*input0_input_handler*/
	      ctx[15]), listen_dev(input1, "input",
	      /*input1_input_handler*/
	      ctx[17]), listen_dev(button2, "click",
	      /*swapFromAndTo*/
	      ctx[4], false, false, false), listen_dev(form, "submit", prevent_default(
	      /*handleSubmit*/
	      ctx[3]), false, true, false)];
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, div6, anchor);
	      append_dev(div6, form);
	      append_dev(form, div0);
	      append_dev(div0, button0);
	      append_dev(button0, t0);
	      append_dev(div0, t1);
	      append_dev(div0, button1);
	      append_dev(form, t3);
	      append_dev(form, div5);
	      append_dev(div5, div3);
	      append_dev(div3, div1);
	      append_dev(div1, input0);
	      set_input_value(input0,
	      /*state*/
	      ctx[2].fromTerm);
	      /*input0_binding*/

	      ctx[16](input0);
	      append_dev(div3, t4);
	      append_dev(div3, div2);
	      append_dev(div2, input1);
	      set_input_value(input1,
	      /*state*/
	      ctx[2].toTerm);
	      /*input1_binding*/

	      ctx[18](input1);
	      append_dev(div5, t5);
	      append_dev(div5, div4);
	      append_dev(div4, button2);
	      append_dev(button2, t6);
	      append_dev(div6, t7);
	      if (if_block) if_block.m(div6, null);
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (dirty &
	      /*state*/
	      4 && button0_disabled_value !== (button0_disabled_value = !(
	      /*state*/
	      ctx[2].fromTerm &&
	      /*state*/
	      ctx[2].toTerm))) {
	        prop_dev(button0, "disabled", button0_disabled_value);
	      }

	      if (dirty &
	      /*state*/
	      4) {
	        set_input_value(input0,
	        /*state*/
	        ctx[2].fromTerm);
	      }

	      if (dirty &
	      /*state*/
	      4) {
	        set_input_value(input1,
	        /*state*/
	        ctx[2].toTerm);
	      }

	      if (dirty &
	      /*state*/
	      4 && button2_disabled_value !== (button2_disabled_value = !(
	      /*state*/
	      ctx[2].fromTerm ||
	      /*state*/
	      ctx[2].toTerm))) {
	        prop_dev(button2, "disabled", button2_disabled_value);
	      }

	      if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
	        if_block.p(ctx, dirty);
	      } else {
	        if (if_block) if_block.d(1);
	        if_block = current_block_type && current_block_type(ctx);

	        if (if_block) {
	          if_block.c();
	          transition_in(if_block, 1);
	          if_block.m(div6, null);
	        }
	      }
	    },
	    i: function intro(local) {
	      transition_in(if_block);
	    },
	    o: noop,
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(div6);
	      /*input0_binding*/

	      ctx[16](null);
	      /*input1_binding*/

	      ctx[18](null);

	      if (if_block) {
	        if_block.d();
	      }

	      run_all(dispose);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$5.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function getIconForTurn(turn) {
	  switch (turn) {
	    case "straight":
	      return "arrow_upward";

	    case "back":
	      return "arrow_downward";

	    case "right":
	      return "arrow_forward";

	    case "left":
	      return "arrow_back";

	    case "north":
	    case "south":
	    case "east":
	    case "west":
	      return turn.charAt(0).toUpperCase();

	    case "northeast":
	    case "northwest":
	    case "southeast":
	    case "southwest":
	      return "".concat(turn.charAt(0)).concat(turn.charAt(5)).toUpperCase();

	    default:
	      return turn;
	  }
	}

	function getArchaicDistance(distance) {
	  return distance.feet <= 300 ? "".concat(toFixed(distance.feet), "ft") : "".concat(toFixed(distance.miles), "mi");
	}

	function getEstimatedTime(distance) {
	  var minutes = 6 * distance.miles;

	  if (minutes < 1) {
	    return "".concat(Math.round(minutes * 60), " seconds");
	  } else if (minutes < 60) {
	    return "".concat(Math.round(minutes), " minutes");
	  }

	  return "".concat(minutes, " minutes");
	}

	function instance$5($$self, $$props, $$invalidate) {
	  var $currentLocation;
	  validate_store(currentLocation, "currentLocation");
	  component_subscribe($$self, currentLocation, function ($$value) {
	    return $$invalidate(11, $currentLocation = $$value);
	  });
	  var map$1 = getContext("map");
	  var fromInputElement;
	  var toInputElement;
	  var inputSubscription;
	  var highlightOverlay;
	  var state;
	  setState();
	  onMount(function () {
	    if (!state.fromTerm || state.toTerm) {
	      fromInputElement.focus();
	    } else {
	      toInputElement.focus();
	    }

	    inputSubscription = fromEvent([fromInputElement, toInputElement], "input").pipe(tap(function (event) {
	      var target = event.target;
	      var value = target.value;

	      var newState = _objectSpread$2({}, state);

	      if (target === fromInputElement) {
	        newState.fromTerm = value;
	        newState.fromPoint = null;
	      } else if (target === toInputElement) {
	        newState.toTerm = value;
	        newState.toPoint = null;
	      }

	      clearMap();
	      setState(newState);
	    }), map(function (event) {
	      return event.target.value;
	    }), skipWhile(function (value) {
	      return !value.trim();
	    }), debounceTime(INPUT_DEBOUNCE_TIME), distinctUntilChanged()).subscribe(function (value) {});
	    currentUrl.subscribe("directions", function (_ref3) {
	      var params = _ref3.params;

	      if (history.state && history.state.state) {
	        var historyState = history.state.state;
	        clearMap();
	        updateMap(map$1, historyState.results);
	        setState(historyState);
	      } else {
	        if (params.fromTerm || params.toTerm) {
	          if (params.fromTerm === "?") {
	            if (state.fromTerm) {
	              params.fromTerm = state.fromTerm;
	              params.fromPoint = state.fromPoint;
	            } else {
	              params.fromTerm = "My Location";
	              params.fromPoint = null;
	            }
	          }

	          if (params.toTerm === "?") {
	            if (state.toTerm) {
	              params.toTerm = state.toTerm;
	              params.toPoint = state.toPoint;
	            } else {
	              params.toTerm = "My Location";
	              params.toPoint = null;
	            }
	          }

	          replaceState("directions", params);
	        }

	        setState(params);
	        tick();

	        if (state.fromTerm && state.toTerm) {
	          var fromMyLocation = state.fromTerm.toLowerCase() === "my location";
	          var toMyLocation = state.toTerm.toLowerCase() === "my location";

	          if (fromMyLocation || toMyLocation) {
	            waitForLocation(handleSubmit);
	          } else {
	            handleSubmit();
	          }
	        } else {
	          clearMap();
	        }
	      }
	    });
	  });
	  onDestroy(function () {
	    abortRequest();
	    inputSubscription.unsubscribe();
	    clearMap();
	    setState();
	  });

	  function setState() {
	    var newState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    $$invalidate(2, state = _objectSpread$2({
	      fromTerm: "",
	      fromPoint: null,
	      toTerm: "",
	      toPoint: null,
	      results: [],
	      error: null
	    }, newState));
	  }

	  function handleSubmit() {
	    var newState;
	    return regenerator.async(function handleSubmit$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            _context.next = 2;
	            return regenerator.awrap(getDirections(state, map$1, $currentLocation));

	          case 2:
	            newState = _context.sent;

	            if (newState) {
	              console.log(newState);
	              setState(newState);
	              replaceState("directions", newState, {
	                state: newState
	              });
	            }

	          case 4:
	          case "end":
	            return _context.stop();
	        }
	      }
	    });
	  }

	  function swapFromAndTo() {
	    setCurrentRoute("directions", {
	      fromTerm: state.toTerm,
	      fromPoint: state.toPoint,
	      toTerm: state.fromTerm,
	      toPoint: state.fromPoint
	    });
	  }

	  function clearMap() {
	    map$1.clearOverlays();
	    map$1.vectorLayer.getSource().clear(true);
	  }

	  function handleReset() {
	    clearMap();
	    setCurrentRoute("home");
	  }

	  function handleDirectionClick(direction) {
	    map$1.setCenter(direction.point.coordinates);
	    map$1.zoomToStreetLevel();
	  }

	  function handleDirectionHover(direction) {
	    if (highlightOverlay) {
	      map$1.clearOverlay(highlightOverlay);
	    }

	    highlightOverlay = map$1.addOverlay(direction.point.coordinates, "map-marker-turn", "center-center");
	  }

	  function handleDirectionHoverOut(direction) {
	    if (highlightOverlay) {
	      map$1.clearOverlay(highlightOverlay);
	    }
	  }

	  function input0_input_handler() {
	    state.fromTerm = this.value;
	    $$invalidate(2, state);
	  }

	  function input0_binding($$value) {
	    binding_callbacks[$$value ? "unshift" : "push"](function () {
	      $$invalidate(0, fromInputElement = $$value);
	    });
	  }

	  function input1_input_handler() {
	    state.toTerm = this.value;
	    $$invalidate(2, state);
	  }

	  function input1_binding($$value) {
	    binding_callbacks[$$value ? "unshift" : "push"](function () {
	      $$invalidate(1, toInputElement = $$value);
	    });
	  }

	  var click_handler = function click_handler(start) {
	    return handleDirectionClick(start);
	  };

	  var mouseenter_handler = function mouseenter_handler(start) {
	    return handleDirectionHover(start);
	  };

	  var mouseleave_handler = function mouseleave_handler(start) {
	    return handleDirectionHoverOut();
	  };

	  var click_handler_1 = function click_handler_1(direction) {
	    return handleDirectionClick(direction);
	  };

	  var mouseenter_handler_1 = function mouseenter_handler_1(direction) {
	    return handleDirectionHover(direction);
	  };

	  var mouseleave_handler_1 = function mouseleave_handler_1(direction) {
	    return handleDirectionHoverOut();
	  };

	  var click_handler_2 = function click_handler_2(end) {
	    return handleDirectionClick(end);
	  };

	  var mouseenter_handler_2 = function mouseenter_handler_2(end) {
	    return handleDirectionHover(end);
	  };

	  var mouseleave_handler_2 = function mouseleave_handler_2(end) {
	    return handleDirectionHoverOut();
	  };

	  $$self.$capture_state = function () {
	    return {};
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("fromInputElement" in $$props) $$invalidate(0, fromInputElement = $$props.fromInputElement);
	    if ("toInputElement" in $$props) $$invalidate(1, toInputElement = $$props.toInputElement);
	    if ("inputSubscription" in $$props) inputSubscription = $$props.inputSubscription;
	    if ("highlightOverlay" in $$props) highlightOverlay = $$props.highlightOverlay;
	    if ("state" in $$props) $$invalidate(2, state = $$props.state);
	    if ("$currentLocation" in $$props) currentLocation.set($currentLocation = $$props.$currentLocation);
	  };

	  return [fromInputElement, toInputElement, state, handleSubmit, swapFromAndTo, handleReset, handleDirectionClick, handleDirectionHover, handleDirectionHoverOut, inputSubscription, highlightOverlay, $currentLocation, map$1, setState, clearMap, input0_input_handler, input0_binding, input1_input_handler, input1_binding, click_handler, mouseenter_handler, mouseleave_handler, click_handler_1, mouseenter_handler_1, mouseleave_handler_1, click_handler_2, mouseenter_handler_2, mouseleave_handler_2];
	}

	var Directions =
	/*#__PURE__*/
	function (_SvelteComponentDev) {
	  inherits(Directions, _SvelteComponentDev);

	  function Directions(options) {
	    var _this;

	    classCallCheck(this, Directions);

	    _this = possibleConstructorReturn(this, getPrototypeOf(Directions).call(this, options));
	    init(assertThisInitialized(_this), options, instance$5, create_fragment$5, not_equal, {});
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "Directions",
	      options: options,
	      id: create_fragment$5.name
	    });
	    return _this;
	  }

	  return Directions;
	}(SvelteComponentDev);

	function submitQuery(state, map, myLocation) {
	  var suppressErrors,
	      term,
	      point,
	      position,
	      latLong,
	      result,
	      params,
	      data,
	      _args = arguments;
	  return regenerator.async(function submitQuery$(_context) {
	    while (1) {
	      switch (_context.prev = _context.next) {
	        case 0:
	          suppressErrors = _args.length > 3 && _args[3] !== undefined ? _args[3] : false;
	          term = state.term;
	          point = state.point;
	          map.clearOverlays();

	          if (term.trim()) {
	            _context.next = 6;
	            break;
	          }

	          return _context.abrupt("return", {});

	        case 6:
	          if (!(term.trim().toLowerCase() === 'my location')) {
	            _context.next = 16;
	            break;
	          }

	          position = myLocation.position;

	          if (!position) {
	            _context.next = 15;
	            break;
	          }

	          latLong = displayLatLong(position);
	          result = {
	            name: latLong,
	            coordinates: position
	          };
	          map.setCenter(position);
	          return _context.abrupt("return", {
	            term: 'My Location',
	            point: position,
	            results: [result]
	          });

	        case 15:
	          return _context.abrupt("return", {
	            term: term,
	            error: myLocation.error
	          });

	        case 16:
	          params = {
	            term: term
	          };

	          if (point) {
	            if (typeof point !== 'string') {
	              point = displayLatLong(point, ',');
	            }

	            params.point = point;
	          }

	          _context.next = 20;
	          return regenerator.awrap(fetchWrapper('/query', params, suppressErrors));

	        case 20:
	          data = _context.sent;

	          if (!(data === null)) {
	            _context.next = 25;
	            break;
	          }

	          return _context.abrupt("return", null);

	        case 25:
	          if (!(data.error && !data.results)) {
	            _context.next = 27;
	            break;
	          }

	          return _context.abrupt("return", {
	            term: term,
	            error: data.error
	          });

	        case 27:
	          return _context.abrupt("return", {
	            term: term,
	            results: data.results
	          });

	        case 28:
	        case "end":
	          return _context.stop();
	      }
	    }
	  });
	}

	function ownKeys$4(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$4(Object(source), true).forEach(function (key) { defineProperty$4(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$4(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
	var file$6 = "src/query/Query.svelte";

	function get_each_context$2(ctx, list, i) {
	  var child_ctx = ctx.slice();
	  child_ctx[14] = list[i];
	  return child_ctx;
	} // (226:26) 


	function create_if_block_1$2(ctx) {
	  var div2;
	  var div0;
	  var t0_value =
	  /*state*/
	  ctx[1].error.title + "";
	  var t0;
	  var t1;
	  var div1;
	  var p;
	  var t2_value =
	  /*state*/
	  ctx[1].error.explanation + "";
	  var t2;
	  var t3;
	  var div2_intro;
	  var if_block =
	  /*state*/
	  ctx[1].error.detail && create_if_block_2$1(ctx);
	  var block = {
	    c: function create() {
	      div2 = element("div");
	      div0 = element("div");
	      t0 = text(t0_value);
	      t1 = space();
	      div1 = element("div");
	      p = element("p");
	      t2 = text(t2_value);
	      t3 = space();
	      if (if_block) if_block.c();
	      attr_dev(div0, "class", "error-title");
	      add_location(div0, file$6, 227, 12, 6578);
	      add_location(p, file$6, 229, 16, 6685);
	      attr_dev(div1, "class", "error-message");
	      add_location(div1, file$6, 228, 12, 6641);
	      attr_dev(div2, "id", "error");
	      attr_dev(div2, "class", "svelte-1r3hnd5");
	      add_location(div2, file$6, 226, 8, 6529);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, div2, anchor);
	      append_dev(div2, div0);
	      append_dev(div0, t0);
	      append_dev(div2, t1);
	      append_dev(div2, div1);
	      append_dev(div1, p);
	      append_dev(p, t2);
	      append_dev(div1, t3);
	      if (if_block) if_block.m(div1, null);
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*state*/
	      2 && t0_value !== (t0_value =
	      /*state*/
	      ctx[1].error.title + "")) set_data_dev(t0, t0_value);
	      if (dirty &
	      /*state*/
	      2 && t2_value !== (t2_value =
	      /*state*/
	      ctx[1].error.explanation + "")) set_data_dev(t2, t2_value);

	      if (
	      /*state*/
	      ctx[1].error.detail) {
	        if (if_block) {
	          if_block.p(ctx, dirty);
	        } else {
	          if_block = create_if_block_2$1(ctx);
	          if_block.c();
	          if_block.m(div1, null);
	        }
	      } else if (if_block) {
	        if_block.d(1);
	        if_block = null;
	      }
	    },
	    i: function intro(local) {
	      if (!div2_intro) {
	        add_render_callback(function () {
	          div2_intro = create_in_transition(div2, fly, {
	            y: 0
	          });
	          div2_intro.start();
	        });
	      }
	    },
	    o: noop,
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(div2);
	      if (if_block) if_block.d();
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_1$2.name,
	    type: "if",
	    source: "(226:26) ",
	    ctx: ctx
	  });
	  return block;
	} // (214:4) {#if state.results.length}


	function create_if_block$5(ctx) {
	  var ul;
	  var ul_intro;
	  var each_value =
	  /*state*/
	  ctx[1].results;
	  var each_blocks = [];

	  for (var i = 0; i < each_value.length; i += 1) {
	    each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
	  }

	  var block = {
	    c: function create() {
	      ul = element("ul");

	      for (var _i = 0; _i < each_blocks.length; _i += 1) {
	        each_blocks[_i].c();
	      }

	      attr_dev(ul, "id", "results");
	      attr_dev(ul, "class", "svelte-1r3hnd5");
	      add_location(ul, file$6, 214, 8, 6066);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, ul, anchor);

	      for (var _i2 = 0; _i2 < each_blocks.length; _i2 += 1) {
	        each_blocks[_i2].m(ul, null);
	      }
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*handleResultClick, state*/
	      34) {
	        each_value =
	        /*state*/
	        ctx[1].results;

	        var _i3;

	        for (_i3 = 0; _i3 < each_value.length; _i3 += 1) {
	          var child_ctx = get_each_context$2(ctx, each_value, _i3);

	          if (each_blocks[_i3]) {
	            each_blocks[_i3].p(child_ctx, dirty);
	          } else {
	            each_blocks[_i3] = create_each_block$2(child_ctx);

	            each_blocks[_i3].c();

	            each_blocks[_i3].m(ul, null);
	          }
	        }

	        for (; _i3 < each_blocks.length; _i3 += 1) {
	          each_blocks[_i3].d(1);
	        }

	        each_blocks.length = each_value.length;
	      }
	    },
	    i: function intro(local) {
	      if (!ul_intro) {
	        add_render_callback(function () {
	          ul_intro = create_in_transition(ul, fly, {
	            y: 0
	          });
	          ul_intro.start();
	        });
	      }
	    },
	    o: noop,
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(ul);
	      destroy_each(each_blocks, detaching);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block$5.name,
	    type: "if",
	    source: "(214:4) {#if state.results.length}",
	    ctx: ctx
	  });
	  return block;
	} // (231:16) {#if state.error.detail}


	function create_if_block_2$1(ctx) {
	  var p;
	  var t_value =
	  /*state*/
	  ctx[1].error.detail + "";
	  var t;
	  var block = {
	    c: function create() {
	      p = element("p");
	      t = text(t_value);
	      add_location(p, file$6, 231, 20, 6779);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, p, anchor);
	      append_dev(p, t);
	    },
	    p: function update(ctx, dirty) {
	      if (dirty &
	      /*state*/
	      2 && t_value !== (t_value =
	      /*state*/
	      ctx[1].error.detail + "")) set_data_dev(t, t_value);
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(p);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_if_block_2$1.name,
	    type: "if",
	    source: "(231:16) {#if state.error.detail}",
	    ctx: ctx
	  });
	  return block;
	} // (216:12) {#each state.results as result}


	function create_each_block$2(ctx) {
	  var li;
	  var a;
	  var span0;
	  var t1;
	  var span1;
	  var t2_value =
	  /*result*/
	  ctx[14].name + "";
	  var t2;
	  var t3;
	  var dispose;

	  function click_handler() {
	    var _ctx;

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return (
	      /*click_handler*/
	      (_ctx = ctx)[13].apply(_ctx, [
	      /*result*/
	      ctx[14]].concat(args))
	    );
	  }

	  var block = {
	    c: function create() {
	      li = element("li");
	      a = element("a");
	      span0 = element("span");
	      span0.textContent = "place";
	      t1 = space();
	      span1 = element("span");
	      t2 = text(t2_value);
	      t3 = space();
	      attr_dev(span0, "class", "material-icons");
	      add_location(span0, file$6, 219, 24, 6320);
	      add_location(span1, file$6, 220, 24, 6386);
	      attr_dev(a, "href", "#select-result");
	      add_location(a, file$6, 217, 20, 6187);
	      add_location(li, file$6, 216, 16, 6162);
	      dispose = listen_dev(a, "click", prevent_default(click_handler), false, true, false);
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, li, anchor);
	      append_dev(li, a);
	      append_dev(a, span0);
	      append_dev(a, t1);
	      append_dev(a, span1);
	      append_dev(span1, t2);
	      append_dev(li, t3);
	    },
	    p: function update(new_ctx, dirty) {
	      ctx = new_ctx;
	      if (dirty &
	      /*state*/
	      2 && t2_value !== (t2_value =
	      /*result*/
	      ctx[14].name + "")) set_data_dev(t2, t2_value);
	    },
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(li);
	      dispose();
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_each_block$2.name,
	    type: "each",
	    source: "(216:12) {#each state.results as result}",
	    ctx: ctx
	  });
	  return block;
	}

	function create_fragment$6(ctx) {
	  var div;
	  var form;
	  var input;
	  var input_title_value;
	  var t0;
	  var button0;
	  var t1;
	  var button0_disabled_value;
	  var t2;
	  var button1;
	  var t3;
	  var button1_disabled_value;
	  var t4;
	  var button2;
	  var t6;
	  var dispose;

	  function select_block_type(ctx, dirty) {
	    if (
	    /*state*/
	    ctx[1].results.length) return create_if_block$5;
	    if (
	    /*state*/
	    ctx[1].error) return create_if_block_1$2;
	  }

	  var current_block_type = select_block_type(ctx);
	  var if_block = current_block_type && current_block_type(ctx);
	  var block = {
	    c: function create() {
	      div = element("div");
	      form = element("form");
	      input = element("input");
	      t0 = space();
	      button0 = element("button");
	      t1 = text("search");
	      t2 = space();
	      button1 = element("button");
	      t3 = text("close");
	      t4 = space();
	      button2 = element("button");
	      button2.textContent = "directions";
	      t6 = space();
	      if (if_block) if_block.c();
	      attr_dev(input, "type", "search");
	      attr_dev(input, "title", input_title_value =
	      /*state*/
	      ctx[1].term || "Enter something to search for");
	      attr_dev(input, "placeholder", "Type or select point on map");
	      attr_dev(input, "autocapitalize", "off");
	      attr_dev(input, "autocomplete", "off");
	      attr_dev(input, "autocorrect", "off");
	      attr_dev(input, "spellcheck", "false");
	      attr_dev(input, "class", "svelte-1r3hnd5");
	      add_location(input, file$6, 183, 8, 5020);
	      attr_dev(button0, "type", "submit");
	      attr_dev(button0, "title", "Search");
	      attr_dev(button0, "class", "material-icons svelte-1r3hnd5");
	      button0.disabled = button0_disabled_value = !
	      /*state*/
	      ctx[1].term;
	      add_location(button0, file$6, 193, 8, 5399);
	      attr_dev(button1, "type", "reset");
	      attr_dev(button1, "title", "Clear");
	      attr_dev(button1, "class", "material-icons hidden-xs svelte-1r3hnd5");
	      button1.disabled = button1_disabled_value = !(
	      /*state*/
	      ctx[1].term ||
	      /*state*/
	      ctx[1].results.length ||
	      /*state*/
	      ctx[1].error);
	      add_location(button1, file$6, 199, 8, 5574);
	      attr_dev(button2, "type", "button");
	      attr_dev(button2, "title", "Get directions");
	      attr_dev(button2, "class", "material-icons svelte-1r3hnd5");
	      add_location(button2, file$6, 206, 8, 5836);
	      attr_dev(form, "class", "svelte-1r3hnd5");
	      add_location(form, file$6, 182, 4, 4965);
	      attr_dev(div, "class", "function");
	      set_style(div, "height",
	      /*state*/
	      ctx[1].results.length ? "100%" : "auto");
	      add_location(div, file$6, 181, 0, 4881);
	      dispose = [listen_dev(input, "input",
	      /*input_input_handler*/
	      ctx[11]), listen_dev(button1, "click",
	      /*handleReset*/
	      ctx[3], false, false, false), listen_dev(button2, "click",
	      /*getDirections*/
	      ctx[4], false, false, false), listen_dev(form, "submit", prevent_default(
	      /*handleSubmit*/
	      ctx[2]), false, true, false)];
	    },
	    l: function claim(nodes) {
	      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
	    },
	    m: function mount(target, anchor) {
	      insert_dev(target, div, anchor);
	      append_dev(div, form);
	      append_dev(form, input);
	      set_input_value(input,
	      /*state*/
	      ctx[1].term);
	      /*input_binding*/

	      ctx[12](input);
	      append_dev(form, t0);
	      append_dev(form, button0);
	      append_dev(button0, t1);
	      append_dev(form, t2);
	      append_dev(form, button1);
	      append_dev(button1, t3);
	      append_dev(form, t4);
	      append_dev(form, button2);
	      append_dev(div, t6);
	      if (if_block) if_block.m(div, null);
	    },
	    p: function update(ctx, _ref) {
	      var _ref2 = slicedToArray(_ref, 1),
	          dirty = _ref2[0];

	      if (dirty &
	      /*state*/
	      2 && input_title_value !== (input_title_value =
	      /*state*/
	      ctx[1].term || "Enter something to search for")) {
	        attr_dev(input, "title", input_title_value);
	      }

	      if (dirty &
	      /*state*/
	      2) {
	        set_input_value(input,
	        /*state*/
	        ctx[1].term);
	      }

	      if (dirty &
	      /*state*/
	      2 && button0_disabled_value !== (button0_disabled_value = !
	      /*state*/
	      ctx[1].term)) {
	        prop_dev(button0, "disabled", button0_disabled_value);
	      }

	      if (dirty &
	      /*state*/
	      2 && button1_disabled_value !== (button1_disabled_value = !(
	      /*state*/
	      ctx[1].term ||
	      /*state*/
	      ctx[1].results.length ||
	      /*state*/
	      ctx[1].error))) {
	        prop_dev(button1, "disabled", button1_disabled_value);
	      }

	      if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
	        if_block.p(ctx, dirty);
	      } else {
	        if (if_block) if_block.d(1);
	        if_block = current_block_type && current_block_type(ctx);

	        if (if_block) {
	          if_block.c();
	          transition_in(if_block, 1);
	          if_block.m(div, null);
	        }
	      }

	      if (dirty &
	      /*state*/
	      2) {
	        set_style(div, "height",
	        /*state*/
	        ctx[1].results.length ? "100%" : "auto");
	      }
	    },
	    i: function intro(local) {
	      transition_in(if_block);
	    },
	    o: noop,
	    d: function destroy(detaching) {
	      if (detaching) detach_dev(div);
	      /*input_binding*/

	      ctx[12](null);

	      if (if_block) {
	        if_block.d();
	      }

	      run_all(dispose);
	    }
	  };
	  dispatch_dev("SvelteRegisterBlock", {
	    block: block,
	    id: create_fragment$6.name,
	    type: "component",
	    source: "",
	    ctx: ctx
	  });
	  return block;
	}

	function instance$6($$self, $$props, $$invalidate) {
	  var $currentLocation;
	  validate_store(currentLocation, "currentLocation");
	  component_subscribe($$self, currentLocation, function ($$value) {
	    return $$invalidate(7, $currentLocation = $$value);
	  });
	  var map$1 = getContext("map");
	  var inputElement;
	  var inputSubscription;
	  var state;
	  setState();
	  onMount(function () {
	    inputElement.focus();
	    inputSubscription = fromEvent(inputElement, "input").pipe(map(function (event) {
	      return event.target.value;
	    }), tap(function (value) {
	      var newState = {
	        term: value
	      };

	      if (value) {
	        newState.point = null;
	      }

	      clearMap();
	      setState(newState);
	    }), skipWhile(function (value) {
	      return !value.trim();
	    }), debounceTime(INPUT_DEBOUNCE_TIME), distinctUntilChanged()).subscribe(function (value) {
	      if (value) {
	        handleSubmit();
	      }
	    });
	    currentUrl.subscribe("default", function () {
	      setState({
	        error: {
	          title: "Page not found",
	          explanation: location.href,
	          detail: ["Please check the web address and try again,", "or send an email to contact@bycycle.org."].join(" ")
	        }
	      });
	    });
	    currentUrl.subscribe("home", function () {
	      setState();
	    });
	    currentUrl.subscribe("search", function (_ref3) {
	      var params = _ref3.params;

	      if (history.state && history.state.result) {
	        handleResultClick(history.state.result, false);
	      } else {
	        setState(params);
	        tick();

	        if (params.term) {
	          if (params.term.trim().toLowerCase() === "my location") {
	            waitForLocation(handleSubmit);
	          } else {
	            handleSubmit();
	          }
	        } else {
	          clearMap();
	        }
	      }
	    });
	  });
	  onDestroy(function () {
	    abortRequest();
	    inputSubscription.unsubscribe();
	    clearMap();
	  });

	  function setState() {
	    var newState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    $$invalidate(1, state = _objectSpread$3({
	      term: "",
	      point: null,
	      results: [],
	      error: null
	    }, newState));
	  }

	  function handleSubmit() {
	    var suppressErrors,
	        result,
	        _args = arguments;
	    return regenerator.async(function handleSubmit$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            suppressErrors = _args.length > 0 && _args[0] !== undefined ? _args[0] : false;
	            _context.next = 3;
	            return regenerator.awrap(submitQuery(state, map$1, $currentLocation, suppressErrors));

	          case 3:
	            result = _context.sent;

	            if (result) {
	              setState(result);
	            }

	          case 5:
	          case "end":
	            return _context.stop();
	        }
	      }
	    });
	  }

	  function clearMap() {
	    map$1.clearOverlays();
	  }

	  function handleReset() {
	    clearMap();
	    setCurrentRoute("home");
	    $$invalidate(0, inputElement.value = "", inputElement);
	    inputElement.dispatchEvent(new Event("input", {
	      bubbles: true
	    }));
	  }

	  function getDirections() {
	    if (state.results.length === 1) {
	      handleResultClick(state.results[0]);
	    }

	    var fromTerm = $currentLocation.position ? "My Location" : "";
	    setCurrentRoute("directions", {
	      fromTerm: fromTerm,
	      fromPoint: null,
	      toTerm: state.term,
	      toPoint: state.point
	    });
	  }

	  function handleResultClick(result) {
	    var push = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	    var term = result.name;
	    var point = result.coordinates;
	    var resultState = {
	      term: term,
	      point: point
	    };
	    clearMap();
	    map$1.addOverlay(point, "map-marker-place");
	    map$1.setCenter(point);
	    map$1.zoomToStreetLevel();
	    setState(resultState);

	    if (push) {
	      pushState("search", resultState, {
	        result: result
	      });
	    }
	  }

	  function input_input_handler() {
	    state.term = this.value;
	    $$invalidate(1, state);
	  }

	  function input_binding($$value) {
	    binding_callbacks[$$value ? "unshift" : "push"](function () {
	      $$invalidate(0, inputElement = $$value);
	    });
	  }

	  var click_handler = function click_handler(result) {
	    return handleResultClick(result);
	  };

	  $$self.$capture_state = function () {
	    return {};
	  };

	  $$self.$inject_state = function ($$props) {
	    if ("inputElement" in $$props) $$invalidate(0, inputElement = $$props.inputElement);
	    if ("inputSubscription" in $$props) inputSubscription = $$props.inputSubscription;
	    if ("state" in $$props) $$invalidate(1, state = $$props.state);
	    if ("$currentLocation" in $$props) currentLocation.set($currentLocation = $$props.$currentLocation);
	  };

	  return [inputElement, state, handleSubmit, handleReset, getDirections, handleResultClick, inputSubscription, $currentLocation, map$1, setState, clearMap, input_input_handler, input_binding, click_handler];
	}

	var Query =
	/*#__PURE__*/
	function (_SvelteComponentDev) {
	  inherits(Query, _SvelteComponentDev);

	  function Query(options) {
	    var _this;

	    classCallCheck(this, Query);

	    _this = possibleConstructorReturn(this, getPrototypeOf(Query).call(this, options));
	    init(assertThisInitialized(_this), options, instance$6, create_fragment$6, not_equal, {});
	    dispatch_dev("SvelteRegisterComponent", {
	      component: assertThisInitialized(_this),
	      tagName: "Query",
	      options: options,
	      id: create_fragment$6.name
	    });
	    return _this;
	  }

	  return Query;
	}(SvelteComponentDev);

	var app = new App({
	  target: document.body
	});
	configureRoutes({
	  Directions: Directions,
	  Query: Query
	}, currentRoute, currentUrl);

	return app;

}());
//# sourceMappingURL=bundle.js.map
